{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2","program":"/home/kami/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","spinning_top","--edition=2018","/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=27eabd16041bafa7","-C","extra-filename=-27eabd16041bafa7","--out-dir","/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps","-L","dependency=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps","--extern","lock_api=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/liblock_api-c2901dd3bd161d9b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/kami/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/libspinning_top-27eabd16041bafa7.rmeta"},"prelude":{"crate_id":{"name":"spinning_top","disambiguator":[16300697205775576557,1744841111327169094]},"crate_root":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src","external_crates":[{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","num":4,"id":{"name":"lock_api","disambiguator":[117164551345877035,12793837009537715804]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","num":5,"id":{"name":"scopeguard","disambiguator":[6745301356711570827,8805850024978740077]}}],"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":0,"byte_end":1214,"line_start":1,"line_end":37,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":4,"index":0},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":1115,"byte_end":1123,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"alias_span":null,"name":"lock_api","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":1145,"byte_end":1159,"line_start":35,"line_end":35,"column_start":20,"column_end":34},"alias_span":null,"name":"const_spinlock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":34},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":1161,"byte_end":1172,"line_start":35,"line_end":35,"column_start":36,"column_end":47},"alias_span":null,"name":"RawSpinlock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":1174,"byte_end":1182,"line_start":35,"line_end":35,"column_start":49,"column_end":57},"alias_span":null,"name":"Spinlock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":29},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":1184,"byte_end":1197,"line_start":35,"line_end":35,"column_start":59,"column_end":72},"alias_span":null,"name":"SpinlockGuard","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":0,"byte_end":1214,"line_start":1,"line_end":37,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10}],"decl_id":null,"docs":" Provides a simple spinlock based on the abstractions provided by the [`lock_api`] crate.","sig":null,"attributes":[{"value":"/ Provides a simple spinlock based on the abstractions provided by the [`lock_api`] crate.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":0,"byte_end":92,"line_start":1,"line_end":1,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":93,"byte_end":96,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [`lock_api`]: https://docs.rs/lock_api/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":97,"byte_end":140,"line_start":3,"line_end":3,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":141,"byte_end":144,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ## Usage Example","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":145,"byte_end":165,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":166,"byte_end":169,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":170,"byte_end":181,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ use spinning_top::Spinlock;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":182,"byte_end":213,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":214,"byte_end":217,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":218,"byte_end":233,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"/     let data = String::from(\"Hello\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":234,"byte_end":275,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/     // Wrap some data in a spinlock","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":276,"byte_end":315,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/     let spinlock = Spinlock::new(data);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":316,"byte_end":359,"line_start":13,"line_end":13,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":360,"byte_end":363,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/     // Lock the spinlock to get a mutex guard for the data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":364,"byte_end":426,"line_start":15,"line_end":15,"column_start":1,"column_end":63}},{"value":"/     let mut locked_data = spinlock.lock();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":427,"byte_end":473,"line_start":16,"line_end":16,"column_start":1,"column_end":47}},{"value":"/     // The guard implements the `Deref` trait, so we can use it like a `&String`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":474,"byte_end":558,"line_start":17,"line_end":17,"column_start":1,"column_end":85}},{"value":"/     assert_eq!(locked_data.as_str(), \"Hello\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":559,"byte_end":609,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/     // It also implements `DerefMut` so mutation is possible too. This is safe","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":610,"byte_end":692,"line_start":19,"line_end":19,"column_start":1,"column_end":83}},{"value":"/     // because the spinlock ensures mutual exclusion","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":693,"byte_end":749,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"/     locked_data.make_ascii_uppercase();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":750,"byte_end":793,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/     assert_eq!(locked_data.as_str(), \"HELLO\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":794,"byte_end":844,"line_start":22,"line_end":22,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":845,"byte_end":848,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/     // the guard automatically frees the lock at the end of the scope","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":849,"byte_end":922,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":923,"byte_end":928,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":929,"byte_end":936,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"no_std","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":938,"byte_end":948,"line_start":28,"line_end":28,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":949,"byte_end":971,"line_start":29,"line_end":29,"column_start":1,"column_end":23}},{"value":"warn(missing_debug_implementations)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/lib.rs","byte_start":972,"byte_end":1011,"line_start":30,"line_end":30,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":34},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":2108,"byte_end":2119,"line_start":24,"line_end":24,"column_start":12,"column_end":23},"name":"RawSpinlock","qualname":"::spinlock::RawSpinlock","value":"RawSpinlock {  }","parent":null,"children":[{"krate":0,"index":35}],"decl_id":null,"docs":" Provides mutual exclusion based on spinning on an `AtomicBool`.","sig":null,"attributes":[{"value":"/ Provides mutual exclusion based on spinning on an `AtomicBool`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1542,"byte_end":1609,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1610,"byte_end":1613,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It's recommended to use this type either combination with [`lock_api::Mutex`] or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1614,"byte_end":1698,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"/ through the [`Spinlock`] type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1699,"byte_end":1733,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1734,"byte_end":1737,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1738,"byte_end":1752,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1753,"byte_end":1756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1757,"byte_end":1768,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"/ use lock_api::RawMutex;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1769,"byte_end":1796,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"/ let lock = spinning_top::RawSpinlock::INIT;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1797,"byte_end":1844,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(lock.try_lock(), true); // lock it","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1845,"byte_end":1894,"line_start":19,"line_end":19,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(lock.try_lock(), false); // can't be locked a second time","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1895,"byte_end":1967,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/ unsafe { lock.unlock(); } // unlock it","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":1968,"byte_end":2010,"line_start":21,"line_end":21,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(lock.try_lock(), true); // now it can be locked again","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":2011,"byte_end":2079,"line_start":22,"line_end":22,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":27},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5754,"byte_end":5762,"line_start":133,"line_end":133,"column_start":10,"column_end":18},"name":"Spinlock","qualname":"::spinlock::Spinlock","value":"lock_api::Mutex<RawSpinlock, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusion (Mutex) type based on busy-waiting.","sig":null,"attributes":[{"value":"/ A mutual exclusion (Mutex) type based on busy-waiting.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4240,"byte_end":4298,"line_start":84,"line_end":84,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4299,"byte_end":4302,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Calling `lock` (or `try_lock`) on this type returns a [`SpinlockGuard`], which","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4303,"byte_end":4385,"line_start":86,"line_end":86,"column_start":1,"column_end":83}},{"value":"/ automatically frees the lock when it goes out of scope.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4386,"byte_end":4445,"line_start":87,"line_end":87,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4446,"byte_end":4449,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4450,"byte_end":4464,"line_start":89,"line_end":89,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4465,"byte_end":4468,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4469,"byte_end":4480,"line_start":91,"line_end":91,"column_start":1,"column_end":12}},{"value":"/ use spinning_top::Spinlock;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4481,"byte_end":4512,"line_start":92,"line_end":92,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4513,"byte_end":4516,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4517,"byte_end":4532,"line_start":94,"line_end":94,"column_start":1,"column_end":16}},{"value":"/     // Wrap some data in a spinlock","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4533,"byte_end":4572,"line_start":95,"line_end":95,"column_start":1,"column_end":40}},{"value":"/     let data = String::from(\"Hello\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4573,"byte_end":4614,"line_start":96,"line_end":96,"column_start":1,"column_end":42}},{"value":"/     let spinlock = Spinlock::new(data);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4615,"byte_end":4658,"line_start":97,"line_end":97,"column_start":1,"column_end":44}},{"value":"/     make_uppercase(&spinlock); // only pass a shared reference","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4659,"byte_end":4725,"line_start":98,"line_end":98,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4726,"byte_end":4729,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/     // We have ownership of the spinlock, so we can extract the data without locking","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4730,"byte_end":4818,"line_start":100,"line_end":100,"column_start":1,"column_end":89}},{"value":"/     // Note: this consumes the spinlock","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4819,"byte_end":4862,"line_start":101,"line_end":101,"column_start":1,"column_end":44}},{"value":"/     let data = spinlock.into_inner();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4863,"byte_end":4904,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/     assert_eq!(data.as_str(), \"HELLO\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4905,"byte_end":4948,"line_start":103,"line_end":103,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4949,"byte_end":4954,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4955,"byte_end":4958,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ fn make_uppercase(spinlock: &Spinlock<String>) {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":4959,"byte_end":5011,"line_start":106,"line_end":106,"column_start":1,"column_end":53}},{"value":"/     // Lock the spinlock to get a mutable reference to the data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5012,"byte_end":5079,"line_start":107,"line_end":107,"column_start":1,"column_end":68}},{"value":"/     let mut locked_data = spinlock.lock();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5080,"byte_end":5126,"line_start":108,"line_end":108,"column_start":1,"column_end":47}},{"value":"/     assert_eq!(locked_data.as_str(), \"Hello\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5127,"byte_end":5177,"line_start":109,"line_end":109,"column_start":1,"column_end":51}},{"value":"/     locked_data.make_ascii_uppercase();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5178,"byte_end":5221,"line_start":110,"line_end":110,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5222,"byte_end":5225,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/     // the lock is automatically freed at the end of the scope","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5226,"byte_end":5292,"line_start":112,"line_end":112,"column_start":1,"column_end":67}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5293,"byte_end":5298,"line_start":113,"line_end":113,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5299,"byte_end":5306,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5307,"byte_end":5310,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ ## Nightly Example","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5311,"byte_end":5333,"line_start":116,"line_end":116,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5334,"byte_end":5337,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ On Rust nightly, the `nightly` feature of this crate can be enabled to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5338,"byte_end":5412,"line_start":118,"line_end":118,"column_start":1,"column_end":75}},{"value":"/ make the `new` function a `const` function. This makes the `Spinlock` type","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5413,"byte_end":5491,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/ usable in statics:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5492,"byte_end":5514,"line_start":120,"line_end":120,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5515,"byte_end":5518,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5519,"byte_end":5537,"line_start":122,"line_end":122,"column_start":1,"column_end":19}},{"value":"/ use spinning_top::Spinlock;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5538,"byte_end":5569,"line_start":123,"line_end":123,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5570,"byte_end":5573,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ static DATA: Spinlock<u32> = Spinlock::new(0);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5574,"byte_end":5624,"line_start":125,"line_end":125,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5625,"byte_end":5628,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5629,"byte_end":5644,"line_start":127,"line_end":127,"column_start":1,"column_end":16}},{"value":"/     let mut data = DATA.lock();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5645,"byte_end":5680,"line_start":128,"line_end":128,"column_start":1,"column_end":36}},{"value":"/     *data += 1;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5681,"byte_end":5700,"line_start":129,"line_end":129,"column_start":1,"column_end":20}},{"value":"/     assert_eq!(*data, 1);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5701,"byte_end":5730,"line_start":130,"line_end":130,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5731,"byte_end":5736,"line_start":131,"line_end":131,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5737,"byte_end":5744,"line_start":132,"line_end":132,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6578,"byte_end":6591,"line_start":159,"line_end":159,"column_start":10,"column_end":23},"name":"SpinlockGuard","qualname":"::spinlock::SpinlockGuard","value":"lock_api::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" A RAII guard that frees the spinlock when it goes out of scope.","sig":null,"attributes":[{"value":"/ A RAII guard that frees the spinlock when it goes out of scope.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5802,"byte_end":5869,"line_start":135,"line_end":135,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5870,"byte_end":5873,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ Allows access to the locked data through the [`core::ops::Deref`] and [`core::ops::DerefMut`] operations.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5874,"byte_end":5983,"line_start":137,"line_end":137,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5984,"byte_end":5987,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":5988,"byte_end":6002,"line_start":139,"line_end":139,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6003,"byte_end":6006,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6007,"byte_end":6018,"line_start":141,"line_end":141,"column_start":1,"column_end":12}},{"value":"/ use spinning_top::{Spinlock, SpinlockGuard};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6019,"byte_end":6067,"line_start":142,"line_end":142,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6068,"byte_end":6071,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ let spinlock = Spinlock::new(Vec::new());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6072,"byte_end":6117,"line_start":144,"line_end":144,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6118,"byte_end":6121,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ // begin a new scope","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6122,"byte_end":6146,"line_start":146,"line_end":146,"column_start":1,"column_end":25}},{"value":"/ {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6147,"byte_end":6152,"line_start":147,"line_end":147,"column_start":1,"column_end":6}},{"value":"/     // lock the spinlock to create a `SpinlockGuard`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6153,"byte_end":6209,"line_start":148,"line_end":148,"column_start":1,"column_end":57}},{"value":"/     let mut guard: SpinlockGuard<_> = spinlock.lock();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6210,"byte_end":6268,"line_start":149,"line_end":149,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6269,"byte_end":6272,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/     // guard can be used like a `&mut Vec` since it implements `DerefMut`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6273,"byte_end":6350,"line_start":151,"line_end":151,"column_start":1,"column_end":78}},{"value":"/     guard.push(1);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6351,"byte_end":6373,"line_start":152,"line_end":152,"column_start":1,"column_end":23}},{"value":"/     guard.push(2);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6374,"byte_end":6396,"line_start":153,"line_end":153,"column_start":1,"column_end":23}},{"value":"/     assert_eq!(guard.len(), 2);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6397,"byte_end":6432,"line_start":154,"line_end":154,"column_start":1,"column_end":36}},{"value":"/ } // guard is dropped -> frees the spinlock again","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6433,"byte_end":6486,"line_start":155,"line_end":155,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6487,"byte_end":6490,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ // spinlock is unlocked again","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6491,"byte_end":6524,"line_start":157,"line_end":157,"column_start":1,"column_end":34}},{"value":"/ assert!(spinlock.try_lock().is_some());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6525,"byte_end":6568,"line_start":158,"line_end":158,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":32},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6867,"byte_end":6881,"line_start":170,"line_end":170,"column_start":14,"column_end":28},"name":"const_spinlock","qualname":"::spinlock::const_spinlock","value":"pub const fn const_spinlock<T>(T) -> Spinlock<T>","parent":null,"children":[],"decl_id":null,"docs":" Create an unlocked `Spinlock` in a `const` context.","sig":null,"attributes":[{"value":"/ Create an unlocked `Spinlock` in a `const` context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6644,"byte_end":6699,"line_start":161,"line_end":161,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6700,"byte_end":6703,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6704,"byte_end":6718,"line_start":163,"line_end":163,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6719,"byte_end":6722,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6723,"byte_end":6734,"line_start":165,"line_end":165,"column_start":1,"column_end":12}},{"value":"/ use spinning_top::{const_spinlock, Spinlock};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6735,"byte_end":6784,"line_start":166,"line_end":166,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6785,"byte_end":6788,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ static SPINLOCK: Spinlock<i32> = const_spinlock(42);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6789,"byte_end":6845,"line_start":168,"line_end":168,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":6846,"byte_end":6853,"line_start":169,"line_end":169,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":2194,"byte_end":2205,"line_start":29,"line_end":29,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":2614,"byte_end":2625,"line_start":40,"line_end":40,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":2194,"byte_end":2205,"line_start":29,"line_end":29,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":34},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/spinning_top-0.2.2/src/spinlock.rs","byte_start":2614,"byte_end":2625,"line_start":40,"line_end":40,"column_start":26,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":34},"to":{"krate":4,"index":20}}]}