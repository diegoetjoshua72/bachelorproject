{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0","program":"/home/kami/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","gimli","--edition=2018","/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"read\"","-C","metadata=a131facea858b853","-C","extra-filename=-a131facea858b853","--out-dir","/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps","-L","dependency=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/kami/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/libgimli-a131facea858b853.rmeta"},"prelude":{"crate_id":{"name":"gimli","disambiguator":[9621763004782020319,3121429351519468946]},"crate_root":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src","external_crates":[{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5755871685339259462,14524450630327408145]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6095990061662150844,17257511342173735843]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13534664360101634333,15955848543282431589]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[2576337310504802494,7533979301291365915]}}],"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":0,"byte_end":2134,"line_start":1,"line_end":75,"column_start":1,"column_end":15}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1712,"byte_end":1713,"line_start":51,"line_end":51,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"Format","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1747,"byte_end":1748,"line_start":54,"line_end":54,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1821,"byte_end":1822,"line_start":58,"line_end":58,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4718},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1867,"byte_end":1876,"line_start":61,"line_end":61,"column_start":28,"column_end":37},"alias_span":null,"name":"BigEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4719},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1867,"byte_end":1876,"line_start":61,"line_end":61,"column_start":28,"column_end":37},"alias_span":null,"name":"BigEndian","value":"","parent":{"krate":0,"index":88}},{"kind":"Use","ref_id":{"krate":0,"index":54},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1878,"byte_end":1887,"line_start":61,"line_end":61,"column_start":39,"column_end":48},"alias_span":null,"name":"Endianity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4702},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1889,"byte_end":1901,"line_start":61,"line_end":61,"column_start":50,"column_end":62},"alias_span":null,"name":"LittleEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4703},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1889,"byte_end":1901,"line_start":61,"line_end":61,"column_start":50,"column_end":62},"alias_span":null,"name":"LittleEndian","value":"","parent":{"krate":0,"index":90}},{"kind":"Use","ref_id":{"krate":0,"index":85},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1903,"byte_end":1915,"line_start":61,"line_end":61,"column_start":64,"column_end":76},"alias_span":null,"name":"NativeEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1903,"byte_end":1915,"line_start":61,"line_end":61,"column_start":64,"column_end":76},"alias_span":null,"name":"NativeEndian","value":"","parent":{"krate":0,"index":91}},{"kind":"Use","ref_id":{"krate":0,"index":4683},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1917,"byte_end":1930,"line_start":61,"line_end":61,"column_start":78,"column_end":91},"alias_span":null,"name":"RunTimeEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89607,"byte_end":89608,"line_start":177,"line_end":177,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"DebugAddr","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89639,"byte_end":89640,"line_start":180,"line_end":180,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"CallFrameInstruction","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89675,"byte_end":89676,"line_start":183,"line_end":183,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89725,"byte_end":89726,"line_start":186,"line_end":186,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"EndianSlice","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89883,"byte_end":89884,"line_start":194,"line_end":194,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Reader, ReaderOffsetId, ReaderOffset","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89921,"byte_end":89922,"line_start":197,"line_end":197,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Abbreviation, Abbreviations, DebugAbbrev, AttributeSpecification","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89961,"byte_end":89962,"line_start":200,"line_end":200,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"DebugAranges","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89995,"byte_end":89996,"line_start":203,"line_end":203,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"DebugLine, IncompleteLineProgram","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90049,"byte_end":90050,"line_start":208,"line_end":208,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"LocListIter, LocationLists","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90092,"byte_end":90093,"line_start":213,"line_end":213,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Expression","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90134,"byte_end":90135,"line_start":216,"line_end":216,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90176,"byte_end":90177,"line_start":219,"line_end":219,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90218,"byte_end":90219,"line_start":222,"line_end":222,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"RawRange, RngListIter, RangeLists, Range","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90250,"byte_end":90251,"line_start":225,"line_end":225,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"DebugStr, DebugLineStr, DebugStrOffsets","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90284,"byte_end":90285,"line_start":228,"line_end":228,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"EntriesTree, DebuggingInformationEntry, AttributeValue, UnitOffset, parse_debug_info_offset, EntriesCursor, DebugInfoUnitHeadersIter, DebugInfo, EntriesRaw, DebugTypes, DebugTypesUnitHeadersIter, UnitHeader","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90320,"byte_end":90321,"line_start":231,"line_end":231,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"ValueType, Value","parent":{"krate":0,"index":113}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":2061,"byte_end":2062,"line_start":69,"line_end":69,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"CallFrameInstruction","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":0,"byte_end":2134,"line_start":1,"line_end":75,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":7550},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":7554},{"krate":0,"index":91},{"krate":0,"index":7556},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":113},{"krate":0,"index":2024}],"decl_id":null,"docs":" `gimli` is a library for reading and writing the\n [DWARF debugging format](http://dwarfstd.org/).","sig":null,"attributes":[{"value":"/ `gimli` is a library for reading and writing the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":0,"byte_end":52,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/ [DWARF debugging format](http://dwarfstd.org/).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":53,"byte_end":104,"line_start":2,"line_end":2,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":105,"byte_end":108,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ See the [read](./read/index.html) and [write](./write/index.html) modules","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":109,"byte_end":186,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ for examples and API documentation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":187,"byte_end":226,"line_start":5,"line_end":5,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":227,"byte_end":230,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Cargo Features","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":231,"byte_end":252,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":253,"byte_end":256,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Cargo features that can be enabled with `gimli`:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":257,"byte_end":309,"line_start":9,"line_end":9,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":310,"byte_end":313,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `std`: Enabled by default. Use the `std` library. Disabling this feature","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":314,"byte_end":392,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ allows using `gimli` in embedded environments that do not have access to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":393,"byte_end":469,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ `std`. Note that even when `std` is disabled, `gimli` still requires an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":470,"byte_end":545,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ implementation of the `alloc` crate.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":546,"byte_end":586,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":587,"byte_end":590,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ * `read`: Enabled by default. Enables the `read` module. Use of `std` is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":591,"byte_end":667,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ optional.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":668,"byte_end":681,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":682,"byte_end":685,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ * `write`: Enabled by default. Enables the `write` module. Always uses","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":686,"byte_end":760,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ the `std` library.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":761,"byte_end":783,"line_start":20,"line_end":20,"column_start":1,"column_end":23}},{"value":"deny(missing_docs)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":784,"byte_end":806,"line_start":21,"line_end":21,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":807,"byte_end":846,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"warn(bare_trait_objects)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":888,"byte_end":916,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"warn(unused_extern_crates)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":917,"byte_end":947,"line_start":25,"line_end":25,"column_start":1,"column_end":31}},{"value":"warn(ellipsis_inclusive_range_patterns)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":948,"byte_end":991,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"warn(explicit_outlives_requirements)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1030,"byte_end":1070,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"allow(unknown_lints)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1133,"byte_end":1157,"line_start":30,"line_end":30,"column_start":1,"column_end":25}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1203,"byte_end":1244,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"allow(clippy :: never_loop)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1291,"byte_end":1320,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"allow(clippy :: panic_params)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1393,"byte_end":1424,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"no_std","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1425,"byte_end":1435,"line_start":37,"line_end":37,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2026},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2293,"byte_end":2300,"line_start":5,"line_end":5,"column_start":5,"column_end":12},"name":"Dwarf64","qualname":"::common::Format::Dwarf64","value":"Format::Dwarf64","parent":{"krate":0,"index":2025},"children":[],"decl_id":null,"docs":" 64-bit DWARF\n","sig":null,"attributes":[{"value":"/ 64-bit DWARF","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2272,"byte_end":2288,"line_start":4,"line_end":4,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2029},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2331,"byte_end":2338,"line_start":7,"line_end":7,"column_start":5,"column_end":12},"name":"Dwarf32","qualname":"::common::Format::Dwarf32","value":"Format::Dwarf32","parent":{"krate":0,"index":2025},"children":[],"decl_id":null,"docs":" 32-bit DWARF\n","sig":null,"attributes":[{"value":"/ 32-bit DWARF","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2310,"byte_end":2326,"line_start":6,"line_end":6,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":2025},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2259,"byte_end":2265,"line_start":3,"line_end":3,"column_start":10,"column_end":16},"name":"Format","qualname":"::common::Format","value":"pub enum Format {\n\n    /// 64-bit DWARF\n    Dwarf64 = ,\n\n    /// 32-bit DWARF\n    Dwarf32 = ,\n}","parent":null,"children":[{"krate":0,"index":2026},{"krate":0,"index":2029}],"decl_id":null,"docs":" Whether the format of a compilation unit is 32- or 64-bit.\n","sig":null,"attributes":[{"value":"/ Whether the format of a compilation unit is 32- or 64-bit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2136,"byte_end":2198,"line_start":1,"line_end":1,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":7},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2464,"byte_end":2483,"line_start":13,"line_end":13,"column_start":12,"column_end":31},"name":"initial_length_size","qualname":"<Format>::initial_length_size","value":"pub fn initial_length_size(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the serialized size of an initial length field for the format.\n","sig":null,"attributes":[{"value":"/ Return the serialized size of an initial length field for the format.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2365,"byte_end":2438,"line_start":11,"line_end":11,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2443,"byte_end":2452,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2682,"byte_end":2691,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"word_size","qualname":"<Format>::word_size","value":"pub fn word_size(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the natural word size for the format\n","sig":null,"attributes":[{"value":"/ Return the natural word size for the format","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2609,"byte_end":2656,"line_start":20,"line_end":20,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2661,"byte_end":2670,"line_start":21,"line_end":21,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2046},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3115,"byte_end":3123,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::common::Encoding","value":"Encoding { address_size, format, version }","parent":null,"children":[{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049}],"decl_id":null,"docs":" Encoding parameters that are commonly used for multiple DWARF sections.","sig":null,"attributes":[{"value":"/ Encoding parameters that are commonly used for multiple DWARF sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2814,"byte_end":2889,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2890,"byte_end":2893,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This is intended to be small enough to pass by value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2894,"byte_end":2951,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"repr(C)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3093,"byte_end":3103,"line_start":36,"line_end":36,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2047},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3166,"byte_end":3178,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"address_size","qualname":"::common::Encoding::address_size","value":"u8","parent":{"krate":0,"index":2046},"children":[],"decl_id":null,"docs":" The size of an address.\n","sig":null,"attributes":[{"value":"/ The size of an address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3130,"byte_end":3157,"line_start":38,"line_end":38,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2048},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3318,"byte_end":3324,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"name":"format","qualname":"::common::Encoding::format","value":"common::Format","parent":{"krate":0,"index":2046},"children":[],"decl_id":null,"docs":" Whether the DWARF format is 32- or 64-bit.\n","sig":null,"attributes":[{"value":"/ Whether the DWARF format is 32- or 64-bit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3263,"byte_end":3309,"line_start":43,"line_end":43,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2049},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3384,"byte_end":3391,"line_start":47,"line_end":47,"column_start":9,"column_end":16},"name":"version","qualname":"::common::Encoding::version","value":"u16","parent":{"krate":0,"index":2046},"children":[],"decl_id":null,"docs":" The DWARF version of the header.\n","sig":null,"attributes":[{"value":"/ The DWARF version of the header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3339,"byte_end":3375,"line_start":46,"line_end":46,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2065},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3514,"byte_end":3526,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"LineEncoding","qualname":"::common::LineEncoding","value":"LineEncoding { minimum_instruction_length, maximum_operations_per_instruction, default_is_stmt, line_base, line_range }","parent":null,"children":[{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070}],"decl_id":null,"docs":" Encoding parameters for a line number program.\n","sig":null,"attributes":[{"value":"/ Encoding parameters for a line number program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3401,"byte_end":3451,"line_start":50,"line_end":50,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2066},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3607,"byte_end":3633,"line_start":54,"line_end":54,"column_start":9,"column_end":35},"name":"minimum_instruction_length","qualname":"::common::LineEncoding::minimum_instruction_length","value":"u8","parent":{"krate":0,"index":2065},"children":[],"decl_id":null,"docs":" The size in bytes of the smallest target machine instruction.\n","sig":null,"attributes":[{"value":"/ The size in bytes of the smallest target machine instruction.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3533,"byte_end":3598,"line_start":53,"line_end":53,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":2067},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3747,"byte_end":3781,"line_start":58,"line_end":58,"column_start":9,"column_end":43},"name":"maximum_operations_per_instruction","qualname":"::common::LineEncoding::maximum_operations_per_instruction","value":"u8","parent":{"krate":0,"index":2065},"children":[],"decl_id":null,"docs":" The maximum number of individual operations that may be encoded in an\n instruction.\n","sig":null,"attributes":[{"value":"/ The maximum number of individual operations that may be encoded in an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3644,"byte_end":3717,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ instruction.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3722,"byte_end":3738,"line_start":57,"line_end":57,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2068},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3849,"byte_end":3864,"line_start":61,"line_end":61,"column_start":9,"column_end":24},"name":"default_is_stmt","qualname":"::common::LineEncoding::default_is_stmt","value":"bool","parent":{"krate":0,"index":2065},"children":[],"decl_id":null,"docs":" The initial value of the `is_stmt` register.\n","sig":null,"attributes":[{"value":"/ The initial value of the `is_stmt` register.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3792,"byte_end":3840,"line_start":60,"line_end":60,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":2069},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3960,"byte_end":3969,"line_start":64,"line_end":64,"column_start":9,"column_end":18},"name":"line_base","qualname":"::common::LineEncoding::line_base","value":"i8","parent":{"krate":0,"index":2065},"children":[],"decl_id":null,"docs":" The minimum value which a special opcode can add to the line register.\n","sig":null,"attributes":[{"value":"/ The minimum value which a special opcode can add to the line register.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3877,"byte_end":3951,"line_start":63,"line_end":63,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":2070},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4065,"byte_end":4075,"line_start":67,"line_end":67,"column_start":9,"column_end":19},"name":"line_range","qualname":"::common::LineEncoding::line_range","value":"u8","parent":{"krate":0,"index":2065},"children":[],"decl_id":null,"docs":" The range of values which a special opcode can add to the line register.\n","sig":null,"attributes":[{"value":"/ The range of values which a special opcode can add to the line register.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":3980,"byte_end":4056,"line_start":66,"line_end":66,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":2086},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4652,"byte_end":4660,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"Register","qualname":"::common::Register","value":"","parent":null,"children":[],"decl_id":null,"docs":" A DWARF register number.","sig":null,"attributes":[{"value":"/ A DWARF register number.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4398,"byte_end":4426,"line_start":83,"line_end":83,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4427,"byte_end":4430,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ The meaning of this value is ABI dependent. This is generally encoded as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4431,"byte_end":4507,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ a ULEB128, but supported architectures need 16 bits at most.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4508,"byte_end":4572,"line_start":86,"line_end":86,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2088},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4661,"byte_end":4668,"line_start":88,"line_end":88,"column_start":21,"column_end":28},"name":"0","qualname":"::common::Register::0","value":"u16","parent":{"krate":0,"index":2086},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2112},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4782,"byte_end":4799,"line_start":92,"line_end":92,"column_start":12,"column_end":29},"name":"DebugAbbrevOffset","qualname":"::common::DebugAbbrevOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_abbrev` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4672,"byte_end":4719,"line_start":90,"line_end":90,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":2115},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4811,"byte_end":4816,"line_start":92,"line_end":92,"column_start":41,"column_end":46},"name":"0","qualname":"::common::DebugAbbrevOffset::0","value":"T","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2139},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4940,"byte_end":4953,"line_start":96,"line_end":96,"column_start":12,"column_end":25},"name":"DebugAddrBase","qualname":"::common::DebugAddrBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of entries in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of entries in the `.debug_addr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4820,"byte_end":4883,"line_start":94,"line_end":94,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":2142},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4965,"byte_end":4970,"line_start":96,"line_end":96,"column_start":37,"column_end":42},"name":"0","qualname":"::common::DebugAddrBase::0","value":"T","parent":{"krate":0,"index":2139},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2162},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5097,"byte_end":5111,"line_start":100,"line_end":100,"column_start":12,"column_end":26},"name":"DebugAddrIndex","qualname":"::common::DebugAddrIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of addresses in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of addresses in the `.debug_addr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4974,"byte_end":5040,"line_start":98,"line_end":98,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":2165},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5123,"byte_end":5128,"line_start":100,"line_end":100,"column_start":38,"column_end":43},"name":"0","qualname":"::common::DebugAddrIndex::0","value":"T","parent":{"krate":0,"index":2162},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2185},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5237,"byte_end":5255,"line_start":104,"line_end":104,"column_start":12,"column_end":30},"name":"DebugArangesOffset","qualname":"::common::DebugArangesOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_aranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5132,"byte_end":5180,"line_start":102,"line_end":102,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2188},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5267,"byte_end":5272,"line_start":104,"line_end":104,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugArangesOffset::0","value":"T","parent":{"krate":0,"index":2185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2208},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5401,"byte_end":5416,"line_start":108,"line_end":108,"column_start":12,"column_end":27},"name":"DebugInfoOffset","qualname":"::common::DebugInfoOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5276,"byte_end":5321,"line_start":106,"line_end":106,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2211},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5428,"byte_end":5433,"line_start":108,"line_end":108,"column_start":39,"column_end":44},"name":"0","qualname":"::common::DebugInfoOffset::0","value":"T","parent":{"krate":0,"index":2208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2245},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5539,"byte_end":5554,"line_start":112,"line_end":112,"column_start":12,"column_end":27},"name":"DebugLineOffset","qualname":"::common::DebugLineOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5437,"byte_end":5482,"line_start":110,"line_end":110,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2248},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5566,"byte_end":5571,"line_start":112,"line_end":112,"column_start":39,"column_end":44},"name":"0","qualname":"::common::DebugLineOffset::0","value":"T","parent":{"krate":0,"index":2245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2268},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5681,"byte_end":5699,"line_start":116,"line_end":116,"column_start":12,"column_end":30},"name":"DebugLineStrOffset","qualname":"::common::DebugLineStrOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5575,"byte_end":5624,"line_start":114,"line_end":114,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2271},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5711,"byte_end":5716,"line_start":116,"line_end":116,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugLineStrOffset::0","value":"T","parent":{"krate":0,"index":2268},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2291},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5937,"byte_end":5956,"line_start":121,"line_end":121,"column_start":12,"column_end":31},"name":"LocationListsOffset","qualname":"::common::LocationListsOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into either the `.debug_loc` section or the `.debug_loclists` section,\n depending on the version of the unit the offset was contained in.\n","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_loc` section or the `.debug_loclists` section,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5720,"byte_end":5804,"line_start":118,"line_end":118,"column_start":1,"column_end":85}},{"value":"/ depending on the version of the unit the offset was contained in.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5805,"byte_end":5874,"line_start":119,"line_end":119,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":2294},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5968,"byte_end":5973,"line_start":121,"line_end":121,"column_start":43,"column_end":48},"name":"0","qualname":"::common::LocationListsOffset::0","value":"T","parent":{"krate":0,"index":2291},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2318},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6115,"byte_end":6132,"line_start":125,"line_end":125,"column_start":12,"column_end":29},"name":"DebugLocListsBase","qualname":"::common::DebugLocListsBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of location list offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of location list offsets in the `.debug_loclists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":5977,"byte_end":6058,"line_start":123,"line_end":123,"column_start":1,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":2321},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6144,"byte_end":6149,"line_start":125,"line_end":125,"column_start":41,"column_end":46},"name":"0","qualname":"::common::DebugLocListsBase::0","value":"T","parent":{"krate":0,"index":2318},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2341},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6292,"byte_end":6310,"line_start":129,"line_end":129,"column_start":12,"column_end":30},"name":"DebugLocListsIndex","qualname":"::common::DebugLocListsIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of location list offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of location list offsets in the `.debug_loclists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6153,"byte_end":6235,"line_start":127,"line_end":127,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":2344},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6322,"byte_end":6327,"line_start":129,"line_end":129,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugLocListsIndex::0","value":"T","parent":{"krate":0,"index":2341},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2364},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6442,"byte_end":6460,"line_start":133,"line_end":133,"column_start":12,"column_end":30},"name":"DebugMacinfoOffset","qualname":"::common::DebugMacinfoOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_macinfo` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macinfo` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6331,"byte_end":6379,"line_start":131,"line_end":131,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2367},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6472,"byte_end":6477,"line_start":133,"line_end":133,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugMacinfoOffset::0","value":"T","parent":{"krate":0,"index":2364},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2391},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6590,"byte_end":6606,"line_start":137,"line_end":137,"column_start":12,"column_end":28},"name":"DebugMacroOffset","qualname":"::common::DebugMacroOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_macro` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macro` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6481,"byte_end":6527,"line_start":135,"line_end":135,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2394},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6618,"byte_end":6623,"line_start":137,"line_end":137,"column_start":40,"column_end":45},"name":"0","qualname":"::common::DebugMacroOffset::0","value":"T","parent":{"krate":0,"index":2391},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2418},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6847,"byte_end":6863,"line_start":142,"line_end":142,"column_start":12,"column_end":28},"name":"RangeListsOffset","qualname":"::common::RangeListsOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into either the `.debug_ranges` section or the `.debug_rnglists` section,\n depending on the version of the unit the offset was contained in.\n","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_ranges` section or the `.debug_rnglists` section,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6627,"byte_end":6714,"line_start":139,"line_end":139,"column_start":1,"column_end":88}},{"value":"/ depending on the version of the unit the offset was contained in.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6715,"byte_end":6784,"line_start":140,"line_end":140,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":2421},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6875,"byte_end":6880,"line_start":142,"line_end":142,"column_start":40,"column_end":45},"name":"0","qualname":"::common::RangeListsOffset::0","value":"T","parent":{"krate":0,"index":2418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2445},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7019,"byte_end":7036,"line_start":146,"line_end":146,"column_start":12,"column_end":29},"name":"DebugRngListsBase","qualname":"::common::DebugRngListsBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of range list offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of range list offsets in the `.debug_rnglists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":6884,"byte_end":6962,"line_start":144,"line_end":144,"column_start":1,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":2448},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7048,"byte_end":7053,"line_start":146,"line_end":146,"column_start":41,"column_end":46},"name":"0","qualname":"::common::DebugRngListsBase::0","value":"T","parent":{"krate":0,"index":2445},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2468},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7193,"byte_end":7211,"line_start":150,"line_end":150,"column_start":12,"column_end":30},"name":"DebugRngListsIndex","qualname":"::common::DebugRngListsIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of range list offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of range list offsets in the `.debug_rnglists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7057,"byte_end":7136,"line_start":148,"line_end":148,"column_start":1,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":2471},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7223,"byte_end":7228,"line_start":150,"line_end":150,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugRngListsIndex::0","value":"T","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2491},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7333,"byte_end":7347,"line_start":154,"line_end":154,"column_start":12,"column_end":26},"name":"DebugStrOffset","qualname":"::common::DebugStrOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7232,"byte_end":7276,"line_start":152,"line_end":152,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2494},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7359,"byte_end":7364,"line_start":154,"line_end":154,"column_start":38,"column_end":43},"name":"0","qualname":"::common::DebugStrOffset::0","value":"T","parent":{"krate":0,"index":2491},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2514},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7495,"byte_end":7514,"line_start":158,"line_end":158,"column_start":12,"column_end":31},"name":"DebugStrOffsetsBase","qualname":"::common::DebugStrOffsetsBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7368,"byte_end":7438,"line_start":156,"line_end":156,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2517},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7526,"byte_end":7531,"line_start":158,"line_end":158,"column_start":43,"column_end":48},"name":"0","qualname":"::common::DebugStrOffsetsBase::0","value":"T","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2537},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7663,"byte_end":7683,"line_start":162,"line_end":162,"column_start":12,"column_end":32},"name":"DebugStrOffsetsIndex","qualname":"::common::DebugStrOffsetsIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7535,"byte_end":7606,"line_start":160,"line_end":160,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":2540},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7695,"byte_end":7700,"line_start":162,"line_end":162,"column_start":44,"column_end":49},"name":"0","qualname":"::common::DebugStrOffsetsIndex::0","value":"T","parent":{"krate":0,"index":2537},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2560},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7830,"byte_end":7846,"line_start":166,"line_end":166,"column_start":12,"column_end":28},"name":"DebugTypesOffset","qualname":"::common::DebugTypesOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7704,"byte_end":7750,"line_start":164,"line_end":164,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2563},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7858,"byte_end":7863,"line_start":166,"line_end":166,"column_start":40,"column_end":45},"name":"0","qualname":"::common::DebugTypesOffset::0","value":"T","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2597},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7989,"byte_end":8007,"line_start":170,"line_end":170,"column_start":12,"column_end":30},"name":"DebugTypeSignature","qualname":"::common::DebugTypeSignature","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type signature as used in the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ A type signature as used in the `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":7867,"byte_end":7926,"line_start":168,"line_end":168,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2599},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8008,"byte_end":8015,"line_start":170,"line_end":170,"column_start":31,"column_end":38},"name":"0","qualname":"::common::DebugTypeSignature::0","value":"u64","parent":{"krate":0,"index":2597},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2615},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8128,"byte_end":8144,"line_start":174,"line_end":174,"column_start":12,"column_end":28},"name":"DebugFrameOffset","qualname":"::common::DebugFrameOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8019,"byte_end":8065,"line_start":172,"line_end":172,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2618},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8156,"byte_end":8161,"line_start":174,"line_end":174,"column_start":40,"column_end":45},"name":"0","qualname":"::common::DebugFrameOffset::0","value":"T","parent":{"krate":0,"index":2615},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2642},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8392,"byte_end":8405,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"EhFrameOffset","qualname":"::common::EhFrameOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.eh_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8286,"byte_end":8329,"line_start":183,"line_end":183,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2645},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8417,"byte_end":8422,"line_start":185,"line_end":185,"column_start":37,"column_end":42},"name":"0","qualname":"::common::EhFrameOffset::0","value":"T","parent":{"krate":0,"index":2642},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2671},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8768,"byte_end":8783,"line_start":198,"line_end":198,"column_start":5,"column_end":20},"name":"DebugInfoOffset","qualname":"::common::UnitSectionOffset::DebugInfoOffset","value":"UnitSectionOffset::DebugInfoOffset(DebugInfoOffset<T>)","parent":{"krate":0,"index":2669},"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8718,"byte_end":8763,"line_start":197,"line_end":197,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2674},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8860,"byte_end":8876,"line_start":200,"line_end":200,"column_start":5,"column_end":21},"name":"DebugTypesOffset","qualname":"::common::UnitSectionOffset::DebugTypesOffset","value":"UnitSectionOffset::DebugTypesOffset(DebugTypesOffset<T>)","parent":{"krate":0,"index":2669},"children":[],"decl_id":null,"docs":" An offset into the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8809,"byte_end":8855,"line_start":199,"line_end":199,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":2669},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8683,"byte_end":8700,"line_start":196,"line_end":196,"column_start":10,"column_end":27},"name":"UnitSectionOffset","qualname":"::common::UnitSectionOffset","value":"pub enum UnitSectionOffset<T = usize> {\n\n    /// An offset into the `.debug_info` section.\n    DebugInfoOffset(DebugInfoOffset<T>),\n\n    /// An offset into the `.debug_types` section.\n    DebugTypesOffset(DebugTypesOffset<T>),\n}","parent":null,"children":[{"krate":0,"index":2671},{"krate":0,"index":2674}],"decl_id":null,"docs":" An offset into the `.debug_info` or `.debug_types` sections.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` or `.debug_types` sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8541,"byte_end":8605,"line_start":194,"line_end":194,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":9374,"byte_end":9394,"line_start":220,"line_end":220,"column_start":12,"column_end":32},"name":"as_debug_info_offset","qualname":"<UnitSectionOffset<T>>::as_debug_info_offset","value":"pub fn as_debug_info_offset(&Self) -> Option<DebugInfoOffset<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `DebugInfoOffset` inside, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns the `DebugInfoOffset` inside, or `None` otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":9300,"byte_end":9362,"line_start":219,"line_end":219,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":9690,"byte_end":9711,"line_start":227,"line_end":227,"column_start":12,"column_end":33},"name":"as_debug_types_offset","qualname":"<UnitSectionOffset<T>>::as_debug_types_offset","value":"pub fn as_debug_types_offset(&Self) -> Option<DebugTypesOffset<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `DebugTypesOffset` inside, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns the `DebugTypesOffset` inside, or `None` otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":9615,"byte_end":9678,"line_start":226,"line_end":226,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2711},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10101,"byte_end":10112,"line_start":239,"line_end":239,"column_start":5,"column_end":16},"name":"DebugAbbrev","qualname":"::common::SectionId::DebugAbbrev","value":"SectionId::DebugAbbrev","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_abbrev` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10064,"byte_end":10096,"line_start":238,"line_end":238,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2713},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10153,"byte_end":10162,"line_start":241,"line_end":241,"column_start":5,"column_end":14},"name":"DebugAddr","qualname":"::common::SectionId::DebugAddr","value":"SectionId::DebugAddr","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_addr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10118,"byte_end":10148,"line_start":240,"line_end":240,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2715},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10206,"byte_end":10218,"line_start":243,"line_end":243,"column_start":5,"column_end":17},"name":"DebugAranges","qualname":"::common::SectionId::DebugAranges","value":"SectionId::DebugAranges","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_aranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10168,"byte_end":10201,"line_start":242,"line_end":242,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2717},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10260,"byte_end":10270,"line_start":245,"line_end":245,"column_start":5,"column_end":15},"name":"DebugFrame","qualname":"::common::SectionId::DebugFrame","value":"SectionId::DebugFrame","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10224,"byte_end":10255,"line_start":244,"line_end":244,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2719},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10309,"byte_end":10316,"line_start":247,"line_end":247,"column_start":5,"column_end":12},"name":"EhFrame","qualname":"::common::SectionId::EhFrame","value":"SectionId::EhFrame","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10276,"byte_end":10304,"line_start":246,"line_end":246,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2721},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10359,"byte_end":10369,"line_start":249,"line_end":249,"column_start":5,"column_end":15},"name":"EhFrameHdr","qualname":"::common::SectionId::EhFrameHdr","value":"SectionId::EhFrameHdr","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame_hdr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10322,"byte_end":10354,"line_start":248,"line_end":248,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2723},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10410,"byte_end":10419,"line_start":251,"line_end":251,"column_start":5,"column_end":14},"name":"DebugInfo","qualname":"::common::SectionId::DebugInfo","value":"SectionId::DebugInfo","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10375,"byte_end":10405,"line_start":250,"line_end":250,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2725},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10460,"byte_end":10469,"line_start":253,"line_end":253,"column_start":5,"column_end":14},"name":"DebugLine","qualname":"::common::SectionId::DebugLine","value":"SectionId::DebugLine","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10425,"byte_end":10455,"line_start":252,"line_end":252,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2727},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10514,"byte_end":10526,"line_start":255,"line_end":255,"column_start":5,"column_end":17},"name":"DebugLineStr","qualname":"::common::SectionId::DebugLineStr","value":"SectionId::DebugLineStr","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10475,"byte_end":10509,"line_start":254,"line_end":254,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2729},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10566,"byte_end":10574,"line_start":257,"line_end":257,"column_start":5,"column_end":13},"name":"DebugLoc","qualname":"::common::SectionId::DebugLoc","value":"SectionId::DebugLoc","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_loc` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_loc` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10532,"byte_end":10561,"line_start":256,"line_end":256,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2731},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10619,"byte_end":10632,"line_start":259,"line_end":259,"column_start":5,"column_end":18},"name":"DebugLocLists","qualname":"::common::SectionId::DebugLocLists","value":"SectionId::DebugLocLists","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_loclists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10580,"byte_end":10614,"line_start":258,"line_end":258,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2733},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10676,"byte_end":10688,"line_start":261,"line_end":261,"column_start":5,"column_end":17},"name":"DebugMacinfo","qualname":"::common::SectionId::DebugMacinfo","value":"SectionId::DebugMacinfo","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_macinfo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_macinfo` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10638,"byte_end":10671,"line_start":260,"line_end":260,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2735},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10730,"byte_end":10740,"line_start":263,"line_end":263,"column_start":5,"column_end":15},"name":"DebugMacro","qualname":"::common::SectionId::DebugMacro","value":"SectionId::DebugMacro","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_macro` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_macro` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10694,"byte_end":10725,"line_start":262,"line_end":262,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2737},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10785,"byte_end":10798,"line_start":265,"line_end":265,"column_start":5,"column_end":18},"name":"DebugPubNames","qualname":"::common::SectionId::DebugPubNames","value":"SectionId::DebugPubNames","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_pubnames` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_pubnames` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10746,"byte_end":10780,"line_start":264,"line_end":264,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2739},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10843,"byte_end":10856,"line_start":267,"line_end":267,"column_start":5,"column_end":18},"name":"DebugPubTypes","qualname":"::common::SectionId::DebugPubTypes","value":"SectionId::DebugPubTypes","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_pubtypes` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_pubtypes` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10804,"byte_end":10838,"line_start":266,"line_end":266,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2741},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10899,"byte_end":10910,"line_start":269,"line_end":269,"column_start":5,"column_end":16},"name":"DebugRanges","qualname":"::common::SectionId::DebugRanges","value":"SectionId::DebugRanges","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_ranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10862,"byte_end":10894,"line_start":268,"line_end":268,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2743},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10955,"byte_end":10968,"line_start":271,"line_end":271,"column_start":5,"column_end":18},"name":"DebugRngLists","qualname":"::common::SectionId::DebugRngLists","value":"SectionId::DebugRngLists","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_rnglists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10916,"byte_end":10950,"line_start":270,"line_end":270,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2745},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":11008,"byte_end":11016,"line_start":273,"line_end":273,"column_start":5,"column_end":13},"name":"DebugStr","qualname":"::common::SectionId::DebugStr","value":"SectionId::DebugStr","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10974,"byte_end":11003,"line_start":272,"line_end":272,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2747},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":11064,"byte_end":11079,"line_start":275,"line_end":275,"column_start":5,"column_end":20},"name":"DebugStrOffsets","qualname":"::common::SectionId::DebugStrOffsets","value":"SectionId::DebugStrOffsets","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str_offsets` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":11022,"byte_end":11059,"line_start":274,"line_end":274,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2749},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":11121,"byte_end":11131,"line_start":277,"line_end":277,"column_start":5,"column_end":15},"name":"DebugTypes","qualname":"::common::SectionId::DebugTypes","value":"SectionId::DebugTypes","parent":{"krate":0,"index":2710},"children":[],"decl_id":null,"docs":" The `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":11085,"byte_end":11116,"line_start":276,"line_end":276,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":2710},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":10048,"byte_end":10057,"line_start":237,"line_end":237,"column_start":10,"column_end":19},"name":"SectionId","qualname":"::common::SectionId","value":"pub enum SectionId {\n\n    /// The `.debug_abbrev` section.\n    DebugAbbrev,\n\n    /// The `.debug_addr` section.\n    DebugAddr,\n\n    /// The `.debug_aranges` section.\n    DebugAranges,\n\n    /// The `.debug_frame` section.\n    DebugFrame,\n\n    /// The `.eh_frame` section.\n    EhFrame,\n\n    /// The `.eh_frame_hdr` section.\n    EhFrameHdr,\n\n    /// The `.debug_info` section.\n    DebugInfo,\n\n    /// The `.debug_line` section.\n    DebugLine,\n\n    /// The `.debug_line_str` section.\n    DebugLineStr,\n\n    /// The `.debug_loc` section.\n    DebugLoc,\n\n    /// The `.debug_loclists` section.\n    DebugLocLists,\n\n    /// The `.debug_macinfo` section.\n    DebugMacinfo,\n\n    /// The `.debug_macro` section.\n    DebugMacro,\n\n    /// The `.debug_pubnames` section.\n    DebugPubNames,\n\n    /// The `.debug_pubtypes` section.\n    DebugPubTypes,\n\n    /// The `.debug_ranges` section.\n    DebugRanges,\n\n    /// The `.debug_rnglists` section.\n    DebugRngLists,\n\n    /// The `.debug_str` section.\n    DebugStr,\n\n    /// The `.debug_str_offsets` section.\n    DebugStrOffsets,\n\n    /// The `.debug_types` section.\n    DebugTypes,\n}","parent":null,"children":[{"krate":0,"index":2711},{"krate":0,"index":2713},{"krate":0,"index":2715},{"krate":0,"index":2717},{"krate":0,"index":2719},{"krate":0,"index":2721},{"krate":0,"index":2723},{"krate":0,"index":2725},{"krate":0,"index":2727},{"krate":0,"index":2729},{"krate":0,"index":2731},{"krate":0,"index":2733},{"krate":0,"index":2735},{"krate":0,"index":2737},{"krate":0,"index":2739},{"krate":0,"index":2741},{"krate":0,"index":2743},{"krate":0,"index":2745},{"krate":0,"index":2747},{"krate":0,"index":2749}],"decl_id":null,"docs":" An identifier for a DWARF section.\n","sig":null,"attributes":[{"value":"/ An identifier for a DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":9932,"byte_end":9970,"line_start":235,"line_end":235,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":11216,"byte_end":11220,"line_start":282,"line_end":282,"column_start":12,"column_end":16},"name":"name","qualname":"<SectionId>::name","value":"pub fn name(Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Returns the ELF section name for this kind.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this kind.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":11157,"byte_end":11204,"line_start":281,"line_end":281,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":12466,"byte_end":12474,"line_start":308,"line_end":308,"column_start":12,"column_end":20},"name":"dwo_name","qualname":"<SectionId>::dwo_name","value":"pub fn dwo_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the ELF section name for this kind, when found in a .dwo file.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this kind, when found in a .dwo file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":12380,"byte_end":12454,"line_start":307,"line_end":307,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2769},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13449,"byte_end":13454,"line_start":329,"line_end":329,"column_start":12,"column_end":17},"name":"DwoId","qualname":"::common::DwoId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An optionally-provided implementation-defined compilation unit ID to enable\n split DWARF and linking a split compilation unit back together.\n","sig":null,"attributes":[{"value":"/ An optionally-provided implementation-defined compilation unit ID to enable","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13239,"byte_end":13318,"line_start":326,"line_end":326,"column_start":1,"column_end":80}},{"value":"/ split DWARF and linking a split compilation unit back together.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13319,"byte_end":13386,"line_start":327,"line_end":327,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":2771},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13455,"byte_end":13462,"line_start":329,"line_end":329,"column_start":18,"column_end":25},"name":"0","qualname":"::common::DwoId::0","value":"u64","parent":{"krate":0,"index":2769},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2788},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13732,"byte_end":13736,"line_start":336,"line_end":336,"column_start":5,"column_end":9},"name":"Main","qualname":"::common::DwarfFileType::Main","value":"DwarfFileType::Main","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" A normal executable or object file.\n","sig":null,"attributes":[{"value":"/ A normal executable or object file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13688,"byte_end":13727,"line_start":335,"line_end":335,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2790},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13775,"byte_end":13778,"line_start":338,"line_end":338,"column_start":5,"column_end":8},"name":"Dwo","qualname":"::common::DwarfFileType::Dwo","value":"DwarfFileType::Dwo","parent":{"krate":0,"index":2787},"children":[],"decl_id":null,"docs":" A .dwo split DWARF file.\n","sig":null,"attributes":[{"value":"/ A .dwo split DWARF file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13742,"byte_end":13770,"line_start":337,"line_end":337,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":2787},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13668,"byte_end":13681,"line_start":334,"line_end":334,"column_start":10,"column_end":23},"name":"DwarfFileType","qualname":"::common::DwarfFileType","value":"pub enum DwarfFileType {\n\n    /// A normal executable or object file.\n    Main,\n\n    /// A .dwo split DWARF file.\n    Dwo,\n}","parent":null,"children":[{"krate":0,"index":2788},{"krate":0,"index":2790}],"decl_id":null,"docs":" The \"type\" of file with DWARF debugging information. This determines, among other things,\n which files DWARF sections should be loaded from.\n","sig":null,"attributes":[{"value":"/ The \"type\" of file with DWARF debugging information. This determines, among other things,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13466,"byte_end":13559,"line_start":331,"line_end":331,"column_start":1,"column_end":94}},{"value":"/ which files DWARF sections should be loaded from.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13560,"byte_end":13613,"line_start":332,"line_end":332,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2803},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15129,"byte_end":15132,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"Arm","qualname":"::arch::Arm","value":"","parent":null,"children":[],"decl_id":null,"docs":" ARM architecture specific definitions.","sig":null,"attributes":[{"value":"/ ARM architecture specific definitions.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":14919,"byte_end":14961,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":14962,"byte_end":14965,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ See [DWARF for the ARM Architecture](http://infocenter.arm.com/help/topic/com.arm.doc.ihi0040b/IHI0040B_aadwarf.pdf).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":14966,"byte_end":15087,"line_start":38,"line_end":38,"column_start":1,"column_end":122}}]},{"kind":"Const","id":{"krate":0,"index":2811},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15186,"byte_end":15188,"line_start":44,"line_end":44,"column_start":5,"column_end":7},"name":"R0","qualname":"::arch::Arm::R0","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2812},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15206,"byte_end":15208,"line_start":45,"line_end":45,"column_start":5,"column_end":7},"name":"R1","qualname":"::arch::Arm::R1","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2813},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15226,"byte_end":15228,"line_start":46,"line_end":46,"column_start":5,"column_end":7},"name":"R2","qualname":"::arch::Arm::R2","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2814},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15246,"byte_end":15248,"line_start":47,"line_end":47,"column_start":5,"column_end":7},"name":"R3","qualname":"::arch::Arm::R3","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2815},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15266,"byte_end":15268,"line_start":48,"line_end":48,"column_start":5,"column_end":7},"name":"R4","qualname":"::arch::Arm::R4","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2816},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15286,"byte_end":15288,"line_start":49,"line_end":49,"column_start":5,"column_end":7},"name":"R5","qualname":"::arch::Arm::R5","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2817},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15306,"byte_end":15308,"line_start":50,"line_end":50,"column_start":5,"column_end":7},"name":"R6","qualname":"::arch::Arm::R6","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2818},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15326,"byte_end":15328,"line_start":51,"line_end":51,"column_start":5,"column_end":7},"name":"R7","qualname":"::arch::Arm::R7","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2819},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15346,"byte_end":15348,"line_start":52,"line_end":52,"column_start":5,"column_end":7},"name":"R8","qualname":"::arch::Arm::R8","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2820},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15366,"byte_end":15368,"line_start":53,"line_end":53,"column_start":5,"column_end":7},"name":"R9","qualname":"::arch::Arm::R9","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2821},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15386,"byte_end":15389,"line_start":54,"line_end":54,"column_start":5,"column_end":8},"name":"R10","qualname":"::arch::Arm::R10","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2822},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15409,"byte_end":15412,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"R11","qualname":"::arch::Arm::R11","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2823},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15432,"byte_end":15435,"line_start":56,"line_end":56,"column_start":5,"column_end":8},"name":"R12","qualname":"::arch::Arm::R12","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2824},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15455,"byte_end":15458,"line_start":57,"line_end":57,"column_start":5,"column_end":8},"name":"R13","qualname":"::arch::Arm::R13","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2825},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15478,"byte_end":15481,"line_start":58,"line_end":58,"column_start":5,"column_end":8},"name":"R14","qualname":"::arch::Arm::R14","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2826},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15501,"byte_end":15504,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"R15","qualname":"::arch::Arm::R15","value":"Register","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2830},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15735,"byte_end":15738,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"X86","qualname":"::arch::X86","value":"","parent":null,"children":[],"decl_id":null,"docs":" Intel i386 architecture specific definitions.","sig":null,"attributes":[{"value":"/ Intel i386 architecture specific definitions.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15525,"byte_end":15574,"line_start":62,"line_end":62,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15575,"byte_end":15578,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ See Intel386 psABi version 1.1 at the [X86 psABI wiki](https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15579,"byte_end":15693,"line_start":64,"line_end":64,"column_start":1,"column_end":115}}]},{"kind":"Const","id":{"krate":0,"index":2838},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15763,"byte_end":15766,"line_start":69,"line_end":69,"column_start":5,"column_end":8},"name":"EAX","qualname":"::arch::X86::EAX","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2839},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15785,"byte_end":15788,"line_start":70,"line_end":70,"column_start":5,"column_end":8},"name":"ECX","qualname":"::arch::X86::ECX","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2840},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15807,"byte_end":15810,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"EDX","qualname":"::arch::X86::EDX","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2841},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15829,"byte_end":15832,"line_start":72,"line_end":72,"column_start":5,"column_end":8},"name":"EBX","qualname":"::arch::X86::EBX","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2842},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15851,"byte_end":15854,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"ESP","qualname":"::arch::X86::ESP","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2843},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15873,"byte_end":15876,"line_start":74,"line_end":74,"column_start":5,"column_end":8},"name":"EBP","qualname":"::arch::X86::EBP","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2844},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15895,"byte_end":15898,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"ESI","qualname":"::arch::X86::ESI","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2845},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":15917,"byte_end":15920,"line_start":76,"line_end":76,"column_start":5,"column_end":8},"name":"EDI","qualname":"::arch::X86::EDI","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2846},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16036,"byte_end":16038,"line_start":79,"line_end":79,"column_start":5,"column_end":7},"name":"RA","qualname":"::arch::X86::RA","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2847},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16057,"byte_end":16060,"line_start":81,"line_end":81,"column_start":5,"column_end":8},"name":"ST0","qualname":"::arch::X86::ST0","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2848},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16080,"byte_end":16083,"line_start":82,"line_end":82,"column_start":5,"column_end":8},"name":"ST1","qualname":"::arch::X86::ST1","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2849},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16103,"byte_end":16106,"line_start":83,"line_end":83,"column_start":5,"column_end":8},"name":"ST2","qualname":"::arch::X86::ST2","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2850},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16126,"byte_end":16129,"line_start":84,"line_end":84,"column_start":5,"column_end":8},"name":"ST3","qualname":"::arch::X86::ST3","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2851},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16149,"byte_end":16152,"line_start":85,"line_end":85,"column_start":5,"column_end":8},"name":"ST4","qualname":"::arch::X86::ST4","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2852},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16172,"byte_end":16175,"line_start":86,"line_end":86,"column_start":5,"column_end":8},"name":"ST5","qualname":"::arch::X86::ST5","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2853},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16195,"byte_end":16198,"line_start":87,"line_end":87,"column_start":5,"column_end":8},"name":"ST6","qualname":"::arch::X86::ST6","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2854},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16218,"byte_end":16221,"line_start":88,"line_end":88,"column_start":5,"column_end":8},"name":"ST7","qualname":"::arch::X86::ST7","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2855},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16242,"byte_end":16246,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"XMM0","qualname":"::arch::X86::XMM0","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2856},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16267,"byte_end":16271,"line_start":91,"line_end":91,"column_start":5,"column_end":9},"name":"XMM1","qualname":"::arch::X86::XMM1","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2857},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16292,"byte_end":16296,"line_start":92,"line_end":92,"column_start":5,"column_end":9},"name":"XMM2","qualname":"::arch::X86::XMM2","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2858},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16317,"byte_end":16321,"line_start":93,"line_end":93,"column_start":5,"column_end":9},"name":"XMM3","qualname":"::arch::X86::XMM3","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2859},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16342,"byte_end":16346,"line_start":94,"line_end":94,"column_start":5,"column_end":9},"name":"XMM4","qualname":"::arch::X86::XMM4","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2860},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16367,"byte_end":16371,"line_start":95,"line_end":95,"column_start":5,"column_end":9},"name":"XMM5","qualname":"::arch::X86::XMM5","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2861},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16392,"byte_end":16396,"line_start":96,"line_end":96,"column_start":5,"column_end":9},"name":"XMM6","qualname":"::arch::X86::XMM6","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2862},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16417,"byte_end":16421,"line_start":97,"line_end":97,"column_start":5,"column_end":9},"name":"XMM7","qualname":"::arch::X86::XMM7","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2863},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16443,"byte_end":16446,"line_start":99,"line_end":99,"column_start":5,"column_end":8},"name":"MM0","qualname":"::arch::X86::MM0","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2864},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16466,"byte_end":16469,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"MM1","qualname":"::arch::X86::MM1","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2865},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16489,"byte_end":16492,"line_start":101,"line_end":101,"column_start":5,"column_end":8},"name":"MM2","qualname":"::arch::X86::MM2","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2866},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16512,"byte_end":16515,"line_start":102,"line_end":102,"column_start":5,"column_end":8},"name":"MM3","qualname":"::arch::X86::MM3","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2867},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16535,"byte_end":16538,"line_start":103,"line_end":103,"column_start":5,"column_end":8},"name":"MM4","qualname":"::arch::X86::MM4","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2868},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16558,"byte_end":16561,"line_start":104,"line_end":104,"column_start":5,"column_end":8},"name":"MM5","qualname":"::arch::X86::MM5","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2869},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16581,"byte_end":16584,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"MM6","qualname":"::arch::X86::MM6","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2870},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16604,"byte_end":16607,"line_start":106,"line_end":106,"column_start":5,"column_end":8},"name":"MM7","qualname":"::arch::X86::MM7","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2871},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16628,"byte_end":16633,"line_start":108,"line_end":108,"column_start":5,"column_end":10},"name":"MXCSR","qualname":"::arch::X86::MXCSR","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2872},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16656,"byte_end":16658,"line_start":110,"line_end":110,"column_start":5,"column_end":7},"name":"ES","qualname":"::arch::X86::ES","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2873},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16677,"byte_end":16679,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"CS","qualname":"::arch::X86::CS","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2874},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16698,"byte_end":16700,"line_start":112,"line_end":112,"column_start":5,"column_end":7},"name":"SS","qualname":"::arch::X86::SS","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2875},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16719,"byte_end":16721,"line_start":113,"line_end":113,"column_start":5,"column_end":7},"name":"DS","qualname":"::arch::X86::DS","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2876},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16740,"byte_end":16742,"line_start":114,"line_end":114,"column_start":5,"column_end":7},"name":"FS","qualname":"::arch::X86::FS","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2877},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16761,"byte_end":16763,"line_start":115,"line_end":115,"column_start":5,"column_end":7},"name":"GS","qualname":"::arch::X86::GS","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2878},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16783,"byte_end":16785,"line_start":117,"line_end":117,"column_start":5,"column_end":7},"name":"TR","qualname":"::arch::X86::TR","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2879},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16804,"byte_end":16808,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"LDTR","qualname":"::arch::X86::LDTR","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2880},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16830,"byte_end":16837,"line_start":120,"line_end":120,"column_start":5,"column_end":12},"name":"FS_BASE","qualname":"::arch::X86::FS_BASE","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2881},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16861,"byte_end":16868,"line_start":121,"line_end":121,"column_start":5,"column_end":12},"name":"GS_BASE","qualname":"::arch::X86::GS_BASE","value":"Register","parent":{"krate":0,"index":2837},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2885},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17096,"byte_end":17102,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"X86_64","qualname":"::arch::X86_64","value":"","parent":null,"children":[],"decl_id":null,"docs":" AMD64 architecture specific definitions.","sig":null,"attributes":[{"value":"/ AMD64 architecture specific definitions.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16893,"byte_end":16937,"line_start":124,"line_end":124,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16938,"byte_end":16941,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ See x86-64 psABI version 1.0 at the [X86 psABI wiki](https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":16942,"byte_end":17054,"line_start":126,"line_end":126,"column_start":1,"column_end":113}}]},{"kind":"Const","id":{"krate":0,"index":2893},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17130,"byte_end":17133,"line_start":131,"line_end":131,"column_start":5,"column_end":8},"name":"RAX","qualname":"::arch::X86_64::RAX","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2894},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17152,"byte_end":17155,"line_start":132,"line_end":132,"column_start":5,"column_end":8},"name":"RDX","qualname":"::arch::X86_64::RDX","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2895},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17174,"byte_end":17177,"line_start":133,"line_end":133,"column_start":5,"column_end":8},"name":"RCX","qualname":"::arch::X86_64::RCX","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2896},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17196,"byte_end":17199,"line_start":134,"line_end":134,"column_start":5,"column_end":8},"name":"RBX","qualname":"::arch::X86_64::RBX","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2897},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17218,"byte_end":17221,"line_start":135,"line_end":135,"column_start":5,"column_end":8},"name":"RSI","qualname":"::arch::X86_64::RSI","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2898},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17240,"byte_end":17243,"line_start":136,"line_end":136,"column_start":5,"column_end":8},"name":"RDI","qualname":"::arch::X86_64::RDI","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2899},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17262,"byte_end":17265,"line_start":137,"line_end":137,"column_start":5,"column_end":8},"name":"RBP","qualname":"::arch::X86_64::RBP","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2900},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17284,"byte_end":17287,"line_start":138,"line_end":138,"column_start":5,"column_end":8},"name":"RSP","qualname":"::arch::X86_64::RSP","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2901},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17307,"byte_end":17309,"line_start":140,"line_end":140,"column_start":5,"column_end":7},"name":"R8","qualname":"::arch::X86_64::R8","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2902},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17327,"byte_end":17329,"line_start":141,"line_end":141,"column_start":5,"column_end":7},"name":"R9","qualname":"::arch::X86_64::R9","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2903},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17347,"byte_end":17350,"line_start":142,"line_end":142,"column_start":5,"column_end":8},"name":"R10","qualname":"::arch::X86_64::R10","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2904},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17370,"byte_end":17373,"line_start":143,"line_end":143,"column_start":5,"column_end":8},"name":"R11","qualname":"::arch::X86_64::R11","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2905},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17393,"byte_end":17396,"line_start":144,"line_end":144,"column_start":5,"column_end":8},"name":"R12","qualname":"::arch::X86_64::R12","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2906},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17416,"byte_end":17419,"line_start":145,"line_end":145,"column_start":5,"column_end":8},"name":"R13","qualname":"::arch::X86_64::R13","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2907},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17439,"byte_end":17442,"line_start":146,"line_end":146,"column_start":5,"column_end":8},"name":"R14","qualname":"::arch::X86_64::R14","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2908},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17462,"byte_end":17465,"line_start":147,"line_end":147,"column_start":5,"column_end":8},"name":"R15","qualname":"::arch::X86_64::R15","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2909},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17582,"byte_end":17584,"line_start":150,"line_end":150,"column_start":5,"column_end":7},"name":"RA","qualname":"::arch::X86_64::RA","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2910},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17604,"byte_end":17608,"line_start":152,"line_end":152,"column_start":5,"column_end":9},"name":"XMM0","qualname":"::arch::X86_64::XMM0","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2911},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17629,"byte_end":17633,"line_start":153,"line_end":153,"column_start":5,"column_end":9},"name":"XMM1","qualname":"::arch::X86_64::XMM1","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2912},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17654,"byte_end":17658,"line_start":154,"line_end":154,"column_start":5,"column_end":9},"name":"XMM2","qualname":"::arch::X86_64::XMM2","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2913},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17679,"byte_end":17683,"line_start":155,"line_end":155,"column_start":5,"column_end":9},"name":"XMM3","qualname":"::arch::X86_64::XMM3","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2914},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17704,"byte_end":17708,"line_start":156,"line_end":156,"column_start":5,"column_end":9},"name":"XMM4","qualname":"::arch::X86_64::XMM4","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2915},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17729,"byte_end":17733,"line_start":157,"line_end":157,"column_start":5,"column_end":9},"name":"XMM5","qualname":"::arch::X86_64::XMM5","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2916},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17754,"byte_end":17758,"line_start":158,"line_end":158,"column_start":5,"column_end":9},"name":"XMM6","qualname":"::arch::X86_64::XMM6","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2917},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17779,"byte_end":17783,"line_start":159,"line_end":159,"column_start":5,"column_end":9},"name":"XMM7","qualname":"::arch::X86_64::XMM7","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2918},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17805,"byte_end":17809,"line_start":161,"line_end":161,"column_start":5,"column_end":9},"name":"XMM8","qualname":"::arch::X86_64::XMM8","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2919},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17830,"byte_end":17834,"line_start":162,"line_end":162,"column_start":5,"column_end":9},"name":"XMM9","qualname":"::arch::X86_64::XMM9","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2920},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17855,"byte_end":17860,"line_start":163,"line_end":163,"column_start":5,"column_end":10},"name":"XMM10","qualname":"::arch::X86_64::XMM10","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2921},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17882,"byte_end":17887,"line_start":164,"line_end":164,"column_start":5,"column_end":10},"name":"XMM11","qualname":"::arch::X86_64::XMM11","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2922},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17909,"byte_end":17914,"line_start":165,"line_end":165,"column_start":5,"column_end":10},"name":"XMM12","qualname":"::arch::X86_64::XMM12","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2923},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17936,"byte_end":17941,"line_start":166,"line_end":166,"column_start":5,"column_end":10},"name":"XMM13","qualname":"::arch::X86_64::XMM13","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2924},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17963,"byte_end":17968,"line_start":167,"line_end":167,"column_start":5,"column_end":10},"name":"XMM14","qualname":"::arch::X86_64::XMM14","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2925},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":17990,"byte_end":17995,"line_start":168,"line_end":168,"column_start":5,"column_end":10},"name":"XMM15","qualname":"::arch::X86_64::XMM15","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2926},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18018,"byte_end":18021,"line_start":170,"line_end":170,"column_start":5,"column_end":8},"name":"ST0","qualname":"::arch::X86_64::ST0","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2927},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18041,"byte_end":18044,"line_start":171,"line_end":171,"column_start":5,"column_end":8},"name":"ST1","qualname":"::arch::X86_64::ST1","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2928},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18064,"byte_end":18067,"line_start":172,"line_end":172,"column_start":5,"column_end":8},"name":"ST2","qualname":"::arch::X86_64::ST2","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2929},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18087,"byte_end":18090,"line_start":173,"line_end":173,"column_start":5,"column_end":8},"name":"ST3","qualname":"::arch::X86_64::ST3","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2930},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18110,"byte_end":18113,"line_start":174,"line_end":174,"column_start":5,"column_end":8},"name":"ST4","qualname":"::arch::X86_64::ST4","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2931},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18133,"byte_end":18136,"line_start":175,"line_end":175,"column_start":5,"column_end":8},"name":"ST5","qualname":"::arch::X86_64::ST5","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2932},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18156,"byte_end":18159,"line_start":176,"line_end":176,"column_start":5,"column_end":8},"name":"ST6","qualname":"::arch::X86_64::ST6","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2933},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18179,"byte_end":18182,"line_start":177,"line_end":177,"column_start":5,"column_end":8},"name":"ST7","qualname":"::arch::X86_64::ST7","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2934},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18203,"byte_end":18206,"line_start":179,"line_end":179,"column_start":5,"column_end":8},"name":"MM0","qualname":"::arch::X86_64::MM0","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2935},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18226,"byte_end":18229,"line_start":180,"line_end":180,"column_start":5,"column_end":8},"name":"MM1","qualname":"::arch::X86_64::MM1","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2936},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18249,"byte_end":18252,"line_start":181,"line_end":181,"column_start":5,"column_end":8},"name":"MM2","qualname":"::arch::X86_64::MM2","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2937},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18272,"byte_end":18275,"line_start":182,"line_end":182,"column_start":5,"column_end":8},"name":"MM3","qualname":"::arch::X86_64::MM3","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2938},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18295,"byte_end":18298,"line_start":183,"line_end":183,"column_start":5,"column_end":8},"name":"MM4","qualname":"::arch::X86_64::MM4","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2939},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18318,"byte_end":18321,"line_start":184,"line_end":184,"column_start":5,"column_end":8},"name":"MM5","qualname":"::arch::X86_64::MM5","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2940},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18341,"byte_end":18344,"line_start":185,"line_end":185,"column_start":5,"column_end":8},"name":"MM6","qualname":"::arch::X86_64::MM6","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2941},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18364,"byte_end":18367,"line_start":186,"line_end":186,"column_start":5,"column_end":8},"name":"MM7","qualname":"::arch::X86_64::MM7","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2942},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18388,"byte_end":18394,"line_start":188,"line_end":188,"column_start":5,"column_end":11},"name":"RFLAGS","qualname":"::arch::X86_64::RFLAGS","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2943},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18417,"byte_end":18419,"line_start":189,"line_end":189,"column_start":5,"column_end":7},"name":"ES","qualname":"::arch::X86_64::ES","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2944},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18438,"byte_end":18440,"line_start":190,"line_end":190,"column_start":5,"column_end":7},"name":"CS","qualname":"::arch::X86_64::CS","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2945},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18459,"byte_end":18461,"line_start":191,"line_end":191,"column_start":5,"column_end":7},"name":"SS","qualname":"::arch::X86_64::SS","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2946},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18480,"byte_end":18482,"line_start":192,"line_end":192,"column_start":5,"column_end":7},"name":"DS","qualname":"::arch::X86_64::DS","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2947},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18501,"byte_end":18503,"line_start":193,"line_end":193,"column_start":5,"column_end":7},"name":"FS","qualname":"::arch::X86_64::FS","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2948},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18522,"byte_end":18524,"line_start":194,"line_end":194,"column_start":5,"column_end":7},"name":"GS","qualname":"::arch::X86_64::GS","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2949},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18544,"byte_end":18551,"line_start":196,"line_end":196,"column_start":5,"column_end":12},"name":"FS_BASE","qualname":"::arch::X86_64::FS_BASE","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2950},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18575,"byte_end":18582,"line_start":197,"line_end":197,"column_start":5,"column_end":12},"name":"GS_BASE","qualname":"::arch::X86_64::GS_BASE","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2951},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18607,"byte_end":18609,"line_start":199,"line_end":199,"column_start":5,"column_end":7},"name":"TR","qualname":"::arch::X86_64::TR","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2952},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18628,"byte_end":18632,"line_start":200,"line_end":200,"column_start":5,"column_end":9},"name":"LDTR","qualname":"::arch::X86_64::LDTR","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2953},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18653,"byte_end":18658,"line_start":201,"line_end":201,"column_start":5,"column_end":10},"name":"MXCSR","qualname":"::arch::X86_64::MXCSR","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2954},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18680,"byte_end":18683,"line_start":202,"line_end":202,"column_start":5,"column_end":8},"name":"FCW","qualname":"::arch::X86_64::FCW","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2955},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18703,"byte_end":18706,"line_start":203,"line_end":203,"column_start":5,"column_end":8},"name":"FSW","qualname":"::arch::X86_64::FSW","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2956},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18727,"byte_end":18732,"line_start":205,"line_end":205,"column_start":5,"column_end":10},"name":"XMM16","qualname":"::arch::X86_64::XMM16","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2957},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18754,"byte_end":18759,"line_start":206,"line_end":206,"column_start":5,"column_end":10},"name":"XMM17","qualname":"::arch::X86_64::XMM17","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2958},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18781,"byte_end":18786,"line_start":207,"line_end":207,"column_start":5,"column_end":10},"name":"XMM18","qualname":"::arch::X86_64::XMM18","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2959},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18808,"byte_end":18813,"line_start":208,"line_end":208,"column_start":5,"column_end":10},"name":"XMM19","qualname":"::arch::X86_64::XMM19","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2960},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18835,"byte_end":18840,"line_start":209,"line_end":209,"column_start":5,"column_end":10},"name":"XMM20","qualname":"::arch::X86_64::XMM20","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2961},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18862,"byte_end":18867,"line_start":210,"line_end":210,"column_start":5,"column_end":10},"name":"XMM21","qualname":"::arch::X86_64::XMM21","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2962},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18889,"byte_end":18894,"line_start":211,"line_end":211,"column_start":5,"column_end":10},"name":"XMM22","qualname":"::arch::X86_64::XMM22","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2963},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18916,"byte_end":18921,"line_start":212,"line_end":212,"column_start":5,"column_end":10},"name":"XMM23","qualname":"::arch::X86_64::XMM23","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2964},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18943,"byte_end":18948,"line_start":213,"line_end":213,"column_start":5,"column_end":10},"name":"XMM24","qualname":"::arch::X86_64::XMM24","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2965},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18970,"byte_end":18975,"line_start":214,"line_end":214,"column_start":5,"column_end":10},"name":"XMM25","qualname":"::arch::X86_64::XMM25","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2966},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":18997,"byte_end":19002,"line_start":215,"line_end":215,"column_start":5,"column_end":10},"name":"XMM26","qualname":"::arch::X86_64::XMM26","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2967},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19024,"byte_end":19029,"line_start":216,"line_end":216,"column_start":5,"column_end":10},"name":"XMM27","qualname":"::arch::X86_64::XMM27","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2968},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19051,"byte_end":19056,"line_start":217,"line_end":217,"column_start":5,"column_end":10},"name":"XMM28","qualname":"::arch::X86_64::XMM28","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2969},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19078,"byte_end":19083,"line_start":218,"line_end":218,"column_start":5,"column_end":10},"name":"XMM29","qualname":"::arch::X86_64::XMM29","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2970},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19105,"byte_end":19110,"line_start":219,"line_end":219,"column_start":5,"column_end":10},"name":"XMM30","qualname":"::arch::X86_64::XMM30","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2971},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19132,"byte_end":19137,"line_start":220,"line_end":220,"column_start":5,"column_end":10},"name":"XMM31","qualname":"::arch::X86_64::XMM31","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2972},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19160,"byte_end":19162,"line_start":222,"line_end":222,"column_start":5,"column_end":7},"name":"K0","qualname":"::arch::X86_64::K0","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2973},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19182,"byte_end":19184,"line_start":223,"line_end":223,"column_start":5,"column_end":7},"name":"K1","qualname":"::arch::X86_64::K1","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2974},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19204,"byte_end":19206,"line_start":224,"line_end":224,"column_start":5,"column_end":7},"name":"K2","qualname":"::arch::X86_64::K2","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2975},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19226,"byte_end":19228,"line_start":225,"line_end":225,"column_start":5,"column_end":7},"name":"K3","qualname":"::arch::X86_64::K3","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2976},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19248,"byte_end":19250,"line_start":226,"line_end":226,"column_start":5,"column_end":7},"name":"K4","qualname":"::arch::X86_64::K4","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2977},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19270,"byte_end":19272,"line_start":227,"line_end":227,"column_start":5,"column_end":7},"name":"K5","qualname":"::arch::X86_64::K5","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2978},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19292,"byte_end":19294,"line_start":228,"line_end":228,"column_start":5,"column_end":7},"name":"K6","qualname":"::arch::X86_64::K6","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2979},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/arch.rs","byte_start":19314,"byte_end":19316,"line_start":229,"line_end":229,"column_start":5,"column_end":7},"name":"K7","qualname":"::arch::X86_64::K7","value":"Register","parent":{"krate":0,"index":2892},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":37},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constants","qualname":"::constants","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":2995},{"krate":0,"index":3019},{"krate":0,"index":3017},{"krate":0,"index":3016},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3009},{"krate":0,"index":3010},{"krate":0,"index":3006},{"krate":0,"index":3000},{"krate":0,"index":2998},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2986},{"krate":0,"index":2987},{"krate":0,"index":2988},{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2993},{"krate":0,"index":3057},{"krate":0,"index":3081},{"krate":0,"index":3079},{"krate":0,"index":3078},{"krate":0,"index":3074},{"krate":0,"index":3075},{"krate":0,"index":3071},{"krate":0,"index":3072},{"krate":0,"index":3068},{"krate":0,"index":3062},{"krate":0,"index":3060},{"krate":0,"index":3021},{"krate":0,"index":3022},{"krate":0,"index":3023},{"krate":0,"index":3024},{"krate":0,"index":3025},{"krate":0,"index":3026},{"krate":0,"index":3027},{"krate":0,"index":3028},{"krate":0,"index":3029},{"krate":0,"index":3030},{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3033},{"krate":0,"index":3034},{"krate":0,"index":3035},{"krate":0,"index":3036},{"krate":0,"index":3037},{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3043},{"krate":0,"index":3044},{"krate":0,"index":3045},{"krate":0,"index":3046},{"krate":0,"index":3047},{"krate":0,"index":3048},{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051},{"krate":0,"index":3052},{"krate":0,"index":3053},{"krate":0,"index":3055},{"krate":0,"index":3089},{"krate":0,"index":3113},{"krate":0,"index":3111},{"krate":0,"index":3110},{"krate":0,"index":3106},{"krate":0,"index":3107},{"krate":0,"index":3103},{"krate":0,"index":3104},{"krate":0,"index":3100},{"krate":0,"index":3094},{"krate":0,"index":3092},{"krate":0,"index":3083},{"krate":0,"index":3084},{"krate":0,"index":3085},{"krate":0,"index":3087},{"krate":0,"index":3232},{"krate":0,"index":3256},{"krate":0,"index":3254},{"krate":0,"index":3253},{"krate":0,"index":3249},{"krate":0,"index":3250},{"krate":0,"index":3246},{"krate":0,"index":3247},{"krate":0,"index":3243},{"krate":0,"index":3237},{"krate":0,"index":3235},{"krate":0,"index":3115},{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3120},{"krate":0,"index":3121},{"krate":0,"index":3122},{"krate":0,"index":3123},{"krate":0,"index":3124},{"krate":0,"index":3125},{"krate":0,"index":3126},{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3132},{"krate":0,"index":3133},{"krate":0,"index":3134},{"krate":0,"index":3135},{"krate":0,"index":3136},{"krate":0,"index":3137},{"krate":0,"index":3138},{"krate":0,"index":3139},{"krate":0,"index":3140},{"krate":0,"index":3141},{"krate":0,"index":3142},{"krate":0,"index":3143},{"krate":0,"index":3144},{"krate":0,"index":3145},{"krate":0,"index":3146},{"krate":0,"index":3147},{"krate":0,"index":3148},{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3151},{"krate":0,"index":3152},{"krate":0,"index":3153},{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":3158},{"krate":0,"index":3159},{"krate":0,"index":3160},{"krate":0,"index":3161},{"krate":0,"index":3162},{"krate":0,"index":3163},{"krate":0,"index":3164},{"krate":0,"index":3165},{"krate":0,"index":3166},{"krate":0,"index":3167},{"krate":0,"index":3168},{"krate":0,"index":3169},{"krate":0,"index":3170},{"krate":0,"index":3171},{"krate":0,"index":3172},{"krate":0,"index":3173},{"krate":0,"index":3174},{"krate":0,"index":3175},{"krate":0,"index":3176},{"krate":0,"index":3177},{"krate":0,"index":3178},{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3181},{"krate":0,"index":3182},{"krate":0,"index":3183},{"krate":0,"index":3184},{"krate":0,"index":3185},{"krate":0,"index":3186},{"krate":0,"index":3187},{"krate":0,"index":3188},{"krate":0,"index":3189},{"krate":0,"index":3190},{"krate":0,"index":3191},{"krate":0,"index":3192},{"krate":0,"index":3193},{"krate":0,"index":3194},{"krate":0,"index":3195},{"krate":0,"index":3196},{"krate":0,"index":3197},{"krate":0,"index":3198},{"krate":0,"index":3199},{"krate":0,"index":3200},{"krate":0,"index":3201},{"krate":0,"index":3202},{"krate":0,"index":3203},{"krate":0,"index":3204},{"krate":0,"index":3205},{"krate":0,"index":3206},{"krate":0,"index":3207},{"krate":0,"index":3208},{"krate":0,"index":3209},{"krate":0,"index":3210},{"krate":0,"index":3211},{"krate":0,"index":3212},{"krate":0,"index":3213},{"krate":0,"index":3214},{"krate":0,"index":3215},{"krate":0,"index":3216},{"krate":0,"index":3217},{"krate":0,"index":3218},{"krate":0,"index":3219},{"krate":0,"index":3220},{"krate":0,"index":3221},{"krate":0,"index":3222},{"krate":0,"index":3223},{"krate":0,"index":3224},{"krate":0,"index":3225},{"krate":0,"index":3226},{"krate":0,"index":3227},{"krate":0,"index":3228},{"krate":0,"index":3230},{"krate":0,"index":3527},{"krate":0,"index":3551},{"krate":0,"index":3549},{"krate":0,"index":3548},{"krate":0,"index":3544},{"krate":0,"index":3545},{"krate":0,"index":3541},{"krate":0,"index":3542},{"krate":0,"index":3538},{"krate":0,"index":3532},{"krate":0,"index":3530},{"krate":0,"index":3258},{"krate":0,"index":3259},{"krate":0,"index":3260},{"krate":0,"index":3261},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":3264},{"krate":0,"index":3265},{"krate":0,"index":3266},{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":3269},{"krate":0,"index":3270},{"krate":0,"index":3271},{"krate":0,"index":3272},{"krate":0,"index":3273},{"krate":0,"index":3274},{"krate":0,"index":3275},{"krate":0,"index":3276},{"krate":0,"index":3277},{"krate":0,"index":3278},{"krate":0,"index":3279},{"krate":0,"index":3280},{"krate":0,"index":3281},{"krate":0,"index":3282},{"krate":0,"index":3283},{"krate":0,"index":3284},{"krate":0,"index":3285},{"krate":0,"index":3286},{"krate":0,"index":3287},{"krate":0,"index":3288},{"krate":0,"index":3289},{"krate":0,"index":3290},{"krate":0,"index":3291},{"krate":0,"index":3292},{"krate":0,"index":3293},{"krate":0,"index":3294},{"krate":0,"index":3295},{"krate":0,"index":3296},{"krate":0,"index":3297},{"krate":0,"index":3298},{"krate":0,"index":3299},{"krate":0,"index":3300},{"krate":0,"index":3301},{"krate":0,"index":3302},{"krate":0,"index":3303},{"krate":0,"index":3304},{"krate":0,"index":3305},{"krate":0,"index":3306},{"krate":0,"index":3307},{"krate":0,"index":3308},{"krate":0,"index":3309},{"krate":0,"index":3310},{"krate":0,"index":3311},{"krate":0,"index":3312},{"krate":0,"index":3313},{"krate":0,"index":3314},{"krate":0,"index":3315},{"krate":0,"index":3316},{"krate":0,"index":3317},{"krate":0,"index":3318},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322},{"krate":0,"index":3323},{"krate":0,"index":3324},{"krate":0,"index":3325},{"krate":0,"index":3326},{"krate":0,"index":3327},{"krate":0,"index":3328},{"krate":0,"index":3329},{"krate":0,"index":3330},{"krate":0,"index":3331},{"krate":0,"index":3332},{"krate":0,"index":3333},{"krate":0,"index":3334},{"krate":0,"index":3335},{"krate":0,"index":3336},{"krate":0,"index":3337},{"krate":0,"index":3338},{"krate":0,"index":3339},{"krate":0,"index":3340},{"krate":0,"index":3341},{"krate":0,"index":3342},{"krate":0,"index":3343},{"krate":0,"index":3344},{"krate":0,"index":3345},{"krate":0,"index":3346},{"krate":0,"index":3347},{"krate":0,"index":3348},{"krate":0,"index":3349},{"krate":0,"index":3350},{"krate":0,"index":3351},{"krate":0,"index":3352},{"krate":0,"index":3353},{"krate":0,"index":3354},{"krate":0,"index":3355},{"krate":0,"index":3356},{"krate":0,"index":3357},{"krate":0,"index":3358},{"krate":0,"index":3359},{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3362},{"krate":0,"index":3363},{"krate":0,"index":3364},{"krate":0,"index":3365},{"krate":0,"index":3366},{"krate":0,"index":3367},{"krate":0,"index":3368},{"krate":0,"index":3369},{"krate":0,"index":3370},{"krate":0,"index":3371},{"krate":0,"index":3372},{"krate":0,"index":3373},{"krate":0,"index":3374},{"krate":0,"index":3375},{"krate":0,"index":3376},{"krate":0,"index":3377},{"krate":0,"index":3378},{"krate":0,"index":3379},{"krate":0,"index":3380},{"krate":0,"index":3381},{"krate":0,"index":3382},{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385},{"krate":0,"index":3386},{"krate":0,"index":3387},{"krate":0,"index":3388},{"krate":0,"index":3389},{"krate":0,"index":3390},{"krate":0,"index":3391},{"krate":0,"index":3392},{"krate":0,"index":3393},{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3396},{"krate":0,"index":3397},{"krate":0,"index":3398},{"krate":0,"index":3399},{"krate":0,"index":3400},{"krate":0,"index":3401},{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3404},{"krate":0,"index":3405},{"krate":0,"index":3406},{"krate":0,"index":3407},{"krate":0,"index":3408},{"krate":0,"index":3409},{"krate":0,"index":3410},{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3413},{"krate":0,"index":3414},{"krate":0,"index":3415},{"krate":0,"index":3416},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":3419},{"krate":0,"index":3420},{"krate":0,"index":3421},{"krate":0,"index":3422},{"krate":0,"index":3423},{"krate":0,"index":3424},{"krate":0,"index":3425},{"krate":0,"index":3426},{"krate":0,"index":3427},{"krate":0,"index":3428},{"krate":0,"index":3429},{"krate":0,"index":3430},{"krate":0,"index":3431},{"krate":0,"index":3432},{"krate":0,"index":3433},{"krate":0,"index":3434},{"krate":0,"index":3435},{"krate":0,"index":3436},{"krate":0,"index":3437},{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442},{"krate":0,"index":3443},{"krate":0,"index":3444},{"krate":0,"index":3445},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3448},{"krate":0,"index":3449},{"krate":0,"index":3450},{"krate":0,"index":3451},{"krate":0,"index":3452},{"krate":0,"index":3453},{"krate":0,"index":3454},{"krate":0,"index":3455},{"krate":0,"index":3456},{"krate":0,"index":3457},{"krate":0,"index":3458},{"krate":0,"index":3459},{"krate":0,"index":3460},{"krate":0,"index":3461},{"krate":0,"index":3462},{"krate":0,"index":3463},{"krate":0,"index":3464},{"krate":0,"index":3465},{"krate":0,"index":3466},{"krate":0,"index":3467},{"krate":0,"index":3468},{"krate":0,"index":3469},{"krate":0,"index":3470},{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3473},{"krate":0,"index":3474},{"krate":0,"index":3475},{"krate":0,"index":3476},{"krate":0,"index":3477},{"krate":0,"index":3478},{"krate":0,"index":3479},{"krate":0,"index":3480},{"krate":0,"index":3481},{"krate":0,"index":3482},{"krate":0,"index":3483},{"krate":0,"index":3484},{"krate":0,"index":3485},{"krate":0,"index":3486},{"krate":0,"index":3487},{"krate":0,"index":3488},{"krate":0,"index":3489},{"krate":0,"index":3490},{"krate":0,"index":3491},{"krate":0,"index":3492},{"krate":0,"index":3493},{"krate":0,"index":3494},{"krate":0,"index":3495},{"krate":0,"index":3496},{"krate":0,"index":3497},{"krate":0,"index":3498},{"krate":0,"index":3499},{"krate":0,"index":3500},{"krate":0,"index":3501},{"krate":0,"index":3502},{"krate":0,"index":3503},{"krate":0,"index":3504},{"krate":0,"index":3505},{"krate":0,"index":3506},{"krate":0,"index":3507},{"krate":0,"index":3508},{"krate":0,"index":3509},{"krate":0,"index":3510},{"krate":0,"index":3511},{"krate":0,"index":3512},{"krate":0,"index":3513},{"krate":0,"index":3514},{"krate":0,"index":3515},{"krate":0,"index":3516},{"krate":0,"index":3517},{"krate":0,"index":3518},{"krate":0,"index":3519},{"krate":0,"index":3520},{"krate":0,"index":3521},{"krate":0,"index":3522},{"krate":0,"index":3523},{"krate":0,"index":3525},{"krate":0,"index":3605},{"krate":0,"index":3629},{"krate":0,"index":3627},{"krate":0,"index":3626},{"krate":0,"index":3622},{"krate":0,"index":3623},{"krate":0,"index":3619},{"krate":0,"index":3620},{"krate":0,"index":3616},{"krate":0,"index":3610},{"krate":0,"index":3608},{"krate":0,"index":3553},{"krate":0,"index":3554},{"krate":0,"index":3555},{"krate":0,"index":3556},{"krate":0,"index":3557},{"krate":0,"index":3558},{"krate":0,"index":3559},{"krate":0,"index":3560},{"krate":0,"index":3561},{"krate":0,"index":3562},{"krate":0,"index":3563},{"krate":0,"index":3564},{"krate":0,"index":3565},{"krate":0,"index":3566},{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3569},{"krate":0,"index":3570},{"krate":0,"index":3571},{"krate":0,"index":3572},{"krate":0,"index":3573},{"krate":0,"index":3574},{"krate":0,"index":3575},{"krate":0,"index":3576},{"krate":0,"index":3577},{"krate":0,"index":3578},{"krate":0,"index":3579},{"krate":0,"index":3580},{"krate":0,"index":3581},{"krate":0,"index":3582},{"krate":0,"index":3583},{"krate":0,"index":3584},{"krate":0,"index":3585},{"krate":0,"index":3586},{"krate":0,"index":3587},{"krate":0,"index":3588},{"krate":0,"index":3589},{"krate":0,"index":3590},{"krate":0,"index":3591},{"krate":0,"index":3592},{"krate":0,"index":3593},{"krate":0,"index":3594},{"krate":0,"index":3595},{"krate":0,"index":3596},{"krate":0,"index":3597},{"krate":0,"index":3598},{"krate":0,"index":3599},{"krate":0,"index":3600},{"krate":0,"index":3601},{"krate":0,"index":3603},{"krate":0,"index":3655},{"krate":0,"index":3679},{"krate":0,"index":3677},{"krate":0,"index":3676},{"krate":0,"index":3672},{"krate":0,"index":3673},{"krate":0,"index":3669},{"krate":0,"index":3670},{"krate":0,"index":3666},{"krate":0,"index":3660},{"krate":0,"index":3658},{"krate":0,"index":3631},{"krate":0,"index":3632},{"krate":0,"index":3633},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3636},{"krate":0,"index":3637},{"krate":0,"index":3638},{"krate":0,"index":3639},{"krate":0,"index":3640},{"krate":0,"index":3641},{"krate":0,"index":3642},{"krate":0,"index":3643},{"krate":0,"index":3644},{"krate":0,"index":3645},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3648},{"krate":0,"index":3649},{"krate":0,"index":3650},{"krate":0,"index":3651},{"krate":0,"index":3653},{"krate":0,"index":3695},{"krate":0,"index":3719},{"krate":0,"index":3717},{"krate":0,"index":3716},{"krate":0,"index":3712},{"krate":0,"index":3713},{"krate":0,"index":3709},{"krate":0,"index":3710},{"krate":0,"index":3706},{"krate":0,"index":3700},{"krate":0,"index":3698},{"krate":0,"index":3681},{"krate":0,"index":3682},{"krate":0,"index":3683},{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3688},{"krate":0,"index":3689},{"krate":0,"index":3690},{"krate":0,"index":3691},{"krate":0,"index":3693},{"krate":0,"index":3730},{"krate":0,"index":3754},{"krate":0,"index":3752},{"krate":0,"index":3751},{"krate":0,"index":3747},{"krate":0,"index":3748},{"krate":0,"index":3744},{"krate":0,"index":3745},{"krate":0,"index":3741},{"krate":0,"index":3735},{"krate":0,"index":3733},{"krate":0,"index":3721},{"krate":0,"index":3722},{"krate":0,"index":3723},{"krate":0,"index":3724},{"krate":0,"index":3725},{"krate":0,"index":3726},{"krate":0,"index":3728},{"krate":0,"index":3765},{"krate":0,"index":3789},{"krate":0,"index":3787},{"krate":0,"index":3786},{"krate":0,"index":3782},{"krate":0,"index":3783},{"krate":0,"index":3779},{"krate":0,"index":3780},{"krate":0,"index":3776},{"krate":0,"index":3770},{"krate":0,"index":3768},{"krate":0,"index":3756},{"krate":0,"index":3757},{"krate":0,"index":3758},{"krate":0,"index":3759},{"krate":0,"index":3760},{"krate":0,"index":3761},{"krate":0,"index":3763},{"krate":0,"index":3798},{"krate":0,"index":3822},{"krate":0,"index":3820},{"krate":0,"index":3819},{"krate":0,"index":3815},{"krate":0,"index":3816},{"krate":0,"index":3812},{"krate":0,"index":3813},{"krate":0,"index":3809},{"krate":0,"index":3803},{"krate":0,"index":3801},{"krate":0,"index":3791},{"krate":0,"index":3792},{"krate":0,"index":3793},{"krate":0,"index":3794},{"krate":0,"index":3796},{"krate":0,"index":3831},{"krate":0,"index":3855},{"krate":0,"index":3853},{"krate":0,"index":3852},{"krate":0,"index":3848},{"krate":0,"index":3849},{"krate":0,"index":3845},{"krate":0,"index":3846},{"krate":0,"index":3842},{"krate":0,"index":3836},{"krate":0,"index":3834},{"krate":0,"index":3824},{"krate":0,"index":3825},{"krate":0,"index":3826},{"krate":0,"index":3827},{"krate":0,"index":3829},{"krate":0,"index":3864},{"krate":0,"index":3888},{"krate":0,"index":3886},{"krate":0,"index":3885},{"krate":0,"index":3881},{"krate":0,"index":3882},{"krate":0,"index":3878},{"krate":0,"index":3879},{"krate":0,"index":3875},{"krate":0,"index":3869},{"krate":0,"index":3867},{"krate":0,"index":3857},{"krate":0,"index":3858},{"krate":0,"index":3859},{"krate":0,"index":3860},{"krate":0,"index":3862},{"krate":0,"index":3938},{"krate":0,"index":3962},{"krate":0,"index":3960},{"krate":0,"index":3959},{"krate":0,"index":3955},{"krate":0,"index":3956},{"krate":0,"index":3952},{"krate":0,"index":3953},{"krate":0,"index":3949},{"krate":0,"index":3943},{"krate":0,"index":3941},{"krate":0,"index":3890},{"krate":0,"index":3891},{"krate":0,"index":3892},{"krate":0,"index":3893},{"krate":0,"index":3894},{"krate":0,"index":3895},{"krate":0,"index":3896},{"krate":0,"index":3897},{"krate":0,"index":3898},{"krate":0,"index":3899},{"krate":0,"index":3900},{"krate":0,"index":3901},{"krate":0,"index":3902},{"krate":0,"index":3903},{"krate":0,"index":3904},{"krate":0,"index":3905},{"krate":0,"index":3906},{"krate":0,"index":3907},{"krate":0,"index":3908},{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3911},{"krate":0,"index":3912},{"krate":0,"index":3913},{"krate":0,"index":3914},{"krate":0,"index":3915},{"krate":0,"index":3916},{"krate":0,"index":3917},{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3920},{"krate":0,"index":3921},{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3924},{"krate":0,"index":3925},{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3928},{"krate":0,"index":3929},{"krate":0,"index":3930},{"krate":0,"index":3931},{"krate":0,"index":3932},{"krate":0,"index":3933},{"krate":0,"index":3934},{"krate":0,"index":3936},{"krate":0,"index":40},{"krate":0,"index":3969},{"krate":0,"index":3993},{"krate":0,"index":3991},{"krate":0,"index":3990},{"krate":0,"index":3986},{"krate":0,"index":3987},{"krate":0,"index":3983},{"krate":0,"index":3984},{"krate":0,"index":3980},{"krate":0,"index":3974},{"krate":0,"index":3972},{"krate":0,"index":3964},{"krate":0,"index":3965},{"krate":0,"index":3967},{"krate":0,"index":4003},{"krate":0,"index":4027},{"krate":0,"index":4025},{"krate":0,"index":4024},{"krate":0,"index":4020},{"krate":0,"index":4021},{"krate":0,"index":4017},{"krate":0,"index":4018},{"krate":0,"index":4014},{"krate":0,"index":4008},{"krate":0,"index":4006},{"krate":0,"index":3995},{"krate":0,"index":3996},{"krate":0,"index":3997},{"krate":0,"index":3998},{"krate":0,"index":3999},{"krate":0,"index":4001},{"krate":0,"index":4040},{"krate":0,"index":4064},{"krate":0,"index":4062},{"krate":0,"index":4061},{"krate":0,"index":4057},{"krate":0,"index":4058},{"krate":0,"index":4054},{"krate":0,"index":4055},{"krate":0,"index":4051},{"krate":0,"index":4045},{"krate":0,"index":4043},{"krate":0,"index":4029},{"krate":0,"index":4030},{"krate":0,"index":4031},{"krate":0,"index":4032},{"krate":0,"index":4033},{"krate":0,"index":4034},{"krate":0,"index":4035},{"krate":0,"index":4036},{"krate":0,"index":4038},{"krate":0,"index":4074},{"krate":0,"index":4098},{"krate":0,"index":4096},{"krate":0,"index":4095},{"krate":0,"index":4091},{"krate":0,"index":4092},{"krate":0,"index":4088},{"krate":0,"index":4089},{"krate":0,"index":4085},{"krate":0,"index":4079},{"krate":0,"index":4077},{"krate":0,"index":4066},{"krate":0,"index":4067},{"krate":0,"index":4068},{"krate":0,"index":4069},{"krate":0,"index":4070},{"krate":0,"index":4072},{"krate":0,"index":4106},{"krate":0,"index":4130},{"krate":0,"index":4128},{"krate":0,"index":4127},{"krate":0,"index":4123},{"krate":0,"index":4124},{"krate":0,"index":4120},{"krate":0,"index":4121},{"krate":0,"index":4117},{"krate":0,"index":4111},{"krate":0,"index":4109},{"krate":0,"index":4100},{"krate":0,"index":4101},{"krate":0,"index":4102},{"krate":0,"index":4104},{"krate":0,"index":4138},{"krate":0,"index":4162},{"krate":0,"index":4160},{"krate":0,"index":4159},{"krate":0,"index":4155},{"krate":0,"index":4156},{"krate":0,"index":4152},{"krate":0,"index":4153},{"krate":0,"index":4149},{"krate":0,"index":4143},{"krate":0,"index":4141},{"krate":0,"index":4132},{"krate":0,"index":4133},{"krate":0,"index":4134},{"krate":0,"index":4136},{"krate":0,"index":4175},{"krate":0,"index":4199},{"krate":0,"index":4197},{"krate":0,"index":4196},{"krate":0,"index":4192},{"krate":0,"index":4193},{"krate":0,"index":4189},{"krate":0,"index":4190},{"krate":0,"index":4186},{"krate":0,"index":4180},{"krate":0,"index":4178},{"krate":0,"index":4164},{"krate":0,"index":4165},{"krate":0,"index":4166},{"krate":0,"index":4167},{"krate":0,"index":4168},{"krate":0,"index":4169},{"krate":0,"index":4170},{"krate":0,"index":4171},{"krate":0,"index":4173},{"krate":0,"index":4208},{"krate":0,"index":4232},{"krate":0,"index":4230},{"krate":0,"index":4229},{"krate":0,"index":4225},{"krate":0,"index":4226},{"krate":0,"index":4222},{"krate":0,"index":4223},{"krate":0,"index":4219},{"krate":0,"index":4213},{"krate":0,"index":4211},{"krate":0,"index":4201},{"krate":0,"index":4202},{"krate":0,"index":4203},{"krate":0,"index":4204},{"krate":0,"index":4206},{"krate":0,"index":4250},{"krate":0,"index":4274},{"krate":0,"index":4272},{"krate":0,"index":4271},{"krate":0,"index":4267},{"krate":0,"index":4268},{"krate":0,"index":4264},{"krate":0,"index":4265},{"krate":0,"index":4261},{"krate":0,"index":4255},{"krate":0,"index":4253},{"krate":0,"index":4234},{"krate":0,"index":4235},{"krate":0,"index":4236},{"krate":0,"index":4237},{"krate":0,"index":4238},{"krate":0,"index":4239},{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242},{"krate":0,"index":4243},{"krate":0,"index":4244},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4248},{"krate":0,"index":4286},{"krate":0,"index":4310},{"krate":0,"index":4308},{"krate":0,"index":4307},{"krate":0,"index":4303},{"krate":0,"index":4304},{"krate":0,"index":4300},{"krate":0,"index":4301},{"krate":0,"index":4297},{"krate":0,"index":4291},{"krate":0,"index":4289},{"krate":0,"index":4276},{"krate":0,"index":4277},{"krate":0,"index":4278},{"krate":0,"index":4279},{"krate":0,"index":4280},{"krate":0,"index":4281},{"krate":0,"index":4282},{"krate":0,"index":4284},{"krate":0,"index":4323},{"krate":0,"index":4347},{"krate":0,"index":4345},{"krate":0,"index":4344},{"krate":0,"index":4340},{"krate":0,"index":4341},{"krate":0,"index":4337},{"krate":0,"index":4338},{"krate":0,"index":4334},{"krate":0,"index":4328},{"krate":0,"index":4326},{"krate":0,"index":4312},{"krate":0,"index":4313},{"krate":0,"index":4314},{"krate":0,"index":4315},{"krate":0,"index":4316},{"krate":0,"index":4317},{"krate":0,"index":4318},{"krate":0,"index":4319},{"krate":0,"index":4321},{"krate":0,"index":4367},{"krate":0,"index":4391},{"krate":0,"index":4389},{"krate":0,"index":4388},{"krate":0,"index":4384},{"krate":0,"index":4385},{"krate":0,"index":4381},{"krate":0,"index":4382},{"krate":0,"index":4378},{"krate":0,"index":4372},{"krate":0,"index":4370},{"krate":0,"index":4349},{"krate":0,"index":4350},{"krate":0,"index":4351},{"krate":0,"index":4352},{"krate":0,"index":4353},{"krate":0,"index":4354},{"krate":0,"index":4355},{"krate":0,"index":4356},{"krate":0,"index":4357},{"krate":0,"index":4358},{"krate":0,"index":4359},{"krate":0,"index":4360},{"krate":0,"index":4361},{"krate":0,"index":4362},{"krate":0,"index":4363},{"krate":0,"index":4365},{"krate":0,"index":4405},{"krate":0,"index":4429},{"krate":0,"index":4427},{"krate":0,"index":4426},{"krate":0,"index":4422},{"krate":0,"index":4423},{"krate":0,"index":4419},{"krate":0,"index":4420},{"krate":0,"index":4416},{"krate":0,"index":4410},{"krate":0,"index":4408},{"krate":0,"index":4393},{"krate":0,"index":4394},{"krate":0,"index":4395},{"krate":0,"index":4396},{"krate":0,"index":4397},{"krate":0,"index":4398},{"krate":0,"index":4399},{"krate":0,"index":4400},{"krate":0,"index":4401},{"krate":0,"index":4403},{"krate":0,"index":4611},{"krate":0,"index":4635},{"krate":0,"index":4633},{"krate":0,"index":4632},{"krate":0,"index":4628},{"krate":0,"index":4629},{"krate":0,"index":4625},{"krate":0,"index":4626},{"krate":0,"index":4622},{"krate":0,"index":4616},{"krate":0,"index":4614},{"krate":0,"index":4431},{"krate":0,"index":4432},{"krate":0,"index":4433},{"krate":0,"index":4434},{"krate":0,"index":4435},{"krate":0,"index":4436},{"krate":0,"index":4437},{"krate":0,"index":4438},{"krate":0,"index":4439},{"krate":0,"index":4440},{"krate":0,"index":4441},{"krate":0,"index":4442},{"krate":0,"index":4443},{"krate":0,"index":4444},{"krate":0,"index":4445},{"krate":0,"index":4446},{"krate":0,"index":4447},{"krate":0,"index":4448},{"krate":0,"index":4449},{"krate":0,"index":4450},{"krate":0,"index":4451},{"krate":0,"index":4452},{"krate":0,"index":4453},{"krate":0,"index":4454},{"krate":0,"index":4455},{"krate":0,"index":4456},{"krate":0,"index":4457},{"krate":0,"index":4458},{"krate":0,"index":4459},{"krate":0,"index":4460},{"krate":0,"index":4461},{"krate":0,"index":4462},{"krate":0,"index":4463},{"krate":0,"index":4464},{"krate":0,"index":4465},{"krate":0,"index":4466},{"krate":0,"index":4467},{"krate":0,"index":4468},{"krate":0,"index":4469},{"krate":0,"index":4470},{"krate":0,"index":4471},{"krate":0,"index":4472},{"krate":0,"index":4473},{"krate":0,"index":4474},{"krate":0,"index":4475},{"krate":0,"index":4476},{"krate":0,"index":4477},{"krate":0,"index":4478},{"krate":0,"index":4479},{"krate":0,"index":4480},{"krate":0,"index":4481},{"krate":0,"index":4482},{"krate":0,"index":4483},{"krate":0,"index":4484},{"krate":0,"index":4485},{"krate":0,"index":4486},{"krate":0,"index":4487},{"krate":0,"index":4488},{"krate":0,"index":4489},{"krate":0,"index":4490},{"krate":0,"index":4491},{"krate":0,"index":4492},{"krate":0,"index":4493},{"krate":0,"index":4494},{"krate":0,"index":4495},{"krate":0,"index":4496},{"krate":0,"index":4497},{"krate":0,"index":4498},{"krate":0,"index":4499},{"krate":0,"index":4500},{"krate":0,"index":4501},{"krate":0,"index":4502},{"krate":0,"index":4503},{"krate":0,"index":4504},{"krate":0,"index":4505},{"krate":0,"index":4506},{"krate":0,"index":4507},{"krate":0,"index":4508},{"krate":0,"index":4509},{"krate":0,"index":4510},{"krate":0,"index":4511},{"krate":0,"index":4512},{"krate":0,"index":4513},{"krate":0,"index":4514},{"krate":0,"index":4515},{"krate":0,"index":4516},{"krate":0,"index":4517},{"krate":0,"index":4518},{"krate":0,"index":4519},{"krate":0,"index":4520},{"krate":0,"index":4521},{"krate":0,"index":4522},{"krate":0,"index":4523},{"krate":0,"index":4524},{"krate":0,"index":4525},{"krate":0,"index":4526},{"krate":0,"index":4527},{"krate":0,"index":4528},{"krate":0,"index":4529},{"krate":0,"index":4530},{"krate":0,"index":4531},{"krate":0,"index":4532},{"krate":0,"index":4533},{"krate":0,"index":4534},{"krate":0,"index":4535},{"krate":0,"index":4536},{"krate":0,"index":4537},{"krate":0,"index":4538},{"krate":0,"index":4539},{"krate":0,"index":4540},{"krate":0,"index":4541},{"krate":0,"index":4542},{"krate":0,"index":4543},{"krate":0,"index":4544},{"krate":0,"index":4545},{"krate":0,"index":4546},{"krate":0,"index":4547},{"krate":0,"index":4548},{"krate":0,"index":4549},{"krate":0,"index":4550},{"krate":0,"index":4551},{"krate":0,"index":4552},{"krate":0,"index":4553},{"krate":0,"index":4554},{"krate":0,"index":4555},{"krate":0,"index":4556},{"krate":0,"index":4557},{"krate":0,"index":4558},{"krate":0,"index":4559},{"krate":0,"index":4560},{"krate":0,"index":4561},{"krate":0,"index":4562},{"krate":0,"index":4563},{"krate":0,"index":4564},{"krate":0,"index":4565},{"krate":0,"index":4566},{"krate":0,"index":4567},{"krate":0,"index":4568},{"krate":0,"index":4569},{"krate":0,"index":4570},{"krate":0,"index":4571},{"krate":0,"index":4572},{"krate":0,"index":4573},{"krate":0,"index":4574},{"krate":0,"index":4575},{"krate":0,"index":4576},{"krate":0,"index":4577},{"krate":0,"index":4578},{"krate":0,"index":4579},{"krate":0,"index":4580},{"krate":0,"index":4581},{"krate":0,"index":4582},{"krate":0,"index":4583},{"krate":0,"index":4584},{"krate":0,"index":4585},{"krate":0,"index":4586},{"krate":0,"index":4587},{"krate":0,"index":4588},{"krate":0,"index":4589},{"krate":0,"index":4590},{"krate":0,"index":4591},{"krate":0,"index":4592},{"krate":0,"index":4593},{"krate":0,"index":4594},{"krate":0,"index":4595},{"krate":0,"index":4596},{"krate":0,"index":4597},{"krate":0,"index":4598},{"krate":0,"index":4599},{"krate":0,"index":4600},{"krate":0,"index":4601},{"krate":0,"index":4602},{"krate":0,"index":4603},{"krate":0,"index":4604},{"krate":0,"index":4605},{"krate":0,"index":4606},{"krate":0,"index":4607},{"krate":0,"index":4609},{"krate":0,"index":4657},{"krate":0,"index":4681},{"krate":0,"index":4679},{"krate":0,"index":4678},{"krate":0,"index":4674},{"krate":0,"index":4675},{"krate":0,"index":4671},{"krate":0,"index":4672},{"krate":0,"index":4668},{"krate":0,"index":4662},{"krate":0,"index":4660},{"krate":0,"index":4637},{"krate":0,"index":4638},{"krate":0,"index":4639},{"krate":0,"index":4640},{"krate":0,"index":4641},{"krate":0,"index":4642},{"krate":0,"index":4643},{"krate":0,"index":4644},{"krate":0,"index":4645},{"krate":0,"index":4646},{"krate":0,"index":4647},{"krate":0,"index":4648},{"krate":0,"index":4649},{"krate":0,"index":4650},{"krate":0,"index":4651},{"krate":0,"index":4652},{"krate":0,"index":4653},{"krate":0,"index":4655},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" Constant definitions.","sig":null,"attributes":[{"value":"/ Constant definitions.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":20071,"byte_end":20096,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":20097,"byte_end":20100,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The DWARF spec's `DW_AT_*` type is represented as `struct DwAt(u16)`,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":20101,"byte_end":20174,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ `DW_FORM_*` as `DwForm(u16)`, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":20175,"byte_end":20213,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":20214,"byte_end":20217,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ There are also exported const definitions for each constant.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":20218,"byte_end":20282,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"allow(non_upper_case_globals)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":20284,"byte_end":20317,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"allow(missing_docs)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":20318,"byte_end":20341,"line_start":26,"line_end":26,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":2995},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22266,"byte_end":22270,"line_start":97,"line_end":97,"column_start":1,"column_end":5},"name":"DwUt","qualname":"::constants::DwUt","value":"","parent":null,"children":[],"decl_id":null,"docs":" The unit type field in a unit header.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2983},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22281,"byte_end":22294,"line_start":98,"line_end":98,"column_start":5,"column_end":18},"name":"DW_UT_compile","qualname":"::constants::DW_UT_compile","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2984},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22307,"byte_end":22317,"line_start":99,"line_end":99,"column_start":5,"column_end":15},"name":"DW_UT_type","qualname":"::constants::DW_UT_type","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2985},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22330,"byte_end":22343,"line_start":100,"line_end":100,"column_start":5,"column_end":18},"name":"DW_UT_partial","qualname":"::constants::DW_UT_partial","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2986},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22356,"byte_end":22370,"line_start":101,"line_end":101,"column_start":5,"column_end":19},"name":"DW_UT_skeleton","qualname":"::constants::DW_UT_skeleton","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2987},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22383,"byte_end":22402,"line_start":102,"line_end":102,"column_start":5,"column_end":24},"name":"DW_UT_split_compile","qualname":"::constants::DW_UT_split_compile","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2988},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22415,"byte_end":22431,"line_start":103,"line_end":103,"column_start":5,"column_end":21},"name":"DW_UT_split_type","qualname":"::constants::DW_UT_split_type","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2989},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22444,"byte_end":22457,"line_start":104,"line_end":104,"column_start":5,"column_end":18},"name":"DW_UT_lo_user","qualname":"::constants::DW_UT_lo_user","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2990},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22470,"byte_end":22483,"line_start":105,"line_end":105,"column_start":5,"column_end":18},"name":"DW_UT_hi_user","qualname":"::constants::DW_UT_hi_user","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3057},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22880,"byte_end":22885,"line_start":116,"line_end":116,"column_start":1,"column_end":6},"name":"DwCfa","qualname":"::constants::DwCfa","value":"","parent":null,"children":[],"decl_id":null,"docs":" The opcode for a call frame instruction.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3021},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22896,"byte_end":22914,"line_start":117,"line_end":117,"column_start":5,"column_end":23},"name":"DW_CFA_advance_loc","qualname":"::constants::DW_CFA_advance_loc","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3022},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22932,"byte_end":22945,"line_start":118,"line_end":118,"column_start":5,"column_end":18},"name":"DW_CFA_offset","qualname":"::constants::DW_CFA_offset","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3023},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22963,"byte_end":22977,"line_start":119,"line_end":119,"column_start":5,"column_end":19},"name":"DW_CFA_restore","qualname":"::constants::DW_CFA_restore","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3024},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":22995,"byte_end":23005,"line_start":120,"line_end":120,"column_start":5,"column_end":15},"name":"DW_CFA_nop","qualname":"::constants::DW_CFA_nop","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3025},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23015,"byte_end":23029,"line_start":121,"line_end":121,"column_start":5,"column_end":19},"name":"DW_CFA_set_loc","qualname":"::constants::DW_CFA_set_loc","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3026},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23042,"byte_end":23061,"line_start":122,"line_end":122,"column_start":5,"column_end":24},"name":"DW_CFA_advance_loc1","qualname":"::constants::DW_CFA_advance_loc1","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3027},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23074,"byte_end":23093,"line_start":123,"line_end":123,"column_start":5,"column_end":24},"name":"DW_CFA_advance_loc2","qualname":"::constants::DW_CFA_advance_loc2","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3028},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23106,"byte_end":23125,"line_start":124,"line_end":124,"column_start":5,"column_end":24},"name":"DW_CFA_advance_loc4","qualname":"::constants::DW_CFA_advance_loc4","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3029},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23138,"byte_end":23160,"line_start":125,"line_end":125,"column_start":5,"column_end":27},"name":"DW_CFA_offset_extended","qualname":"::constants::DW_CFA_offset_extended","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3030},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23173,"byte_end":23196,"line_start":126,"line_end":126,"column_start":5,"column_end":28},"name":"DW_CFA_restore_extended","qualname":"::constants::DW_CFA_restore_extended","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3031},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23209,"byte_end":23225,"line_start":127,"line_end":127,"column_start":5,"column_end":21},"name":"DW_CFA_undefined","qualname":"::constants::DW_CFA_undefined","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3032},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23238,"byte_end":23255,"line_start":128,"line_end":128,"column_start":5,"column_end":22},"name":"DW_CFA_same_value","qualname":"::constants::DW_CFA_same_value","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3033},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23268,"byte_end":23283,"line_start":129,"line_end":129,"column_start":5,"column_end":20},"name":"DW_CFA_register","qualname":"::constants::DW_CFA_register","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3034},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23296,"byte_end":23317,"line_start":130,"line_end":130,"column_start":5,"column_end":26},"name":"DW_CFA_remember_state","qualname":"::constants::DW_CFA_remember_state","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3035},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23330,"byte_end":23350,"line_start":131,"line_end":131,"column_start":5,"column_end":25},"name":"DW_CFA_restore_state","qualname":"::constants::DW_CFA_restore_state","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3036},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23363,"byte_end":23377,"line_start":132,"line_end":132,"column_start":5,"column_end":19},"name":"DW_CFA_def_cfa","qualname":"::constants::DW_CFA_def_cfa","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3037},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23390,"byte_end":23413,"line_start":133,"line_end":133,"column_start":5,"column_end":28},"name":"DW_CFA_def_cfa_register","qualname":"::constants::DW_CFA_def_cfa_register","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3038},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23426,"byte_end":23447,"line_start":134,"line_end":134,"column_start":5,"column_end":26},"name":"DW_CFA_def_cfa_offset","qualname":"::constants::DW_CFA_def_cfa_offset","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3039},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23460,"byte_end":23485,"line_start":135,"line_end":135,"column_start":5,"column_end":30},"name":"DW_CFA_def_cfa_expression","qualname":"::constants::DW_CFA_def_cfa_expression","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3040},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23498,"byte_end":23515,"line_start":136,"line_end":136,"column_start":5,"column_end":22},"name":"DW_CFA_expression","qualname":"::constants::DW_CFA_expression","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3041},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23528,"byte_end":23553,"line_start":137,"line_end":137,"column_start":5,"column_end":30},"name":"DW_CFA_offset_extended_sf","qualname":"::constants::DW_CFA_offset_extended_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3042},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23566,"byte_end":23583,"line_start":138,"line_end":138,"column_start":5,"column_end":22},"name":"DW_CFA_def_cfa_sf","qualname":"::constants::DW_CFA_def_cfa_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3043},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23596,"byte_end":23620,"line_start":139,"line_end":139,"column_start":5,"column_end":29},"name":"DW_CFA_def_cfa_offset_sf","qualname":"::constants::DW_CFA_def_cfa_offset_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3044},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23633,"byte_end":23650,"line_start":140,"line_end":140,"column_start":5,"column_end":22},"name":"DW_CFA_val_offset","qualname":"::constants::DW_CFA_val_offset","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3045},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23663,"byte_end":23683,"line_start":141,"line_end":141,"column_start":5,"column_end":25},"name":"DW_CFA_val_offset_sf","qualname":"::constants::DW_CFA_val_offset_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3046},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23696,"byte_end":23717,"line_start":142,"line_end":142,"column_start":5,"column_end":26},"name":"DW_CFA_val_expression","qualname":"::constants::DW_CFA_val_expression","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3047},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23731,"byte_end":23745,"line_start":144,"line_end":144,"column_start":5,"column_end":19},"name":"DW_CFA_lo_user","qualname":"::constants::DW_CFA_lo_user","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3048},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23758,"byte_end":23772,"line_start":145,"line_end":145,"column_start":5,"column_end":19},"name":"DW_CFA_hi_user","qualname":"::constants::DW_CFA_hi_user","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3049},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23786,"byte_end":23810,"line_start":147,"line_end":147,"column_start":5,"column_end":29},"name":"DW_CFA_MIPS_advance_loc8","qualname":"::constants::DW_CFA_MIPS_advance_loc8","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3050},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23823,"byte_end":23845,"line_start":148,"line_end":148,"column_start":5,"column_end":27},"name":"DW_CFA_GNU_window_save","qualname":"::constants::DW_CFA_GNU_window_save","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3051},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23858,"byte_end":23878,"line_start":149,"line_end":149,"column_start":5,"column_end":25},"name":"DW_CFA_GNU_args_size","qualname":"::constants::DW_CFA_GNU_args_size","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3052},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":23891,"byte_end":23926,"line_start":150,"line_end":150,"column_start":5,"column_end":40},"name":"DW_CFA_GNU_negative_offset_extended","qualname":"::constants::DW_CFA_GNU_negative_offset_extended","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3089},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24041,"byte_end":24051,"line_start":157,"line_end":157,"column_start":1,"column_end":11},"name":"DwChildren","qualname":"::constants::DwChildren","value":"","parent":null,"children":[],"decl_id":null,"docs":" The child determination encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3083},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24062,"byte_end":24076,"line_start":158,"line_end":158,"column_start":5,"column_end":19},"name":"DW_CHILDREN_no","qualname":"::constants::DW_CHILDREN_no","value":"DwChildren","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3084},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24086,"byte_end":24101,"line_start":159,"line_end":159,"column_start":5,"column_end":20},"name":"DW_CHILDREN_yes","qualname":"::constants::DW_CHILDREN_yes","value":"DwChildren","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3232},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24197,"byte_end":24202,"line_start":166,"line_end":166,"column_start":1,"column_end":6},"name":"DwTag","qualname":"::constants::DwTag","value":"","parent":null,"children":[],"decl_id":null,"docs":" The tag encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3115},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24214,"byte_end":24225,"line_start":167,"line_end":167,"column_start":5,"column_end":16},"name":"DW_TAG_null","qualname":"::constants::DW_TAG_null","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3116},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24239,"byte_end":24256,"line_start":169,"line_end":169,"column_start":5,"column_end":22},"name":"DW_TAG_array_type","qualname":"::constants::DW_TAG_array_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3117},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24269,"byte_end":24286,"line_start":170,"line_end":170,"column_start":5,"column_end":22},"name":"DW_TAG_class_type","qualname":"::constants::DW_TAG_class_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3118},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24299,"byte_end":24317,"line_start":171,"line_end":171,"column_start":5,"column_end":23},"name":"DW_TAG_entry_point","qualname":"::constants::DW_TAG_entry_point","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3119},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24330,"byte_end":24353,"line_start":172,"line_end":172,"column_start":5,"column_end":28},"name":"DW_TAG_enumeration_type","qualname":"::constants::DW_TAG_enumeration_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3120},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24366,"byte_end":24389,"line_start":173,"line_end":173,"column_start":5,"column_end":28},"name":"DW_TAG_formal_parameter","qualname":"::constants::DW_TAG_formal_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3121},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24402,"byte_end":24429,"line_start":174,"line_end":174,"column_start":5,"column_end":32},"name":"DW_TAG_imported_declaration","qualname":"::constants::DW_TAG_imported_declaration","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3122},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24442,"byte_end":24454,"line_start":175,"line_end":175,"column_start":5,"column_end":17},"name":"DW_TAG_label","qualname":"::constants::DW_TAG_label","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3123},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24467,"byte_end":24487,"line_start":176,"line_end":176,"column_start":5,"column_end":25},"name":"DW_TAG_lexical_block","qualname":"::constants::DW_TAG_lexical_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3124},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24500,"byte_end":24513,"line_start":177,"line_end":177,"column_start":5,"column_end":18},"name":"DW_TAG_member","qualname":"::constants::DW_TAG_member","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3125},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24526,"byte_end":24545,"line_start":178,"line_end":178,"column_start":5,"column_end":24},"name":"DW_TAG_pointer_type","qualname":"::constants::DW_TAG_pointer_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3126},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24558,"byte_end":24579,"line_start":179,"line_end":179,"column_start":5,"column_end":26},"name":"DW_TAG_reference_type","qualname":"::constants::DW_TAG_reference_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3127},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24592,"byte_end":24611,"line_start":180,"line_end":180,"column_start":5,"column_end":24},"name":"DW_TAG_compile_unit","qualname":"::constants::DW_TAG_compile_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3128},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24624,"byte_end":24642,"line_start":181,"line_end":181,"column_start":5,"column_end":23},"name":"DW_TAG_string_type","qualname":"::constants::DW_TAG_string_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3129},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24655,"byte_end":24676,"line_start":182,"line_end":182,"column_start":5,"column_end":26},"name":"DW_TAG_structure_type","qualname":"::constants::DW_TAG_structure_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3130},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24689,"byte_end":24711,"line_start":183,"line_end":183,"column_start":5,"column_end":27},"name":"DW_TAG_subroutine_type","qualname":"::constants::DW_TAG_subroutine_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3131},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24724,"byte_end":24738,"line_start":184,"line_end":184,"column_start":5,"column_end":19},"name":"DW_TAG_typedef","qualname":"::constants::DW_TAG_typedef","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3132},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24751,"byte_end":24768,"line_start":185,"line_end":185,"column_start":5,"column_end":22},"name":"DW_TAG_union_type","qualname":"::constants::DW_TAG_union_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3133},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24781,"byte_end":24810,"line_start":186,"line_end":186,"column_start":5,"column_end":34},"name":"DW_TAG_unspecified_parameters","qualname":"::constants::DW_TAG_unspecified_parameters","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3134},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24823,"byte_end":24837,"line_start":187,"line_end":187,"column_start":5,"column_end":19},"name":"DW_TAG_variant","qualname":"::constants::DW_TAG_variant","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3135},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24850,"byte_end":24869,"line_start":188,"line_end":188,"column_start":5,"column_end":24},"name":"DW_TAG_common_block","qualname":"::constants::DW_TAG_common_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3136},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24882,"byte_end":24905,"line_start":189,"line_end":189,"column_start":5,"column_end":28},"name":"DW_TAG_common_inclusion","qualname":"::constants::DW_TAG_common_inclusion","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3137},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24918,"byte_end":24936,"line_start":190,"line_end":190,"column_start":5,"column_end":23},"name":"DW_TAG_inheritance","qualname":"::constants::DW_TAG_inheritance","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3138},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24949,"byte_end":24974,"line_start":191,"line_end":191,"column_start":5,"column_end":30},"name":"DW_TAG_inlined_subroutine","qualname":"::constants::DW_TAG_inlined_subroutine","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3139},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":24987,"byte_end":25000,"line_start":192,"line_end":192,"column_start":5,"column_end":18},"name":"DW_TAG_module","qualname":"::constants::DW_TAG_module","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3140},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25013,"byte_end":25038,"line_start":193,"line_end":193,"column_start":5,"column_end":30},"name":"DW_TAG_ptr_to_member_type","qualname":"::constants::DW_TAG_ptr_to_member_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3141},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25051,"byte_end":25066,"line_start":194,"line_end":194,"column_start":5,"column_end":20},"name":"DW_TAG_set_type","qualname":"::constants::DW_TAG_set_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3142},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25079,"byte_end":25099,"line_start":195,"line_end":195,"column_start":5,"column_end":25},"name":"DW_TAG_subrange_type","qualname":"::constants::DW_TAG_subrange_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3143},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25112,"byte_end":25128,"line_start":196,"line_end":196,"column_start":5,"column_end":21},"name":"DW_TAG_with_stmt","qualname":"::constants::DW_TAG_with_stmt","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3144},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25141,"byte_end":25166,"line_start":197,"line_end":197,"column_start":5,"column_end":30},"name":"DW_TAG_access_declaration","qualname":"::constants::DW_TAG_access_declaration","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3145},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25179,"byte_end":25195,"line_start":198,"line_end":198,"column_start":5,"column_end":21},"name":"DW_TAG_base_type","qualname":"::constants::DW_TAG_base_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3146},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25208,"byte_end":25226,"line_start":199,"line_end":199,"column_start":5,"column_end":23},"name":"DW_TAG_catch_block","qualname":"::constants::DW_TAG_catch_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3147},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25239,"byte_end":25256,"line_start":200,"line_end":200,"column_start":5,"column_end":22},"name":"DW_TAG_const_type","qualname":"::constants::DW_TAG_const_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3148},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25269,"byte_end":25284,"line_start":201,"line_end":201,"column_start":5,"column_end":20},"name":"DW_TAG_constant","qualname":"::constants::DW_TAG_constant","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3149},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25297,"byte_end":25314,"line_start":202,"line_end":202,"column_start":5,"column_end":22},"name":"DW_TAG_enumerator","qualname":"::constants::DW_TAG_enumerator","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3150},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25327,"byte_end":25343,"line_start":203,"line_end":203,"column_start":5,"column_end":21},"name":"DW_TAG_file_type","qualname":"::constants::DW_TAG_file_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3151},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25356,"byte_end":25369,"line_start":204,"line_end":204,"column_start":5,"column_end":18},"name":"DW_TAG_friend","qualname":"::constants::DW_TAG_friend","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3152},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25382,"byte_end":25397,"line_start":205,"line_end":205,"column_start":5,"column_end":20},"name":"DW_TAG_namelist","qualname":"::constants::DW_TAG_namelist","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3153},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25410,"byte_end":25430,"line_start":206,"line_end":206,"column_start":5,"column_end":25},"name":"DW_TAG_namelist_item","qualname":"::constants::DW_TAG_namelist_item","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3154},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25443,"byte_end":25461,"line_start":207,"line_end":207,"column_start":5,"column_end":23},"name":"DW_TAG_packed_type","qualname":"::constants::DW_TAG_packed_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3155},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25474,"byte_end":25491,"line_start":208,"line_end":208,"column_start":5,"column_end":22},"name":"DW_TAG_subprogram","qualname":"::constants::DW_TAG_subprogram","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3156},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25504,"byte_end":25534,"line_start":209,"line_end":209,"column_start":5,"column_end":35},"name":"DW_TAG_template_type_parameter","qualname":"::constants::DW_TAG_template_type_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3157},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25547,"byte_end":25578,"line_start":210,"line_end":210,"column_start":5,"column_end":36},"name":"DW_TAG_template_value_parameter","qualname":"::constants::DW_TAG_template_value_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3158},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25591,"byte_end":25609,"line_start":211,"line_end":211,"column_start":5,"column_end":23},"name":"DW_TAG_thrown_type","qualname":"::constants::DW_TAG_thrown_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3159},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25622,"byte_end":25638,"line_start":212,"line_end":212,"column_start":5,"column_end":21},"name":"DW_TAG_try_block","qualname":"::constants::DW_TAG_try_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3160},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25651,"byte_end":25670,"line_start":213,"line_end":213,"column_start":5,"column_end":24},"name":"DW_TAG_variant_part","qualname":"::constants::DW_TAG_variant_part","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3161},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25683,"byte_end":25698,"line_start":214,"line_end":214,"column_start":5,"column_end":20},"name":"DW_TAG_variable","qualname":"::constants::DW_TAG_variable","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3162},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25711,"byte_end":25731,"line_start":215,"line_end":215,"column_start":5,"column_end":25},"name":"DW_TAG_volatile_type","qualname":"::constants::DW_TAG_volatile_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3163},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25757,"byte_end":25779,"line_start":218,"line_end":218,"column_start":5,"column_end":27},"name":"DW_TAG_dwarf_procedure","qualname":"::constants::DW_TAG_dwarf_procedure","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3164},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25792,"byte_end":25812,"line_start":219,"line_end":219,"column_start":5,"column_end":25},"name":"DW_TAG_restrict_type","qualname":"::constants::DW_TAG_restrict_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3165},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25825,"byte_end":25846,"line_start":220,"line_end":220,"column_start":5,"column_end":26},"name":"DW_TAG_interface_type","qualname":"::constants::DW_TAG_interface_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3166},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25859,"byte_end":25875,"line_start":221,"line_end":221,"column_start":5,"column_end":21},"name":"DW_TAG_namespace","qualname":"::constants::DW_TAG_namespace","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3167},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25888,"byte_end":25910,"line_start":222,"line_end":222,"column_start":5,"column_end":27},"name":"DW_TAG_imported_module","qualname":"::constants::DW_TAG_imported_module","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3168},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25923,"byte_end":25946,"line_start":223,"line_end":223,"column_start":5,"column_end":28},"name":"DW_TAG_unspecified_type","qualname":"::constants::DW_TAG_unspecified_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3169},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25959,"byte_end":25978,"line_start":224,"line_end":224,"column_start":5,"column_end":24},"name":"DW_TAG_partial_unit","qualname":"::constants::DW_TAG_partial_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3170},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":25991,"byte_end":26011,"line_start":225,"line_end":225,"column_start":5,"column_end":25},"name":"DW_TAG_imported_unit","qualname":"::constants::DW_TAG_imported_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3171},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26024,"byte_end":26040,"line_start":226,"line_end":226,"column_start":5,"column_end":21},"name":"DW_TAG_condition","qualname":"::constants::DW_TAG_condition","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3172},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26053,"byte_end":26071,"line_start":227,"line_end":227,"column_start":5,"column_end":23},"name":"DW_TAG_shared_type","qualname":"::constants::DW_TAG_shared_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3173},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26097,"byte_end":26113,"line_start":230,"line_end":230,"column_start":5,"column_end":21},"name":"DW_TAG_type_unit","qualname":"::constants::DW_TAG_type_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3174},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26126,"byte_end":26154,"line_start":231,"line_end":231,"column_start":5,"column_end":33},"name":"DW_TAG_rvalue_reference_type","qualname":"::constants::DW_TAG_rvalue_reference_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3175},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26167,"byte_end":26188,"line_start":232,"line_end":232,"column_start":5,"column_end":26},"name":"DW_TAG_template_alias","qualname":"::constants::DW_TAG_template_alias","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3176},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26214,"byte_end":26233,"line_start":235,"line_end":235,"column_start":5,"column_end":24},"name":"DW_TAG_coarray_type","qualname":"::constants::DW_TAG_coarray_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3177},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26246,"byte_end":26269,"line_start":236,"line_end":236,"column_start":5,"column_end":28},"name":"DW_TAG_generic_subrange","qualname":"::constants::DW_TAG_generic_subrange","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3178},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26282,"byte_end":26301,"line_start":237,"line_end":237,"column_start":5,"column_end":24},"name":"DW_TAG_dynamic_type","qualname":"::constants::DW_TAG_dynamic_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3179},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26314,"byte_end":26332,"line_start":238,"line_end":238,"column_start":5,"column_end":23},"name":"DW_TAG_atomic_type","qualname":"::constants::DW_TAG_atomic_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3180},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26345,"byte_end":26361,"line_start":239,"line_end":239,"column_start":5,"column_end":21},"name":"DW_TAG_call_site","qualname":"::constants::DW_TAG_call_site","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3181},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26374,"byte_end":26400,"line_start":240,"line_end":240,"column_start":5,"column_end":31},"name":"DW_TAG_call_site_parameter","qualname":"::constants::DW_TAG_call_site_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3182},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26413,"byte_end":26433,"line_start":241,"line_end":241,"column_start":5,"column_end":25},"name":"DW_TAG_skeleton_unit","qualname":"::constants::DW_TAG_skeleton_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3183},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26446,"byte_end":26467,"line_start":242,"line_end":242,"column_start":5,"column_end":26},"name":"DW_TAG_immutable_type","qualname":"::constants::DW_TAG_immutable_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3184},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26481,"byte_end":26495,"line_start":244,"line_end":244,"column_start":5,"column_end":19},"name":"DW_TAG_lo_user","qualname":"::constants::DW_TAG_lo_user","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3185},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26510,"byte_end":26524,"line_start":245,"line_end":245,"column_start":5,"column_end":19},"name":"DW_TAG_hi_user","qualname":"::constants::DW_TAG_hi_user","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3186},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26564,"byte_end":26580,"line_start":248,"line_end":248,"column_start":5,"column_end":21},"name":"DW_TAG_MIPS_loop","qualname":"::constants::DW_TAG_MIPS_loop","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3187},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26614,"byte_end":26640,"line_start":251,"line_end":251,"column_start":5,"column_end":31},"name":"DW_TAG_HP_array_descriptor","qualname":"::constants::DW_TAG_HP_array_descriptor","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3188},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26655,"byte_end":26676,"line_start":252,"line_end":252,"column_start":5,"column_end":26},"name":"DW_TAG_HP_Bliss_field","qualname":"::constants::DW_TAG_HP_Bliss_field","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3189},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26691,"byte_end":26716,"line_start":253,"line_end":253,"column_start":5,"column_end":30},"name":"DW_TAG_HP_Bliss_field_set","qualname":"::constants::DW_TAG_HP_Bliss_field_set","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3190},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26751,"byte_end":26770,"line_start":256,"line_end":256,"column_start":5,"column_end":24},"name":"DW_TAG_format_label","qualname":"::constants::DW_TAG_format_label","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3191},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26785,"byte_end":26809,"line_start":257,"line_end":257,"column_start":5,"column_end":29},"name":"DW_TAG_function_template","qualname":"::constants::DW_TAG_function_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3192},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26824,"byte_end":26845,"line_start":258,"line_end":258,"column_start":5,"column_end":26},"name":"DW_TAG_class_template","qualname":"::constants::DW_TAG_class_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3193},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26860,"byte_end":26876,"line_start":259,"line_end":259,"column_start":5,"column_end":21},"name":"DW_TAG_GNU_BINCL","qualname":"::constants::DW_TAG_GNU_BINCL","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3194},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26891,"byte_end":26907,"line_start":260,"line_end":260,"column_start":5,"column_end":21},"name":"DW_TAG_GNU_EINCL","qualname":"::constants::DW_TAG_GNU_EINCL","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3195},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26922,"byte_end":26956,"line_start":261,"line_end":261,"column_start":5,"column_end":39},"name":"DW_TAG_GNU_template_template_param","qualname":"::constants::DW_TAG_GNU_template_template_param","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3196},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":26971,"byte_end":27005,"line_start":262,"line_end":262,"column_start":5,"column_end":39},"name":"DW_TAG_GNU_template_parameter_pack","qualname":"::constants::DW_TAG_GNU_template_parameter_pack","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3197},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27020,"byte_end":27052,"line_start":263,"line_end":263,"column_start":5,"column_end":37},"name":"DW_TAG_GNU_formal_parameter_pack","qualname":"::constants::DW_TAG_GNU_formal_parameter_pack","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3198},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27067,"byte_end":27087,"line_start":264,"line_end":264,"column_start":5,"column_end":25},"name":"DW_TAG_GNU_call_site","qualname":"::constants::DW_TAG_GNU_call_site","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3199},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27102,"byte_end":27132,"line_start":265,"line_end":265,"column_start":5,"column_end":35},"name":"DW_TAG_GNU_call_site_parameter","qualname":"::constants::DW_TAG_GNU_call_site_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3200},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27148,"byte_end":27169,"line_start":267,"line_end":267,"column_start":5,"column_end":26},"name":"DW_TAG_APPLE_property","qualname":"::constants::DW_TAG_APPLE_property","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3201},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27204,"byte_end":27232,"line_start":270,"line_end":270,"column_start":5,"column_end":33},"name":"DW_TAG_SUN_function_template","qualname":"::constants::DW_TAG_SUN_function_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3202},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27247,"byte_end":27272,"line_start":271,"line_end":271,"column_start":5,"column_end":30},"name":"DW_TAG_SUN_class_template","qualname":"::constants::DW_TAG_SUN_class_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3203},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27287,"byte_end":27313,"line_start":272,"line_end":272,"column_start":5,"column_end":31},"name":"DW_TAG_SUN_struct_template","qualname":"::constants::DW_TAG_SUN_struct_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3204},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27328,"byte_end":27353,"line_start":273,"line_end":273,"column_start":5,"column_end":30},"name":"DW_TAG_SUN_union_template","qualname":"::constants::DW_TAG_SUN_union_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3205},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27368,"byte_end":27399,"line_start":274,"line_end":274,"column_start":5,"column_end":36},"name":"DW_TAG_SUN_indirect_inheritance","qualname":"::constants::DW_TAG_SUN_indirect_inheritance","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3206},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27414,"byte_end":27434,"line_start":275,"line_end":275,"column_start":5,"column_end":25},"name":"DW_TAG_SUN_codeflags","qualname":"::constants::DW_TAG_SUN_codeflags","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3207},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27449,"byte_end":27470,"line_start":276,"line_end":276,"column_start":5,"column_end":26},"name":"DW_TAG_SUN_memop_info","qualname":"::constants::DW_TAG_SUN_memop_info","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3208},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27485,"byte_end":27510,"line_start":277,"line_end":277,"column_start":5,"column_end":30},"name":"DW_TAG_SUN_omp_child_func","qualname":"::constants::DW_TAG_SUN_omp_child_func","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3209},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27525,"byte_end":27551,"line_start":278,"line_end":278,"column_start":5,"column_end":31},"name":"DW_TAG_SUN_rtti_descriptor","qualname":"::constants::DW_TAG_SUN_rtti_descriptor","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3210},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27566,"byte_end":27586,"line_start":279,"line_end":279,"column_start":5,"column_end":25},"name":"DW_TAG_SUN_dtor_info","qualname":"::constants::DW_TAG_SUN_dtor_info","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3211},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27601,"byte_end":27616,"line_start":280,"line_end":280,"column_start":5,"column_end":20},"name":"DW_TAG_SUN_dtor","qualname":"::constants::DW_TAG_SUN_dtor","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3212},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27631,"byte_end":27655,"line_start":281,"line_end":281,"column_start":5,"column_end":29},"name":"DW_TAG_SUN_f90_interface","qualname":"::constants::DW_TAG_SUN_f90_interface","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3213},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27670,"byte_end":27702,"line_start":282,"line_end":282,"column_start":5,"column_end":37},"name":"DW_TAG_SUN_fortran_vax_structure","qualname":"::constants::DW_TAG_SUN_fortran_vax_structure","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3214},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27740,"byte_end":27763,"line_start":285,"line_end":285,"column_start":5,"column_end":28},"name":"DW_TAG_ALTIUM_circ_type","qualname":"::constants::DW_TAG_ALTIUM_circ_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3215},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27778,"byte_end":27805,"line_start":286,"line_end":286,"column_start":5,"column_end":32},"name":"DW_TAG_ALTIUM_mwa_circ_type","qualname":"::constants::DW_TAG_ALTIUM_mwa_circ_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3216},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27820,"byte_end":27848,"line_start":287,"line_end":287,"column_start":5,"column_end":33},"name":"DW_TAG_ALTIUM_rev_carry_type","qualname":"::constants::DW_TAG_ALTIUM_rev_carry_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3217},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27863,"byte_end":27880,"line_start":288,"line_end":288,"column_start":5,"column_end":22},"name":"DW_TAG_ALTIUM_rom","qualname":"::constants::DW_TAG_ALTIUM_rom","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3218},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27919,"byte_end":27941,"line_start":291,"line_end":291,"column_start":5,"column_end":27},"name":"DW_TAG_upc_shared_type","qualname":"::constants::DW_TAG_upc_shared_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3219},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27956,"byte_end":27978,"line_start":292,"line_end":292,"column_start":5,"column_end":27},"name":"DW_TAG_upc_strict_type","qualname":"::constants::DW_TAG_upc_strict_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3220},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":27993,"byte_end":28016,"line_start":293,"line_end":293,"column_start":5,"column_end":28},"name":"DW_TAG_upc_relaxed_type","qualname":"::constants::DW_TAG_upc_relaxed_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3221},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28072,"byte_end":28093,"line_start":296,"line_end":296,"column_start":5,"column_end":26},"name":"DW_TAG_PGI_kanji_type","qualname":"::constants::DW_TAG_PGI_kanji_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3222},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28108,"byte_end":28134,"line_start":297,"line_end":297,"column_start":5,"column_end":31},"name":"DW_TAG_PGI_interface_block","qualname":"::constants::DW_TAG_PGI_interface_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3223},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28173,"byte_end":28196,"line_start":300,"line_end":300,"column_start":5,"column_end":28},"name":"DW_TAG_BORLAND_property","qualname":"::constants::DW_TAG_BORLAND_property","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3224},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28211,"byte_end":28239,"line_start":301,"line_end":301,"column_start":5,"column_end":33},"name":"DW_TAG_BORLAND_Delphi_string","qualname":"::constants::DW_TAG_BORLAND_Delphi_string","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3225},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28254,"byte_end":28289,"line_start":302,"line_end":302,"column_start":5,"column_end":40},"name":"DW_TAG_BORLAND_Delphi_dynamic_array","qualname":"::constants::DW_TAG_BORLAND_Delphi_dynamic_array","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3226},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28304,"byte_end":28329,"line_start":303,"line_end":303,"column_start":5,"column_end":30},"name":"DW_TAG_BORLAND_Delphi_set","qualname":"::constants::DW_TAG_BORLAND_Delphi_set","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3227},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28344,"byte_end":28373,"line_start":304,"line_end":304,"column_start":5,"column_end":34},"name":"DW_TAG_BORLAND_Delphi_variant","qualname":"::constants::DW_TAG_BORLAND_Delphi_variant","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3527},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28480,"byte_end":28484,"line_start":311,"line_end":311,"column_start":1,"column_end":5},"name":"DwAt","qualname":"::constants::DwAt","value":"","parent":null,"children":[],"decl_id":null,"docs":" The attribute encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3258},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28496,"byte_end":28506,"line_start":312,"line_end":312,"column_start":5,"column_end":15},"name":"DW_AT_null","qualname":"::constants::DW_AT_null","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3259},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28520,"byte_end":28533,"line_start":314,"line_end":314,"column_start":5,"column_end":18},"name":"DW_AT_sibling","qualname":"::constants::DW_AT_sibling","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3260},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28546,"byte_end":28560,"line_start":315,"line_end":315,"column_start":5,"column_end":19},"name":"DW_AT_location","qualname":"::constants::DW_AT_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3261},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28573,"byte_end":28583,"line_start":316,"line_end":316,"column_start":5,"column_end":15},"name":"DW_AT_name","qualname":"::constants::DW_AT_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3262},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28596,"byte_end":28610,"line_start":317,"line_end":317,"column_start":5,"column_end":19},"name":"DW_AT_ordering","qualname":"::constants::DW_AT_ordering","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3263},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28623,"byte_end":28638,"line_start":318,"line_end":318,"column_start":5,"column_end":20},"name":"DW_AT_byte_size","qualname":"::constants::DW_AT_byte_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3264},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28651,"byte_end":28667,"line_start":319,"line_end":319,"column_start":5,"column_end":21},"name":"DW_AT_bit_offset","qualname":"::constants::DW_AT_bit_offset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3265},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28680,"byte_end":28694,"line_start":320,"line_end":320,"column_start":5,"column_end":19},"name":"DW_AT_bit_size","qualname":"::constants::DW_AT_bit_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3266},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28707,"byte_end":28722,"line_start":321,"line_end":321,"column_start":5,"column_end":20},"name":"DW_AT_stmt_list","qualname":"::constants::DW_AT_stmt_list","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3267},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28735,"byte_end":28747,"line_start":322,"line_end":322,"column_start":5,"column_end":17},"name":"DW_AT_low_pc","qualname":"::constants::DW_AT_low_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3268},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28760,"byte_end":28773,"line_start":323,"line_end":323,"column_start":5,"column_end":18},"name":"DW_AT_high_pc","qualname":"::constants::DW_AT_high_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3269},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28786,"byte_end":28800,"line_start":324,"line_end":324,"column_start":5,"column_end":19},"name":"DW_AT_language","qualname":"::constants::DW_AT_language","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3270},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28813,"byte_end":28824,"line_start":325,"line_end":325,"column_start":5,"column_end":16},"name":"DW_AT_discr","qualname":"::constants::DW_AT_discr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3271},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28837,"byte_end":28854,"line_start":326,"line_end":326,"column_start":5,"column_end":22},"name":"DW_AT_discr_value","qualname":"::constants::DW_AT_discr_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3272},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28867,"byte_end":28883,"line_start":327,"line_end":327,"column_start":5,"column_end":21},"name":"DW_AT_visibility","qualname":"::constants::DW_AT_visibility","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3273},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28896,"byte_end":28908,"line_start":328,"line_end":328,"column_start":5,"column_end":17},"name":"DW_AT_import","qualname":"::constants::DW_AT_import","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3274},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28921,"byte_end":28940,"line_start":329,"line_end":329,"column_start":5,"column_end":24},"name":"DW_AT_string_length","qualname":"::constants::DW_AT_string_length","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3275},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28953,"byte_end":28975,"line_start":330,"line_end":330,"column_start":5,"column_end":27},"name":"DW_AT_common_reference","qualname":"::constants::DW_AT_common_reference","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3276},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":28988,"byte_end":29002,"line_start":331,"line_end":331,"column_start":5,"column_end":19},"name":"DW_AT_comp_dir","qualname":"::constants::DW_AT_comp_dir","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3277},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29015,"byte_end":29032,"line_start":332,"line_end":332,"column_start":5,"column_end":22},"name":"DW_AT_const_value","qualname":"::constants::DW_AT_const_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3278},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29045,"byte_end":29066,"line_start":333,"line_end":333,"column_start":5,"column_end":26},"name":"DW_AT_containing_type","qualname":"::constants::DW_AT_containing_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3279},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29079,"byte_end":29098,"line_start":334,"line_end":334,"column_start":5,"column_end":24},"name":"DW_AT_default_value","qualname":"::constants::DW_AT_default_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3280},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29111,"byte_end":29123,"line_start":335,"line_end":335,"column_start":5,"column_end":17},"name":"DW_AT_inline","qualname":"::constants::DW_AT_inline","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3281},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29136,"byte_end":29153,"line_start":336,"line_end":336,"column_start":5,"column_end":22},"name":"DW_AT_is_optional","qualname":"::constants::DW_AT_is_optional","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3282},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29166,"byte_end":29183,"line_start":337,"line_end":337,"column_start":5,"column_end":22},"name":"DW_AT_lower_bound","qualname":"::constants::DW_AT_lower_bound","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3283},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29196,"byte_end":29210,"line_start":338,"line_end":338,"column_start":5,"column_end":19},"name":"DW_AT_producer","qualname":"::constants::DW_AT_producer","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3284},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29223,"byte_end":29239,"line_start":339,"line_end":339,"column_start":5,"column_end":21},"name":"DW_AT_prototyped","qualname":"::constants::DW_AT_prototyped","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3285},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29252,"byte_end":29269,"line_start":340,"line_end":340,"column_start":5,"column_end":22},"name":"DW_AT_return_addr","qualname":"::constants::DW_AT_return_addr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3286},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29282,"byte_end":29299,"line_start":341,"line_end":341,"column_start":5,"column_end":22},"name":"DW_AT_start_scope","qualname":"::constants::DW_AT_start_scope","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3287},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29312,"byte_end":29328,"line_start":342,"line_end":342,"column_start":5,"column_end":21},"name":"DW_AT_bit_stride","qualname":"::constants::DW_AT_bit_stride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3288},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29341,"byte_end":29358,"line_start":343,"line_end":343,"column_start":5,"column_end":22},"name":"DW_AT_upper_bound","qualname":"::constants::DW_AT_upper_bound","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3289},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29371,"byte_end":29392,"line_start":344,"line_end":344,"column_start":5,"column_end":26},"name":"DW_AT_abstract_origin","qualname":"::constants::DW_AT_abstract_origin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3290},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29405,"byte_end":29424,"line_start":345,"line_end":345,"column_start":5,"column_end":24},"name":"DW_AT_accessibility","qualname":"::constants::DW_AT_accessibility","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3291},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29437,"byte_end":29456,"line_start":346,"line_end":346,"column_start":5,"column_end":24},"name":"DW_AT_address_class","qualname":"::constants::DW_AT_address_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3292},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29469,"byte_end":29485,"line_start":347,"line_end":347,"column_start":5,"column_end":21},"name":"DW_AT_artificial","qualname":"::constants::DW_AT_artificial","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3293},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29498,"byte_end":29514,"line_start":348,"line_end":348,"column_start":5,"column_end":21},"name":"DW_AT_base_types","qualname":"::constants::DW_AT_base_types","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3294},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29527,"byte_end":29551,"line_start":349,"line_end":349,"column_start":5,"column_end":29},"name":"DW_AT_calling_convention","qualname":"::constants::DW_AT_calling_convention","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3295},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29564,"byte_end":29575,"line_start":350,"line_end":350,"column_start":5,"column_end":16},"name":"DW_AT_count","qualname":"::constants::DW_AT_count","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3296},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29588,"byte_end":29614,"line_start":351,"line_end":351,"column_start":5,"column_end":31},"name":"DW_AT_data_member_location","qualname":"::constants::DW_AT_data_member_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3297},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29627,"byte_end":29644,"line_start":352,"line_end":352,"column_start":5,"column_end":22},"name":"DW_AT_decl_column","qualname":"::constants::DW_AT_decl_column","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3298},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29657,"byte_end":29672,"line_start":353,"line_end":353,"column_start":5,"column_end":20},"name":"DW_AT_decl_file","qualname":"::constants::DW_AT_decl_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3299},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29685,"byte_end":29700,"line_start":354,"line_end":354,"column_start":5,"column_end":20},"name":"DW_AT_decl_line","qualname":"::constants::DW_AT_decl_line","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3300},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29713,"byte_end":29730,"line_start":355,"line_end":355,"column_start":5,"column_end":22},"name":"DW_AT_declaration","qualname":"::constants::DW_AT_declaration","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3301},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29743,"byte_end":29759,"line_start":356,"line_end":356,"column_start":5,"column_end":21},"name":"DW_AT_discr_list","qualname":"::constants::DW_AT_discr_list","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3302},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29772,"byte_end":29786,"line_start":357,"line_end":357,"column_start":5,"column_end":19},"name":"DW_AT_encoding","qualname":"::constants::DW_AT_encoding","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3303},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29799,"byte_end":29813,"line_start":358,"line_end":358,"column_start":5,"column_end":19},"name":"DW_AT_external","qualname":"::constants::DW_AT_external","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3304},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29826,"byte_end":29842,"line_start":359,"line_end":359,"column_start":5,"column_end":21},"name":"DW_AT_frame_base","qualname":"::constants::DW_AT_frame_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3305},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29855,"byte_end":29867,"line_start":360,"line_end":360,"column_start":5,"column_end":17},"name":"DW_AT_friend","qualname":"::constants::DW_AT_friend","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3306},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29880,"byte_end":29901,"line_start":361,"line_end":361,"column_start":5,"column_end":26},"name":"DW_AT_identifier_case","qualname":"::constants::DW_AT_identifier_case","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3307},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29914,"byte_end":29930,"line_start":362,"line_end":362,"column_start":5,"column_end":21},"name":"DW_AT_macro_info","qualname":"::constants::DW_AT_macro_info","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3308},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29943,"byte_end":29962,"line_start":363,"line_end":363,"column_start":5,"column_end":24},"name":"DW_AT_namelist_item","qualname":"::constants::DW_AT_namelist_item","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3309},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":29975,"byte_end":29989,"line_start":364,"line_end":364,"column_start":5,"column_end":19},"name":"DW_AT_priority","qualname":"::constants::DW_AT_priority","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3310},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30002,"byte_end":30015,"line_start":365,"line_end":365,"column_start":5,"column_end":18},"name":"DW_AT_segment","qualname":"::constants::DW_AT_segment","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3311},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30028,"byte_end":30047,"line_start":366,"line_end":366,"column_start":5,"column_end":24},"name":"DW_AT_specification","qualname":"::constants::DW_AT_specification","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3312},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30060,"byte_end":30077,"line_start":367,"line_end":367,"column_start":5,"column_end":22},"name":"DW_AT_static_link","qualname":"::constants::DW_AT_static_link","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3313},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30090,"byte_end":30100,"line_start":368,"line_end":368,"column_start":5,"column_end":15},"name":"DW_AT_type","qualname":"::constants::DW_AT_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3314},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30113,"byte_end":30131,"line_start":369,"line_end":369,"column_start":5,"column_end":23},"name":"DW_AT_use_location","qualname":"::constants::DW_AT_use_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3315},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30144,"byte_end":30168,"line_start":370,"line_end":370,"column_start":5,"column_end":29},"name":"DW_AT_variable_parameter","qualname":"::constants::DW_AT_variable_parameter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3316},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30181,"byte_end":30197,"line_start":371,"line_end":371,"column_start":5,"column_end":21},"name":"DW_AT_virtuality","qualname":"::constants::DW_AT_virtuality","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3317},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30210,"byte_end":30236,"line_start":372,"line_end":372,"column_start":5,"column_end":31},"name":"DW_AT_vtable_elem_location","qualname":"::constants::DW_AT_vtable_elem_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3318},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30262,"byte_end":30277,"line_start":375,"line_end":375,"column_start":5,"column_end":20},"name":"DW_AT_allocated","qualname":"::constants::DW_AT_allocated","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3319},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30290,"byte_end":30306,"line_start":376,"line_end":376,"column_start":5,"column_end":21},"name":"DW_AT_associated","qualname":"::constants::DW_AT_associated","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3320},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30319,"byte_end":30338,"line_start":377,"line_end":377,"column_start":5,"column_end":24},"name":"DW_AT_data_location","qualname":"::constants::DW_AT_data_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3321},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30351,"byte_end":30368,"line_start":378,"line_end":378,"column_start":5,"column_end":22},"name":"DW_AT_byte_stride","qualname":"::constants::DW_AT_byte_stride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3322},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30381,"byte_end":30395,"line_start":379,"line_end":379,"column_start":5,"column_end":19},"name":"DW_AT_entry_pc","qualname":"::constants::DW_AT_entry_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3323},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30408,"byte_end":30422,"line_start":380,"line_end":380,"column_start":5,"column_end":19},"name":"DW_AT_use_UTF8","qualname":"::constants::DW_AT_use_UTF8","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3324},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30435,"byte_end":30450,"line_start":381,"line_end":381,"column_start":5,"column_end":20},"name":"DW_AT_extension","qualname":"::constants::DW_AT_extension","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3325},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30463,"byte_end":30475,"line_start":382,"line_end":382,"column_start":5,"column_end":17},"name":"DW_AT_ranges","qualname":"::constants::DW_AT_ranges","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3326},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30488,"byte_end":30504,"line_start":383,"line_end":383,"column_start":5,"column_end":21},"name":"DW_AT_trampoline","qualname":"::constants::DW_AT_trampoline","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3327},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30517,"byte_end":30534,"line_start":384,"line_end":384,"column_start":5,"column_end":22},"name":"DW_AT_call_column","qualname":"::constants::DW_AT_call_column","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3328},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30547,"byte_end":30562,"line_start":385,"line_end":385,"column_start":5,"column_end":20},"name":"DW_AT_call_file","qualname":"::constants::DW_AT_call_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3329},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30575,"byte_end":30590,"line_start":386,"line_end":386,"column_start":5,"column_end":20},"name":"DW_AT_call_line","qualname":"::constants::DW_AT_call_line","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3330},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30603,"byte_end":30620,"line_start":387,"line_end":387,"column_start":5,"column_end":22},"name":"DW_AT_description","qualname":"::constants::DW_AT_description","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3331},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30633,"byte_end":30651,"line_start":388,"line_end":388,"column_start":5,"column_end":23},"name":"DW_AT_binary_scale","qualname":"::constants::DW_AT_binary_scale","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3332},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30664,"byte_end":30683,"line_start":389,"line_end":389,"column_start":5,"column_end":24},"name":"DW_AT_decimal_scale","qualname":"::constants::DW_AT_decimal_scale","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3333},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30696,"byte_end":30707,"line_start":390,"line_end":390,"column_start":5,"column_end":16},"name":"DW_AT_small","qualname":"::constants::DW_AT_small","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3334},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30720,"byte_end":30738,"line_start":391,"line_end":391,"column_start":5,"column_end":23},"name":"DW_AT_decimal_sign","qualname":"::constants::DW_AT_decimal_sign","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3335},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30751,"byte_end":30768,"line_start":392,"line_end":392,"column_start":5,"column_end":22},"name":"DW_AT_digit_count","qualname":"::constants::DW_AT_digit_count","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3336},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30781,"byte_end":30801,"line_start":393,"line_end":393,"column_start":5,"column_end":25},"name":"DW_AT_picture_string","qualname":"::constants::DW_AT_picture_string","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3337},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30814,"byte_end":30827,"line_start":394,"line_end":394,"column_start":5,"column_end":18},"name":"DW_AT_mutable","qualname":"::constants::DW_AT_mutable","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3338},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30840,"byte_end":30860,"line_start":395,"line_end":395,"column_start":5,"column_end":25},"name":"DW_AT_threads_scaled","qualname":"::constants::DW_AT_threads_scaled","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3339},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30873,"byte_end":30887,"line_start":396,"line_end":396,"column_start":5,"column_end":19},"name":"DW_AT_explicit","qualname":"::constants::DW_AT_explicit","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3340},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30900,"byte_end":30920,"line_start":397,"line_end":397,"column_start":5,"column_end":25},"name":"DW_AT_object_pointer","qualname":"::constants::DW_AT_object_pointer","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3341},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30933,"byte_end":30948,"line_start":398,"line_end":398,"column_start":5,"column_end":20},"name":"DW_AT_endianity","qualname":"::constants::DW_AT_endianity","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3342},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30961,"byte_end":30976,"line_start":399,"line_end":399,"column_start":5,"column_end":20},"name":"DW_AT_elemental","qualname":"::constants::DW_AT_elemental","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3343},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":30989,"byte_end":30999,"line_start":400,"line_end":400,"column_start":5,"column_end":15},"name":"DW_AT_pure","qualname":"::constants::DW_AT_pure","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3344},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31012,"byte_end":31027,"line_start":401,"line_end":401,"column_start":5,"column_end":20},"name":"DW_AT_recursive","qualname":"::constants::DW_AT_recursive","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3345},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31053,"byte_end":31068,"line_start":404,"line_end":404,"column_start":5,"column_end":20},"name":"DW_AT_signature","qualname":"::constants::DW_AT_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3346},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31081,"byte_end":31102,"line_start":405,"line_end":405,"column_start":5,"column_end":26},"name":"DW_AT_main_subprogram","qualname":"::constants::DW_AT_main_subprogram","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3347},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31115,"byte_end":31136,"line_start":406,"line_end":406,"column_start":5,"column_end":26},"name":"DW_AT_data_bit_offset","qualname":"::constants::DW_AT_data_bit_offset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3348},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31149,"byte_end":31165,"line_start":407,"line_end":407,"column_start":5,"column_end":21},"name":"DW_AT_const_expr","qualname":"::constants::DW_AT_const_expr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3349},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31178,"byte_end":31194,"line_start":408,"line_end":408,"column_start":5,"column_end":21},"name":"DW_AT_enum_class","qualname":"::constants::DW_AT_enum_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3350},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31207,"byte_end":31225,"line_start":409,"line_end":409,"column_start":5,"column_end":23},"name":"DW_AT_linkage_name","qualname":"::constants::DW_AT_linkage_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3351},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31251,"byte_end":31279,"line_start":412,"line_end":412,"column_start":5,"column_end":33},"name":"DW_AT_string_length_bit_size","qualname":"::constants::DW_AT_string_length_bit_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3352},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31292,"byte_end":31321,"line_start":413,"line_end":413,"column_start":5,"column_end":34},"name":"DW_AT_string_length_byte_size","qualname":"::constants::DW_AT_string_length_byte_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3353},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31334,"byte_end":31344,"line_start":414,"line_end":414,"column_start":5,"column_end":15},"name":"DW_AT_rank","qualname":"::constants::DW_AT_rank","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3354},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31357,"byte_end":31379,"line_start":415,"line_end":415,"column_start":5,"column_end":27},"name":"DW_AT_str_offsets_base","qualname":"::constants::DW_AT_str_offsets_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3355},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31392,"byte_end":31407,"line_start":416,"line_end":416,"column_start":5,"column_end":20},"name":"DW_AT_addr_base","qualname":"::constants::DW_AT_addr_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3356},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31420,"byte_end":31439,"line_start":417,"line_end":417,"column_start":5,"column_end":24},"name":"DW_AT_rnglists_base","qualname":"::constants::DW_AT_rnglists_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3357},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31452,"byte_end":31466,"line_start":418,"line_end":418,"column_start":5,"column_end":19},"name":"DW_AT_dwo_name","qualname":"::constants::DW_AT_dwo_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3358},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31479,"byte_end":31494,"line_start":419,"line_end":419,"column_start":5,"column_end":20},"name":"DW_AT_reference","qualname":"::constants::DW_AT_reference","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3359},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31507,"byte_end":31529,"line_start":420,"line_end":420,"column_start":5,"column_end":27},"name":"DW_AT_rvalue_reference","qualname":"::constants::DW_AT_rvalue_reference","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3360},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31542,"byte_end":31554,"line_start":421,"line_end":421,"column_start":5,"column_end":17},"name":"DW_AT_macros","qualname":"::constants::DW_AT_macros","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3361},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31567,"byte_end":31587,"line_start":422,"line_end":422,"column_start":5,"column_end":25},"name":"DW_AT_call_all_calls","qualname":"::constants::DW_AT_call_all_calls","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3362},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31600,"byte_end":31627,"line_start":423,"line_end":423,"column_start":5,"column_end":32},"name":"DW_AT_call_all_source_calls","qualname":"::constants::DW_AT_call_all_source_calls","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3363},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31640,"byte_end":31665,"line_start":424,"line_end":424,"column_start":5,"column_end":30},"name":"DW_AT_call_all_tail_calls","qualname":"::constants::DW_AT_call_all_tail_calls","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3364},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31678,"byte_end":31698,"line_start":425,"line_end":425,"column_start":5,"column_end":25},"name":"DW_AT_call_return_pc","qualname":"::constants::DW_AT_call_return_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3365},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31711,"byte_end":31727,"line_start":426,"line_end":426,"column_start":5,"column_end":21},"name":"DW_AT_call_value","qualname":"::constants::DW_AT_call_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3366},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31740,"byte_end":31757,"line_start":427,"line_end":427,"column_start":5,"column_end":22},"name":"DW_AT_call_origin","qualname":"::constants::DW_AT_call_origin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3367},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31770,"byte_end":31790,"line_start":428,"line_end":428,"column_start":5,"column_end":25},"name":"DW_AT_call_parameter","qualname":"::constants::DW_AT_call_parameter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3368},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31803,"byte_end":31816,"line_start":429,"line_end":429,"column_start":5,"column_end":18},"name":"DW_AT_call_pc","qualname":"::constants::DW_AT_call_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3369},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31829,"byte_end":31849,"line_start":430,"line_end":430,"column_start":5,"column_end":25},"name":"DW_AT_call_tail_call","qualname":"::constants::DW_AT_call_tail_call","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3370},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31862,"byte_end":31879,"line_start":431,"line_end":431,"column_start":5,"column_end":22},"name":"DW_AT_call_target","qualname":"::constants::DW_AT_call_target","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3371},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31892,"byte_end":31919,"line_start":432,"line_end":432,"column_start":5,"column_end":32},"name":"DW_AT_call_target_clobbered","qualname":"::constants::DW_AT_call_target_clobbered","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3372},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31932,"byte_end":31956,"line_start":433,"line_end":433,"column_start":5,"column_end":29},"name":"DW_AT_call_data_location","qualname":"::constants::DW_AT_call_data_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3373},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":31969,"byte_end":31990,"line_start":434,"line_end":434,"column_start":5,"column_end":26},"name":"DW_AT_call_data_value","qualname":"::constants::DW_AT_call_data_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3374},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32003,"byte_end":32017,"line_start":435,"line_end":435,"column_start":5,"column_end":19},"name":"DW_AT_noreturn","qualname":"::constants::DW_AT_noreturn","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3375},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32030,"byte_end":32045,"line_start":436,"line_end":436,"column_start":5,"column_end":20},"name":"DW_AT_alignment","qualname":"::constants::DW_AT_alignment","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3376},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32058,"byte_end":32078,"line_start":437,"line_end":437,"column_start":5,"column_end":25},"name":"DW_AT_export_symbols","qualname":"::constants::DW_AT_export_symbols","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3377},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32091,"byte_end":32104,"line_start":438,"line_end":438,"column_start":5,"column_end":18},"name":"DW_AT_deleted","qualname":"::constants::DW_AT_deleted","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3378},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32117,"byte_end":32132,"line_start":439,"line_end":439,"column_start":5,"column_end":20},"name":"DW_AT_defaulted","qualname":"::constants::DW_AT_defaulted","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3379},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32145,"byte_end":32164,"line_start":440,"line_end":440,"column_start":5,"column_end":24},"name":"DW_AT_loclists_base","qualname":"::constants::DW_AT_loclists_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3380},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32178,"byte_end":32191,"line_start":442,"line_end":442,"column_start":5,"column_end":18},"name":"DW_AT_lo_user","qualname":"::constants::DW_AT_lo_user","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3381},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32206,"byte_end":32219,"line_start":443,"line_end":443,"column_start":5,"column_end":18},"name":"DW_AT_hi_user","qualname":"::constants::DW_AT_hi_user","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3382},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32259,"byte_end":32273,"line_start":446,"line_end":446,"column_start":5,"column_end":19},"name":"DW_AT_MIPS_fde","qualname":"::constants::DW_AT_MIPS_fde","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3383},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32288,"byte_end":32309,"line_start":447,"line_end":447,"column_start":5,"column_end":26},"name":"DW_AT_MIPS_loop_begin","qualname":"::constants::DW_AT_MIPS_loop_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3384},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32324,"byte_end":32350,"line_start":448,"line_end":448,"column_start":5,"column_end":31},"name":"DW_AT_MIPS_tail_loop_begin","qualname":"::constants::DW_AT_MIPS_tail_loop_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3385},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32365,"byte_end":32388,"line_start":449,"line_end":449,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_epilog_begin","qualname":"::constants::DW_AT_MIPS_epilog_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3386},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32403,"byte_end":32432,"line_start":450,"line_end":450,"column_start":5,"column_end":34},"name":"DW_AT_MIPS_loop_unroll_factor","qualname":"::constants::DW_AT_MIPS_loop_unroll_factor","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3387},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32447,"byte_end":32481,"line_start":451,"line_end":451,"column_start":5,"column_end":39},"name":"DW_AT_MIPS_software_pipeline_depth","qualname":"::constants::DW_AT_MIPS_software_pipeline_depth","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3388},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32496,"byte_end":32519,"line_start":452,"line_end":452,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_linkage_name","qualname":"::constants::DW_AT_MIPS_linkage_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3389},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32534,"byte_end":32551,"line_start":453,"line_end":453,"column_start":5,"column_end":22},"name":"DW_AT_MIPS_stride","qualname":"::constants::DW_AT_MIPS_stride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3390},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32566,"byte_end":32590,"line_start":454,"line_end":454,"column_start":5,"column_end":29},"name":"DW_AT_MIPS_abstract_name","qualname":"::constants::DW_AT_MIPS_abstract_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3391},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32605,"byte_end":32628,"line_start":455,"line_end":455,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_clone_origin","qualname":"::constants::DW_AT_MIPS_clone_origin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3392},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32643,"byte_end":32665,"line_start":456,"line_end":456,"column_start":5,"column_end":27},"name":"DW_AT_MIPS_has_inlines","qualname":"::constants::DW_AT_MIPS_has_inlines","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3393},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32680,"byte_end":32702,"line_start":457,"line_end":457,"column_start":5,"column_end":27},"name":"DW_AT_MIPS_stride_byte","qualname":"::constants::DW_AT_MIPS_stride_byte","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3394},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32717,"byte_end":32739,"line_start":458,"line_end":458,"column_start":5,"column_end":27},"name":"DW_AT_MIPS_stride_elem","qualname":"::constants::DW_AT_MIPS_stride_elem","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3395},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32754,"byte_end":32777,"line_start":459,"line_end":459,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_ptr_dopetype","qualname":"::constants::DW_AT_MIPS_ptr_dopetype","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3396},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32792,"byte_end":32823,"line_start":460,"line_end":460,"column_start":5,"column_end":36},"name":"DW_AT_MIPS_allocatable_dopetype","qualname":"::constants::DW_AT_MIPS_allocatable_dopetype","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3397},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":32838,"byte_end":32871,"line_start":461,"line_end":461,"column_start":5,"column_end":38},"name":"DW_AT_MIPS_assumed_shape_dopetype","qualname":"::constants::DW_AT_MIPS_assumed_shape_dopetype","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3398},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33002,"byte_end":33025,"line_start":465,"line_end":465,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_assumed_size","qualname":"::constants::DW_AT_MIPS_assumed_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3399},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33114,"byte_end":33138,"line_start":470,"line_end":470,"column_start":5,"column_end":29},"name":"DW_AT_INTEL_other_endian","qualname":"::constants::DW_AT_INTEL_other_endian","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3400},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33172,"byte_end":33186,"line_start":473,"line_end":473,"column_start":5,"column_end":19},"name":"DW_AT_sf_names","qualname":"::constants::DW_AT_sf_names","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3401},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33201,"byte_end":33215,"line_start":474,"line_end":474,"column_start":5,"column_end":19},"name":"DW_AT_src_info","qualname":"::constants::DW_AT_src_info","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3402},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33230,"byte_end":33244,"line_start":475,"line_end":475,"column_start":5,"column_end":19},"name":"DW_AT_mac_info","qualname":"::constants::DW_AT_mac_info","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3403},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33259,"byte_end":33275,"line_start":476,"line_end":476,"column_start":5,"column_end":21},"name":"DW_AT_src_coords","qualname":"::constants::DW_AT_src_coords","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3404},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33290,"byte_end":33306,"line_start":477,"line_end":477,"column_start":5,"column_end":21},"name":"DW_AT_body_begin","qualname":"::constants::DW_AT_body_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3405},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33321,"byte_end":33335,"line_start":478,"line_end":478,"column_start":5,"column_end":19},"name":"DW_AT_body_end","qualname":"::constants::DW_AT_body_end","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3406},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33350,"byte_end":33366,"line_start":479,"line_end":479,"column_start":5,"column_end":21},"name":"DW_AT_GNU_vector","qualname":"::constants::DW_AT_GNU_vector","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3407},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33381,"byte_end":33401,"line_start":480,"line_end":480,"column_start":5,"column_end":25},"name":"DW_AT_GNU_guarded_by","qualname":"::constants::DW_AT_GNU_guarded_by","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3408},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33416,"byte_end":33439,"line_start":481,"line_end":481,"column_start":5,"column_end":28},"name":"DW_AT_GNU_pt_guarded_by","qualname":"::constants::DW_AT_GNU_pt_guarded_by","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3409},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33454,"byte_end":33471,"line_start":482,"line_end":482,"column_start":5,"column_end":22},"name":"DW_AT_GNU_guarded","qualname":"::constants::DW_AT_GNU_guarded","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3410},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33486,"byte_end":33506,"line_start":483,"line_end":483,"column_start":5,"column_end":25},"name":"DW_AT_GNU_pt_guarded","qualname":"::constants::DW_AT_GNU_pt_guarded","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3411},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33521,"byte_end":33545,"line_start":484,"line_end":484,"column_start":5,"column_end":29},"name":"DW_AT_GNU_locks_excluded","qualname":"::constants::DW_AT_GNU_locks_excluded","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3412},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33560,"byte_end":33594,"line_start":485,"line_end":485,"column_start":5,"column_end":39},"name":"DW_AT_GNU_exclusive_locks_required","qualname":"::constants::DW_AT_GNU_exclusive_locks_required","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3413},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33609,"byte_end":33640,"line_start":486,"line_end":486,"column_start":5,"column_end":36},"name":"DW_AT_GNU_shared_locks_required","qualname":"::constants::DW_AT_GNU_shared_locks_required","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3414},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33655,"byte_end":33678,"line_start":487,"line_end":487,"column_start":5,"column_end":28},"name":"DW_AT_GNU_odr_signature","qualname":"::constants::DW_AT_GNU_odr_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3415},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33693,"byte_end":33716,"line_start":488,"line_end":488,"column_start":5,"column_end":28},"name":"DW_AT_GNU_template_name","qualname":"::constants::DW_AT_GNU_template_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3416},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33731,"byte_end":33756,"line_start":489,"line_end":489,"column_start":5,"column_end":30},"name":"DW_AT_GNU_call_site_value","qualname":"::constants::DW_AT_GNU_call_site_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3417},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33771,"byte_end":33801,"line_start":490,"line_end":490,"column_start":5,"column_end":35},"name":"DW_AT_GNU_call_site_data_value","qualname":"::constants::DW_AT_GNU_call_site_data_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3418},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33816,"byte_end":33842,"line_start":491,"line_end":491,"column_start":5,"column_end":31},"name":"DW_AT_GNU_call_site_target","qualname":"::constants::DW_AT_GNU_call_site_target","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3419},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33857,"byte_end":33893,"line_start":492,"line_end":492,"column_start":5,"column_end":41},"name":"DW_AT_GNU_call_site_target_clobbered","qualname":"::constants::DW_AT_GNU_call_site_target_clobbered","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3420},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33908,"byte_end":33927,"line_start":493,"line_end":493,"column_start":5,"column_end":24},"name":"DW_AT_GNU_tail_call","qualname":"::constants::DW_AT_GNU_tail_call","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3421},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33942,"byte_end":33971,"line_start":494,"line_end":494,"column_start":5,"column_end":34},"name":"DW_AT_GNU_all_tail_call_sites","qualname":"::constants::DW_AT_GNU_all_tail_call_sites","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3422},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":33986,"byte_end":34010,"line_start":495,"line_end":495,"column_start":5,"column_end":29},"name":"DW_AT_GNU_all_call_sites","qualname":"::constants::DW_AT_GNU_all_call_sites","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3423},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34025,"byte_end":34056,"line_start":496,"line_end":496,"column_start":5,"column_end":36},"name":"DW_AT_GNU_all_source_call_sites","qualname":"::constants::DW_AT_GNU_all_source_call_sites","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3424},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34071,"byte_end":34087,"line_start":497,"line_end":497,"column_start":5,"column_end":21},"name":"DW_AT_GNU_macros","qualname":"::constants::DW_AT_GNU_macros","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3425},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34139,"byte_end":34157,"line_start":500,"line_end":500,"column_start":5,"column_end":23},"name":"DW_AT_GNU_dwo_name","qualname":"::constants::DW_AT_GNU_dwo_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3426},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34172,"byte_end":34188,"line_start":501,"line_end":501,"column_start":5,"column_end":21},"name":"DW_AT_GNU_dwo_id","qualname":"::constants::DW_AT_GNU_dwo_id","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3427},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34203,"byte_end":34224,"line_start":502,"line_end":502,"column_start":5,"column_end":26},"name":"DW_AT_GNU_ranges_base","qualname":"::constants::DW_AT_GNU_ranges_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3428},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34239,"byte_end":34258,"line_start":503,"line_end":503,"column_start":5,"column_end":24},"name":"DW_AT_GNU_addr_base","qualname":"::constants::DW_AT_GNU_addr_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3429},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34273,"byte_end":34291,"line_start":504,"line_end":504,"column_start":5,"column_end":23},"name":"DW_AT_GNU_pubnames","qualname":"::constants::DW_AT_GNU_pubnames","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3430},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34306,"byte_end":34324,"line_start":505,"line_end":505,"column_start":5,"column_end":23},"name":"DW_AT_GNU_pubtypes","qualname":"::constants::DW_AT_GNU_pubtypes","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3431},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34339,"byte_end":34362,"line_start":506,"line_end":506,"column_start":5,"column_end":28},"name":"DW_AT_GNU_discriminator","qualname":"::constants::DW_AT_GNU_discriminator","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3432},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34377,"byte_end":34395,"line_start":507,"line_end":507,"column_start":5,"column_end":23},"name":"DW_AT_GNU_locviews","qualname":"::constants::DW_AT_GNU_locviews","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3433},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34410,"byte_end":34430,"line_start":508,"line_end":508,"column_start":5,"column_end":25},"name":"DW_AT_GNU_entry_view","qualname":"::constants::DW_AT_GNU_entry_view","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3434},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34529,"byte_end":34547,"line_start":514,"line_end":514,"column_start":5,"column_end":23},"name":"DW_AT_SUN_template","qualname":"::constants::DW_AT_SUN_template","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3435},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34562,"byte_end":34581,"line_start":515,"line_end":515,"column_start":5,"column_end":24},"name":"DW_AT_SUN_alignment","qualname":"::constants::DW_AT_SUN_alignment","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3436},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34596,"byte_end":34612,"line_start":516,"line_end":516,"column_start":5,"column_end":21},"name":"DW_AT_SUN_vtable","qualname":"::constants::DW_AT_SUN_vtable","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3437},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34627,"byte_end":34652,"line_start":517,"line_end":517,"column_start":5,"column_end":30},"name":"DW_AT_SUN_count_guarantee","qualname":"::constants::DW_AT_SUN_count_guarantee","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3438},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34667,"byte_end":34689,"line_start":518,"line_end":518,"column_start":5,"column_end":27},"name":"DW_AT_SUN_command_line","qualname":"::constants::DW_AT_SUN_command_line","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3439},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34704,"byte_end":34719,"line_start":519,"line_end":519,"column_start":5,"column_end":20},"name":"DW_AT_SUN_vbase","qualname":"::constants::DW_AT_SUN_vbase","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3440},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34734,"byte_end":34759,"line_start":520,"line_end":520,"column_start":5,"column_end":30},"name":"DW_AT_SUN_compile_options","qualname":"::constants::DW_AT_SUN_compile_options","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3441},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34774,"byte_end":34792,"line_start":521,"line_end":521,"column_start":5,"column_end":23},"name":"DW_AT_SUN_language","qualname":"::constants::DW_AT_SUN_language","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3442},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34807,"byte_end":34829,"line_start":522,"line_end":522,"column_start":5,"column_end":27},"name":"DW_AT_SUN_browser_file","qualname":"::constants::DW_AT_SUN_browser_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3443},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34844,"byte_end":34864,"line_start":523,"line_end":523,"column_start":5,"column_end":25},"name":"DW_AT_SUN_vtable_abi","qualname":"::constants::DW_AT_SUN_vtable_abi","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3444},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34879,"byte_end":34901,"line_start":524,"line_end":524,"column_start":5,"column_end":27},"name":"DW_AT_SUN_func_offsets","qualname":"::constants::DW_AT_SUN_func_offsets","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3445},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34916,"byte_end":34933,"line_start":525,"line_end":525,"column_start":5,"column_end":22},"name":"DW_AT_SUN_cf_kind","qualname":"::constants::DW_AT_SUN_cf_kind","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3446},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34948,"byte_end":34970,"line_start":526,"line_end":526,"column_start":5,"column_end":27},"name":"DW_AT_SUN_vtable_index","qualname":"::constants::DW_AT_SUN_vtable_index","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3447},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":34985,"byte_end":35009,"line_start":527,"line_end":527,"column_start":5,"column_end":29},"name":"DW_AT_SUN_omp_tpriv_addr","qualname":"::constants::DW_AT_SUN_omp_tpriv_addr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3448},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35024,"byte_end":35048,"line_start":528,"line_end":528,"column_start":5,"column_end":29},"name":"DW_AT_SUN_omp_child_func","qualname":"::constants::DW_AT_SUN_omp_child_func","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3449},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35063,"byte_end":35084,"line_start":529,"line_end":529,"column_start":5,"column_end":26},"name":"DW_AT_SUN_func_offset","qualname":"::constants::DW_AT_SUN_func_offset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3450},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35099,"byte_end":35123,"line_start":530,"line_end":530,"column_start":5,"column_end":29},"name":"DW_AT_SUN_memop_type_ref","qualname":"::constants::DW_AT_SUN_memop_type_ref","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3451},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35138,"byte_end":35158,"line_start":531,"line_end":531,"column_start":5,"column_end":25},"name":"DW_AT_SUN_profile_id","qualname":"::constants::DW_AT_SUN_profile_id","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3452},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35173,"byte_end":35198,"line_start":532,"line_end":532,"column_start":5,"column_end":30},"name":"DW_AT_SUN_memop_signature","qualname":"::constants::DW_AT_SUN_memop_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3453},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35213,"byte_end":35230,"line_start":533,"line_end":533,"column_start":5,"column_end":22},"name":"DW_AT_SUN_obj_dir","qualname":"::constants::DW_AT_SUN_obj_dir","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3454},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35245,"byte_end":35263,"line_start":534,"line_end":534,"column_start":5,"column_end":23},"name":"DW_AT_SUN_obj_file","qualname":"::constants::DW_AT_SUN_obj_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3455},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35278,"byte_end":35301,"line_start":535,"line_end":535,"column_start":5,"column_end":28},"name":"DW_AT_SUN_original_name","qualname":"::constants::DW_AT_SUN_original_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3456},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35316,"byte_end":35343,"line_start":536,"line_end":536,"column_start":5,"column_end":32},"name":"DW_AT_SUN_hwcprof_signature","qualname":"::constants::DW_AT_SUN_hwcprof_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3457},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35358,"byte_end":35382,"line_start":537,"line_end":537,"column_start":5,"column_end":29},"name":"DW_AT_SUN_amd64_parmdump","qualname":"::constants::DW_AT_SUN_amd64_parmdump","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3458},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35397,"byte_end":35421,"line_start":538,"line_end":538,"column_start":5,"column_end":29},"name":"DW_AT_SUN_part_link_name","qualname":"::constants::DW_AT_SUN_part_link_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3459},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35436,"byte_end":35455,"line_start":539,"line_end":539,"column_start":5,"column_end":24},"name":"DW_AT_SUN_link_name","qualname":"::constants::DW_AT_SUN_link_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3460},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35470,"byte_end":35495,"line_start":540,"line_end":540,"column_start":5,"column_end":30},"name":"DW_AT_SUN_pass_with_const","qualname":"::constants::DW_AT_SUN_pass_with_const","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3461},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35510,"byte_end":35537,"line_start":541,"line_end":541,"column_start":5,"column_end":32},"name":"DW_AT_SUN_return_with_const","qualname":"::constants::DW_AT_SUN_return_with_const","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3462},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35552,"byte_end":35576,"line_start":542,"line_end":542,"column_start":5,"column_end":29},"name":"DW_AT_SUN_import_by_name","qualname":"::constants::DW_AT_SUN_import_by_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3463},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35591,"byte_end":35612,"line_start":543,"line_end":543,"column_start":5,"column_end":26},"name":"DW_AT_SUN_f90_pointer","qualname":"::constants::DW_AT_SUN_f90_pointer","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3464},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35627,"byte_end":35648,"line_start":544,"line_end":544,"column_start":5,"column_end":26},"name":"DW_AT_SUN_pass_by_ref","qualname":"::constants::DW_AT_SUN_pass_by_ref","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3465},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35663,"byte_end":35688,"line_start":545,"line_end":545,"column_start":5,"column_end":30},"name":"DW_AT_SUN_f90_allocatable","qualname":"::constants::DW_AT_SUN_f90_allocatable","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3466},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35703,"byte_end":35736,"line_start":546,"line_end":546,"column_start":5,"column_end":38},"name":"DW_AT_SUN_f90_assumed_shape_array","qualname":"::constants::DW_AT_SUN_f90_assumed_shape_array","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3467},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35751,"byte_end":35766,"line_start":547,"line_end":547,"column_start":5,"column_end":20},"name":"DW_AT_SUN_c_vla","qualname":"::constants::DW_AT_SUN_c_vla","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3468},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35781,"byte_end":35807,"line_start":548,"line_end":548,"column_start":5,"column_end":31},"name":"DW_AT_SUN_return_value_ptr","qualname":"::constants::DW_AT_SUN_return_value_ptr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3469},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35822,"byte_end":35842,"line_start":549,"line_end":549,"column_start":5,"column_end":25},"name":"DW_AT_SUN_dtor_start","qualname":"::constants::DW_AT_SUN_dtor_start","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3470},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35857,"byte_end":35878,"line_start":550,"line_end":550,"column_start":5,"column_end":26},"name":"DW_AT_SUN_dtor_length","qualname":"::constants::DW_AT_SUN_dtor_length","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3471},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35893,"byte_end":35921,"line_start":551,"line_end":551,"column_start":5,"column_end":33},"name":"DW_AT_SUN_dtor_state_initial","qualname":"::constants::DW_AT_SUN_dtor_state_initial","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3472},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35936,"byte_end":35962,"line_start":552,"line_end":552,"column_start":5,"column_end":31},"name":"DW_AT_SUN_dtor_state_final","qualname":"::constants::DW_AT_SUN_dtor_state_final","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3473},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":35977,"byte_end":36004,"line_start":553,"line_end":553,"column_start":5,"column_end":32},"name":"DW_AT_SUN_dtor_state_deltas","qualname":"::constants::DW_AT_SUN_dtor_state_deltas","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3474},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36019,"byte_end":36044,"line_start":554,"line_end":554,"column_start":5,"column_end":30},"name":"DW_AT_SUN_import_by_lname","qualname":"::constants::DW_AT_SUN_import_by_lname","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3475},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36059,"byte_end":36081,"line_start":555,"line_end":555,"column_start":5,"column_end":27},"name":"DW_AT_SUN_f90_use_only","qualname":"::constants::DW_AT_SUN_f90_use_only","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3476},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36096,"byte_end":36119,"line_start":556,"line_end":556,"column_start":5,"column_end":28},"name":"DW_AT_SUN_namelist_spec","qualname":"::constants::DW_AT_SUN_namelist_spec","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3477},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36134,"byte_end":36161,"line_start":557,"line_end":557,"column_start":5,"column_end":32},"name":"DW_AT_SUN_is_omp_child_func","qualname":"::constants::DW_AT_SUN_is_omp_child_func","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3478},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36176,"byte_end":36204,"line_start":558,"line_end":558,"column_start":5,"column_end":33},"name":"DW_AT_SUN_fortran_main_alias","qualname":"::constants::DW_AT_SUN_fortran_main_alias","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3479},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36219,"byte_end":36242,"line_start":559,"line_end":559,"column_start":5,"column_end":28},"name":"DW_AT_SUN_fortran_based","qualname":"::constants::DW_AT_SUN_fortran_based","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3480},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36258,"byte_end":36278,"line_start":561,"line_end":561,"column_start":5,"column_end":25},"name":"DW_AT_ALTIUM_loclist","qualname":"::constants::DW_AT_ALTIUM_loclist","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3481},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36294,"byte_end":36325,"line_start":563,"line_end":563,"column_start":5,"column_end":36},"name":"DW_AT_use_GNAT_descriptive_type","qualname":"::constants::DW_AT_use_GNAT_descriptive_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3482},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36340,"byte_end":36367,"line_start":564,"line_end":564,"column_start":5,"column_end":32},"name":"DW_AT_GNAT_descriptive_type","qualname":"::constants::DW_AT_GNAT_descriptive_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3483},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36382,"byte_end":36401,"line_start":565,"line_end":565,"column_start":5,"column_end":24},"name":"DW_AT_GNU_numerator","qualname":"::constants::DW_AT_GNU_numerator","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3484},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36416,"byte_end":36437,"line_start":566,"line_end":566,"column_start":5,"column_end":26},"name":"DW_AT_GNU_denominator","qualname":"::constants::DW_AT_GNU_denominator","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3485},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36452,"byte_end":36466,"line_start":567,"line_end":567,"column_start":5,"column_end":19},"name":"DW_AT_GNU_bias","qualname":"::constants::DW_AT_GNU_bias","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3486},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36482,"byte_end":36506,"line_start":569,"line_end":569,"column_start":5,"column_end":29},"name":"DW_AT_upc_threads_scaled","qualname":"::constants::DW_AT_upc_threads_scaled","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3487},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36562,"byte_end":36577,"line_start":572,"line_end":572,"column_start":5,"column_end":20},"name":"DW_AT_PGI_lbase","qualname":"::constants::DW_AT_PGI_lbase","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3488},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36592,"byte_end":36609,"line_start":573,"line_end":573,"column_start":5,"column_end":22},"name":"DW_AT_PGI_soffset","qualname":"::constants::DW_AT_PGI_soffset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3489},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36624,"byte_end":36641,"line_start":574,"line_end":574,"column_start":5,"column_end":22},"name":"DW_AT_PGI_lstride","qualname":"::constants::DW_AT_PGI_lstride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3490},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36680,"byte_end":36707,"line_start":577,"line_end":577,"column_start":5,"column_end":32},"name":"DW_AT_BORLAND_property_read","qualname":"::constants::DW_AT_BORLAND_property_read","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3491},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36722,"byte_end":36750,"line_start":578,"line_end":578,"column_start":5,"column_end":33},"name":"DW_AT_BORLAND_property_write","qualname":"::constants::DW_AT_BORLAND_property_write","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3492},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36765,"byte_end":36798,"line_start":579,"line_end":579,"column_start":5,"column_end":38},"name":"DW_AT_BORLAND_property_implements","qualname":"::constants::DW_AT_BORLAND_property_implements","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3493},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36813,"byte_end":36841,"line_start":580,"line_end":580,"column_start":5,"column_end":33},"name":"DW_AT_BORLAND_property_index","qualname":"::constants::DW_AT_BORLAND_property_index","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3494},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36856,"byte_end":36886,"line_start":581,"line_end":581,"column_start":5,"column_end":35},"name":"DW_AT_BORLAND_property_default","qualname":"::constants::DW_AT_BORLAND_property_default","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3495},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36901,"byte_end":36926,"line_start":582,"line_end":582,"column_start":5,"column_end":30},"name":"DW_AT_BORLAND_Delphi_unit","qualname":"::constants::DW_AT_BORLAND_Delphi_unit","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3496},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36941,"byte_end":36967,"line_start":583,"line_end":583,"column_start":5,"column_end":31},"name":"DW_AT_BORLAND_Delphi_class","qualname":"::constants::DW_AT_BORLAND_Delphi_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3497},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":36982,"byte_end":37009,"line_start":584,"line_end":584,"column_start":5,"column_end":32},"name":"DW_AT_BORLAND_Delphi_record","qualname":"::constants::DW_AT_BORLAND_Delphi_record","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3498},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37024,"byte_end":37054,"line_start":585,"line_end":585,"column_start":5,"column_end":35},"name":"DW_AT_BORLAND_Delphi_metaclass","qualname":"::constants::DW_AT_BORLAND_Delphi_metaclass","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3499},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37069,"byte_end":37101,"line_start":586,"line_end":586,"column_start":5,"column_end":37},"name":"DW_AT_BORLAND_Delphi_constructor","qualname":"::constants::DW_AT_BORLAND_Delphi_constructor","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3500},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37116,"byte_end":37147,"line_start":587,"line_end":587,"column_start":5,"column_end":36},"name":"DW_AT_BORLAND_Delphi_destructor","qualname":"::constants::DW_AT_BORLAND_Delphi_destructor","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3501},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37162,"byte_end":37199,"line_start":588,"line_end":588,"column_start":5,"column_end":42},"name":"DW_AT_BORLAND_Delphi_anonymous_method","qualname":"::constants::DW_AT_BORLAND_Delphi_anonymous_method","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3502},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37214,"byte_end":37244,"line_start":589,"line_end":589,"column_start":5,"column_end":35},"name":"DW_AT_BORLAND_Delphi_interface","qualname":"::constants::DW_AT_BORLAND_Delphi_interface","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3503},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37259,"byte_end":37283,"line_start":590,"line_end":590,"column_start":5,"column_end":29},"name":"DW_AT_BORLAND_Delphi_ABI","qualname":"::constants::DW_AT_BORLAND_Delphi_ABI","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3504},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37298,"byte_end":37325,"line_start":591,"line_end":591,"column_start":5,"column_end":32},"name":"DW_AT_BORLAND_Delphi_return","qualname":"::constants::DW_AT_BORLAND_Delphi_return","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3505},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37340,"byte_end":37369,"line_start":592,"line_end":592,"column_start":5,"column_end":34},"name":"DW_AT_BORLAND_Delphi_frameptr","qualname":"::constants::DW_AT_BORLAND_Delphi_frameptr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3506},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37384,"byte_end":37405,"line_start":593,"line_end":593,"column_start":5,"column_end":26},"name":"DW_AT_BORLAND_closure","qualname":"::constants::DW_AT_BORLAND_closure","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3507},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37449,"byte_end":37472,"line_start":596,"line_end":596,"column_start":5,"column_end":28},"name":"DW_AT_LLVM_include_path","qualname":"::constants::DW_AT_LLVM_include_path","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3508},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37487,"byte_end":37511,"line_start":597,"line_end":597,"column_start":5,"column_end":29},"name":"DW_AT_LLVM_config_macros","qualname":"::constants::DW_AT_LLVM_config_macros","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3509},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37526,"byte_end":37545,"line_start":598,"line_end":598,"column_start":5,"column_end":24},"name":"DW_AT_LLVM_isysroot","qualname":"::constants::DW_AT_LLVM_isysroot","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3510},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37582,"byte_end":37603,"line_start":601,"line_end":601,"column_start":5,"column_end":26},"name":"DW_AT_APPLE_optimized","qualname":"::constants::DW_AT_APPLE_optimized","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3511},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37618,"byte_end":37635,"line_start":602,"line_end":602,"column_start":5,"column_end":22},"name":"DW_AT_APPLE_flags","qualname":"::constants::DW_AT_APPLE_flags","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3512},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37650,"byte_end":37665,"line_start":603,"line_end":603,"column_start":5,"column_end":20},"name":"DW_AT_APPLE_isa","qualname":"::constants::DW_AT_APPLE_isa","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3513},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37680,"byte_end":37697,"line_start":604,"line_end":604,"column_start":5,"column_end":22},"name":"DW_AT_APPLE_block","qualname":"::constants::DW_AT_APPLE_block","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3514},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37712,"byte_end":37742,"line_start":605,"line_end":605,"column_start":5,"column_end":35},"name":"DW_AT_APPLE_major_runtime_vers","qualname":"::constants::DW_AT_APPLE_major_runtime_vers","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3515},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37757,"byte_end":37782,"line_start":606,"line_end":606,"column_start":5,"column_end":30},"name":"DW_AT_APPLE_runtime_class","qualname":"::constants::DW_AT_APPLE_runtime_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3516},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37797,"byte_end":37823,"line_start":607,"line_end":607,"column_start":5,"column_end":31},"name":"DW_AT_APPLE_omit_frame_ptr","qualname":"::constants::DW_AT_APPLE_omit_frame_ptr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3517},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37838,"byte_end":37863,"line_start":608,"line_end":608,"column_start":5,"column_end":30},"name":"DW_AT_APPLE_property_name","qualname":"::constants::DW_AT_APPLE_property_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3518},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37878,"byte_end":37905,"line_start":609,"line_end":609,"column_start":5,"column_end":32},"name":"DW_AT_APPLE_property_getter","qualname":"::constants::DW_AT_APPLE_property_getter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3519},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37920,"byte_end":37947,"line_start":610,"line_end":610,"column_start":5,"column_end":32},"name":"DW_AT_APPLE_property_setter","qualname":"::constants::DW_AT_APPLE_property_setter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3520},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":37962,"byte_end":37992,"line_start":611,"line_end":611,"column_start":5,"column_end":35},"name":"DW_AT_APPLE_property_attribute","qualname":"::constants::DW_AT_APPLE_property_attribute","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3521},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38007,"byte_end":38037,"line_start":612,"line_end":612,"column_start":5,"column_end":35},"name":"DW_AT_APPLE_objc_complete_type","qualname":"::constants::DW_AT_APPLE_objc_complete_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3522},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38052,"byte_end":38072,"line_start":613,"line_end":613,"column_start":5,"column_end":25},"name":"DW_AT_APPLE_property","qualname":"::constants::DW_AT_APPLE_property","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3605},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38183,"byte_end":38189,"line_start":620,"line_end":620,"column_start":1,"column_end":7},"name":"DwForm","qualname":"::constants::DwForm","value":"","parent":null,"children":[],"decl_id":null,"docs":" The attribute form encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3553},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38201,"byte_end":38213,"line_start":621,"line_end":621,"column_start":5,"column_end":17},"name":"DW_FORM_null","qualname":"::constants::DW_FORM_null","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3554},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38227,"byte_end":38239,"line_start":623,"line_end":623,"column_start":5,"column_end":17},"name":"DW_FORM_addr","qualname":"::constants::DW_FORM_addr","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3555},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38252,"byte_end":38266,"line_start":624,"line_end":624,"column_start":5,"column_end":19},"name":"DW_FORM_block2","qualname":"::constants::DW_FORM_block2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3556},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38279,"byte_end":38293,"line_start":625,"line_end":625,"column_start":5,"column_end":19},"name":"DW_FORM_block4","qualname":"::constants::DW_FORM_block4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3557},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38306,"byte_end":38319,"line_start":626,"line_end":626,"column_start":5,"column_end":18},"name":"DW_FORM_data2","qualname":"::constants::DW_FORM_data2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3558},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38332,"byte_end":38345,"line_start":627,"line_end":627,"column_start":5,"column_end":18},"name":"DW_FORM_data4","qualname":"::constants::DW_FORM_data4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3559},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38358,"byte_end":38371,"line_start":628,"line_end":628,"column_start":5,"column_end":18},"name":"DW_FORM_data8","qualname":"::constants::DW_FORM_data8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3560},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38384,"byte_end":38398,"line_start":629,"line_end":629,"column_start":5,"column_end":19},"name":"DW_FORM_string","qualname":"::constants::DW_FORM_string","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3561},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38411,"byte_end":38424,"line_start":630,"line_end":630,"column_start":5,"column_end":18},"name":"DW_FORM_block","qualname":"::constants::DW_FORM_block","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3562},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38437,"byte_end":38451,"line_start":631,"line_end":631,"column_start":5,"column_end":19},"name":"DW_FORM_block1","qualname":"::constants::DW_FORM_block1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3563},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38464,"byte_end":38477,"line_start":632,"line_end":632,"column_start":5,"column_end":18},"name":"DW_FORM_data1","qualname":"::constants::DW_FORM_data1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3564},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38490,"byte_end":38502,"line_start":633,"line_end":633,"column_start":5,"column_end":17},"name":"DW_FORM_flag","qualname":"::constants::DW_FORM_flag","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3565},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38515,"byte_end":38528,"line_start":634,"line_end":634,"column_start":5,"column_end":18},"name":"DW_FORM_sdata","qualname":"::constants::DW_FORM_sdata","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3566},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38541,"byte_end":38553,"line_start":635,"line_end":635,"column_start":5,"column_end":17},"name":"DW_FORM_strp","qualname":"::constants::DW_FORM_strp","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3567},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38566,"byte_end":38579,"line_start":636,"line_end":636,"column_start":5,"column_end":18},"name":"DW_FORM_udata","qualname":"::constants::DW_FORM_udata","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3568},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38592,"byte_end":38608,"line_start":637,"line_end":637,"column_start":5,"column_end":21},"name":"DW_FORM_ref_addr","qualname":"::constants::DW_FORM_ref_addr","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3569},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38621,"byte_end":38633,"line_start":638,"line_end":638,"column_start":5,"column_end":17},"name":"DW_FORM_ref1","qualname":"::constants::DW_FORM_ref1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3570},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38646,"byte_end":38658,"line_start":639,"line_end":639,"column_start":5,"column_end":17},"name":"DW_FORM_ref2","qualname":"::constants::DW_FORM_ref2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3571},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38671,"byte_end":38683,"line_start":640,"line_end":640,"column_start":5,"column_end":17},"name":"DW_FORM_ref4","qualname":"::constants::DW_FORM_ref4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3572},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38696,"byte_end":38708,"line_start":641,"line_end":641,"column_start":5,"column_end":17},"name":"DW_FORM_ref8","qualname":"::constants::DW_FORM_ref8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3573},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38721,"byte_end":38738,"line_start":642,"line_end":642,"column_start":5,"column_end":22},"name":"DW_FORM_ref_udata","qualname":"::constants::DW_FORM_ref_udata","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3574},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38751,"byte_end":38767,"line_start":643,"line_end":643,"column_start":5,"column_end":21},"name":"DW_FORM_indirect","qualname":"::constants::DW_FORM_indirect","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3575},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38793,"byte_end":38811,"line_start":646,"line_end":646,"column_start":5,"column_end":23},"name":"DW_FORM_sec_offset","qualname":"::constants::DW_FORM_sec_offset","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3576},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38824,"byte_end":38839,"line_start":647,"line_end":647,"column_start":5,"column_end":20},"name":"DW_FORM_exprloc","qualname":"::constants::DW_FORM_exprloc","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3577},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38852,"byte_end":38872,"line_start":648,"line_end":648,"column_start":5,"column_end":25},"name":"DW_FORM_flag_present","qualname":"::constants::DW_FORM_flag_present","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3578},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38885,"byte_end":38901,"line_start":649,"line_end":649,"column_start":5,"column_end":21},"name":"DW_FORM_ref_sig8","qualname":"::constants::DW_FORM_ref_sig8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3579},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38927,"byte_end":38939,"line_start":652,"line_end":652,"column_start":5,"column_end":17},"name":"DW_FORM_strx","qualname":"::constants::DW_FORM_strx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3580},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38952,"byte_end":38965,"line_start":653,"line_end":653,"column_start":5,"column_end":18},"name":"DW_FORM_addrx","qualname":"::constants::DW_FORM_addrx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3581},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":38978,"byte_end":38994,"line_start":654,"line_end":654,"column_start":5,"column_end":21},"name":"DW_FORM_ref_sup4","qualname":"::constants::DW_FORM_ref_sup4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3582},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39007,"byte_end":39023,"line_start":655,"line_end":655,"column_start":5,"column_end":21},"name":"DW_FORM_strp_sup","qualname":"::constants::DW_FORM_strp_sup","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3583},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39036,"byte_end":39050,"line_start":656,"line_end":656,"column_start":5,"column_end":19},"name":"DW_FORM_data16","qualname":"::constants::DW_FORM_data16","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3584},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39063,"byte_end":39080,"line_start":657,"line_end":657,"column_start":5,"column_end":22},"name":"DW_FORM_line_strp","qualname":"::constants::DW_FORM_line_strp","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3585},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39093,"byte_end":39115,"line_start":658,"line_end":658,"column_start":5,"column_end":27},"name":"DW_FORM_implicit_const","qualname":"::constants::DW_FORM_implicit_const","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3586},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39128,"byte_end":39144,"line_start":659,"line_end":659,"column_start":5,"column_end":21},"name":"DW_FORM_loclistx","qualname":"::constants::DW_FORM_loclistx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3587},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39157,"byte_end":39173,"line_start":660,"line_end":660,"column_start":5,"column_end":21},"name":"DW_FORM_rnglistx","qualname":"::constants::DW_FORM_rnglistx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3588},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39186,"byte_end":39202,"line_start":661,"line_end":661,"column_start":5,"column_end":21},"name":"DW_FORM_ref_sup8","qualname":"::constants::DW_FORM_ref_sup8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3589},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39215,"byte_end":39228,"line_start":662,"line_end":662,"column_start":5,"column_end":18},"name":"DW_FORM_strx1","qualname":"::constants::DW_FORM_strx1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3590},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39241,"byte_end":39254,"line_start":663,"line_end":663,"column_start":5,"column_end":18},"name":"DW_FORM_strx2","qualname":"::constants::DW_FORM_strx2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3591},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39267,"byte_end":39280,"line_start":664,"line_end":664,"column_start":5,"column_end":18},"name":"DW_FORM_strx3","qualname":"::constants::DW_FORM_strx3","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3592},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39293,"byte_end":39306,"line_start":665,"line_end":665,"column_start":5,"column_end":18},"name":"DW_FORM_strx4","qualname":"::constants::DW_FORM_strx4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3593},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39319,"byte_end":39333,"line_start":666,"line_end":666,"column_start":5,"column_end":19},"name":"DW_FORM_addrx1","qualname":"::constants::DW_FORM_addrx1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3594},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39346,"byte_end":39360,"line_start":667,"line_end":667,"column_start":5,"column_end":19},"name":"DW_FORM_addrx2","qualname":"::constants::DW_FORM_addrx2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3595},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39373,"byte_end":39387,"line_start":668,"line_end":668,"column_start":5,"column_end":19},"name":"DW_FORM_addrx3","qualname":"::constants::DW_FORM_addrx3","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3596},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39400,"byte_end":39414,"line_start":669,"line_end":669,"column_start":5,"column_end":19},"name":"DW_FORM_addrx4","qualname":"::constants::DW_FORM_addrx4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3597},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39463,"byte_end":39485,"line_start":672,"line_end":672,"column_start":5,"column_end":27},"name":"DW_FORM_GNU_addr_index","qualname":"::constants::DW_FORM_GNU_addr_index","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3598},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39500,"byte_end":39521,"line_start":673,"line_end":673,"column_start":5,"column_end":26},"name":"DW_FORM_GNU_str_index","qualname":"::constants::DW_FORM_GNU_str_index","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3599},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39598,"byte_end":39617,"line_start":676,"line_end":676,"column_start":5,"column_end":24},"name":"DW_FORM_GNU_ref_alt","qualname":"::constants::DW_FORM_GNU_ref_alt","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3600},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39632,"byte_end":39652,"line_start":677,"line_end":677,"column_start":5,"column_end":25},"name":"DW_FORM_GNU_strp_alt","qualname":"::constants::DW_FORM_GNU_strp_alt","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3655},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39784,"byte_end":39789,"line_start":684,"line_end":684,"column_start":1,"column_end":6},"name":"DwAte","qualname":"::constants::DwAte","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_encoding` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3631},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39800,"byte_end":39814,"line_start":685,"line_end":685,"column_start":5,"column_end":19},"name":"DW_ATE_address","qualname":"::constants::DW_ATE_address","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3632},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39827,"byte_end":39841,"line_start":686,"line_end":686,"column_start":5,"column_end":19},"name":"DW_ATE_boolean","qualname":"::constants::DW_ATE_boolean","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3633},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39854,"byte_end":39874,"line_start":687,"line_end":687,"column_start":5,"column_end":25},"name":"DW_ATE_complex_float","qualname":"::constants::DW_ATE_complex_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3634},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39887,"byte_end":39899,"line_start":688,"line_end":688,"column_start":5,"column_end":17},"name":"DW_ATE_float","qualname":"::constants::DW_ATE_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3635},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39912,"byte_end":39925,"line_start":689,"line_end":689,"column_start":5,"column_end":18},"name":"DW_ATE_signed","qualname":"::constants::DW_ATE_signed","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3636},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39938,"byte_end":39956,"line_start":690,"line_end":690,"column_start":5,"column_end":23},"name":"DW_ATE_signed_char","qualname":"::constants::DW_ATE_signed_char","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3637},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39969,"byte_end":39984,"line_start":691,"line_end":691,"column_start":5,"column_end":20},"name":"DW_ATE_unsigned","qualname":"::constants::DW_ATE_unsigned","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3638},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":39997,"byte_end":40017,"line_start":692,"line_end":692,"column_start":5,"column_end":25},"name":"DW_ATE_unsigned_char","qualname":"::constants::DW_ATE_unsigned_char","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3639},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40043,"byte_end":40065,"line_start":695,"line_end":695,"column_start":5,"column_end":27},"name":"DW_ATE_imaginary_float","qualname":"::constants::DW_ATE_imaginary_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3640},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40078,"byte_end":40099,"line_start":696,"line_end":696,"column_start":5,"column_end":26},"name":"DW_ATE_packed_decimal","qualname":"::constants::DW_ATE_packed_decimal","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3641},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40112,"byte_end":40133,"line_start":697,"line_end":697,"column_start":5,"column_end":26},"name":"DW_ATE_numeric_string","qualname":"::constants::DW_ATE_numeric_string","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3642},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40146,"byte_end":40159,"line_start":698,"line_end":698,"column_start":5,"column_end":18},"name":"DW_ATE_edited","qualname":"::constants::DW_ATE_edited","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3643},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40172,"byte_end":40191,"line_start":699,"line_end":699,"column_start":5,"column_end":24},"name":"DW_ATE_signed_fixed","qualname":"::constants::DW_ATE_signed_fixed","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3644},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40204,"byte_end":40225,"line_start":700,"line_end":700,"column_start":5,"column_end":26},"name":"DW_ATE_unsigned_fixed","qualname":"::constants::DW_ATE_unsigned_fixed","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3645},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40238,"byte_end":40258,"line_start":701,"line_end":701,"column_start":5,"column_end":25},"name":"DW_ATE_decimal_float","qualname":"::constants::DW_ATE_decimal_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3646},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40285,"byte_end":40295,"line_start":704,"line_end":704,"column_start":5,"column_end":15},"name":"DW_ATE_UTF","qualname":"::constants::DW_ATE_UTF","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3647},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40308,"byte_end":40318,"line_start":705,"line_end":705,"column_start":5,"column_end":15},"name":"DW_ATE_UCS","qualname":"::constants::DW_ATE_UCS","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3648},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40331,"byte_end":40343,"line_start":706,"line_end":706,"column_start":5,"column_end":17},"name":"DW_ATE_ASCII","qualname":"::constants::DW_ATE_ASCII","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3649},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40357,"byte_end":40371,"line_start":708,"line_end":708,"column_start":5,"column_end":19},"name":"DW_ATE_lo_user","qualname":"::constants::DW_ATE_lo_user","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3650},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40384,"byte_end":40398,"line_start":709,"line_end":709,"column_start":5,"column_end":19},"name":"DW_ATE_hi_user","qualname":"::constants::DW_ATE_hi_user","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3695},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40522,"byte_end":40527,"line_start":716,"line_end":716,"column_start":1,"column_end":6},"name":"DwLle","qualname":"::constants::DwLle","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in location list entries.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3681},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40538,"byte_end":40556,"line_start":717,"line_end":717,"column_start":5,"column_end":23},"name":"DW_LLE_end_of_list","qualname":"::constants::DW_LLE_end_of_list","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3682},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40569,"byte_end":40589,"line_start":718,"line_end":718,"column_start":5,"column_end":25},"name":"DW_LLE_base_addressx","qualname":"::constants::DW_LLE_base_addressx","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3683},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40602,"byte_end":40620,"line_start":719,"line_end":719,"column_start":5,"column_end":23},"name":"DW_LLE_startx_endx","qualname":"::constants::DW_LLE_startx_endx","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3684},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40633,"byte_end":40653,"line_start":720,"line_end":720,"column_start":5,"column_end":25},"name":"DW_LLE_startx_length","qualname":"::constants::DW_LLE_startx_length","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3685},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40666,"byte_end":40684,"line_start":721,"line_end":721,"column_start":5,"column_end":23},"name":"DW_LLE_offset_pair","qualname":"::constants::DW_LLE_offset_pair","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3686},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40697,"byte_end":40720,"line_start":722,"line_end":722,"column_start":5,"column_end":28},"name":"DW_LLE_default_location","qualname":"::constants::DW_LLE_default_location","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3687},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40733,"byte_end":40752,"line_start":723,"line_end":723,"column_start":5,"column_end":24},"name":"DW_LLE_base_address","qualname":"::constants::DW_LLE_base_address","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3688},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40765,"byte_end":40781,"line_start":724,"line_end":724,"column_start":5,"column_end":21},"name":"DW_LLE_start_end","qualname":"::constants::DW_LLE_start_end","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3689},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40794,"byte_end":40813,"line_start":725,"line_end":725,"column_start":5,"column_end":24},"name":"DW_LLE_start_length","qualname":"::constants::DW_LLE_start_length","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3690},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40826,"byte_end":40846,"line_start":726,"line_end":726,"column_start":5,"column_end":25},"name":"DW_LLE_GNU_view_pair","qualname":"::constants::DW_LLE_GNU_view_pair","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3730},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40981,"byte_end":40985,"line_start":733,"line_end":733,"column_start":1,"column_end":5},"name":"DwDs","qualname":"::constants::DwDs","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_decimal_sign` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3721},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":40996,"byte_end":41010,"line_start":734,"line_end":734,"column_start":5,"column_end":19},"name":"DW_DS_unsigned","qualname":"::constants::DW_DS_unsigned","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3722},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41023,"byte_end":41046,"line_start":735,"line_end":735,"column_start":5,"column_end":28},"name":"DW_DS_leading_overpunch","qualname":"::constants::DW_DS_leading_overpunch","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3723},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41059,"byte_end":41083,"line_start":736,"line_end":736,"column_start":5,"column_end":29},"name":"DW_DS_trailing_overpunch","qualname":"::constants::DW_DS_trailing_overpunch","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3724},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41096,"byte_end":41118,"line_start":737,"line_end":737,"column_start":5,"column_end":27},"name":"DW_DS_leading_separate","qualname":"::constants::DW_DS_leading_separate","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3725},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41131,"byte_end":41154,"line_start":738,"line_end":738,"column_start":5,"column_end":28},"name":"DW_DS_trailing_separate","qualname":"::constants::DW_DS_trailing_separate","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3765},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41286,"byte_end":41291,"line_start":745,"line_end":745,"column_start":1,"column_end":6},"name":"DwEnd","qualname":"::constants::DwEnd","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_endianity` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3756},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41302,"byte_end":41316,"line_start":746,"line_end":746,"column_start":5,"column_end":19},"name":"DW_END_default","qualname":"::constants::DW_END_default","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3757},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41329,"byte_end":41339,"line_start":747,"line_end":747,"column_start":5,"column_end":15},"name":"DW_END_big","qualname":"::constants::DW_END_big","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3758},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41352,"byte_end":41365,"line_start":748,"line_end":748,"column_start":5,"column_end":18},"name":"DW_END_little","qualname":"::constants::DW_END_little","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3759},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41378,"byte_end":41392,"line_start":749,"line_end":749,"column_start":5,"column_end":19},"name":"DW_END_lo_user","qualname":"::constants::DW_END_lo_user","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3760},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41405,"byte_end":41419,"line_start":750,"line_end":750,"column_start":5,"column_end":19},"name":"DW_END_hi_user","qualname":"::constants::DW_END_hi_user","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3798},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41555,"byte_end":41563,"line_start":757,"line_end":757,"column_start":1,"column_end":9},"name":"DwAccess","qualname":"::constants::DwAccess","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_accessibility` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3791},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41574,"byte_end":41590,"line_start":758,"line_end":758,"column_start":5,"column_end":21},"name":"DW_ACCESS_public","qualname":"::constants::DW_ACCESS_public","value":"DwAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3792},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41603,"byte_end":41622,"line_start":759,"line_end":759,"column_start":5,"column_end":24},"name":"DW_ACCESS_protected","qualname":"::constants::DW_ACCESS_protected","value":"DwAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3793},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41635,"byte_end":41652,"line_start":760,"line_end":760,"column_start":5,"column_end":22},"name":"DW_ACCESS_private","qualname":"::constants::DW_ACCESS_private","value":"DwAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3831},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41786,"byte_end":41791,"line_start":767,"line_end":767,"column_start":1,"column_end":6},"name":"DwVis","qualname":"::constants::DwVis","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_visibility` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3824},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41802,"byte_end":41814,"line_start":768,"line_end":768,"column_start":5,"column_end":17},"name":"DW_VIS_local","qualname":"::constants::DW_VIS_local","value":"DwVis","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3825},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41827,"byte_end":41842,"line_start":769,"line_end":769,"column_start":5,"column_end":20},"name":"DW_VIS_exported","qualname":"::constants::DW_VIS_exported","value":"DwVis","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3826},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":41855,"byte_end":41871,"line_start":770,"line_end":770,"column_start":5,"column_end":21},"name":"DW_VIS_qualified","qualname":"::constants::DW_VIS_qualified","value":"DwVis","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3864},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42005,"byte_end":42017,"line_start":777,"line_end":777,"column_start":1,"column_end":13},"name":"DwVirtuality","qualname":"::constants::DwVirtuality","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_virtuality` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3857},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42028,"byte_end":42046,"line_start":778,"line_end":778,"column_start":5,"column_end":23},"name":"DW_VIRTUALITY_none","qualname":"::constants::DW_VIRTUALITY_none","value":"DwVirtuality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3858},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42059,"byte_end":42080,"line_start":779,"line_end":779,"column_start":5,"column_end":26},"name":"DW_VIRTUALITY_virtual","qualname":"::constants::DW_VIRTUALITY_virtual","value":"DwVirtuality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3859},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42093,"byte_end":42119,"line_start":780,"line_end":780,"column_start":5,"column_end":31},"name":"DW_VIRTUALITY_pure_virtual","qualname":"::constants::DW_VIRTUALITY_pure_virtual","value":"DwVirtuality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3938},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42251,"byte_end":42257,"line_start":787,"line_end":787,"column_start":1,"column_end":7},"name":"DwLang","qualname":"::constants::DwLang","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_language` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3890},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42269,"byte_end":42280,"line_start":788,"line_end":788,"column_start":5,"column_end":16},"name":"DW_LANG_C89","qualname":"::constants::DW_LANG_C89","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3891},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42295,"byte_end":42304,"line_start":789,"line_end":789,"column_start":5,"column_end":14},"name":"DW_LANG_C","qualname":"::constants::DW_LANG_C","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3892},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42319,"byte_end":42332,"line_start":790,"line_end":790,"column_start":5,"column_end":18},"name":"DW_LANG_Ada83","qualname":"::constants::DW_LANG_Ada83","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3893},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42347,"byte_end":42366,"line_start":791,"line_end":791,"column_start":5,"column_end":24},"name":"DW_LANG_C_plus_plus","qualname":"::constants::DW_LANG_C_plus_plus","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3894},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42381,"byte_end":42396,"line_start":792,"line_end":792,"column_start":5,"column_end":20},"name":"DW_LANG_Cobol74","qualname":"::constants::DW_LANG_Cobol74","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3895},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42411,"byte_end":42426,"line_start":793,"line_end":793,"column_start":5,"column_end":20},"name":"DW_LANG_Cobol85","qualname":"::constants::DW_LANG_Cobol85","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3896},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42441,"byte_end":42458,"line_start":794,"line_end":794,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran77","qualname":"::constants::DW_LANG_Fortran77","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3897},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42473,"byte_end":42490,"line_start":795,"line_end":795,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran90","qualname":"::constants::DW_LANG_Fortran90","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3898},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42505,"byte_end":42521,"line_start":796,"line_end":796,"column_start":5,"column_end":21},"name":"DW_LANG_Pascal83","qualname":"::constants::DW_LANG_Pascal83","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3899},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42536,"byte_end":42551,"line_start":797,"line_end":797,"column_start":5,"column_end":20},"name":"DW_LANG_Modula2","qualname":"::constants::DW_LANG_Modula2","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3900},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42566,"byte_end":42578,"line_start":798,"line_end":798,"column_start":5,"column_end":17},"name":"DW_LANG_Java","qualname":"::constants::DW_LANG_Java","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3901},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42593,"byte_end":42604,"line_start":799,"line_end":799,"column_start":5,"column_end":16},"name":"DW_LANG_C99","qualname":"::constants::DW_LANG_C99","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3902},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42619,"byte_end":42632,"line_start":800,"line_end":800,"column_start":5,"column_end":18},"name":"DW_LANG_Ada95","qualname":"::constants::DW_LANG_Ada95","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3903},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42647,"byte_end":42664,"line_start":801,"line_end":801,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran95","qualname":"::constants::DW_LANG_Fortran95","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3904},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42679,"byte_end":42690,"line_start":802,"line_end":802,"column_start":5,"column_end":16},"name":"DW_LANG_PLI","qualname":"::constants::DW_LANG_PLI","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3905},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42705,"byte_end":42717,"line_start":803,"line_end":803,"column_start":5,"column_end":17},"name":"DW_LANG_ObjC","qualname":"::constants::DW_LANG_ObjC","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3906},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42732,"byte_end":42754,"line_start":804,"line_end":804,"column_start":5,"column_end":27},"name":"DW_LANG_ObjC_plus_plus","qualname":"::constants::DW_LANG_ObjC_plus_plus","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3907},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42769,"byte_end":42780,"line_start":805,"line_end":805,"column_start":5,"column_end":16},"name":"DW_LANG_UPC","qualname":"::constants::DW_LANG_UPC","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3908},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42795,"byte_end":42804,"line_start":806,"line_end":806,"column_start":5,"column_end":14},"name":"DW_LANG_D","qualname":"::constants::DW_LANG_D","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3909},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42819,"byte_end":42833,"line_start":807,"line_end":807,"column_start":5,"column_end":19},"name":"DW_LANG_Python","qualname":"::constants::DW_LANG_Python","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3910},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42848,"byte_end":42862,"line_start":808,"line_end":808,"column_start":5,"column_end":19},"name":"DW_LANG_OpenCL","qualname":"::constants::DW_LANG_OpenCL","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3911},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42877,"byte_end":42887,"line_start":809,"line_end":809,"column_start":5,"column_end":15},"name":"DW_LANG_Go","qualname":"::constants::DW_LANG_Go","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3912},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42902,"byte_end":42917,"line_start":810,"line_end":810,"column_start":5,"column_end":20},"name":"DW_LANG_Modula3","qualname":"::constants::DW_LANG_Modula3","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3913},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42932,"byte_end":42947,"line_start":811,"line_end":811,"column_start":5,"column_end":20},"name":"DW_LANG_Haskell","qualname":"::constants::DW_LANG_Haskell","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3914},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42962,"byte_end":42984,"line_start":812,"line_end":812,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_03","qualname":"::constants::DW_LANG_C_plus_plus_03","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3915},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":42999,"byte_end":43021,"line_start":813,"line_end":813,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_11","qualname":"::constants::DW_LANG_C_plus_plus_11","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3916},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43036,"byte_end":43049,"line_start":814,"line_end":814,"column_start":5,"column_end":18},"name":"DW_LANG_OCaml","qualname":"::constants::DW_LANG_OCaml","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3917},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43064,"byte_end":43076,"line_start":815,"line_end":815,"column_start":5,"column_end":17},"name":"DW_LANG_Rust","qualname":"::constants::DW_LANG_Rust","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3918},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43091,"byte_end":43102,"line_start":816,"line_end":816,"column_start":5,"column_end":16},"name":"DW_LANG_C11","qualname":"::constants::DW_LANG_C11","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3919},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43117,"byte_end":43130,"line_start":817,"line_end":817,"column_start":5,"column_end":18},"name":"DW_LANG_Swift","qualname":"::constants::DW_LANG_Swift","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3920},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43145,"byte_end":43158,"line_start":818,"line_end":818,"column_start":5,"column_end":18},"name":"DW_LANG_Julia","qualname":"::constants::DW_LANG_Julia","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3921},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43173,"byte_end":43186,"line_start":819,"line_end":819,"column_start":5,"column_end":18},"name":"DW_LANG_Dylan","qualname":"::constants::DW_LANG_Dylan","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3922},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43201,"byte_end":43223,"line_start":820,"line_end":820,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_14","qualname":"::constants::DW_LANG_C_plus_plus_14","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3923},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43238,"byte_end":43255,"line_start":821,"line_end":821,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran03","qualname":"::constants::DW_LANG_Fortran03","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3924},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43270,"byte_end":43287,"line_start":822,"line_end":822,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran08","qualname":"::constants::DW_LANG_Fortran08","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3925},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43302,"byte_end":43322,"line_start":823,"line_end":823,"column_start":5,"column_end":25},"name":"DW_LANG_RenderScript","qualname":"::constants::DW_LANG_RenderScript","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3926},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43337,"byte_end":43350,"line_start":824,"line_end":824,"column_start":5,"column_end":18},"name":"DW_LANG_BLISS","qualname":"::constants::DW_LANG_BLISS","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3927},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43366,"byte_end":43381,"line_start":826,"line_end":826,"column_start":5,"column_end":20},"name":"DW_LANG_lo_user","qualname":"::constants::DW_LANG_lo_user","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3928},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43396,"byte_end":43411,"line_start":827,"line_end":827,"column_start":5,"column_end":20},"name":"DW_LANG_hi_user","qualname":"::constants::DW_LANG_hi_user","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3929},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43427,"byte_end":43449,"line_start":829,"line_end":829,"column_start":5,"column_end":27},"name":"DW_LANG_Mips_Assembler","qualname":"::constants::DW_LANG_Mips_Assembler","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3930},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43464,"byte_end":43491,"line_start":830,"line_end":830,"column_start":5,"column_end":32},"name":"DW_LANG_GOOGLE_RenderScript","qualname":"::constants::DW_LANG_GOOGLE_RenderScript","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3931},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43506,"byte_end":43527,"line_start":831,"line_end":831,"column_start":5,"column_end":26},"name":"DW_LANG_SUN_Assembler","qualname":"::constants::DW_LANG_SUN_Assembler","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3932},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43542,"byte_end":43566,"line_start":832,"line_end":832,"column_start":5,"column_end":29},"name":"DW_LANG_ALTIUM_Assembler","qualname":"::constants::DW_LANG_ALTIUM_Assembler","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3933},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43581,"byte_end":43603,"line_start":833,"line_end":833,"column_start":5,"column_end":27},"name":"DW_LANG_BORLAND_Delphi","qualname":"::constants::DW_LANG_BORLAND_Delphi","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43705,"byte_end":43724,"line_start":838,"line_end":838,"column_start":12,"column_end":31},"name":"default_lower_bound","qualname":"<DwLang>::default_lower_bound","value":"pub fn default_lower_bound(Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the default DW_AT_lower_bound for this language.\n","sig":null,"attributes":[{"value":"/ Get the default DW_AT_lower_bound for this language.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43637,"byte_end":43693,"line_start":837,"line_end":837,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":3969},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":44992,"byte_end":44998,"line_start":877,"line_end":877,"column_start":1,"column_end":7},"name":"DwAddr","qualname":"::constants::DwAddr","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_address_class` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3964},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45010,"byte_end":45022,"line_start":878,"line_end":878,"column_start":5,"column_end":17},"name":"DW_ADDR_none","qualname":"::constants::DW_ADDR_none","value":"DwAddr","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4003},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45161,"byte_end":45165,"line_start":885,"line_end":885,"column_start":1,"column_end":5},"name":"DwId","qualname":"::constants::DwId","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_identifier_case` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3995},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45176,"byte_end":45196,"line_start":886,"line_end":886,"column_start":5,"column_end":25},"name":"DW_ID_case_sensitive","qualname":"::constants::DW_ID_case_sensitive","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3996},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45209,"byte_end":45222,"line_start":887,"line_end":887,"column_start":5,"column_end":18},"name":"DW_ID_up_case","qualname":"::constants::DW_ID_up_case","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3997},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45235,"byte_end":45250,"line_start":888,"line_end":888,"column_start":5,"column_end":20},"name":"DW_ID_down_case","qualname":"::constants::DW_ID_down_case","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3998},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45263,"byte_end":45285,"line_start":889,"line_end":889,"column_start":5,"column_end":27},"name":"DW_ID_case_insensitive","qualname":"::constants::DW_ID_case_insensitive","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4040},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45427,"byte_end":45431,"line_start":896,"line_end":896,"column_start":1,"column_end":5},"name":"DwCc","qualname":"::constants::DwCc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_calling_convention` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4029},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45442,"byte_end":45454,"line_start":897,"line_end":897,"column_start":5,"column_end":17},"name":"DW_CC_normal","qualname":"::constants::DW_CC_normal","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4030},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45467,"byte_end":45480,"line_start":898,"line_end":898,"column_start":5,"column_end":18},"name":"DW_CC_program","qualname":"::constants::DW_CC_program","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4031},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45493,"byte_end":45505,"line_start":899,"line_end":899,"column_start":5,"column_end":17},"name":"DW_CC_nocall","qualname":"::constants::DW_CC_nocall","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4032},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45518,"byte_end":45541,"line_start":900,"line_end":900,"column_start":5,"column_end":28},"name":"DW_CC_pass_by_reference","qualname":"::constants::DW_CC_pass_by_reference","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4033},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45554,"byte_end":45573,"line_start":901,"line_end":901,"column_start":5,"column_end":24},"name":"DW_CC_pass_by_value","qualname":"::constants::DW_CC_pass_by_value","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4034},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45586,"byte_end":45599,"line_start":902,"line_end":902,"column_start":5,"column_end":18},"name":"DW_CC_lo_user","qualname":"::constants::DW_CC_lo_user","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4035},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45612,"byte_end":45625,"line_start":903,"line_end":903,"column_start":5,"column_end":18},"name":"DW_CC_hi_user","qualname":"::constants::DW_CC_hi_user","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4074},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45755,"byte_end":45760,"line_start":910,"line_end":910,"column_start":1,"column_end":6},"name":"DwInl","qualname":"::constants::DwInl","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_inline` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4066},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45771,"byte_end":45789,"line_start":911,"line_end":911,"column_start":5,"column_end":23},"name":"DW_INL_not_inlined","qualname":"::constants::DW_INL_not_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4067},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45802,"byte_end":45816,"line_start":912,"line_end":912,"column_start":5,"column_end":19},"name":"DW_INL_inlined","qualname":"::constants::DW_INL_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4068},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45829,"byte_end":45856,"line_start":913,"line_end":913,"column_start":5,"column_end":32},"name":"DW_INL_declared_not_inlined","qualname":"::constants::DW_INL_declared_not_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4069},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":45869,"byte_end":45892,"line_start":914,"line_end":914,"column_start":5,"column_end":28},"name":"DW_INL_declared_inlined","qualname":"::constants::DW_INL_declared_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4106},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46024,"byte_end":46029,"line_start":921,"line_end":921,"column_start":1,"column_end":6},"name":"DwOrd","qualname":"::constants::DwOrd","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_ordering` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4100},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46040,"byte_end":46056,"line_start":922,"line_end":922,"column_start":5,"column_end":21},"name":"DW_ORD_row_major","qualname":"::constants::DW_ORD_row_major","value":"DwOrd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4101},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46069,"byte_end":46085,"line_start":923,"line_end":923,"column_start":5,"column_end":21},"name":"DW_ORD_col_major","qualname":"::constants::DW_ORD_col_major","value":"DwOrd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4138},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46219,"byte_end":46224,"line_start":930,"line_end":930,"column_start":1,"column_end":6},"name":"DwDsc","qualname":"::constants::DwDsc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_discr_list` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4132},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46235,"byte_end":46247,"line_start":931,"line_end":931,"column_start":5,"column_end":17},"name":"DW_DSC_label","qualname":"::constants::DW_DSC_label","value":"DwDsc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4133},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46260,"byte_end":46272,"line_start":932,"line_end":932,"column_start":5,"column_end":17},"name":"DW_DSC_range","qualname":"::constants::DW_DSC_range","value":"DwDsc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4175},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46365,"byte_end":46370,"line_start":939,"line_end":939,"column_start":1,"column_end":6},"name":"DwIdx","qualname":"::constants::DwIdx","value":"","parent":null,"children":[],"decl_id":null,"docs":" Name index attribute encodings.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4164},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46382,"byte_end":46401,"line_start":940,"line_end":940,"column_start":5,"column_end":24},"name":"DW_IDX_compile_unit","qualname":"::constants::DW_IDX_compile_unit","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4165},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46411,"byte_end":46427,"line_start":941,"line_end":941,"column_start":5,"column_end":21},"name":"DW_IDX_type_unit","qualname":"::constants::DW_IDX_type_unit","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4166},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46437,"byte_end":46454,"line_start":942,"line_end":942,"column_start":5,"column_end":22},"name":"DW_IDX_die_offset","qualname":"::constants::DW_IDX_die_offset","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4167},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46464,"byte_end":46477,"line_start":943,"line_end":943,"column_start":5,"column_end":18},"name":"DW_IDX_parent","qualname":"::constants::DW_IDX_parent","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4168},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46487,"byte_end":46503,"line_start":944,"line_end":944,"column_start":5,"column_end":21},"name":"DW_IDX_type_hash","qualname":"::constants::DW_IDX_type_hash","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4169},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46513,"byte_end":46527,"line_start":945,"line_end":945,"column_start":5,"column_end":19},"name":"DW_IDX_lo_user","qualname":"::constants::DW_IDX_lo_user","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4170},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46542,"byte_end":46556,"line_start":946,"line_end":946,"column_start":5,"column_end":19},"name":"DW_IDX_hi_user","qualname":"::constants::DW_IDX_hi_user","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4208},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46691,"byte_end":46702,"line_start":953,"line_end":953,"column_start":1,"column_end":12},"name":"DwDefaulted","qualname":"::constants::DwDefaulted","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_defaulted` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4201},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46713,"byte_end":46728,"line_start":954,"line_end":954,"column_start":5,"column_end":20},"name":"DW_DEFAULTED_no","qualname":"::constants::DW_DEFAULTED_no","value":"DwDefaulted","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4202},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46741,"byte_end":46762,"line_start":955,"line_end":955,"column_start":5,"column_end":26},"name":"DW_DEFAULTED_in_class","qualname":"::constants::DW_DEFAULTED_in_class","value":"DwDefaulted","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4203},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46775,"byte_end":46800,"line_start":956,"line_end":956,"column_start":5,"column_end":30},"name":"DW_DEFAULTED_out_of_class","qualname":"::constants::DW_DEFAULTED_out_of_class","value":"DwDefaulted","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4250},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46929,"byte_end":46934,"line_start":963,"line_end":963,"column_start":1,"column_end":6},"name":"DwLns","qualname":"::constants::DwLns","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for the standard opcodes for line number information.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4234},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46945,"byte_end":46956,"line_start":964,"line_end":964,"column_start":5,"column_end":16},"name":"DW_LNS_copy","qualname":"::constants::DW_LNS_copy","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4235},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46969,"byte_end":46986,"line_start":965,"line_end":965,"column_start":5,"column_end":22},"name":"DW_LNS_advance_pc","qualname":"::constants::DW_LNS_advance_pc","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4236},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":46999,"byte_end":47018,"line_start":966,"line_end":966,"column_start":5,"column_end":24},"name":"DW_LNS_advance_line","qualname":"::constants::DW_LNS_advance_line","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4237},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47031,"byte_end":47046,"line_start":967,"line_end":967,"column_start":5,"column_end":20},"name":"DW_LNS_set_file","qualname":"::constants::DW_LNS_set_file","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4238},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47059,"byte_end":47076,"line_start":968,"line_end":968,"column_start":5,"column_end":22},"name":"DW_LNS_set_column","qualname":"::constants::DW_LNS_set_column","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4239},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47089,"byte_end":47107,"line_start":969,"line_end":969,"column_start":5,"column_end":23},"name":"DW_LNS_negate_stmt","qualname":"::constants::DW_LNS_negate_stmt","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4240},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47120,"byte_end":47142,"line_start":970,"line_end":970,"column_start":5,"column_end":27},"name":"DW_LNS_set_basic_block","qualname":"::constants::DW_LNS_set_basic_block","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4241},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47155,"byte_end":47174,"line_start":971,"line_end":971,"column_start":5,"column_end":24},"name":"DW_LNS_const_add_pc","qualname":"::constants::DW_LNS_const_add_pc","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4242},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47187,"byte_end":47210,"line_start":972,"line_end":972,"column_start":5,"column_end":28},"name":"DW_LNS_fixed_advance_pc","qualname":"::constants::DW_LNS_fixed_advance_pc","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4243},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47223,"byte_end":47246,"line_start":973,"line_end":973,"column_start":5,"column_end":28},"name":"DW_LNS_set_prologue_end","qualname":"::constants::DW_LNS_set_prologue_end","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4244},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47259,"byte_end":47284,"line_start":974,"line_end":974,"column_start":5,"column_end":30},"name":"DW_LNS_set_epilogue_begin","qualname":"::constants::DW_LNS_set_epilogue_begin","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4245},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47297,"byte_end":47311,"line_start":975,"line_end":975,"column_start":5,"column_end":19},"name":"DW_LNS_set_isa","qualname":"::constants::DW_LNS_set_isa","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4286},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47440,"byte_end":47445,"line_start":982,"line_end":982,"column_start":1,"column_end":6},"name":"DwLne","qualname":"::constants::DwLne","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for the extended opcodes for line number information.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4276},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47456,"byte_end":47475,"line_start":983,"line_end":983,"column_start":5,"column_end":24},"name":"DW_LNE_end_sequence","qualname":"::constants::DW_LNE_end_sequence","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4277},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47488,"byte_end":47506,"line_start":984,"line_end":984,"column_start":5,"column_end":23},"name":"DW_LNE_set_address","qualname":"::constants::DW_LNE_set_address","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4278},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47519,"byte_end":47537,"line_start":985,"line_end":985,"column_start":5,"column_end":23},"name":"DW_LNE_define_file","qualname":"::constants::DW_LNE_define_file","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4279},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47550,"byte_end":47574,"line_start":986,"line_end":986,"column_start":5,"column_end":29},"name":"DW_LNE_set_discriminator","qualname":"::constants::DW_LNE_set_discriminator","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4280},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47588,"byte_end":47602,"line_start":988,"line_end":988,"column_start":5,"column_end":19},"name":"DW_LNE_lo_user","qualname":"::constants::DW_LNE_lo_user","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4281},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47615,"byte_end":47629,"line_start":989,"line_end":989,"column_start":5,"column_end":19},"name":"DW_LNE_hi_user","qualname":"::constants::DW_LNE_hi_user","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4323},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47746,"byte_end":47752,"line_start":996,"line_end":996,"column_start":1,"column_end":7},"name":"DwLnct","qualname":"::constants::DwLnct","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for the line number header entry formats.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4312},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47764,"byte_end":47776,"line_start":997,"line_end":997,"column_start":5,"column_end":17},"name":"DW_LNCT_path","qualname":"::constants::DW_LNCT_path","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4313},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47788,"byte_end":47811,"line_start":998,"line_end":998,"column_start":5,"column_end":28},"name":"DW_LNCT_directory_index","qualname":"::constants::DW_LNCT_directory_index","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4314},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47823,"byte_end":47840,"line_start":999,"line_end":999,"column_start":5,"column_end":22},"name":"DW_LNCT_timestamp","qualname":"::constants::DW_LNCT_timestamp","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4315},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47852,"byte_end":47864,"line_start":1000,"line_end":1000,"column_start":5,"column_end":17},"name":"DW_LNCT_size","qualname":"::constants::DW_LNCT_size","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4316},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47876,"byte_end":47887,"line_start":1001,"line_end":1001,"column_start":5,"column_end":16},"name":"DW_LNCT_MD5","qualname":"::constants::DW_LNCT_MD5","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4317},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47899,"byte_end":47914,"line_start":1002,"line_end":1002,"column_start":5,"column_end":20},"name":"DW_LNCT_lo_user","qualname":"::constants::DW_LNCT_lo_user","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4318},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":47929,"byte_end":47944,"line_start":1003,"line_end":1003,"column_start":5,"column_end":20},"name":"DW_LNCT_hi_user","qualname":"::constants::DW_LNCT_hi_user","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4367},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48056,"byte_end":48063,"line_start":1010,"line_end":1010,"column_start":1,"column_end":8},"name":"DwMacro","qualname":"::constants::DwMacro","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for macro information entry types.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4349},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48074,"byte_end":48089,"line_start":1011,"line_end":1011,"column_start":5,"column_end":20},"name":"DW_MACRO_define","qualname":"::constants::DW_MACRO_define","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4350},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48102,"byte_end":48116,"line_start":1012,"line_end":1012,"column_start":5,"column_end":19},"name":"DW_MACRO_undef","qualname":"::constants::DW_MACRO_undef","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4351},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48129,"byte_end":48148,"line_start":1013,"line_end":1013,"column_start":5,"column_end":24},"name":"DW_MACRO_start_file","qualname":"::constants::DW_MACRO_start_file","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4352},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48161,"byte_end":48178,"line_start":1014,"line_end":1014,"column_start":5,"column_end":22},"name":"DW_MACRO_end_file","qualname":"::constants::DW_MACRO_end_file","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4353},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48191,"byte_end":48211,"line_start":1015,"line_end":1015,"column_start":5,"column_end":25},"name":"DW_MACRO_define_strp","qualname":"::constants::DW_MACRO_define_strp","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4354},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48224,"byte_end":48243,"line_start":1016,"line_end":1016,"column_start":5,"column_end":24},"name":"DW_MACRO_undef_strp","qualname":"::constants::DW_MACRO_undef_strp","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4355},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48256,"byte_end":48271,"line_start":1017,"line_end":1017,"column_start":5,"column_end":20},"name":"DW_MACRO_import","qualname":"::constants::DW_MACRO_import","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4356},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48284,"byte_end":48303,"line_start":1018,"line_end":1018,"column_start":5,"column_end":24},"name":"DW_MACRO_define_sup","qualname":"::constants::DW_MACRO_define_sup","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4357},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48316,"byte_end":48334,"line_start":1019,"line_end":1019,"column_start":5,"column_end":23},"name":"DW_MACRO_undef_sup","qualname":"::constants::DW_MACRO_undef_sup","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4358},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48347,"byte_end":48366,"line_start":1020,"line_end":1020,"column_start":5,"column_end":24},"name":"DW_MACRO_import_sup","qualname":"::constants::DW_MACRO_import_sup","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4359},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48379,"byte_end":48399,"line_start":1021,"line_end":1021,"column_start":5,"column_end":25},"name":"DW_MACRO_define_strx","qualname":"::constants::DW_MACRO_define_strx","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4360},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48412,"byte_end":48431,"line_start":1022,"line_end":1022,"column_start":5,"column_end":24},"name":"DW_MACRO_undef_strx","qualname":"::constants::DW_MACRO_undef_strx","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4361},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48444,"byte_end":48460,"line_start":1023,"line_end":1023,"column_start":5,"column_end":21},"name":"DW_MACRO_lo_user","qualname":"::constants::DW_MACRO_lo_user","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4362},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48473,"byte_end":48489,"line_start":1024,"line_end":1024,"column_start":5,"column_end":21},"name":"DW_MACRO_hi_user","qualname":"::constants::DW_MACRO_hi_user","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4405},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48584,"byte_end":48589,"line_start":1031,"line_end":1031,"column_start":1,"column_end":6},"name":"DwRle","qualname":"::constants::DwRle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Range list entry encoding values.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4393},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48600,"byte_end":48618,"line_start":1032,"line_end":1032,"column_start":5,"column_end":23},"name":"DW_RLE_end_of_list","qualname":"::constants::DW_RLE_end_of_list","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4394},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48631,"byte_end":48651,"line_start":1033,"line_end":1033,"column_start":5,"column_end":25},"name":"DW_RLE_base_addressx","qualname":"::constants::DW_RLE_base_addressx","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4395},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48664,"byte_end":48682,"line_start":1034,"line_end":1034,"column_start":5,"column_end":23},"name":"DW_RLE_startx_endx","qualname":"::constants::DW_RLE_startx_endx","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4396},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48695,"byte_end":48715,"line_start":1035,"line_end":1035,"column_start":5,"column_end":25},"name":"DW_RLE_startx_length","qualname":"::constants::DW_RLE_startx_length","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4397},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48728,"byte_end":48746,"line_start":1036,"line_end":1036,"column_start":5,"column_end":23},"name":"DW_RLE_offset_pair","qualname":"::constants::DW_RLE_offset_pair","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4398},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48759,"byte_end":48778,"line_start":1037,"line_end":1037,"column_start":5,"column_end":24},"name":"DW_RLE_base_address","qualname":"::constants::DW_RLE_base_address","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4399},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48791,"byte_end":48807,"line_start":1038,"line_end":1038,"column_start":5,"column_end":21},"name":"DW_RLE_start_end","qualname":"::constants::DW_RLE_start_end","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4400},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48820,"byte_end":48839,"line_start":1039,"line_end":1039,"column_start":5,"column_end":24},"name":"DW_RLE_start_length","qualname":"::constants::DW_RLE_start_length","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4611},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48947,"byte_end":48951,"line_start":1046,"line_end":1046,"column_start":1,"column_end":5},"name":"DwOp","qualname":"::constants::DwOp","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for DWARF expression operations.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4431},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48962,"byte_end":48972,"line_start":1047,"line_end":1047,"column_start":5,"column_end":15},"name":"DW_OP_addr","qualname":"::constants::DW_OP_addr","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4432},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":48985,"byte_end":48996,"line_start":1048,"line_end":1048,"column_start":5,"column_end":16},"name":"DW_OP_deref","qualname":"::constants::DW_OP_deref","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4433},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49009,"byte_end":49022,"line_start":1049,"line_end":1049,"column_start":5,"column_end":18},"name":"DW_OP_const1u","qualname":"::constants::DW_OP_const1u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4434},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49035,"byte_end":49048,"line_start":1050,"line_end":1050,"column_start":5,"column_end":18},"name":"DW_OP_const1s","qualname":"::constants::DW_OP_const1s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4435},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49061,"byte_end":49074,"line_start":1051,"line_end":1051,"column_start":5,"column_end":18},"name":"DW_OP_const2u","qualname":"::constants::DW_OP_const2u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4436},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49087,"byte_end":49100,"line_start":1052,"line_end":1052,"column_start":5,"column_end":18},"name":"DW_OP_const2s","qualname":"::constants::DW_OP_const2s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4437},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49113,"byte_end":49126,"line_start":1053,"line_end":1053,"column_start":5,"column_end":18},"name":"DW_OP_const4u","qualname":"::constants::DW_OP_const4u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4438},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49139,"byte_end":49152,"line_start":1054,"line_end":1054,"column_start":5,"column_end":18},"name":"DW_OP_const4s","qualname":"::constants::DW_OP_const4s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4439},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49165,"byte_end":49178,"line_start":1055,"line_end":1055,"column_start":5,"column_end":18},"name":"DW_OP_const8u","qualname":"::constants::DW_OP_const8u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4440},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49191,"byte_end":49204,"line_start":1056,"line_end":1056,"column_start":5,"column_end":18},"name":"DW_OP_const8s","qualname":"::constants::DW_OP_const8s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4441},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49217,"byte_end":49229,"line_start":1057,"line_end":1057,"column_start":5,"column_end":17},"name":"DW_OP_constu","qualname":"::constants::DW_OP_constu","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4442},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49242,"byte_end":49254,"line_start":1058,"line_end":1058,"column_start":5,"column_end":17},"name":"DW_OP_consts","qualname":"::constants::DW_OP_consts","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4443},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49267,"byte_end":49276,"line_start":1059,"line_end":1059,"column_start":5,"column_end":14},"name":"DW_OP_dup","qualname":"::constants::DW_OP_dup","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4444},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49289,"byte_end":49299,"line_start":1060,"line_end":1060,"column_start":5,"column_end":15},"name":"DW_OP_drop","qualname":"::constants::DW_OP_drop","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4445},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49312,"byte_end":49322,"line_start":1061,"line_end":1061,"column_start":5,"column_end":15},"name":"DW_OP_over","qualname":"::constants::DW_OP_over","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4446},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49335,"byte_end":49345,"line_start":1062,"line_end":1062,"column_start":5,"column_end":15},"name":"DW_OP_pick","qualname":"::constants::DW_OP_pick","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4447},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49358,"byte_end":49368,"line_start":1063,"line_end":1063,"column_start":5,"column_end":15},"name":"DW_OP_swap","qualname":"::constants::DW_OP_swap","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4448},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49381,"byte_end":49390,"line_start":1064,"line_end":1064,"column_start":5,"column_end":14},"name":"DW_OP_rot","qualname":"::constants::DW_OP_rot","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4449},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49403,"byte_end":49415,"line_start":1065,"line_end":1065,"column_start":5,"column_end":17},"name":"DW_OP_xderef","qualname":"::constants::DW_OP_xderef","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4450},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49428,"byte_end":49437,"line_start":1066,"line_end":1066,"column_start":5,"column_end":14},"name":"DW_OP_abs","qualname":"::constants::DW_OP_abs","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4451},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49450,"byte_end":49459,"line_start":1067,"line_end":1067,"column_start":5,"column_end":14},"name":"DW_OP_and","qualname":"::constants::DW_OP_and","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4452},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49472,"byte_end":49481,"line_start":1068,"line_end":1068,"column_start":5,"column_end":14},"name":"DW_OP_div","qualname":"::constants::DW_OP_div","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4453},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49494,"byte_end":49505,"line_start":1069,"line_end":1069,"column_start":5,"column_end":16},"name":"DW_OP_minus","qualname":"::constants::DW_OP_minus","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4454},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49518,"byte_end":49527,"line_start":1070,"line_end":1070,"column_start":5,"column_end":14},"name":"DW_OP_mod","qualname":"::constants::DW_OP_mod","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4455},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49540,"byte_end":49549,"line_start":1071,"line_end":1071,"column_start":5,"column_end":14},"name":"DW_OP_mul","qualname":"::constants::DW_OP_mul","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4456},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49562,"byte_end":49571,"line_start":1072,"line_end":1072,"column_start":5,"column_end":14},"name":"DW_OP_neg","qualname":"::constants::DW_OP_neg","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4457},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49584,"byte_end":49593,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14},"name":"DW_OP_not","qualname":"::constants::DW_OP_not","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4458},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49606,"byte_end":49614,"line_start":1074,"line_end":1074,"column_start":5,"column_end":13},"name":"DW_OP_or","qualname":"::constants::DW_OP_or","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4459},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49627,"byte_end":49637,"line_start":1075,"line_end":1075,"column_start":5,"column_end":15},"name":"DW_OP_plus","qualname":"::constants::DW_OP_plus","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4460},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49650,"byte_end":49667,"line_start":1076,"line_end":1076,"column_start":5,"column_end":22},"name":"DW_OP_plus_uconst","qualname":"::constants::DW_OP_plus_uconst","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4461},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49680,"byte_end":49689,"line_start":1077,"line_end":1077,"column_start":5,"column_end":14},"name":"DW_OP_shl","qualname":"::constants::DW_OP_shl","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4462},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49702,"byte_end":49711,"line_start":1078,"line_end":1078,"column_start":5,"column_end":14},"name":"DW_OP_shr","qualname":"::constants::DW_OP_shr","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4463},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49724,"byte_end":49734,"line_start":1079,"line_end":1079,"column_start":5,"column_end":15},"name":"DW_OP_shra","qualname":"::constants::DW_OP_shra","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4464},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49747,"byte_end":49756,"line_start":1080,"line_end":1080,"column_start":5,"column_end":14},"name":"DW_OP_xor","qualname":"::constants::DW_OP_xor","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4465},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49769,"byte_end":49778,"line_start":1081,"line_end":1081,"column_start":5,"column_end":14},"name":"DW_OP_bra","qualname":"::constants::DW_OP_bra","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4466},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49791,"byte_end":49799,"line_start":1082,"line_end":1082,"column_start":5,"column_end":13},"name":"DW_OP_eq","qualname":"::constants::DW_OP_eq","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4467},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49812,"byte_end":49820,"line_start":1083,"line_end":1083,"column_start":5,"column_end":13},"name":"DW_OP_ge","qualname":"::constants::DW_OP_ge","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4468},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49833,"byte_end":49841,"line_start":1084,"line_end":1084,"column_start":5,"column_end":13},"name":"DW_OP_gt","qualname":"::constants::DW_OP_gt","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4469},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49854,"byte_end":49862,"line_start":1085,"line_end":1085,"column_start":5,"column_end":13},"name":"DW_OP_le","qualname":"::constants::DW_OP_le","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4470},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49875,"byte_end":49883,"line_start":1086,"line_end":1086,"column_start":5,"column_end":13},"name":"DW_OP_lt","qualname":"::constants::DW_OP_lt","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4471},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49896,"byte_end":49904,"line_start":1087,"line_end":1087,"column_start":5,"column_end":13},"name":"DW_OP_ne","qualname":"::constants::DW_OP_ne","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4472},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49917,"byte_end":49927,"line_start":1088,"line_end":1088,"column_start":5,"column_end":15},"name":"DW_OP_skip","qualname":"::constants::DW_OP_skip","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4473},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49940,"byte_end":49950,"line_start":1089,"line_end":1089,"column_start":5,"column_end":15},"name":"DW_OP_lit0","qualname":"::constants::DW_OP_lit0","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4474},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49963,"byte_end":49973,"line_start":1090,"line_end":1090,"column_start":5,"column_end":15},"name":"DW_OP_lit1","qualname":"::constants::DW_OP_lit1","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4475},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":49986,"byte_end":49996,"line_start":1091,"line_end":1091,"column_start":5,"column_end":15},"name":"DW_OP_lit2","qualname":"::constants::DW_OP_lit2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4476},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50009,"byte_end":50019,"line_start":1092,"line_end":1092,"column_start":5,"column_end":15},"name":"DW_OP_lit3","qualname":"::constants::DW_OP_lit3","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4477},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50032,"byte_end":50042,"line_start":1093,"line_end":1093,"column_start":5,"column_end":15},"name":"DW_OP_lit4","qualname":"::constants::DW_OP_lit4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4478},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50055,"byte_end":50065,"line_start":1094,"line_end":1094,"column_start":5,"column_end":15},"name":"DW_OP_lit5","qualname":"::constants::DW_OP_lit5","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4479},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50078,"byte_end":50088,"line_start":1095,"line_end":1095,"column_start":5,"column_end":15},"name":"DW_OP_lit6","qualname":"::constants::DW_OP_lit6","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4480},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50101,"byte_end":50111,"line_start":1096,"line_end":1096,"column_start":5,"column_end":15},"name":"DW_OP_lit7","qualname":"::constants::DW_OP_lit7","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4481},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50124,"byte_end":50134,"line_start":1097,"line_end":1097,"column_start":5,"column_end":15},"name":"DW_OP_lit8","qualname":"::constants::DW_OP_lit8","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4482},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50147,"byte_end":50157,"line_start":1098,"line_end":1098,"column_start":5,"column_end":15},"name":"DW_OP_lit9","qualname":"::constants::DW_OP_lit9","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4483},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50170,"byte_end":50181,"line_start":1099,"line_end":1099,"column_start":5,"column_end":16},"name":"DW_OP_lit10","qualname":"::constants::DW_OP_lit10","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4484},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50194,"byte_end":50205,"line_start":1100,"line_end":1100,"column_start":5,"column_end":16},"name":"DW_OP_lit11","qualname":"::constants::DW_OP_lit11","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4485},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50218,"byte_end":50229,"line_start":1101,"line_end":1101,"column_start":5,"column_end":16},"name":"DW_OP_lit12","qualname":"::constants::DW_OP_lit12","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4486},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50242,"byte_end":50253,"line_start":1102,"line_end":1102,"column_start":5,"column_end":16},"name":"DW_OP_lit13","qualname":"::constants::DW_OP_lit13","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4487},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50266,"byte_end":50277,"line_start":1103,"line_end":1103,"column_start":5,"column_end":16},"name":"DW_OP_lit14","qualname":"::constants::DW_OP_lit14","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4488},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50290,"byte_end":50301,"line_start":1104,"line_end":1104,"column_start":5,"column_end":16},"name":"DW_OP_lit15","qualname":"::constants::DW_OP_lit15","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4489},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50314,"byte_end":50325,"line_start":1105,"line_end":1105,"column_start":5,"column_end":16},"name":"DW_OP_lit16","qualname":"::constants::DW_OP_lit16","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4490},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50338,"byte_end":50349,"line_start":1106,"line_end":1106,"column_start":5,"column_end":16},"name":"DW_OP_lit17","qualname":"::constants::DW_OP_lit17","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4491},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50362,"byte_end":50373,"line_start":1107,"line_end":1107,"column_start":5,"column_end":16},"name":"DW_OP_lit18","qualname":"::constants::DW_OP_lit18","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4492},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50386,"byte_end":50397,"line_start":1108,"line_end":1108,"column_start":5,"column_end":16},"name":"DW_OP_lit19","qualname":"::constants::DW_OP_lit19","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4493},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50410,"byte_end":50421,"line_start":1109,"line_end":1109,"column_start":5,"column_end":16},"name":"DW_OP_lit20","qualname":"::constants::DW_OP_lit20","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4494},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50434,"byte_end":50445,"line_start":1110,"line_end":1110,"column_start":5,"column_end":16},"name":"DW_OP_lit21","qualname":"::constants::DW_OP_lit21","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4495},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50458,"byte_end":50469,"line_start":1111,"line_end":1111,"column_start":5,"column_end":16},"name":"DW_OP_lit22","qualname":"::constants::DW_OP_lit22","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4496},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50482,"byte_end":50493,"line_start":1112,"line_end":1112,"column_start":5,"column_end":16},"name":"DW_OP_lit23","qualname":"::constants::DW_OP_lit23","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4497},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50506,"byte_end":50517,"line_start":1113,"line_end":1113,"column_start":5,"column_end":16},"name":"DW_OP_lit24","qualname":"::constants::DW_OP_lit24","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4498},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50530,"byte_end":50541,"line_start":1114,"line_end":1114,"column_start":5,"column_end":16},"name":"DW_OP_lit25","qualname":"::constants::DW_OP_lit25","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4499},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50554,"byte_end":50565,"line_start":1115,"line_end":1115,"column_start":5,"column_end":16},"name":"DW_OP_lit26","qualname":"::constants::DW_OP_lit26","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4500},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50578,"byte_end":50589,"line_start":1116,"line_end":1116,"column_start":5,"column_end":16},"name":"DW_OP_lit27","qualname":"::constants::DW_OP_lit27","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4501},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50602,"byte_end":50613,"line_start":1117,"line_end":1117,"column_start":5,"column_end":16},"name":"DW_OP_lit28","qualname":"::constants::DW_OP_lit28","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4502},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50626,"byte_end":50637,"line_start":1118,"line_end":1118,"column_start":5,"column_end":16},"name":"DW_OP_lit29","qualname":"::constants::DW_OP_lit29","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4503},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50650,"byte_end":50661,"line_start":1119,"line_end":1119,"column_start":5,"column_end":16},"name":"DW_OP_lit30","qualname":"::constants::DW_OP_lit30","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4504},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50674,"byte_end":50685,"line_start":1120,"line_end":1120,"column_start":5,"column_end":16},"name":"DW_OP_lit31","qualname":"::constants::DW_OP_lit31","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4505},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50698,"byte_end":50708,"line_start":1121,"line_end":1121,"column_start":5,"column_end":15},"name":"DW_OP_reg0","qualname":"::constants::DW_OP_reg0","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4506},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50721,"byte_end":50731,"line_start":1122,"line_end":1122,"column_start":5,"column_end":15},"name":"DW_OP_reg1","qualname":"::constants::DW_OP_reg1","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4507},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50744,"byte_end":50754,"line_start":1123,"line_end":1123,"column_start":5,"column_end":15},"name":"DW_OP_reg2","qualname":"::constants::DW_OP_reg2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4508},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50767,"byte_end":50777,"line_start":1124,"line_end":1124,"column_start":5,"column_end":15},"name":"DW_OP_reg3","qualname":"::constants::DW_OP_reg3","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4509},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50790,"byte_end":50800,"line_start":1125,"line_end":1125,"column_start":5,"column_end":15},"name":"DW_OP_reg4","qualname":"::constants::DW_OP_reg4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4510},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50813,"byte_end":50823,"line_start":1126,"line_end":1126,"column_start":5,"column_end":15},"name":"DW_OP_reg5","qualname":"::constants::DW_OP_reg5","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4511},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50836,"byte_end":50846,"line_start":1127,"line_end":1127,"column_start":5,"column_end":15},"name":"DW_OP_reg6","qualname":"::constants::DW_OP_reg6","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4512},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50859,"byte_end":50869,"line_start":1128,"line_end":1128,"column_start":5,"column_end":15},"name":"DW_OP_reg7","qualname":"::constants::DW_OP_reg7","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4513},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50882,"byte_end":50892,"line_start":1129,"line_end":1129,"column_start":5,"column_end":15},"name":"DW_OP_reg8","qualname":"::constants::DW_OP_reg8","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4514},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50905,"byte_end":50915,"line_start":1130,"line_end":1130,"column_start":5,"column_end":15},"name":"DW_OP_reg9","qualname":"::constants::DW_OP_reg9","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4515},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50928,"byte_end":50939,"line_start":1131,"line_end":1131,"column_start":5,"column_end":16},"name":"DW_OP_reg10","qualname":"::constants::DW_OP_reg10","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4516},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50952,"byte_end":50963,"line_start":1132,"line_end":1132,"column_start":5,"column_end":16},"name":"DW_OP_reg11","qualname":"::constants::DW_OP_reg11","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4517},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":50976,"byte_end":50987,"line_start":1133,"line_end":1133,"column_start":5,"column_end":16},"name":"DW_OP_reg12","qualname":"::constants::DW_OP_reg12","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4518},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51000,"byte_end":51011,"line_start":1134,"line_end":1134,"column_start":5,"column_end":16},"name":"DW_OP_reg13","qualname":"::constants::DW_OP_reg13","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4519},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51024,"byte_end":51035,"line_start":1135,"line_end":1135,"column_start":5,"column_end":16},"name":"DW_OP_reg14","qualname":"::constants::DW_OP_reg14","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4520},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51048,"byte_end":51059,"line_start":1136,"line_end":1136,"column_start":5,"column_end":16},"name":"DW_OP_reg15","qualname":"::constants::DW_OP_reg15","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4521},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51072,"byte_end":51083,"line_start":1137,"line_end":1137,"column_start":5,"column_end":16},"name":"DW_OP_reg16","qualname":"::constants::DW_OP_reg16","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4522},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51096,"byte_end":51107,"line_start":1138,"line_end":1138,"column_start":5,"column_end":16},"name":"DW_OP_reg17","qualname":"::constants::DW_OP_reg17","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4523},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51120,"byte_end":51131,"line_start":1139,"line_end":1139,"column_start":5,"column_end":16},"name":"DW_OP_reg18","qualname":"::constants::DW_OP_reg18","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4524},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51144,"byte_end":51155,"line_start":1140,"line_end":1140,"column_start":5,"column_end":16},"name":"DW_OP_reg19","qualname":"::constants::DW_OP_reg19","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4525},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51168,"byte_end":51179,"line_start":1141,"line_end":1141,"column_start":5,"column_end":16},"name":"DW_OP_reg20","qualname":"::constants::DW_OP_reg20","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4526},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51192,"byte_end":51203,"line_start":1142,"line_end":1142,"column_start":5,"column_end":16},"name":"DW_OP_reg21","qualname":"::constants::DW_OP_reg21","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4527},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51216,"byte_end":51227,"line_start":1143,"line_end":1143,"column_start":5,"column_end":16},"name":"DW_OP_reg22","qualname":"::constants::DW_OP_reg22","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4528},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51240,"byte_end":51251,"line_start":1144,"line_end":1144,"column_start":5,"column_end":16},"name":"DW_OP_reg23","qualname":"::constants::DW_OP_reg23","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4529},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51264,"byte_end":51275,"line_start":1145,"line_end":1145,"column_start":5,"column_end":16},"name":"DW_OP_reg24","qualname":"::constants::DW_OP_reg24","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4530},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51288,"byte_end":51299,"line_start":1146,"line_end":1146,"column_start":5,"column_end":16},"name":"DW_OP_reg25","qualname":"::constants::DW_OP_reg25","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4531},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51312,"byte_end":51323,"line_start":1147,"line_end":1147,"column_start":5,"column_end":16},"name":"DW_OP_reg26","qualname":"::constants::DW_OP_reg26","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4532},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51336,"byte_end":51347,"line_start":1148,"line_end":1148,"column_start":5,"column_end":16},"name":"DW_OP_reg27","qualname":"::constants::DW_OP_reg27","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4533},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51360,"byte_end":51371,"line_start":1149,"line_end":1149,"column_start":5,"column_end":16},"name":"DW_OP_reg28","qualname":"::constants::DW_OP_reg28","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4534},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51384,"byte_end":51395,"line_start":1150,"line_end":1150,"column_start":5,"column_end":16},"name":"DW_OP_reg29","qualname":"::constants::DW_OP_reg29","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4535},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51408,"byte_end":51419,"line_start":1151,"line_end":1151,"column_start":5,"column_end":16},"name":"DW_OP_reg30","qualname":"::constants::DW_OP_reg30","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4536},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51432,"byte_end":51443,"line_start":1152,"line_end":1152,"column_start":5,"column_end":16},"name":"DW_OP_reg31","qualname":"::constants::DW_OP_reg31","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4537},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51456,"byte_end":51467,"line_start":1153,"line_end":1153,"column_start":5,"column_end":16},"name":"DW_OP_breg0","qualname":"::constants::DW_OP_breg0","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4538},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51480,"byte_end":51491,"line_start":1154,"line_end":1154,"column_start":5,"column_end":16},"name":"DW_OP_breg1","qualname":"::constants::DW_OP_breg1","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4539},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51504,"byte_end":51515,"line_start":1155,"line_end":1155,"column_start":5,"column_end":16},"name":"DW_OP_breg2","qualname":"::constants::DW_OP_breg2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4540},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51528,"byte_end":51539,"line_start":1156,"line_end":1156,"column_start":5,"column_end":16},"name":"DW_OP_breg3","qualname":"::constants::DW_OP_breg3","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4541},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51552,"byte_end":51563,"line_start":1157,"line_end":1157,"column_start":5,"column_end":16},"name":"DW_OP_breg4","qualname":"::constants::DW_OP_breg4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4542},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51576,"byte_end":51587,"line_start":1158,"line_end":1158,"column_start":5,"column_end":16},"name":"DW_OP_breg5","qualname":"::constants::DW_OP_breg5","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4543},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51600,"byte_end":51611,"line_start":1159,"line_end":1159,"column_start":5,"column_end":16},"name":"DW_OP_breg6","qualname":"::constants::DW_OP_breg6","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4544},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51624,"byte_end":51635,"line_start":1160,"line_end":1160,"column_start":5,"column_end":16},"name":"DW_OP_breg7","qualname":"::constants::DW_OP_breg7","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4545},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51648,"byte_end":51659,"line_start":1161,"line_end":1161,"column_start":5,"column_end":16},"name":"DW_OP_breg8","qualname":"::constants::DW_OP_breg8","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4546},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51672,"byte_end":51683,"line_start":1162,"line_end":1162,"column_start":5,"column_end":16},"name":"DW_OP_breg9","qualname":"::constants::DW_OP_breg9","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4547},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51696,"byte_end":51708,"line_start":1163,"line_end":1163,"column_start":5,"column_end":17},"name":"DW_OP_breg10","qualname":"::constants::DW_OP_breg10","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4548},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51721,"byte_end":51733,"line_start":1164,"line_end":1164,"column_start":5,"column_end":17},"name":"DW_OP_breg11","qualname":"::constants::DW_OP_breg11","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4549},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51746,"byte_end":51758,"line_start":1165,"line_end":1165,"column_start":5,"column_end":17},"name":"DW_OP_breg12","qualname":"::constants::DW_OP_breg12","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4550},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51771,"byte_end":51783,"line_start":1166,"line_end":1166,"column_start":5,"column_end":17},"name":"DW_OP_breg13","qualname":"::constants::DW_OP_breg13","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4551},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51796,"byte_end":51808,"line_start":1167,"line_end":1167,"column_start":5,"column_end":17},"name":"DW_OP_breg14","qualname":"::constants::DW_OP_breg14","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4552},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51821,"byte_end":51833,"line_start":1168,"line_end":1168,"column_start":5,"column_end":17},"name":"DW_OP_breg15","qualname":"::constants::DW_OP_breg15","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4553},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51846,"byte_end":51858,"line_start":1169,"line_end":1169,"column_start":5,"column_end":17},"name":"DW_OP_breg16","qualname":"::constants::DW_OP_breg16","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4554},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51871,"byte_end":51883,"line_start":1170,"line_end":1170,"column_start":5,"column_end":17},"name":"DW_OP_breg17","qualname":"::constants::DW_OP_breg17","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4555},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51896,"byte_end":51908,"line_start":1171,"line_end":1171,"column_start":5,"column_end":17},"name":"DW_OP_breg18","qualname":"::constants::DW_OP_breg18","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4556},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51921,"byte_end":51933,"line_start":1172,"line_end":1172,"column_start":5,"column_end":17},"name":"DW_OP_breg19","qualname":"::constants::DW_OP_breg19","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4557},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51946,"byte_end":51958,"line_start":1173,"line_end":1173,"column_start":5,"column_end":17},"name":"DW_OP_breg20","qualname":"::constants::DW_OP_breg20","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4558},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51971,"byte_end":51983,"line_start":1174,"line_end":1174,"column_start":5,"column_end":17},"name":"DW_OP_breg21","qualname":"::constants::DW_OP_breg21","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4559},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":51996,"byte_end":52008,"line_start":1175,"line_end":1175,"column_start":5,"column_end":17},"name":"DW_OP_breg22","qualname":"::constants::DW_OP_breg22","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4560},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52021,"byte_end":52033,"line_start":1176,"line_end":1176,"column_start":5,"column_end":17},"name":"DW_OP_breg23","qualname":"::constants::DW_OP_breg23","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4561},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52046,"byte_end":52058,"line_start":1177,"line_end":1177,"column_start":5,"column_end":17},"name":"DW_OP_breg24","qualname":"::constants::DW_OP_breg24","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4562},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52071,"byte_end":52083,"line_start":1178,"line_end":1178,"column_start":5,"column_end":17},"name":"DW_OP_breg25","qualname":"::constants::DW_OP_breg25","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4563},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52096,"byte_end":52108,"line_start":1179,"line_end":1179,"column_start":5,"column_end":17},"name":"DW_OP_breg26","qualname":"::constants::DW_OP_breg26","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4564},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52121,"byte_end":52133,"line_start":1180,"line_end":1180,"column_start":5,"column_end":17},"name":"DW_OP_breg27","qualname":"::constants::DW_OP_breg27","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4565},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52146,"byte_end":52158,"line_start":1181,"line_end":1181,"column_start":5,"column_end":17},"name":"DW_OP_breg28","qualname":"::constants::DW_OP_breg28","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4566},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52171,"byte_end":52183,"line_start":1182,"line_end":1182,"column_start":5,"column_end":17},"name":"DW_OP_breg29","qualname":"::constants::DW_OP_breg29","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4567},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52196,"byte_end":52208,"line_start":1183,"line_end":1183,"column_start":5,"column_end":17},"name":"DW_OP_breg30","qualname":"::constants::DW_OP_breg30","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4568},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52221,"byte_end":52233,"line_start":1184,"line_end":1184,"column_start":5,"column_end":17},"name":"DW_OP_breg31","qualname":"::constants::DW_OP_breg31","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4569},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52246,"byte_end":52256,"line_start":1185,"line_end":1185,"column_start":5,"column_end":15},"name":"DW_OP_regx","qualname":"::constants::DW_OP_regx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4570},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52269,"byte_end":52280,"line_start":1186,"line_end":1186,"column_start":5,"column_end":16},"name":"DW_OP_fbreg","qualname":"::constants::DW_OP_fbreg","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4571},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52293,"byte_end":52304,"line_start":1187,"line_end":1187,"column_start":5,"column_end":16},"name":"DW_OP_bregx","qualname":"::constants::DW_OP_bregx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4572},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52317,"byte_end":52328,"line_start":1188,"line_end":1188,"column_start":5,"column_end":16},"name":"DW_OP_piece","qualname":"::constants::DW_OP_piece","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4573},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52341,"byte_end":52357,"line_start":1189,"line_end":1189,"column_start":5,"column_end":21},"name":"DW_OP_deref_size","qualname":"::constants::DW_OP_deref_size","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4574},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52370,"byte_end":52387,"line_start":1190,"line_end":1190,"column_start":5,"column_end":22},"name":"DW_OP_xderef_size","qualname":"::constants::DW_OP_xderef_size","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4575},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52400,"byte_end":52409,"line_start":1191,"line_end":1191,"column_start":5,"column_end":14},"name":"DW_OP_nop","qualname":"::constants::DW_OP_nop","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4576},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52422,"byte_end":52447,"line_start":1192,"line_end":1192,"column_start":5,"column_end":30},"name":"DW_OP_push_object_address","qualname":"::constants::DW_OP_push_object_address","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4577},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52460,"byte_end":52471,"line_start":1193,"line_end":1193,"column_start":5,"column_end":16},"name":"DW_OP_call2","qualname":"::constants::DW_OP_call2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4578},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52484,"byte_end":52495,"line_start":1194,"line_end":1194,"column_start":5,"column_end":16},"name":"DW_OP_call4","qualname":"::constants::DW_OP_call4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4579},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52508,"byte_end":52522,"line_start":1195,"line_end":1195,"column_start":5,"column_end":19},"name":"DW_OP_call_ref","qualname":"::constants::DW_OP_call_ref","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4580},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52535,"byte_end":52557,"line_start":1196,"line_end":1196,"column_start":5,"column_end":27},"name":"DW_OP_form_tls_address","qualname":"::constants::DW_OP_form_tls_address","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4581},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52570,"byte_end":52590,"line_start":1197,"line_end":1197,"column_start":5,"column_end":25},"name":"DW_OP_call_frame_cfa","qualname":"::constants::DW_OP_call_frame_cfa","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4582},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52603,"byte_end":52618,"line_start":1198,"line_end":1198,"column_start":5,"column_end":20},"name":"DW_OP_bit_piece","qualname":"::constants::DW_OP_bit_piece","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4583},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52631,"byte_end":52651,"line_start":1199,"line_end":1199,"column_start":5,"column_end":25},"name":"DW_OP_implicit_value","qualname":"::constants::DW_OP_implicit_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4584},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52664,"byte_end":52681,"line_start":1200,"line_end":1200,"column_start":5,"column_end":22},"name":"DW_OP_stack_value","qualname":"::constants::DW_OP_stack_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4585},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52694,"byte_end":52716,"line_start":1201,"line_end":1201,"column_start":5,"column_end":27},"name":"DW_OP_implicit_pointer","qualname":"::constants::DW_OP_implicit_pointer","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4586},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52729,"byte_end":52740,"line_start":1202,"line_end":1202,"column_start":5,"column_end":16},"name":"DW_OP_addrx","qualname":"::constants::DW_OP_addrx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4587},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52753,"byte_end":52765,"line_start":1203,"line_end":1203,"column_start":5,"column_end":17},"name":"DW_OP_constx","qualname":"::constants::DW_OP_constx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4588},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52778,"byte_end":52795,"line_start":1204,"line_end":1204,"column_start":5,"column_end":22},"name":"DW_OP_entry_value","qualname":"::constants::DW_OP_entry_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4589},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52808,"byte_end":52824,"line_start":1205,"line_end":1205,"column_start":5,"column_end":21},"name":"DW_OP_const_type","qualname":"::constants::DW_OP_const_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4590},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52837,"byte_end":52854,"line_start":1206,"line_end":1206,"column_start":5,"column_end":22},"name":"DW_OP_regval_type","qualname":"::constants::DW_OP_regval_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4591},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52867,"byte_end":52883,"line_start":1207,"line_end":1207,"column_start":5,"column_end":21},"name":"DW_OP_deref_type","qualname":"::constants::DW_OP_deref_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4592},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52896,"byte_end":52913,"line_start":1208,"line_end":1208,"column_start":5,"column_end":22},"name":"DW_OP_xderef_type","qualname":"::constants::DW_OP_xderef_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4593},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52926,"byte_end":52939,"line_start":1209,"line_end":1209,"column_start":5,"column_end":18},"name":"DW_OP_convert","qualname":"::constants::DW_OP_convert","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4594},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":52952,"byte_end":52969,"line_start":1210,"line_end":1210,"column_start":5,"column_end":22},"name":"DW_OP_reinterpret","qualname":"::constants::DW_OP_reinterpret","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4595},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53005,"byte_end":53031,"line_start":1213,"line_end":1213,"column_start":5,"column_end":31},"name":"DW_OP_GNU_push_tls_address","qualname":"::constants::DW_OP_GNU_push_tls_address","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4596},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53044,"byte_end":53070,"line_start":1214,"line_end":1214,"column_start":5,"column_end":31},"name":"DW_OP_GNU_implicit_pointer","qualname":"::constants::DW_OP_GNU_implicit_pointer","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4597},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53083,"byte_end":53104,"line_start":1215,"line_end":1215,"column_start":5,"column_end":26},"name":"DW_OP_GNU_entry_value","qualname":"::constants::DW_OP_GNU_entry_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4598},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53117,"byte_end":53137,"line_start":1216,"line_end":1216,"column_start":5,"column_end":25},"name":"DW_OP_GNU_const_type","qualname":"::constants::DW_OP_GNU_const_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4599},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53150,"byte_end":53171,"line_start":1217,"line_end":1217,"column_start":5,"column_end":26},"name":"DW_OP_GNU_regval_type","qualname":"::constants::DW_OP_GNU_regval_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4600},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53184,"byte_end":53204,"line_start":1218,"line_end":1218,"column_start":5,"column_end":25},"name":"DW_OP_GNU_deref_type","qualname":"::constants::DW_OP_GNU_deref_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4601},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53217,"byte_end":53234,"line_start":1219,"line_end":1219,"column_start":5,"column_end":22},"name":"DW_OP_GNU_convert","qualname":"::constants::DW_OP_GNU_convert","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4602},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53247,"byte_end":53268,"line_start":1220,"line_end":1220,"column_start":5,"column_end":26},"name":"DW_OP_GNU_reinterpret","qualname":"::constants::DW_OP_GNU_reinterpret","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4603},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53281,"byte_end":53304,"line_start":1221,"line_end":1221,"column_start":5,"column_end":28},"name":"DW_OP_GNU_parameter_ref","qualname":"::constants::DW_OP_GNU_parameter_ref","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4604},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53317,"byte_end":53337,"line_start":1222,"line_end":1222,"column_start":5,"column_end":25},"name":"DW_OP_GNU_addr_index","qualname":"::constants::DW_OP_GNU_addr_index","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4605},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53350,"byte_end":53371,"line_start":1223,"line_end":1223,"column_start":5,"column_end":26},"name":"DW_OP_GNU_const_index","qualname":"::constants::DW_OP_GNU_const_index","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4606},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53408,"byte_end":53427,"line_start":1226,"line_end":1226,"column_start":5,"column_end":24},"name":"DW_OP_WASM_location","qualname":"::constants::DW_OP_WASM_location","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4657},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53739,"byte_end":53745,"line_start":1237,"line_end":1237,"column_start":1,"column_end":7},"name":"DwEhPe","qualname":"::constants::DwEhPe","value":"","parent":null,"children":[],"decl_id":null,"docs":" Pointer encoding used by `.eh_frame`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4637},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53852,"byte_end":53868,"line_start":1241,"line_end":1241,"column_start":5,"column_end":21},"name":"DW_EH_PE_uleb128","qualname":"::constants::DW_EH_PE_uleb128","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4638},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53911,"byte_end":53926,"line_start":1243,"line_end":1243,"column_start":5,"column_end":20},"name":"DW_EH_PE_udata2","qualname":"::constants::DW_EH_PE_udata2","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4639},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":53969,"byte_end":53984,"line_start":1245,"line_end":1245,"column_start":5,"column_end":20},"name":"DW_EH_PE_udata4","qualname":"::constants::DW_EH_PE_udata4","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4640},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54028,"byte_end":54043,"line_start":1247,"line_end":1247,"column_start":5,"column_end":20},"name":"DW_EH_PE_udata8","qualname":"::constants::DW_EH_PE_udata8","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4641},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54117,"byte_end":54133,"line_start":1249,"line_end":1249,"column_start":5,"column_end":21},"name":"DW_EH_PE_sleb128","qualname":"::constants::DW_EH_PE_sleb128","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4642},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54174,"byte_end":54189,"line_start":1251,"line_end":1251,"column_start":5,"column_end":20},"name":"DW_EH_PE_sdata2","qualname":"::constants::DW_EH_PE_sdata2","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4643},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54231,"byte_end":54246,"line_start":1253,"line_end":1253,"column_start":5,"column_end":20},"name":"DW_EH_PE_sdata4","qualname":"::constants::DW_EH_PE_sdata4","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4644},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54289,"byte_end":54304,"line_start":1255,"line_end":1255,"column_start":5,"column_end":20},"name":"DW_EH_PE_sdata8","qualname":"::constants::DW_EH_PE_sdata8","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4645},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54431,"byte_end":54445,"line_start":1260,"line_end":1260,"column_start":5,"column_end":19},"name":"DW_EH_PE_pcrel","qualname":"::constants::DW_EH_PE_pcrel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4646},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54520,"byte_end":54536,"line_start":1262,"line_end":1262,"column_start":5,"column_end":21},"name":"DW_EH_PE_textrel","qualname":"::constants::DW_EH_PE_textrel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4647},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54627,"byte_end":54643,"line_start":1264,"line_end":1264,"column_start":5,"column_end":21},"name":"DW_EH_PE_datarel","qualname":"::constants::DW_EH_PE_datarel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4648},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54713,"byte_end":54729,"line_start":1266,"line_end":1266,"column_start":5,"column_end":21},"name":"DW_EH_PE_funcrel","qualname":"::constants::DW_EH_PE_funcrel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4649},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":54799,"byte_end":54815,"line_start":1268,"line_end":1268,"column_start":5,"column_end":21},"name":"DW_EH_PE_aligned","qualname":"::constants::DW_EH_PE_aligned","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4650},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55127,"byte_end":55144,"line_start":1276,"line_end":1276,"column_start":5,"column_end":22},"name":"DW_EH_PE_indirect","qualname":"::constants::DW_EH_PE_indirect","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4651},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55303,"byte_end":55318,"line_start":1282,"line_end":1282,"column_start":5,"column_end":20},"name":"DW_EH_PE_absptr","qualname":"::constants::DW_EH_PE_absptr","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4652},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55372,"byte_end":55385,"line_start":1284,"line_end":1284,"column_start":5,"column_end":18},"name":"DW_EH_PE_omit","qualname":"::constants::DW_EH_PE_omit","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55608,"byte_end":55614,"line_start":1295,"line_end":1295,"column_start":12,"column_end":18},"name":"format","qualname":"<DwEhPe>::format","value":"pub fn format(Self) -> DwEhPe","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer encoding's format.\n","sig":null,"attributes":[{"value":"/ Get the pointer encoding's format.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55544,"byte_end":55582,"line_start":1293,"line_end":1293,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55587,"byte_end":55596,"line_start":1294,"line_end":1294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55759,"byte_end":55770,"line_start":1301,"line_end":1301,"column_start":12,"column_end":23},"name":"application","qualname":"<DwEhPe>::application","value":"pub fn application(Self) -> DwEhPe","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer encoding's application.\n","sig":null,"attributes":[{"value":"/ Get the pointer encoding's application.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55690,"byte_end":55733,"line_start":1299,"line_end":1299,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55738,"byte_end":55747,"line_start":1300,"line_end":1300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55926,"byte_end":55935,"line_start":1307,"line_end":1307,"column_start":12,"column_end":21},"name":"is_absent","qualname":"<DwEhPe>::is_absent","value":"pub fn is_absent(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this encoding the absent pointer encoding?\n","sig":null,"attributes":[{"value":"/ Is this encoding the absent pointer encoding?","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55851,"byte_end":55900,"line_start":1305,"line_end":1305,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55905,"byte_end":55914,"line_start":1306,"line_end":1306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":56154,"byte_end":56165,"line_start":1314,"line_end":1314,"column_start":12,"column_end":23},"name":"is_indirect","qualname":"<DwEhPe>::is_indirect","value":"pub fn is_indirect(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this coding indirect? If so, its encoded value is the address of the\n real pointer result, not the pointer result itself.\n","sig":null,"attributes":[{"value":"/ Is this coding indirect? If so, its encoded value is the address of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55993,"byte_end":56068,"line_start":1311,"line_end":1311,"column_start":5,"column_end":80}},{"value":"/ real pointer result, not the pointer result itself.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":56073,"byte_end":56128,"line_start":1312,"line_end":1312,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":56133,"byte_end":56142,"line_start":1313,"line_end":1313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":56291,"byte_end":56308,"line_start":1319,"line_end":1319,"column_start":12,"column_end":29},"name":"is_valid_encoding","qualname":"<DwEhPe>::is_valid_encoding","value":"pub fn is_valid_encoding(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a known, valid pointer encoding?\n","sig":null,"attributes":[{"value":"/ Is this a known, valid pointer encoding?","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":56235,"byte_end":56279,"line_start":1318,"line_end":1318,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":54},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58349,"byte_end":58358,"line_start":7,"line_end":7,"column_start":11,"column_end":20},"name":"Endianity","qualname":"::endianity::Endianity","value":"Endianity: Debug + Default + Clone + Copy + PartialEq + Eq","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"decl_id":null,"docs":" A trait describing the endianity of some buffer.\n","sig":null,"attributes":[{"value":"/ A trait describing the endianity of some buffer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58286,"byte_end":58338,"line_start":6,"line_end":6,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58464,"byte_end":58477,"line_start":9,"line_end":9,"column_start":8,"column_end":21},"name":"is_big_endian","qualname":"::endianity::Endianity::is_big_endian","value":"pub fn is_big_endian(Self) -> bool","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Return true for big endian byte order.\n","sig":null,"attributes":[{"value":"/ Return true for big endian byte order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58414,"byte_end":58456,"line_start":8,"line_end":8,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58565,"byte_end":58581,"line_start":13,"line_end":13,"column_start":8,"column_end":24},"name":"is_little_endian","qualname":"::endianity::Endianity::is_little_endian","value":"pub fn is_little_endian(Self) -> bool","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Return true for little endian byte order.\n","sig":null,"attributes":[{"value":"/ Return true for little endian byte order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58498,"byte_end":58543,"line_start":11,"line_end":11,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58548,"byte_end":58557,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58779,"byte_end":58787,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::endianity::Endianity::read_u16","value":"pub fn read_u16(Self, &[u8]) -> u16","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58639,"byte_end":58687,"line_start":17,"line_end":17,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58692,"byte_end":58695,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58700,"byte_end":58712,"line_start":19,"line_end":19,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58717,"byte_end":58720,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58725,"byte_end":58757,"line_start":21,"line_end":21,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58762,"byte_end":58771,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59165,"byte_end":59173,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::endianity::Endianity::read_u32","value":"pub fn read_u32(Self, &[u8]) -> u32","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59025,"byte_end":59073,"line_start":32,"line_end":32,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59078,"byte_end":59081,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59086,"byte_end":59098,"line_start":34,"line_end":34,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59103,"byte_end":59106,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59111,"byte_end":59143,"line_start":36,"line_end":36,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59148,"byte_end":59157,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59551,"byte_end":59559,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::endianity::Endianity::read_u64","value":"pub fn read_u64(Self, &[u8]) -> u64","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59411,"byte_end":59459,"line_start":47,"line_end":47,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59464,"byte_end":59467,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59472,"byte_end":59484,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59489,"byte_end":59492,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59497,"byte_end":59529,"line_start":51,"line_end":51,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59534,"byte_end":59543,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59949,"byte_end":59958,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::endianity::Endianity::read_uint","value":"pub fn read_uint(&mut Self, &[u8]) -> u64","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Read an unsigned n-bytes integer u64.","sig":null,"attributes":[{"value":"/ Read an unsigned n-bytes integer u64.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59797,"byte_end":59838,"line_start":62,"line_end":62,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59843,"byte_end":59846,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59851,"byte_end":59863,"line_start":64,"line_end":64,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59868,"byte_end":59871,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 1` or `buf.len() > 8`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59876,"byte_end":59927,"line_start":66,"line_end":66,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":59932,"byte_end":59941,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60364,"byte_end":60372,"line_start":84,"line_end":84,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::endianity::Endianity::read_i16","value":"pub fn read_i16(Self, &[u8]) -> i16","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60227,"byte_end":60272,"line_start":78,"line_end":78,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60277,"byte_end":60280,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60285,"byte_end":60297,"line_start":80,"line_end":80,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60302,"byte_end":60305,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60310,"byte_end":60342,"line_start":82,"line_end":82,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60347,"byte_end":60356,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60582,"byte_end":60590,"line_start":94,"line_end":94,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::endianity::Endianity::read_i32","value":"pub fn read_i32(Self, &[u8]) -> i32","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60445,"byte_end":60490,"line_start":88,"line_end":88,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60495,"byte_end":60498,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60503,"byte_end":60515,"line_start":90,"line_end":90,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60520,"byte_end":60523,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60528,"byte_end":60560,"line_start":92,"line_end":92,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60565,"byte_end":60574,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60800,"byte_end":60808,"line_start":104,"line_end":104,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::endianity::Endianity::read_i64","value":"pub fn read_i64(Self, &[u8]) -> i64","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60663,"byte_end":60708,"line_start":98,"line_end":98,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60713,"byte_end":60716,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60721,"byte_end":60733,"line_start":100,"line_end":100,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60738,"byte_end":60741,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60746,"byte_end":60778,"line_start":102,"line_end":102,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60783,"byte_end":60792,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61025,"byte_end":61033,"line_start":114,"line_end":114,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::endianity::Endianity::read_f32","value":"pub fn read_f32(Self, &[u8]) -> f32","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Reads a 32 bit floating point number from `buf`.","sig":null,"attributes":[{"value":"/ Reads a 32 bit floating point number from `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60881,"byte_end":60933,"line_start":108,"line_end":108,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60938,"byte_end":60941,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60946,"byte_end":60958,"line_start":110,"line_end":110,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60963,"byte_end":60966,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":60971,"byte_end":61003,"line_start":112,"line_end":112,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61008,"byte_end":61017,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61259,"byte_end":61267,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::endianity::Endianity::read_f64","value":"pub fn read_f64(Self, &[u8]) -> f64","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Reads a 32 bit floating point number from `buf`.","sig":null,"attributes":[{"value":"/ Reads a 32 bit floating point number from `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61115,"byte_end":61167,"line_start":118,"line_end":118,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61172,"byte_end":61175,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61180,"byte_end":61192,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61197,"byte_end":61200,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61205,"byte_end":61237,"line_start":122,"line_end":122,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61242,"byte_end":61251,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61492,"byte_end":61501,"line_start":134,"line_end":134,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::endianity::Endianity::write_u16","value":"pub fn write_u16(Self, &mut [u8], u16)","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61349,"byte_end":61400,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61405,"byte_end":61408,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61413,"byte_end":61425,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61430,"byte_end":61433,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61438,"byte_end":61470,"line_start":132,"line_end":132,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61475,"byte_end":61484,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61860,"byte_end":61869,"line_start":149,"line_end":149,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::endianity::Endianity::write_u32","value":"pub fn write_u32(Self, &mut [u8], u32)","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61717,"byte_end":61768,"line_start":143,"line_end":143,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61773,"byte_end":61776,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61781,"byte_end":61793,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61798,"byte_end":61801,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61806,"byte_end":61838,"line_start":147,"line_end":147,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":61843,"byte_end":61852,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62228,"byte_end":62237,"line_start":164,"line_end":164,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::endianity::Endianity::write_u64","value":"pub fn write_u64(Self, &mut [u8], u64)","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62085,"byte_end":62136,"line_start":158,"line_end":158,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62141,"byte_end":62144,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62149,"byte_end":62161,"line_start":160,"line_end":160,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62166,"byte_end":62169,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62174,"byte_end":62206,"line_start":162,"line_end":162,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62211,"byte_end":62220,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4684},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62611,"byte_end":62617,"line_start":178,"line_end":178,"column_start":5,"column_end":11},"name":"Little","qualname":"::endianity::RunTimeEndian::Little","value":"RunTimeEndian::Little","parent":{"krate":0,"index":4683},"children":[],"decl_id":null,"docs":" Little endian byte order.\n","sig":null,"attributes":[{"value":"/ Little endian byte order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62577,"byte_end":62606,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4686},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62654,"byte_end":62657,"line_start":180,"line_end":180,"column_start":5,"column_end":8},"name":"Big","qualname":"::endianity::RunTimeEndian::Big","value":"RunTimeEndian::Big","parent":{"krate":0,"index":4683},"children":[],"decl_id":null,"docs":" Big endian byte order.\n","sig":null,"attributes":[{"value":"/ Big endian byte order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62623,"byte_end":62649,"line_start":179,"line_end":179,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":4683},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62557,"byte_end":62570,"line_start":176,"line_end":176,"column_start":10,"column_end":23},"name":"RunTimeEndian","qualname":"::endianity::RunTimeEndian","value":"pub enum RunTimeEndian {\n\n    /// Little endian byte order.\n    Little,\n\n    /// Big endian byte order.\n    Big,\n}","parent":null,"children":[{"krate":0,"index":4684},{"krate":0,"index":4686}],"decl_id":null,"docs":" Byte order that is selectable at runtime.\n","sig":null,"attributes":[{"value":"/ Byte order that is selectable at runtime.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62451,"byte_end":62496,"line_start":174,"line_end":174,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4702},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63164,"byte_end":63176,"line_start":206,"line_end":206,"column_start":12,"column_end":24},"name":"LittleEndian","qualname":"::endianity::LittleEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":" Little endian byte order.\n","sig":null,"attributes":[{"value":"/ Little endian byte order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63072,"byte_end":63101,"line_start":204,"line_end":204,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":4718},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63487,"byte_end":63496,"line_start":224,"line_end":224,"column_start":12,"column_end":21},"name":"BigEndian","qualname":"::endianity::BigEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":" Big endian byte order.\n","sig":null,"attributes":[{"value":"/ Big endian byte order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63398,"byte_end":63424,"line_start":222,"line_end":222,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":85},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63797,"byte_end":63809,"line_start":242,"line_end":242,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::endianity::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" The native endianity for the target platform.\n","sig":null,"attributes":[{"value":"/ The native endianity for the target platform.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63705,"byte_end":63754,"line_start":240,"line_end":240,"column_start":1,"column_end":50}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63755,"byte_end":63787,"line_start":241,"line_end":241,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":86},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63918,"byte_end":63930,"line_start":247,"line_end":247,"column_start":11,"column_end":23},"name":"NativeEndian","qualname":"::endianity::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63827,"byte_end":63859,"line_start":244,"line_end":244,"column_start":1,"column_end":33}},{"value":"allow(non_upper_case_globals)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63860,"byte_end":63892,"line_start":245,"line_end":245,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":93},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"leb128","qualname":"::leb128","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"decl_id":null,"docs":" Read and write DWARF's \"Little Endian Base 128\" (LEB128) variable length\n integer encoding.","sig":null,"attributes":[{"value":"/ Read and write DWARF's \"Little Endian Base 128\" (LEB128) variable length","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64204,"byte_end":64280,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ integer encoding.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64281,"byte_end":64302,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64303,"byte_end":64306,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The implementation is a direct translation of the psuedocode in the DWARF 4","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64307,"byte_end":64386,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ standard's appendix C.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64387,"byte_end":64413,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64414,"byte_end":64417,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Read and write signed integers:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64418,"byte_end":64453,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64454,"byte_end":64457,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64458,"byte_end":64465,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"read\", feature = \"write\"))] {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64466,"byte_end":64522,"line_start":10,"line_end":10,"column_start":1,"column_end":57}},{"value":"/ use gimli::{EndianSlice, NativeEndian, leb128};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64523,"byte_end":64574,"line_start":11,"line_end":11,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64575,"byte_end":64578,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 1024];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64579,"byte_end":64607,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64608,"byte_end":64611,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ // Write to anything that implements `std::io::Write`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64612,"byte_end":64670,"line_start":15,"line_end":15,"column_start":1,"column_end":59}},{"value":"/ {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64671,"byte_end":64676,"line_start":16,"line_end":16,"column_start":1,"column_end":6}},{"value":"/     let mut writable = &mut buf[..];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64677,"byte_end":64717,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/     leb128::write::signed(&mut writable, -12345).expect(\"Should write number\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64718,"byte_end":64801,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64802,"byte_end":64807,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64808,"byte_end":64811,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // Read from anything that implements `gimli::Reader`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64812,"byte_end":64870,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"/ let mut readable = EndianSlice::new(&buf[..], NativeEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64871,"byte_end":64935,"line_start":22,"line_end":22,"column_start":1,"column_end":65}},{"value":"/ let val = leb128::read::signed(&mut readable).expect(\"Should read number\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":64936,"byte_end":65015,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ assert_eq!(val, -12345);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65016,"byte_end":65044,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65045,"byte_end":65052,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65053,"byte_end":65060,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65061,"byte_end":65064,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Or read and write unsigned integers:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65065,"byte_end":65105,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65106,"byte_end":65109,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65110,"byte_end":65117,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"read\", feature = \"write\"))] {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65118,"byte_end":65174,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/ use gimli::{EndianSlice, NativeEndian, leb128};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65175,"byte_end":65226,"line_start":32,"line_end":32,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65227,"byte_end":65230,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 1024];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65231,"byte_end":65259,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65260,"byte_end":65263,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65264,"byte_end":65269,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/     let mut writable = &mut buf[..];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65270,"byte_end":65310,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/     leb128::write::unsigned(&mut writable, 98765).expect(\"Should write number\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65311,"byte_end":65395,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65396,"byte_end":65401,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65402,"byte_end":65405,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut readable = EndianSlice::new(&buf[..], NativeEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65406,"byte_end":65470,"line_start":41,"line_end":41,"column_start":1,"column_end":65}},{"value":"/ let val = leb128::read::unsigned(&mut readable).expect(\"Should read number\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65471,"byte_end":65552,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(val, 98765);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65553,"byte_end":65580,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65581,"byte_end":65588,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65589,"byte_end":65596,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":98},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":66042,"byte_end":66046,"line_start":66,"line_end":66,"column_start":9,"column_end":13},"name":"read","qualname":"::leb128::read","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111}],"decl_id":null,"docs":" A module for reading signed and unsigned integers that have been LEB128\n encoded.\n","sig":null,"attributes":[{"value":"/ A module for reading signed and unsigned integers that have been LEB128","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65920,"byte_end":65995,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ encoded.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":65996,"byte_end":66008,"line_start":64,"line_end":64,"column_start":1,"column_end":13}},{"value":"cfg(feature = \"read\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":66009,"byte_end":66033,"line_start":65,"line_end":65,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":107},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":66286,"byte_end":66294,"line_start":72,"line_end":72,"column_start":12,"column_end":20},"name":"unsigned","qualname":"::leb128::read::unsigned","value":"pub fn unsigned<R: Reader>(&mut R) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 number from the given `Reader` and\n return it or an error if reading failed.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 number from the given `Reader` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":66163,"byte_end":66225,"line_start":70,"line_end":70,"column_start":5,"column_end":67}},{"value":"/ return it or an error if reading failed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":66230,"byte_end":66274,"line_start":71,"line_end":71,"column_start":5,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":109},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":66928,"byte_end":66931,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"u16","qualname":"::leb128::read::u16","value":"pub fn u16<R: Reader>(&mut R) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Read an LEB128 u16 from the given `Reader` and\n return it or an error if reading failed.\n","sig":null,"attributes":[{"value":"/ Read an LEB128 u16 from the given `Reader` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":66817,"byte_end":66867,"line_start":93,"line_end":93,"column_start":5,"column_end":55}},{"value":"/ return it or an error if reading failed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":66872,"byte_end":66916,"line_start":94,"line_end":94,"column_start":5,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":67632,"byte_end":67638,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"signed","qualname":"::leb128::read::signed","value":"pub fn signed<R: Reader>(&mut R) -> Result<i64>","parent":null,"children":[],"decl_id":null,"docs":" Read a signed LEB128 number from the given `Reader` and\n return it or an error if reading failed.\n","sig":null,"attributes":[{"value":"/ Read a signed LEB128 number from the given `Reader` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":67512,"byte_end":67571,"line_start":116,"line_end":116,"column_start":5,"column_end":64}},{"value":"/ return it or an error if reading failed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/leb128.rs","byte_start":67576,"byte_end":67620,"line_start":117,"line_end":117,"column_start":5,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":113},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":7574},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":7578},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1233},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1359},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":7375},{"krate":0,"index":7540},{"krate":0,"index":7538},{"krate":0,"index":7537},{"krate":0,"index":7533},{"krate":0,"index":7534},{"krate":0,"index":7530},{"krate":0,"index":7531},{"krate":0,"index":2005},{"krate":0,"index":2007},{"krate":0,"index":2009},{"krate":0,"index":2011},{"krate":0,"index":2022}],"decl_id":null,"docs":" Read DWARF debugging information.","sig":null,"attributes":[{"value":"cfg(feature = \"read\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1951,"byte_end":1975,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/ Read DWARF debugging information.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82317,"byte_end":82354,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82355,"byte_end":82358,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ * [Example Usage](#example-usage)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82359,"byte_end":82396,"line_start":3,"line_end":3,"column_start":1,"column_end":38}},{"value":"/ * [API Structure](#api-structure)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82397,"byte_end":82434,"line_start":4,"line_end":4,"column_start":1,"column_end":38}},{"value":"/ * [Using with `FallibleIterator`](#using-with-fallibleiterator)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82435,"byte_end":82502,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82503,"byte_end":82506,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82507,"byte_end":82527,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82528,"byte_end":82531,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Print out all of the functions in the debuggee program:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82532,"byte_end":82591,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82592,"byte_end":82595,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82596,"byte_end":82614,"line_start":11,"line_end":11,"column_start":1,"column_end":19}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82615,"byte_end":82663,"line_start":12,"line_end":12,"column_start":1,"column_end":49}},{"value":"/ # type R = gimli::EndianSlice<'static, gimli::LittleEndian>;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82664,"byte_end":82728,"line_start":13,"line_end":13,"column_start":1,"column_end":65}},{"value":"/ # let get_file_section_reader = |name| -> Result<R, gimli::Error> { unimplemented!() };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82729,"byte_end":82820,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ # let get_sup_file_section_reader = |name| -> Result<R, gimli::Error> { unimplemented!() };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82821,"byte_end":82916,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/ // Read the DWARF sections with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82917,"byte_end":82989,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ // These closures should return a `Reader` instance (e.g. `EndianSlice`).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":82990,"byte_end":83067,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ let loader = |section: gimli::SectionId| { get_file_section_reader(section.name()) };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83068,"byte_end":83157,"line_start":18,"line_end":18,"column_start":1,"column_end":90}},{"value":"/ let sup_loader = |section: gimli::SectionId| { get_sup_file_section_reader(section.name()) };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83158,"byte_end":83255,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ let mut dwarf = gimli::Dwarf::load(loader)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83256,"byte_end":83304,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/ dwarf.load_sup(sup_loader)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83305,"byte_end":83337,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83338,"byte_end":83341,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ // Iterate over all compilation units.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83342,"byte_end":83384,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"/ let mut iter = dwarf.units();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83385,"byte_end":83418,"line_start":24,"line_end":24,"column_start":1,"column_end":34}},{"value":"/ while let Some(header) = iter.next()? {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83419,"byte_end":83462,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/     // Parse the abbreviations and other information for this compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83463,"byte_end":83546,"line_start":26,"line_end":26,"column_start":1,"column_end":84}},{"value":"/     let unit = dwarf.unit(header)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83547,"byte_end":83586,"line_start":27,"line_end":27,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83587,"byte_end":83590,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/     // Iterate over all of this compilation unit's entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83591,"byte_end":83654,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"/     let mut entries = unit.entries();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83655,"byte_end":83696,"line_start":30,"line_end":30,"column_start":1,"column_end":42}},{"value":"/     while let Some((_, entry)) = entries.next_dfs()? {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83697,"byte_end":83755,"line_start":31,"line_end":31,"column_start":1,"column_end":59}},{"value":"/         // If we find an entry for a function, print it.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83756,"byte_end":83816,"line_start":32,"line_end":32,"column_start":1,"column_end":61}},{"value":"/         if entry.tag() == gimli::DW_TAG_subprogram {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83817,"byte_end":83873,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/             println!(\"Found a function: {:?}\", entry);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83874,"byte_end":83932,"line_start":34,"line_end":34,"column_start":1,"column_end":59}},{"value":"/         }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83933,"byte_end":83946,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83947,"byte_end":83956,"line_start":36,"line_end":36,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83957,"byte_end":83962,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83963,"byte_end":83983,"line_start":38,"line_end":38,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83984,"byte_end":83991,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":83992,"byte_end":83999,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84000,"byte_end":84003,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Full example programs:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84004,"byte_end":84030,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84031,"byte_end":84034,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/   * [A simple parser](https://github.com/gimli-rs/gimli/blob/master/examples/simple.rs)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84035,"byte_end":84126,"line_start":44,"line_end":44,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84127,"byte_end":84130,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/   * [A `dwarfdump`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84131,"byte_end":84153,"line_start":46,"line_end":46,"column_start":1,"column_end":23}},{"value":"/     clone](https://github.com/gimli-rs/gimli/blob/master/examples/dwarfdump.rs)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84154,"byte_end":84237,"line_start":47,"line_end":47,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84238,"byte_end":84241,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/   * [An `addr2line` clone](https://github.com/gimli-rs/addr2line)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84242,"byte_end":84311,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84312,"byte_end":84315,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/   * [`ddbug`](https://github.com/philipc/ddbug), a utility giving insight into","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84316,"byte_end":84398,"line_start":51,"line_end":51,"column_start":1,"column_end":83}},{"value":"/     code generation by making debugging information readable","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84399,"byte_end":84463,"line_start":52,"line_end":52,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84464,"byte_end":84467,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/   * [`dwprod`](https://github.com/fitzgen/dwprod), a tiny utility to list the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84468,"byte_end":84549,"line_start":54,"line_end":54,"column_start":1,"column_end":82}},{"value":"/     compilers used to create each compilation unit within a shared library or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84550,"byte_end":84631,"line_start":55,"line_end":55,"column_start":1,"column_end":82}},{"value":"/     executable (via `DW_AT_producer`)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84632,"byte_end":84673,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84674,"byte_end":84677,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/   * [`dwarf-validate`](http://github.com/gimli-rs/gimli/blob/master/examples/dwarf-validate.rs),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84678,"byte_end":84778,"line_start":58,"line_end":58,"column_start":1,"column_end":101}},{"value":"/     a program to validate the integrity of some DWARF and its references","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84779,"byte_end":84855,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/     between sections and compilation units.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84856,"byte_end":84903,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84904,"byte_end":84907,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## API Structure","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84908,"byte_end":84928,"line_start":62,"line_end":62,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84929,"byte_end":84932,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ * Basic familiarity with DWARF is assumed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84933,"byte_end":84979,"line_start":64,"line_end":64,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84980,"byte_end":84983,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ * The [`Dwarf`](./struct.Dwarf.html) type contains the commonly used DWARF","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":84984,"byte_end":85062,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/ sections. It has methods that simplify access to debugging data that spans","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85063,"byte_end":85141,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ multiple sections. Use of this type is optional, but recommended.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85142,"byte_end":85211,"line_start":68,"line_end":68,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85212,"byte_end":85215,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ * Each section gets its own type. Consider these types the entry points to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85216,"byte_end":85294,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/ the library:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85295,"byte_end":85311,"line_start":71,"line_end":71,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85312,"byte_end":85315,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/   * [`DebugAbbrev`](./struct.DebugAbbrev.html): The `.debug_abbrev` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85316,"byte_end":85396,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85397,"byte_end":85400,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/   * [`DebugAddr`](./struct.DebugAddr.html): The `.debug_addr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85401,"byte_end":85475,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85476,"byte_end":85479,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/   * [`DebugAranges`](./struct.DebugAranges.html): The `.debug_aranges`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85480,"byte_end":85554,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/   section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85555,"byte_end":85569,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85570,"byte_end":85573,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/   * [`DebugFrame`](./struct.DebugFrame.html): The `.debug_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85574,"byte_end":85651,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85652,"byte_end":85655,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/   * [`DebugInfo`](./struct.DebugInfo.html): The `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85656,"byte_end":85730,"line_start":82,"line_end":82,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85731,"byte_end":85734,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLine`](./struct.DebugLine.html): The `.debug_line` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85735,"byte_end":85809,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85810,"byte_end":85813,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLineStr`](./struct.DebugLineStr.html): The `.debug_line_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85814,"byte_end":85898,"line_start":86,"line_end":86,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85899,"byte_end":85902,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLoc`](./struct.DebugLoc.html): The `.debug_loc` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85903,"byte_end":85974,"line_start":88,"line_end":88,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85975,"byte_end":85978,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLocLists`](./struct.DebugLocLists.html): The `.debug_loclists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":85979,"byte_end":86065,"line_start":90,"line_end":90,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86066,"byte_end":86069,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/   * [`DebugPubNames`](./struct.DebugPubNames.html): The `.debug_pubnames`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86070,"byte_end":86147,"line_start":92,"line_end":92,"column_start":1,"column_end":78}},{"value":"/   section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86148,"byte_end":86162,"line_start":93,"line_end":93,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86163,"byte_end":86166,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/   * [`DebugPubTypes`](./struct.DebugPubTypes.html): The `.debug_pubtypes`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86167,"byte_end":86244,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86245,"byte_end":86259,"line_start":96,"line_end":96,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86260,"byte_end":86263,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/   * [`DebugRanges`](./struct.DebugRanges.html): The `.debug_ranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86264,"byte_end":86344,"line_start":98,"line_end":98,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86345,"byte_end":86348,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/   * [`DebugRngLists`](./struct.DebugRngLists.html): The `.debug_rnglists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86349,"byte_end":86435,"line_start":100,"line_end":100,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86436,"byte_end":86439,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/   * [`DebugStr`](./struct.DebugStr.html): The `.debug_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86440,"byte_end":86511,"line_start":102,"line_end":102,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86512,"byte_end":86515,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/   * [`DebugStrOffsets`](./struct.DebugStrOffsets.html): The `.debug_str_offsets` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86516,"byte_end":86609,"line_start":104,"line_end":104,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86610,"byte_end":86613,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/   * [`DebugTypes`](./struct.DebugTypes.html): The `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86614,"byte_end":86691,"line_start":106,"line_end":106,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86692,"byte_end":86695,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/   * [`EhFrame`](./struct.EhFrame.html): The `.eh_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86696,"byte_end":86764,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86765,"byte_end":86768,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/   * [`EhFrameHdr`](./struct.EhFrameHdr.html): The `.eh_frame_hdr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86769,"byte_end":86847,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86848,"byte_end":86851,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ * Each section type exposes methods for accessing the debugging data encoded","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86852,"byte_end":86932,"line_start":112,"line_end":112,"column_start":1,"column_end":81}},{"value":"/ in that section. For example, the [`DebugInfo`](./struct.DebugInfo.html)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":86933,"byte_end":87009,"line_start":113,"line_end":113,"column_start":1,"column_end":77}},{"value":"/ struct has the [`units`](./struct.DebugInfo.html#method.units) method for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87010,"byte_end":87087,"line_start":114,"line_end":114,"column_start":1,"column_end":78}},{"value":"/ iterating over the compilation units defined within it.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87088,"byte_end":87147,"line_start":115,"line_end":115,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87148,"byte_end":87151,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ * Offsets into a section are strongly typed: an offset into `.debug_info` is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87152,"byte_end":87232,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/ the [`DebugInfoOffset`](./struct.DebugInfoOffset.html) type. It cannot be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87233,"byte_end":87310,"line_start":118,"line_end":118,"column_start":1,"column_end":78}},{"value":"/ used to index into the [`DebugLine`](./struct.DebugLine.html) type because","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87311,"byte_end":87389,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/ `DebugLine` represents the `.debug_line` section. There are similar types","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87390,"byte_end":87467,"line_start":120,"line_end":120,"column_start":1,"column_end":78}},{"value":"/ for offsets relative to a compilation unit rather than a section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87468,"byte_end":87537,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87538,"byte_end":87541,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ ## Using with `FallibleIterator`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87542,"byte_end":87578,"line_start":123,"line_end":123,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87579,"byte_end":87582,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ The standard library's `Iterator` trait and related APIs do not play well","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87583,"byte_end":87660,"line_start":125,"line_end":125,"column_start":1,"column_end":78}},{"value":"/ with iterators where the `next` operation is fallible. One can make the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87661,"byte_end":87736,"line_start":126,"line_end":126,"column_start":1,"column_end":76}},{"value":"/ `Iterator`'s associated `Item` type be a `Result<T, E>`, however the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87737,"byte_end":87809,"line_start":127,"line_end":127,"column_start":1,"column_end":73}},{"value":"/ provided methods cannot gracefully handle the case when an `Err` is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87810,"byte_end":87881,"line_start":128,"line_end":128,"column_start":1,"column_end":72}},{"value":"/ returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87882,"byte_end":87895,"line_start":129,"line_end":129,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87896,"byte_end":87899,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ This situation led to the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87900,"byte_end":87929,"line_start":131,"line_end":131,"column_start":1,"column_end":30}},{"value":"/ [`fallible-iterator`](https://crates.io/crates/fallible-iterator) crate's","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":87930,"byte_end":88007,"line_start":132,"line_end":132,"column_start":1,"column_end":78}},{"value":"/ existence. You can read more of the rationale for its existence in its","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88008,"byte_end":88082,"line_start":133,"line_end":133,"column_start":1,"column_end":75}},{"value":"/ docs. The crate provides the helpers you have come to expect (eg `map`,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88083,"byte_end":88158,"line_start":134,"line_end":134,"column_start":1,"column_end":76}},{"value":"/ `filter`, etc) for iterators that can fail.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88159,"byte_end":88206,"line_start":135,"line_end":135,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88207,"byte_end":88210,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ `gimli`'s many lazy parsing iterators are a perfect match for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88211,"byte_end":88280,"line_start":137,"line_end":137,"column_start":1,"column_end":70}},{"value":"/ `fallible-iterator` crate's `FallibleIterator` trait because parsing is not","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88281,"byte_end":88360,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ done eagerly. Parse errors later in the input might only be discovered after","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88361,"byte_end":88441,"line_start":139,"line_end":139,"column_start":1,"column_end":81}},{"value":"/ having iterated through many items.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88442,"byte_end":88481,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88482,"byte_end":88485,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ To use `gimli` iterators with `FallibleIterator`, import the crate and trait","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88486,"byte_end":88566,"line_start":142,"line_end":142,"column_start":1,"column_end":81}},{"value":"/ into your code:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88567,"byte_end":88586,"line_start":143,"line_end":143,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88587,"byte_end":88590,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88591,"byte_end":88598,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"fallible-iterator\")]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88599,"byte_end":88642,"line_start":146,"line_end":146,"column_start":1,"column_end":44}},{"value":"/ # fn foo() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88643,"byte_end":88659,"line_start":147,"line_end":147,"column_start":1,"column_end":17}},{"value":"/ // Use the `FallibleIterator` trait so its methods are in scope!","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88660,"byte_end":88728,"line_start":148,"line_end":148,"column_start":1,"column_end":69}},{"value":"/ use fallible_iterator::FallibleIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88729,"byte_end":88773,"line_start":149,"line_end":149,"column_start":1,"column_end":45}},{"value":"/ use gimli::{DebugAranges, EndianSlice, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88774,"byte_end":88831,"line_start":150,"line_end":150,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88832,"byte_end":88835,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ fn find_sum_of_address_range_lengths(aranges: DebugAranges<EndianSlice<LittleEndian>>)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88836,"byte_end":88926,"line_start":152,"line_end":152,"column_start":1,"column_end":91}},{"value":"/     -> gimli::Result<u64>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88927,"byte_end":88956,"line_start":153,"line_end":153,"column_start":1,"column_end":30}},{"value":"/ {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88957,"byte_end":88962,"line_start":154,"line_end":154,"column_start":1,"column_end":6}},{"value":"/     // `DebugAranges::headers` returns a `FallibleIterator`!","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":88963,"byte_end":89027,"line_start":155,"line_end":155,"column_start":1,"column_end":65}},{"value":"/     aranges.headers()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89028,"byte_end":89053,"line_start":156,"line_end":156,"column_start":1,"column_end":26}},{"value":"/         // `flat_map` is provided by `FallibleIterator`!","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89054,"byte_end":89114,"line_start":157,"line_end":157,"column_start":1,"column_end":61}},{"value":"/         .flat_map(|header| Ok(header.entries()))","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89115,"byte_end":89167,"line_start":158,"line_end":158,"column_start":1,"column_end":53}},{"value":"/         // `map` is provided by `FallibleIterator`!","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89168,"byte_end":89223,"line_start":159,"line_end":159,"column_start":1,"column_end":56}},{"value":"/         .map(|arange| Ok(arange.length()))","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89224,"byte_end":89270,"line_start":160,"line_end":160,"column_start":1,"column_end":47}},{"value":"/         // `fold` is provided by `FallibleIterator`!","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89271,"byte_end":89327,"line_start":161,"line_end":161,"column_start":1,"column_end":57}},{"value":"/         .fold(0, |sum, len| Ok(sum + len))","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89328,"byte_end":89374,"line_start":162,"line_end":162,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89375,"byte_end":89380,"line_start":163,"line_end":163,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89381,"byte_end":89388,"line_start":164,"line_end":164,"column_start":1,"column_end":8}},{"value":"/ # fn main() {}","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89389,"byte_end":89407,"line_start":165,"line_end":165,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":89408,"byte_end":89415,"line_start":166,"line_end":166,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4734},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113046,"byte_end":113055,"line_start":6,"line_end":6,"column_start":12,"column_end":21},"name":"DebugAddr","qualname":"::read::addr::DebugAddr","value":"DebugAddr {  }","parent":null,"children":[{"krate":0,"index":4736}],"decl_id":null,"docs":" The raw contents of the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_addr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":112945,"byte_end":112995,"line_start":4,"line_end":4,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113998,"byte_end":114009,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"get_address","qualname":"<DebugAddr<R>>::get_address","value":"pub fn get_address(&Self, u8, DebugAddrBase<R::Offset>,\n                   DebugAddrIndex<R::Offset>) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the address at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the address at the given `base` and `index`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113254,"byte_end":113310,"line_start":14,"line_end":14,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113315,"byte_end":113318,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ A set of addresses in the `.debug_addr` section consists of a header","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113323,"byte_end":113395,"line_start":16,"line_end":16,"column_start":5,"column_end":77}},{"value":"/ followed by a series of addresses.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113400,"byte_end":113438,"line_start":17,"line_end":17,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113443,"byte_end":113446,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_addr_base` value from the compilation unit DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113451,"byte_end":113532,"line_start":19,"line_end":19,"column_start":5,"column_end":86}},{"value":"/ This is an offset that points to the first address following the header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113537,"byte_end":113613,"line_start":20,"line_end":20,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113618,"byte_end":113621,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_addrx` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113626,"byte_end":113686,"line_start":22,"line_end":22,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113691,"byte_end":113694,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ The `address_size` must be the size of the address for the compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113699,"byte_end":113779,"line_start":24,"line_end":24,"column_start":5,"column_end":85}},{"value":"/ This value must also match the header. However, note that we do not parse the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113784,"byte_end":113865,"line_start":25,"line_end":25,"column_start":5,"column_end":86}},{"value":"/ header to validate this, since locating the header is unreliable, and the GNU","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113870,"byte_end":113951,"line_start":26,"line_end":26,"column_start":5,"column_end":86}},{"value":"/ extensions do not emit it.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113956,"byte_end":113986,"line_start":27,"line_end":27,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":115052,"byte_end":115058,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugAddr<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugAddr<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugAddr` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugAddr` section that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114422,"byte_end":114490,"line_start":44,"line_end":44,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114495,"byte_end":114498,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114503,"byte_end":114568,"line_start":46,"line_end":46,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114573,"byte_end":114576,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114581,"byte_end":114601,"line_start":48,"line_end":48,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114606,"byte_end":114609,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114614,"byte_end":114632,"line_start":50,"line_end":50,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114637,"byte_end":114682,"line_start":51,"line_end":51,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114687,"byte_end":114771,"line_start":52,"line_end":52,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugAddr<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114776,"byte_end":114842,"line_start":53,"line_end":53,"column_start":5,"column_end":71}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114847,"byte_end":114894,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114899,"byte_end":114949,"line_start":55,"line_end":55,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114954,"byte_end":115016,"line_start":56,"line_end":56,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":115021,"byte_end":115028,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":115033,"byte_end":115040,"line_start":58,"line_end":58,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4748},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118399,"byte_end":118409,"line_start":29,"line_end":29,"column_start":12,"column_end":22},"name":"DebugFrame","qualname":"::read::cfi::DebugFrame","value":"DebugFrame {  }","parent":null,"children":[{"krate":0,"index":4750},{"krate":0,"index":4751},{"krate":0,"index":4752}],"decl_id":null,"docs":" `DebugFrame` contains the `.debug_frame` section's frame unwinding\n information required to unwind to and recover registers from older frames on\n the stack. For example, this is useful for a debugger that wants to print\n locals in a backtrace.","sig":null,"attributes":[{"value":"/ `DebugFrame` contains the `.debug_frame` section's frame unwinding","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":117594,"byte_end":117664,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/ information required to unwind to and recover registers from older frames on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":117665,"byte_end":117745,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ the stack. For example, this is useful for a debugger that wants to print","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":117746,"byte_end":117823,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ locals in a backtrace.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":117824,"byte_end":117850,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":117851,"byte_end":117854,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Most interesting methods are defined in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":117855,"byte_end":117902,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/ [`UnwindSection`](trait.UnwindSection.html) trait.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":117903,"byte_end":117957,"line_start":20,"line_end":20,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":117958,"byte_end":117961,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ### Differences between `.debug_frame` and `.eh_frame`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":117962,"byte_end":118020,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118021,"byte_end":118024,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ While the `.debug_frame` section's information has a lot of overlap with the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118025,"byte_end":118105,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ `.eh_frame` section's information, the `.eh_frame` information tends to only","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118106,"byte_end":118186,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ encode the subset of information needed for exception handling. Often, only","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118187,"byte_end":118266,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ one of `.eh_frame` or `.debug_frame` will be present in an object file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118267,"byte_end":118342,"line_start":27,"line_end":27,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118696,"byte_end":118712,"line_start":40,"line_end":40,"column_start":12,"column_end":28},"name":"set_address_size","qualname":"<DebugFrame<R>>::set_address_size","value":"pub fn set_address_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of a target address in bytes.","sig":null,"attributes":[{"value":"/ Set the size of a target address in bytes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118522,"byte_end":118568,"line_start":36,"line_end":36,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118573,"byte_end":118576,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This defaults to the native word size.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118581,"byte_end":118623,"line_start":38,"line_end":38,"column_start":5,"column_end":47}},{"value":"/ This is only used if the CIE version is less than 4.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118628,"byte_end":118684,"line_start":39,"line_end":39,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118953,"byte_end":118969,"line_start":48,"line_end":48,"column_start":12,"column_end":28},"name":"set_segment_size","qualname":"<DebugFrame<R>>::set_segment_size","value":"pub fn set_segment_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of a segment selector in bytes.","sig":null,"attributes":[{"value":"/ Set the size of a segment selector in bytes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118796,"byte_end":118844,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118849,"byte_end":118852,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This defaults to 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118857,"byte_end":118880,"line_start":46,"line_end":46,"column_start":5,"column_end":28}},{"value":"/ This is only used if the CIE version is less than 4.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118885,"byte_end":118941,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119765,"byte_end":119768,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugFrame<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugFrame` instance from the data in the\n `.debug_frame` section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugFrame` instance from the data in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119147,"byte_end":119209,"line_start":57,"line_end":57,"column_start":5,"column_end":67}},{"value":"/ `.debug_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119214,"byte_end":119241,"line_start":58,"line_end":58,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119246,"byte_end":119249,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the section and present it as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119254,"byte_end":119329,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"/ a `&[u8]` slice. That means using some ELF loader on Linux, a Mach-O","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119334,"byte_end":119406,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119411,"byte_end":119434,"line_start":62,"line_end":62,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119439,"byte_end":119442,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119447,"byte_end":119454,"line_start":64,"line_end":64,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugFrame, NativeEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119459,"byte_end":119501,"line_start":65,"line_end":65,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119506,"byte_end":119509,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ // Use with `.debug_frame`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119514,"byte_end":119544,"line_start":67,"line_end":67,"column_start":5,"column_end":35}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119549,"byte_end":119590,"line_start":68,"line_end":68,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_frame_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119595,"byte_end":119648,"line_start":69,"line_end":69,"column_start":5,"column_end":58}},{"value":"/ let debug_frame = DebugFrame::new(read_debug_frame_section_somehow(), NativeEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119653,"byte_end":119741,"line_start":70,"line_end":70,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119746,"byte_end":119753,"line_start":71,"line_end":71,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4772},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120635,"byte_end":120645,"line_start":103,"line_end":103,"column_start":12,"column_end":22},"name":"EhFrameHdr","qualname":"::read::cfi::EhFrameHdr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `EhFrameHdr` contains the information about the `.eh_frame_hdr` section.","sig":null,"attributes":[{"value":"/ `EhFrameHdr` contains the information about the `.eh_frame_hdr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120333,"byte_end":120409,"line_start":98,"line_end":98,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120410,"byte_end":120413,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ A pointer to the start of the `.eh_frame` data, and optionally, a binary","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120414,"byte_end":120490,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ search table of pointers to the `.eh_frame` records that are found in this section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120491,"byte_end":120578,"line_start":101,"line_end":101,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":4795},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120786,"byte_end":120802,"line_start":107,"line_end":107,"column_start":12,"column_end":28},"name":"ParsedEhFrameHdr","qualname":"::read::cfi::ParsedEhFrameHdr","value":"ParsedEhFrameHdr {  }","parent":null,"children":[{"krate":0,"index":4797},{"krate":0,"index":4798},{"krate":0,"index":4799},{"krate":0,"index":4800},{"krate":0,"index":4801},{"krate":0,"index":4802}],"decl_id":null,"docs":" `ParsedEhFrameHdr` contains the parsed information from the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ `ParsedEhFrameHdr` contains the parsed information from the `.eh_frame_hdr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120662,"byte_end":120750,"line_start":105,"line_end":105,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":121138,"byte_end":121141,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<EhFrameHdr<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `EhFrameHdr` instance from the data in the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ Constructs a new `EhFrameHdr` instance from the data in the `.eh_frame_hdr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":121038,"byte_end":121126,"line_start":121,"line_end":121,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":121355,"byte_end":121360,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"name":"parse","qualname":"<EhFrameHdr<R>>::parse","value":"pub fn parse(&Self, &BaseAddresses, u8) -> Result<ParsedEhFrameHdr<R>>","parent":null,"children":[],"decl_id":null,"docs":" Parses this `EhFrameHdr` to a `ParsedEhFrameHdr`.\n","sig":null,"attributes":[{"value":"/ Parses this `EhFrameHdr` to a `ParsedEhFrameHdr`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":121290,"byte_end":121343,"line_start":128,"line_end":128,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123382,"byte_end":123394,"line_start":194,"line_end":194,"column_start":12,"column_end":24},"name":"eh_frame_ptr","qualname":"<ParsedEhFrameHdr<R>>::eh_frame_ptr","value":"pub fn eh_frame_ptr(&Self) -> Pointer","parent":null,"children":[],"decl_id":null,"docs":" Returns the address of the binary's `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ Returns the address of the binary's `.eh_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123310,"byte_end":123370,"line_start":193,"line_end":193,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123523,"byte_end":123528,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"table","qualname":"<ParsedEhFrameHdr<R>>::table","value":"pub fn table(&Self) -> Option<EhHdrTable<, R>>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the CFI binary search table, if there is one.\n","sig":null,"attributes":[{"value":"/ Retrieves the CFI binary search table, if there is one.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123452,"byte_end":123511,"line_start":198,"line_end":198,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":4809},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124523,"byte_end":124533,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"EhHdrTable","qualname":"::read::cfi::EhHdrTable","value":"EhHdrTable {  }","parent":null,"children":[{"krate":0,"index":4812}],"decl_id":null,"docs":" The CFI binary search table that is an optional part of the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ The CFI binary search table that is an optional part of the `.eh_frame_hdr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124399,"byte_end":124487,"line_start":217,"line_end":217,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124958,"byte_end":124964,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"lookup","qualname":"<EhHdrTable>::lookup","value":"pub fn lookup(&Self, u64, &BaseAddresses) -> Result<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" *Probably* returns a pointer to the FDE for the given address.","sig":null,"attributes":[{"value":"/ *Probably* returns a pointer to the FDE for the given address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124637,"byte_end":124703,"line_start":224,"line_end":224,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124708,"byte_end":124711,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ This performs a binary search, so if there is no FDE for the given address,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124716,"byte_end":124795,"line_start":226,"line_end":226,"column_start":5,"column_end":84}},{"value":"/ this function **will** return a pointer to any other FDE that's close by.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124800,"byte_end":124877,"line_start":227,"line_end":227,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124882,"byte_end":124885,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ To be sure, you **must** call `contains` on the FDE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124890,"byte_end":124946,"line_start":229,"line_end":229,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":126989,"byte_end":127006,"line_start":288,"line_end":288,"column_start":12,"column_end":29},"name":"pointer_to_offset","qualname":"<EhHdrTable>::pointer_to_offset","value":"pub fn pointer_to_offset(&Self, Pointer) -> Result<EhFrameOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Pointer` to a section offset.","sig":null,"attributes":[{"value":"/ Convert a `Pointer` to a section offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":126876,"byte_end":126920,"line_start":285,"line_end":285,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":126925,"byte_end":126928,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This does not support indirect pointers.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":126933,"byte_end":126977,"line_start":287,"line_end":287,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":128391,"byte_end":128406,"line_start":323,"line_end":323,"column_start":12,"column_end":27},"name":"fde_for_address","qualname":"<EhHdrTable>::fde_for_address","value":"pub fn fde_for_address<F>(&Self, &EhFrame<R>, &BaseAddresses, u64, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&EhFrame<R>, &BaseAddresses, EhFrameOffset<R::Offset>) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed FDE for the given address, or `NoUnwindInfoForAddress`\n if there are none.","sig":null,"attributes":[{"value":"/ Returns a parsed FDE for the given address, or `NoUnwindInfoForAddress`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127514,"byte_end":127589,"line_start":303,"line_end":303,"column_start":5,"column_end":80}},{"value":"/ if there are none.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127594,"byte_end":127616,"line_start":304,"line_end":304,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127621,"byte_end":127624,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ You must provide a function to get its associated CIE. See","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127629,"byte_end":127691,"line_start":306,"line_end":306,"column_start":5,"column_end":67}},{"value":"/ `PartialFrameDescriptionEntry::parse` for more information.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127696,"byte_end":127759,"line_start":307,"line_end":307,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127764,"byte_end":127767,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127772,"byte_end":127785,"line_start":309,"line_end":309,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127790,"byte_end":127793,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127798,"byte_end":127805,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{BaseAddresses, EhFrame, ParsedEhFrameHdr, EndianSlice, NativeEndian, Error, UnwindSection};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127810,"byte_end":127919,"line_start":312,"line_end":312,"column_start":5,"column_end":114}},{"value":"/ # fn foo() -> Result<(), Error> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127924,"byte_end":127961,"line_start":313,"line_end":313,"column_start":5,"column_end":42}},{"value":"/ # let eh_frame: EhFrame<EndianSlice<NativeEndian>> = unreachable!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":127966,"byte_end":128038,"line_start":314,"line_end":314,"column_start":5,"column_end":77}},{"value":"/ # let eh_frame_hdr: ParsedEhFrameHdr<EndianSlice<NativeEndian>> = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":128043,"byte_end":128130,"line_start":315,"line_end":315,"column_start":5,"column_end":92}},{"value":"/ # let addr = 0;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":128135,"byte_end":128154,"line_start":316,"line_end":316,"column_start":5,"column_end":24}},{"value":"/ # let bases = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":128159,"byte_end":128194,"line_start":317,"line_end":317,"column_start":5,"column_end":40}},{"value":"/ let table = eh_frame_hdr.table().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":128199,"byte_end":128245,"line_start":318,"line_end":318,"column_start":5,"column_end":51}},{"value":"/ let fde = table.fde_for_address(&eh_frame, &bases, addr, EhFrame::cie_from_offset)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":128250,"byte_end":128338,"line_start":319,"line_end":319,"column_start":5,"column_end":93}},{"value":"/ # Ok(())","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":128343,"byte_end":128355,"line_start":320,"line_end":320,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":128360,"byte_end":128367,"line_start":321,"line_end":321,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":128372,"byte_end":128379,"line_start":322,"line_end":322,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":129180,"byte_end":129196,"line_start":350,"line_end":350,"column_start":12,"column_end":28},"name":"lookup_and_parse","qualname":"<EhHdrTable>::lookup_and_parse","value":"pub fn lookup_and_parse<F>(&Self, u64, &BaseAddresses, EhFrame<R>, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&EhFrame<R>, &BaseAddresses, EhFrameOffset<R::Offset>) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":129059,"byte_end":129068,"line_start":347,"line_end":347,"column_start":5,"column_end":14}},{"value":"deprecated(note = \"Method renamed to fde_for_address; use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":129092,"byte_end":129168,"line_start":349,"line_end":349,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":129877,"byte_end":129900,"line_start":372,"line_end":372,"column_start":12,"column_end":35},"name":"unwind_info_for_address","qualname":"<EhHdrTable>::unwind_info_for_address","value":"pub fn unwind_info_for_address<F>(&Self, &EhFrame<R>, &BaseAddresses,\n                                  &mut UninitializedUnwindContext<R>, u64, F)\n-> Result<UnwindTableRow<R>> where\nF: FnMut(&EhFrame<R>, &BaseAddresses, EhFrameOffset<R::Offset>) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the frame unwind information for the given address,\n or `NoUnwindInfoForAddress` if there are none.","sig":null,"attributes":[{"value":"/ Returns the frame unwind information for the given address,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":129604,"byte_end":129667,"line_start":367,"line_end":367,"column_start":5,"column_end":68}},{"value":"/ or `NoUnwindInfoForAddress` if there are none.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":129672,"byte_end":129722,"line_start":368,"line_end":368,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":129727,"byte_end":129730,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ You must provide a function to get the associated CIE. See","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":129735,"byte_end":129797,"line_start":370,"line_end":370,"column_start":5,"column_end":67}},{"value":"/ `PartialFrameDescriptionEntry::parse` for more information.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":129802,"byte_end":129865,"line_start":371,"line_end":371,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4821},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130902,"byte_end":130909,"line_start":403,"line_end":403,"column_start":12,"column_end":19},"name":"EhFrame","qualname":"::read::cfi::EhFrame","value":"EhFrame {  }","parent":null,"children":[{"krate":0,"index":4823},{"krate":0,"index":4824}],"decl_id":null,"docs":" `EhFrame` contains the frame unwinding information needed during exception\n handling found in the `.eh_frame` section.","sig":null,"attributes":[{"value":"/ `EhFrame` contains the frame unwinding information needed during exception","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130424,"byte_end":130502,"line_start":392,"line_end":392,"column_start":1,"column_end":79}},{"value":"/ handling found in the `.eh_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130503,"byte_end":130549,"line_start":393,"line_end":393,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130550,"byte_end":130553,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ Most interesting methods are defined in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130554,"byte_end":130601,"line_start":395,"line_end":395,"column_start":1,"column_end":48}},{"value":"/ [`UnwindSection`](trait.UnwindSection.html) trait.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130602,"byte_end":130656,"line_start":396,"line_end":396,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130657,"byte_end":130660,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ See","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130661,"byte_end":130668,"line_start":398,"line_end":398,"column_start":1,"column_end":8}},{"value":"/ [`DebugFrame`](./struct.DebugFrame.html#differences-between-debug_frame-and-eh_frame)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130669,"byte_end":130758,"line_start":399,"line_end":399,"column_start":1,"column_end":90}},{"value":"/ for some discussion on the differences between `.debug_frame` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130759,"byte_end":130828,"line_start":400,"line_end":400,"column_start":1,"column_end":70}},{"value":"/ `.eh_frame`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130829,"byte_end":130845,"line_start":401,"line_end":401,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131110,"byte_end":131126,"line_start":412,"line_end":412,"column_start":12,"column_end":28},"name":"set_address_size","qualname":"<EhFrame<R>>::set_address_size","value":"pub fn set_address_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of a target address in bytes.","sig":null,"attributes":[{"value":"/ Set the size of a target address in bytes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130997,"byte_end":131043,"line_start":409,"line_end":409,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131048,"byte_end":131051,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This defaults to the native word size.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131056,"byte_end":131098,"line_start":411,"line_end":411,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131923,"byte_end":131926,"line_start":436,"line_end":436,"column_start":12,"column_end":15},"name":"new","qualname":"<EhFrame<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `EhFrame` instance from the data in the\n `.debug_frame` section.","sig":null,"attributes":[{"value":"/ Construct a new `EhFrame` instance from the data in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131301,"byte_end":131360,"line_start":421,"line_end":421,"column_start":5,"column_end":64}},{"value":"/ `.debug_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131365,"byte_end":131392,"line_start":422,"line_end":422,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131397,"byte_end":131400,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the section and present it as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131405,"byte_end":131480,"line_start":424,"line_end":424,"column_start":5,"column_end":80}},{"value":"/ a `&[u8]` slice. That means using some ELF loader on Linux, a Mach-O","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131485,"byte_end":131557,"line_start":425,"line_end":425,"column_start":5,"column_end":77}},{"value":"/ loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131562,"byte_end":131585,"line_start":426,"line_end":426,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131590,"byte_end":131593,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131598,"byte_end":131605,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EhFrame, EndianSlice, NativeEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131610,"byte_end":131662,"line_start":429,"line_end":429,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131667,"byte_end":131670,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ // Use with `.debug_frame`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131675,"byte_end":131705,"line_start":431,"line_end":431,"column_start":5,"column_end":35}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131710,"byte_end":131751,"line_start":432,"line_end":432,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_frame_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131756,"byte_end":131809,"line_start":433,"line_end":433,"column_start":5,"column_end":58}},{"value":"/ let debug_frame = EhFrame::new(read_debug_frame_section_somehow(), NativeEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131814,"byte_end":131899,"line_start":434,"line_end":434,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131904,"byte_end":131911,"line_start":435,"line_end":435,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4845},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132700,"byte_end":132703,"line_start":467,"line_end":467,"column_start":5,"column_end":8},"name":"U32","qualname":"::read::cfi::CieOffsetEncoding::U32","value":"CieOffsetEncoding::U32","parent":{"krate":0,"index":4844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":4847},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132709,"byte_end":132712,"line_start":468,"line_end":468,"column_start":5,"column_end":8},"name":"U64","qualname":"::read::cfi::CieOffsetEncoding::U64","value":"CieOffsetEncoding::U64","parent":{"krate":0,"index":4844},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4844},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132676,"byte_end":132693,"line_start":466,"line_end":466,"column_start":10,"column_end":27},"name":"CieOffsetEncoding","qualname":"::read::cfi::CieOffsetEncoding","value":"pub enum CieOffsetEncoding { U32, U64, }","parent":null,"children":[{"krate":0,"index":4845},{"krate":0,"index":4847}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132599,"byte_end":132621,"line_start":464,"line_end":464,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":240},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132830,"byte_end":132842,"line_start":474,"line_end":474,"column_start":11,"column_end":23},"name":"UnwindOffset","qualname":"::read::cfi::UnwindOffset","value":"UnwindOffset<T = usize>: Copy + Debug + Eq + From<T>","parent":null,"children":[{"krate":0,"index":242}],"decl_id":null,"docs":" An offset into an `UnwindSection`.\n","sig":null,"attributes":[{"value":"/ An offset into an `UnwindSection`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132717,"byte_end":132755,"line_start":471,"line_end":471,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132968,"byte_end":132972,"line_start":479,"line_end":479,"column_start":8,"column_end":12},"name":"into","qualname":"::read::cfi::UnwindOffset::into","value":"pub fn into(Self) -> T","parent":{"krate":0,"index":240},"children":[],"decl_id":null,"docs":" Convert an `UnwindOffset<T>` into a `T`.\n","sig":null,"attributes":[{"value":"/ Convert an `UnwindOffset<T>` into a `T`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132916,"byte_end":132960,"line_start":478,"line_end":478,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":249},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133470,"byte_end":133491,"line_start":506,"line_end":506,"column_start":11,"column_end":32},"name":"_UnwindSectionPrivate","qualname":"::read::cfi::_UnwindSectionPrivate","value":"_UnwindSectionPrivate<R: Reader>","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":" This trait completely encapsulates everything that is different between\n `.eh_frame` and `.debug_frame`, as well as all the bits that can change\n between DWARF versions.\n","sig":null,"attributes":[{"value":"/ This trait completely encapsulates everything that is different between","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133265,"byte_end":133340,"line_start":502,"line_end":502,"column_start":1,"column_end":76}},{"value":"/ `.eh_frame` and `.debug_frame`, as well as all the bits that can change","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133341,"byte_end":133416,"line_start":503,"line_end":503,"column_start":1,"column_end":76}},{"value":"/ between DWARF versions.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133417,"byte_end":133444,"line_start":504,"line_end":504,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133553,"byte_end":133560,"line_start":508,"line_end":508,"column_start":8,"column_end":15},"name":"section","qualname":"::read::cfi::_UnwindSectionPrivate::section","value":"pub fn section(&Self) -> &R","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Get the underlying section data.\n","sig":null,"attributes":[{"value":"/ Get the underlying section data.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133509,"byte_end":133545,"line_start":507,"line_end":507,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133687,"byte_end":133717,"line_start":512,"line_end":512,"column_start":8,"column_end":38},"name":"length_value_is_end_of_entries","qualname":"::read::cfi::_UnwindSectionPrivate::length_value_is_end_of_entries","value":"pub fn length_value_is_end_of_entries(R::Offset) -> bool","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Returns true if the given length value should be considered an\n end-of-entries sentinel.\n","sig":null,"attributes":[{"value":"/ Returns true if the given length value should be considered an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133580,"byte_end":133646,"line_start":510,"line_end":510,"column_start":5,"column_end":71}},{"value":"/ end-of-entries sentinel.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133651,"byte_end":133679,"line_start":511,"line_end":511,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133832,"byte_end":133838,"line_start":515,"line_end":515,"column_start":8,"column_end":14},"name":"is_cie","qualname":"::read::cfi::_UnwindSectionPrivate::is_cie","value":"pub fn is_cie(Format, u64) -> bool","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Return true if the given offset if the CIE sentinel, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if the given offset if the CIE sentinel, false otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133751,"byte_end":133824,"line_start":514,"line_end":514,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133988,"byte_end":134007,"line_start":519,"line_end":519,"column_start":8,"column_end":27},"name":"cie_offset_encoding","qualname":"::read::cfi::_UnwindSectionPrivate::cie_offset_encoding","value":"pub fn cie_offset_encoding(Format) -> CieOffsetEncoding","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Return the CIE offset/ID encoding used by this unwind section with the\n given DWARF format.\n","sig":null,"attributes":[{"value":"/ Return the CIE offset/ID encoding used by this unwind section with the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133878,"byte_end":133952,"line_start":517,"line_end":517,"column_start":5,"column_end":79}},{"value":"/ given DWARF format.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133957,"byte_end":133980,"line_start":518,"line_end":518,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134410,"byte_end":134428,"line_start":526,"line_end":526,"column_start":8,"column_end":26},"name":"resolve_cie_offset","qualname":"::read::cfi::_UnwindSectionPrivate::resolve_cie_offset","value":"pub fn resolve_cie_offset(&Self, R::Offset, R::Offset) -> Option<R::Offset>","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" For `.eh_frame`, CIE offsets are relative to the current position. For\n `.debug_frame`, they are relative to the start of the section. We always\n internally store them relative to the section, so we handle translating\n `.eh_frame`'s relative offsets in this method. If the offset calculation\n underflows, return `None`.\n","sig":null,"attributes":[{"value":"/ For `.eh_frame`, CIE offsets are relative to the current position. For","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134051,"byte_end":134125,"line_start":521,"line_end":521,"column_start":5,"column_end":79}},{"value":"/ `.debug_frame`, they are relative to the start of the section. We always","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134130,"byte_end":134206,"line_start":522,"line_end":522,"column_start":5,"column_end":81}},{"value":"/ internally store them relative to the section, so we handle translating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134211,"byte_end":134286,"line_start":523,"line_end":523,"column_start":5,"column_end":80}},{"value":"/ `.eh_frame`'s relative offsets in this method. If the offset calculation","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134291,"byte_end":134367,"line_start":524,"line_end":524,"column_start":5,"column_end":81}},{"value":"/ underflows, return `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134372,"byte_end":134402,"line_start":525,"line_end":525,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134605,"byte_end":134634,"line_start":530,"line_end":530,"column_start":8,"column_end":37},"name":"has_address_and_segment_sizes","qualname":"::read::cfi::_UnwindSectionPrivate::has_address_and_segment_sizes","value":"pub fn has_address_and_segment_sizes(u8) -> bool","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Does this version of this unwind section encode address and segment\n sizes in its CIEs?\n","sig":null,"attributes":[{"value":"/ Does this version of this unwind section encode address and segment","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134499,"byte_end":134570,"line_start":528,"line_end":528,"column_start":5,"column_end":76}},{"value":"/ sizes in its CIEs?","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134575,"byte_end":134597,"line_start":529,"line_end":529,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134747,"byte_end":134759,"line_start":533,"line_end":533,"column_start":8,"column_end":20},"name":"address_size","qualname":"::read::cfi::_UnwindSectionPrivate::address_size","value":"pub fn address_size(&Self) -> u8","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" The address size to use if `has_address_and_segment_sizes` returns false.\n","sig":null,"attributes":[{"value":"/ The address size to use if `has_address_and_segment_sizes` returns false.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134662,"byte_end":134739,"line_start":532,"line_end":532,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134864,"byte_end":134876,"line_start":536,"line_end":536,"column_start":8,"column_end":20},"name":"segment_size","qualname":"::read::cfi::_UnwindSectionPrivate::segment_size","value":"pub fn segment_size(&Self) -> u8","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" The segment size to use if `has_address_and_segment_sizes` returns false.\n","sig":null,"attributes":[{"value":"/ The segment size to use if `has_address_and_segment_sizes` returns false.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134779,"byte_end":134856,"line_start":535,"line_end":535,"column_start":5,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":259},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135090,"byte_end":135103,"line_start":542,"line_end":542,"column_start":11,"column_end":24},"name":"UnwindSection","qualname":"::read::cfi::UnwindSection","value":"UnwindSection<R: Reader>: Clone + Debug + _UnwindSectionPrivate<R>","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":269},{"krate":0,"index":271}],"decl_id":null,"docs":" A section holding unwind information: either `.debug_frame` or\n `.eh_frame`. See [`DebugFrame`](./struct.DebugFrame.html) and\n [`EhFrame`](./struct.EhFrame.html) respectively.\n","sig":null,"attributes":[{"value":"/ A section holding unwind information: either `.debug_frame` or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134894,"byte_end":134960,"line_start":539,"line_end":539,"column_start":1,"column_end":67}},{"value":"/ `.eh_frame`. See [`DebugFrame`](./struct.DebugFrame.html) and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":134961,"byte_end":135026,"line_start":540,"line_end":540,"column_start":1,"column_end":66}},{"value":"/ [`EhFrame`](./struct.EhFrame.html) respectively.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135027,"byte_end":135079,"line_start":541,"line_end":541,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":261},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135280,"byte_end":135286,"line_start":545,"line_end":545,"column_start":10,"column_end":16},"name":"Offset","qualname":"::read::cfi::UnwindSection::Offset","value":"type Offset: UnwindOffset<R::Offset>;","parent":{"krate":0,"index":259},"children":[],"decl_id":null,"docs":" The offset type associated with this CFI section. Either\n `DebugFrameOffset` or `EhFrameOffset`.\n","sig":null,"attributes":[{"value":"/ The offset type associated with this CFI section. Either","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135163,"byte_end":135223,"line_start":543,"line_end":543,"column_start":5,"column_end":65}},{"value":"/ `DebugFrameOffset` or `EhFrameOffset`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135228,"byte_end":135270,"line_start":544,"line_end":544,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135546,"byte_end":135553,"line_start":552,"line_end":552,"column_start":8,"column_end":15},"name":"entries","qualname":"::read::cfi::UnwindSection::entries","value":"pub fn entries<'bases>(&Self, &'bases BaseAddresses) -> CfiEntriesIter","parent":{"krate":0,"index":259},"children":[],"decl_id":null,"docs":" Iterate over the `CommonInformationEntry`s and `FrameDescriptionEntry`s\n in this `.debug_frame` section.","sig":null,"attributes":[{"value":"/ Iterate over the `CommonInformationEntry`s and `FrameDescriptionEntry`s","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135318,"byte_end":135393,"line_start":547,"line_end":547,"column_start":5,"column_end":80}},{"value":"/ in this `.debug_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135398,"byte_end":135433,"line_start":548,"line_end":548,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135438,"byte_end":135441,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135446,"byte_end":135467,"line_start":550,"line_end":550,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135472,"byte_end":135538,"line_start":551,"line_end":551,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135846,"byte_end":135861,"line_start":561,"line_end":561,"column_start":8,"column_end":23},"name":"cie_from_offset","qualname":"::read::cfi::UnwindSection::cie_from_offset","value":"pub fn cie_from_offset(&Self, &BaseAddresses, Self::Offset)\n-> Result<CommonInformationEntry<R>>","parent":{"krate":0,"index":259},"children":[],"decl_id":null,"docs":" Parse the `CommonInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Parse the `CommonInformationEntry` at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135779,"byte_end":135838,"line_start":560,"line_end":560,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":136253,"byte_end":136276,"line_start":573,"line_end":573,"column_start":8,"column_end":31},"name":"partial_fde_from_offset","qualname":"::read::cfi::UnwindSection::partial_fde_from_offset","value":"pub fn partial_fde_from_offset<'bases>(&Self, &'bases BaseAddresses,\n                                       Self::Offset)\n-> Result<PartialFrameDescriptionEntry>","parent":{"krate":0,"index":259},"children":[],"decl_id":null,"docs":" Parse the `PartialFrameDescriptionEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Parse the `PartialFrameDescriptionEntry` at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":136180,"byte_end":136245,"line_start":572,"line_end":572,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":136710,"byte_end":136725,"line_start":585,"line_end":585,"column_start":8,"column_end":23},"name":"fde_from_offset","qualname":"::read::cfi::UnwindSection::fde_from_offset","value":"pub fn fde_from_offset<F>(&Self, &BaseAddresses, Self::Offset, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&Self, &BaseAddresses, Self::Offset) ->\nResult<CommonInformationEntry<R>>","parent":{"krate":0,"index":259},"children":[],"decl_id":null,"docs":" Parse the `FrameDescriptionEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Parse the `FrameDescriptionEntry` at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":136644,"byte_end":136702,"line_start":584,"line_end":584,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137626,"byte_end":137641,"line_start":609,"line_end":609,"column_start":8,"column_end":23},"name":"fde_for_address","qualname":"::read::cfi::UnwindSection::fde_for_address","value":"pub fn fde_for_address<F>(&Self, &BaseAddresses, u64, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&Self, &BaseAddresses, Self::Offset) ->\nResult<CommonInformationEntry<R>>","parent":{"krate":0,"index":259},"children":[],"decl_id":null,"docs":" Find the `FrameDescriptionEntry` for the given address.","sig":null,"attributes":[{"value":"/ Find the `FrameDescriptionEntry` for the given address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137086,"byte_end":137145,"line_start":598,"line_end":598,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137150,"byte_end":137153,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ If found, the FDE is returned.  If not found,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137158,"byte_end":137207,"line_start":600,"line_end":600,"column_start":5,"column_end":54}},{"value":"/ `Err(gimli::Error::NoUnwindInfoForAddress)` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137212,"byte_end":137272,"line_start":601,"line_end":601,"column_start":5,"column_end":65}},{"value":"/ If parsing fails, the error is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137277,"byte_end":137321,"line_start":602,"line_end":602,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137326,"byte_end":137329,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ You must provide a function to get its associated CIE. See","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137334,"byte_end":137396,"line_start":604,"line_end":604,"column_start":5,"column_end":67}},{"value":"/ `PartialFrameDescriptionEntry::parse` for more information.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137401,"byte_end":137464,"line_start":605,"line_end":605,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137469,"byte_end":137472,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Note: this iterates over all FDEs. If available, it is possible","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137477,"byte_end":137544,"line_start":607,"line_end":607,"column_start":5,"column_end":72}},{"value":"/ to do a binary search with `EhFrameHdr::fde_for_address` instead.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":137549,"byte_end":137618,"line_start":608,"line_end":608,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140291,"byte_end":140314,"line_start":679,"line_end":679,"column_start":8,"column_end":31},"name":"unwind_info_for_address","qualname":"::read::cfi::UnwindSection::unwind_info_for_address","value":"pub fn unwind_info_for_address<F>(&Self, &BaseAddresses,\n                                  &mut UninitializedUnwindContext<R>, u64, F)\n-> Result<UnwindTableRow<R>> where\nF: FnMut(&Self, &BaseAddresses, Self::Offset) ->\nResult<CommonInformationEntry<R>>","parent":{"krate":0,"index":259},"children":[],"decl_id":null,"docs":" Find the frame unwind information for the given address.","sig":null,"attributes":[{"value":"/ Find the frame unwind information for the given address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138359,"byte_end":138419,"line_start":633,"line_end":633,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138424,"byte_end":138427,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ If found, the unwind information is returned.  If not found,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138432,"byte_end":138496,"line_start":635,"line_end":635,"column_start":5,"column_end":69}},{"value":"/ `Err(gimli::Error::NoUnwindInfoForAddress)` is returned. If parsing or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138501,"byte_end":138575,"line_start":636,"line_end":636,"column_start":5,"column_end":79}},{"value":"/ CFI evaluation fails, the error is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138580,"byte_end":138628,"line_start":637,"line_end":637,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138633,"byte_end":138636,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138641,"byte_end":138648,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"/ use gimli::{BaseAddresses, EhFrame, EndianSlice, NativeEndian, UninitializedUnwindContext,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138653,"byte_end":138747,"line_start":640,"line_end":640,"column_start":5,"column_end":99}},{"value":"/             UnwindSection};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138752,"byte_end":138783,"line_start":641,"line_end":641,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138788,"byte_end":138791,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ # fn foo() -> gimli::Result<()> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138796,"byte_end":138833,"line_start":643,"line_end":643,"column_start":5,"column_end":42}},{"value":"/ # let read_eh_frame_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138838,"byte_end":138892,"line_start":644,"line_end":644,"column_start":5,"column_end":59}},{"value":"/ // Get the `.eh_frame` section from the object file. Alternatively,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138897,"byte_end":138968,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/ // use `EhFrame` with the `.eh_frame` section of the object file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":138973,"byte_end":139042,"line_start":646,"line_end":646,"column_start":5,"column_end":74}},{"value":"/ let eh_frame = EhFrame::new(read_eh_frame_section(), NativeEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139047,"byte_end":139118,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139123,"byte_end":139126,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ # let get_frame_pc = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139131,"byte_end":139176,"line_start":649,"line_end":649,"column_start":5,"column_end":50}},{"value":"/ // Get the address of the PC for a frame you'd like to unwind.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139181,"byte_end":139247,"line_start":650,"line_end":650,"column_start":5,"column_end":71}},{"value":"/ let address = get_frame_pc();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139252,"byte_end":139285,"line_start":651,"line_end":651,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139290,"byte_end":139293,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ // This context is reusable, which cuts down on heap allocations.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139298,"byte_end":139367,"line_start":653,"line_end":653,"column_start":5,"column_end":74}},{"value":"/ let ctx = UninitializedUnwindContext::new();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139372,"byte_end":139420,"line_start":654,"line_end":654,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139425,"byte_end":139428,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ // Optionally provide base addresses for any relative pointers. If a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139433,"byte_end":139505,"line_start":656,"line_end":656,"column_start":5,"column_end":77}},{"value":"/ // base address isn't provided and a pointer is found that is relative to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139510,"byte_end":139587,"line_start":657,"line_end":657,"column_start":5,"column_end":82}},{"value":"/ // it, we will return an `Err`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139592,"byte_end":139627,"line_start":658,"line_end":658,"column_start":5,"column_end":40}},{"value":"/ # let address_of_text_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139632,"byte_end":139695,"line_start":659,"line_end":659,"column_start":5,"column_end":68}},{"value":"/ # let address_of_got_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139700,"byte_end":139762,"line_start":660,"line_end":660,"column_start":5,"column_end":67}},{"value":"/ let bases = BaseAddresses::default()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139767,"byte_end":139807,"line_start":661,"line_end":661,"column_start":5,"column_end":45}},{"value":"/     .set_text(address_of_text_section_in_memory)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139812,"byte_end":139864,"line_start":662,"line_end":662,"column_start":5,"column_end":57}},{"value":"/     .set_got(address_of_got_section_in_memory);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139869,"byte_end":139920,"line_start":663,"line_end":663,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139925,"byte_end":139928,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let unwind_info = eh_frame.unwind_info_for_address(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139933,"byte_end":139988,"line_start":665,"line_end":665,"column_start":5,"column_end":60}},{"value":"/     &bases,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":139993,"byte_end":140008,"line_start":666,"line_end":666,"column_start":5,"column_end":20}},{"value":"/     &mut ctx,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140013,"byte_end":140030,"line_start":667,"line_end":667,"column_start":5,"column_end":22}},{"value":"/     address,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140035,"byte_end":140051,"line_start":668,"line_end":668,"column_start":5,"column_end":21}},{"value":"/     EhFrame::cie_from_offset,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140056,"byte_end":140089,"line_start":669,"line_end":669,"column_start":5,"column_end":38}},{"value":"/ )?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140094,"byte_end":140101,"line_start":670,"line_end":670,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140106,"byte_end":140109,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # let do_stuff_with = |_| unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140114,"byte_end":140161,"line_start":672,"line_end":672,"column_start":5,"column_end":52}},{"value":"/ do_stuff_with(unwind_info);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140166,"byte_end":140197,"line_start":673,"line_end":673,"column_start":5,"column_end":36}},{"value":"/ # let _ = ctx;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140202,"byte_end":140220,"line_start":674,"line_end":674,"column_start":5,"column_end":23}},{"value":"/ # unreachable!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140225,"byte_end":140245,"line_start":675,"line_end":675,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140250,"byte_end":140257,"line_start":676,"line_end":676,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140262,"byte_end":140269,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140274,"byte_end":140283,"line_start":678,"line_end":678,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4860},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143701,"byte_end":143714,"line_start":801,"line_end":801,"column_start":12,"column_end":25},"name":"BaseAddresses","qualname":"::read::cfi::BaseAddresses","value":"BaseAddresses { eh_frame_hdr, eh_frame }","parent":null,"children":[{"krate":0,"index":4861},{"krate":0,"index":4862}],"decl_id":null,"docs":" Optional base addresses for the relative `DW_EH_PE_*` encoded pointers.","sig":null,"attributes":[{"value":"/ Optional base addresses for the relative `DW_EH_PE_*` encoded pointers.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142722,"byte_end":142797,"line_start":778,"line_end":778,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142798,"byte_end":142801,"line_start":779,"line_end":779,"column_start":1,"column_end":4}},{"value":"/ During CIE/FDE parsing, if a relative pointer is encountered for a base","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142802,"byte_end":142877,"line_start":780,"line_end":780,"column_start":1,"column_end":76}},{"value":"/ address that is unknown, an Err will be returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142878,"byte_end":142931,"line_start":781,"line_end":781,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142932,"byte_end":142935,"line_start":782,"line_end":782,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142936,"byte_end":142943,"line_start":783,"line_end":783,"column_start":1,"column_end":8}},{"value":"/ use gimli::BaseAddresses;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142944,"byte_end":142973,"line_start":784,"line_end":784,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142974,"byte_end":142977,"line_start":785,"line_end":785,"column_start":1,"column_end":4}},{"value":"/ # fn foo() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142978,"byte_end":142994,"line_start":786,"line_end":786,"column_start":1,"column_end":17}},{"value":"/ # let address_of_eh_frame_hdr_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142995,"byte_end":143066,"line_start":787,"line_end":787,"column_start":1,"column_end":72}},{"value":"/ # let address_of_eh_frame_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143067,"byte_end":143134,"line_start":788,"line_end":788,"column_start":1,"column_end":68}},{"value":"/ # let address_of_text_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143135,"byte_end":143198,"line_start":789,"line_end":789,"column_start":1,"column_end":64}},{"value":"/ # let address_of_got_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143199,"byte_end":143261,"line_start":790,"line_end":790,"column_start":1,"column_end":63}},{"value":"/ # let address_of_the_start_of_current_func = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143262,"byte_end":143328,"line_start":791,"line_end":791,"column_start":1,"column_end":67}},{"value":"/ let bases = BaseAddresses::default()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143329,"byte_end":143369,"line_start":792,"line_end":792,"column_start":1,"column_end":41}},{"value":"/     .set_eh_frame_hdr(address_of_eh_frame_hdr_section_in_memory)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143370,"byte_end":143438,"line_start":793,"line_end":793,"column_start":1,"column_end":69}},{"value":"/     .set_eh_frame(address_of_eh_frame_section_in_memory)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143439,"byte_end":143499,"line_start":794,"line_end":794,"column_start":1,"column_end":61}},{"value":"/     .set_text(address_of_text_section_in_memory)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143500,"byte_end":143552,"line_start":795,"line_end":795,"column_start":1,"column_end":53}},{"value":"/     .set_got(address_of_got_section_in_memory);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143553,"byte_end":143604,"line_start":796,"line_end":796,"column_start":1,"column_end":52}},{"value":"/ # let _ = bases;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143605,"byte_end":143625,"line_start":797,"line_end":797,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143626,"byte_end":143633,"line_start":798,"line_end":798,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143634,"byte_end":143641,"line_start":799,"line_end":799,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":4861},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143804,"byte_end":143816,"line_start":803,"line_end":803,"column_start":9,"column_end":21},"name":"eh_frame_hdr","qualname":"::read::cfi::BaseAddresses::eh_frame_hdr","value":"read::cfi::SectionBaseAddresses","parent":{"krate":0,"index":4860},"children":[],"decl_id":null,"docs":" The base addresses to use for pointers in the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ The base addresses to use for pointers in the `.eh_frame_hdr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143721,"byte_end":143795,"line_start":802,"line_end":802,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":4862},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143924,"byte_end":143932,"line_start":806,"line_end":806,"column_start":9,"column_end":17},"name":"eh_frame","qualname":"::read::cfi::BaseAddresses::eh_frame","value":"read::cfi::SectionBaseAddresses","parent":{"krate":0,"index":4860},"children":[],"decl_id":null,"docs":" The base addresses to use for pointers in the `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ The base addresses to use for pointers in the `.eh_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143845,"byte_end":143915,"line_start":805,"line_end":805,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":4876},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144207,"byte_end":144227,"line_start":814,"line_end":814,"column_start":12,"column_end":32},"name":"SectionBaseAddresses","qualname":"::read::cfi::SectionBaseAddresses","value":"SectionBaseAddresses { section, text, data }","parent":null,"children":[{"krate":0,"index":4877},{"krate":0,"index":4878},{"krate":0,"index":4879}],"decl_id":null,"docs":" Optional base addresses for the relative `DW_EH_PE_*` encoded pointers\n in a particular section.","sig":null,"attributes":[{"value":"/ Optional base addresses for the relative `DW_EH_PE_*` encoded pointers","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":143959,"byte_end":144033,"line_start":809,"line_end":809,"column_start":1,"column_end":75}},{"value":"/ in a particular section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144034,"byte_end":144062,"line_start":810,"line_end":810,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144063,"byte_end":144066,"line_start":811,"line_end":811,"column_start":1,"column_end":4}},{"value":"/ See `BaseAddresses` for methods that are helpful in setting these addresses.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144067,"byte_end":144147,"line_start":812,"line_end":812,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":4877},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144297,"byte_end":144304,"line_start":816,"line_end":816,"column_start":9,"column_end":16},"name":"section","qualname":"::read::cfi::SectionBaseAddresses::section","value":"core::option::Option<u64>","parent":{"krate":0,"index":4876},"children":[],"decl_id":null,"docs":" The address of the section containing the pointer.\n","sig":null,"attributes":[{"value":"/ The address of the section containing the pointer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144234,"byte_end":144288,"line_start":815,"line_end":815,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4878},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144443,"byte_end":144447,"line_start":820,"line_end":820,"column_start":9,"column_end":13},"name":"text","qualname":"::read::cfi::SectionBaseAddresses::text","value":"core::option::Option<u64>","parent":{"krate":0,"index":4876},"children":[],"decl_id":null,"docs":" The base address for text relative pointers.\n This is generally the address of the `.text` section.\n","sig":null,"attributes":[{"value":"/ The base address for text relative pointers.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144324,"byte_end":144372,"line_start":818,"line_end":818,"column_start":5,"column_end":53}},{"value":"/ This is generally the address of the `.text` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144377,"byte_end":144434,"line_start":819,"line_end":819,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":4879},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144790,"byte_end":144794,"line_start":829,"line_end":829,"column_start":9,"column_end":13},"name":"data","qualname":"::read::cfi::SectionBaseAddresses::data","value":"core::option::Option<u64>","parent":{"krate":0,"index":4876},"children":[],"decl_id":null,"docs":" The base address for data relative pointers.","sig":null,"attributes":[{"value":"/ The base address for data relative pointers.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144467,"byte_end":144515,"line_start":822,"line_end":822,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144520,"byte_end":144523,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ For pointers in the `.eh_frame_hdr` section, this is the address","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144528,"byte_end":144596,"line_start":824,"line_end":824,"column_start":5,"column_end":73}},{"value":"/ of the `.eh_frame_hdr` section","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144601,"byte_end":144635,"line_start":825,"line_end":825,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144640,"byte_end":144643,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ For pointers in the `.eh_frame` section, this is generally the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144648,"byte_end":144714,"line_start":827,"line_end":827,"column_start":5,"column_end":71}},{"value":"/ global pointer, such as the address of the `.got` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144719,"byte_end":144781,"line_start":828,"line_end":828,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144912,"byte_end":144928,"line_start":835,"line_end":835,"column_start":12,"column_end":28},"name":"set_eh_frame_hdr","qualname":"<BaseAddresses>::set_eh_frame_hdr","value":"pub fn set_eh_frame_hdr(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.eh_frame_hdr` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.eh_frame_hdr` section base address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144837,"byte_end":144886,"line_start":833,"line_end":833,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144891,"byte_end":144900,"line_start":834,"line_end":834,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145148,"byte_end":145160,"line_start":843,"line_end":843,"column_start":12,"column_end":24},"name":"set_eh_frame","qualname":"<BaseAddresses>::set_eh_frame","value":"pub fn set_eh_frame(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.eh_frame` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.eh_frame` section base address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145077,"byte_end":145122,"line_start":841,"line_end":841,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145127,"byte_end":145136,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145327,"byte_end":145335,"line_start":850,"line_end":850,"column_start":12,"column_end":20},"name":"set_text","qualname":"<BaseAddresses>::set_text","value":"pub fn set_text(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.text` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.text` section base address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145260,"byte_end":145301,"line_start":848,"line_end":848,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145306,"byte_end":145315,"line_start":849,"line_end":849,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145543,"byte_end":145550,"line_start":858,"line_end":858,"column_start":12,"column_end":19},"name":"set_got","qualname":"<BaseAddresses>::set_got","value":"pub fn set_got(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.got` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.got` section base address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145477,"byte_end":145517,"line_start":856,"line_end":856,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145522,"byte_end":145531,"line_start":857,"line_end":857,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4893},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147338,"byte_end":147352,"line_start":904,"line_end":904,"column_start":12,"column_end":26},"name":"CfiEntriesIter","qualname":"::read::cfi::CfiEntriesIter","value":"CfiEntriesIter {  }","parent":null,"children":[{"krate":0,"index":4897},{"krate":0,"index":4898},{"krate":0,"index":4899}],"decl_id":null,"docs":" An iterator over CIE and FDE entries in a `.debug_frame` or `.eh_frame`\n section.","sig":null,"attributes":[{"value":"/ An iterator over CIE and FDE entries in a `.debug_frame` or `.eh_frame`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145645,"byte_end":145720,"line_start":864,"line_end":864,"column_start":1,"column_end":76}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145721,"byte_end":145733,"line_start":865,"line_end":865,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145734,"byte_end":145737,"line_start":866,"line_end":866,"column_start":1,"column_end":4}},{"value":"/ Some pointers may be encoded relative to various base addresses. Use the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145738,"byte_end":145814,"line_start":867,"line_end":867,"column_start":1,"column_end":77}},{"value":"/ [`BaseAddresses`](./struct.BaseAddresses.html) parameter to provide them. By","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145815,"byte_end":145895,"line_start":868,"line_end":868,"column_start":1,"column_end":81}},{"value":"/ default, none are provided. If a relative pointer is encountered for a base","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145896,"byte_end":145975,"line_start":869,"line_end":869,"column_start":1,"column_end":80}},{"value":"/ address that is unknown, an `Err` will be returned and iteration will abort.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":145976,"byte_end":146056,"line_start":870,"line_end":870,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146057,"byte_end":146060,"line_start":871,"line_end":871,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146061,"byte_end":146082,"line_start":872,"line_end":872,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146083,"byte_end":146149,"line_start":873,"line_end":873,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146150,"byte_end":146153,"line_start":874,"line_end":874,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146154,"byte_end":146161,"line_start":875,"line_end":875,"column_start":1,"column_end":8}},{"value":"/ use gimli::{BaseAddresses, EhFrame, EndianSlice, NativeEndian, UnwindSection};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146162,"byte_end":146244,"line_start":876,"line_end":876,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146245,"byte_end":146248,"line_start":877,"line_end":877,"column_start":1,"column_end":4}},{"value":"/ # fn foo() -> gimli::Result<()> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146249,"byte_end":146286,"line_start":878,"line_end":878,"column_start":1,"column_end":38}},{"value":"/ # let read_eh_frame_somehow = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146287,"byte_end":146341,"line_start":879,"line_end":879,"column_start":1,"column_end":55}},{"value":"/ let eh_frame = EhFrame::new(read_eh_frame_somehow(), NativeEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146342,"byte_end":146413,"line_start":880,"line_end":880,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146414,"byte_end":146417,"line_start":881,"line_end":881,"column_start":1,"column_end":4}},{"value":"/ # let address_of_eh_frame_hdr_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146418,"byte_end":146489,"line_start":882,"line_end":882,"column_start":1,"column_end":72}},{"value":"/ # let address_of_eh_frame_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146490,"byte_end":146557,"line_start":883,"line_end":883,"column_start":1,"column_end":68}},{"value":"/ # let address_of_text_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146558,"byte_end":146621,"line_start":884,"line_end":884,"column_start":1,"column_end":64}},{"value":"/ # let address_of_got_section_in_memory = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146622,"byte_end":146684,"line_start":885,"line_end":885,"column_start":1,"column_end":63}},{"value":"/ # let address_of_the_start_of_current_func = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146685,"byte_end":146751,"line_start":886,"line_end":886,"column_start":1,"column_end":67}},{"value":"/ // Provide base addresses for relative pointers.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146752,"byte_end":146804,"line_start":887,"line_end":887,"column_start":1,"column_end":53}},{"value":"/ let bases = BaseAddresses::default()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146805,"byte_end":146845,"line_start":888,"line_end":888,"column_start":1,"column_end":41}},{"value":"/     .set_eh_frame_hdr(address_of_eh_frame_hdr_section_in_memory)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146846,"byte_end":146914,"line_start":889,"line_end":889,"column_start":1,"column_end":69}},{"value":"/     .set_eh_frame(address_of_eh_frame_section_in_memory)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146915,"byte_end":146975,"line_start":890,"line_end":890,"column_start":1,"column_end":61}},{"value":"/     .set_text(address_of_text_section_in_memory)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":146976,"byte_end":147028,"line_start":891,"line_end":891,"column_start":1,"column_end":53}},{"value":"/     .set_got(address_of_got_section_in_memory);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147029,"byte_end":147080,"line_start":892,"line_end":892,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147081,"byte_end":147084,"line_start":893,"line_end":893,"column_start":1,"column_end":4}},{"value":"/ let mut entries = eh_frame.entries(&bases);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147085,"byte_end":147132,"line_start":894,"line_end":894,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147133,"byte_end":147136,"line_start":895,"line_end":895,"column_start":1,"column_end":4}},{"value":"/ # let do_stuff_with = |_| unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147137,"byte_end":147184,"line_start":896,"line_end":896,"column_start":1,"column_end":48}},{"value":"/ while let Some(entry) = entries.next()? {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147185,"byte_end":147230,"line_start":897,"line_end":897,"column_start":1,"column_end":46}},{"value":"/     do_stuff_with(entry)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147231,"byte_end":147259,"line_start":898,"line_end":898,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147260,"byte_end":147265,"line_start":899,"line_end":899,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147266,"byte_end":147286,"line_start":900,"line_end":900,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147287,"byte_end":147294,"line_start":901,"line_end":901,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147295,"byte_end":147302,"line_start":902,"line_end":902,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147673,"byte_end":147677,"line_start":920,"line_end":920,"column_start":12,"column_end":16},"name":"next","qualname":"<CfiEntriesIter>::next","value":"pub fn next(&mut Self) -> Result<Option<CieOrFde>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next entry.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147618,"byte_end":147661,"line_start":919,"line_end":919,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4914},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":148815,"byte_end":148818,"line_start":961,"line_end":961,"column_start":5,"column_end":8},"name":"Cie","qualname":"::read::cfi::CieOrFde::Cie","value":"CieOrFde::Cie(CommonInformationEntry<R>)","parent":{"krate":0,"index":4910},"children":[],"decl_id":null,"docs":" This CFI entry is a `CommonInformationEntry`.\n","sig":null,"attributes":[{"value":"/ This CFI entry is a `CommonInformationEntry`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":148761,"byte_end":148810,"line_start":960,"line_end":960,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4917},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":149020,"byte_end":149023,"line_start":965,"line_end":965,"column_start":5,"column_end":8},"name":"Fde","qualname":"::read::cfi::CieOrFde::Fde","value":"CieOrFde::Fde(PartialFrameDescriptionEntry)","parent":{"krate":0,"index":4910},"children":[],"decl_id":null,"docs":" This CFI entry is a `FrameDescriptionEntry`, however fully parsing it\n requires parsing its CIE first, so it is left in a partially parsed\n state.\n","sig":null,"attributes":[{"value":"/ This CFI entry is a `FrameDescriptionEntry`, however fully parsing it","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":148851,"byte_end":148924,"line_start":962,"line_end":962,"column_start":5,"column_end":78}},{"value":"/ requires parsing its CIE first, so it is left in a partially parsed","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":148929,"byte_end":149000,"line_start":963,"line_end":963,"column_start":5,"column_end":76}},{"value":"/ state.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":149005,"byte_end":149015,"line_start":964,"line_end":964,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":4910},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":148674,"byte_end":148682,"line_start":955,"line_end":955,"column_start":10,"column_end":18},"name":"CieOrFde","qualname":"::read::cfi::CieOrFde","value":"pub enum CieOrFde<'bases, Section, R> where R: Reader,\n         Section: UnwindSection<R> {\n\n    /// This CFI entry is a `CommonInformationEntry`.\n    Cie(CommonInformationEntry<R>),\n\n    /// This CFI entry is a `FrameDescriptionEntry`, however fully parsing it\n    /// requires parsing its CIE first, so it is left in a partially parsed\n    /// state.\n    Fde(PartialFrameDescriptionEntry),\n}","parent":null,"children":[{"krate":0,"index":4914},{"krate":0,"index":4917}],"decl_id":null,"docs":" Either a `CommonInformationEntry` (CIE) or a `FrameDescriptionEntry` (FDE).\n","sig":null,"attributes":[{"value":"/ Either a `CommonInformationEntry` (CIE) or a `FrameDescriptionEntry` (FDE).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":148546,"byte_end":148625,"line_start":953,"line_end":953,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":4949},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":151343,"byte_end":151355,"line_start":1031,"line_end":1031,"column_start":12,"column_end":24},"name":"Augmentation","qualname":"::read::cfi::Augmentation","value":"Augmentation {  }","parent":null,"children":[{"krate":0,"index":4950},{"krate":0,"index":4951},{"krate":0,"index":4952},{"krate":0,"index":4953}],"decl_id":null,"docs":" We support the z-style augmentation [defined by `.eh_frame`][ehframe].","sig":null,"attributes":[{"value":"/ We support the z-style augmentation [defined by `.eh_frame`][ehframe].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":151087,"byte_end":151161,"line_start":1027,"line_end":1027,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":151162,"byte_end":151165,"line_start":1028,"line_end":1028,"column_start":1,"column_end":4}},{"value":"/ [ehframe]: http://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/ehframechpt.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":151166,"byte_end":151277,"line_start":1029,"line_end":1029,"column_start":1,"column_end":112}}]},{"kind":"Struct","id":{"krate":0,"index":4983},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":156999,"byte_end":157021,"line_start":1163,"line_end":1163,"column_start":12,"column_end":34},"name":"CommonInformationEntry","qualname":"::read::cfi::CommonInformationEntry","value":"CommonInformationEntry {  }","parent":null,"children":[{"krate":0,"index":4986},{"krate":0,"index":4987},{"krate":0,"index":4988},{"krate":0,"index":4989},{"krate":0,"index":4990},{"krate":0,"index":4991},{"krate":0,"index":4992},{"krate":0,"index":4993},{"krate":0,"index":4994},{"krate":0,"index":4995},{"krate":0,"index":4996}],"decl_id":null,"docs":" > A Common Information Entry holds information that is shared among many\n > Frame Description Entries. There is at least one CIE in every non-empty\n > `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ > A Common Information Entry holds information that is shared among many","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":156764,"byte_end":156840,"line_start":1159,"line_end":1159,"column_start":1,"column_end":77}},{"value":"/ > Frame Description Entries. There is at least one CIE in every non-empty","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":156841,"byte_end":156918,"line_start":1160,"line_end":1160,"column_start":1,"column_end":78}},{"value":"/ > `.debug_frame` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":156919,"byte_end":156948,"line_start":1161,"line_end":1161,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162008,"byte_end":162014,"line_start":1307,"line_end":1307,"column_start":12,"column_end":18},"name":"offset","qualname":"<CommonInformationEntry<R>>::offset","value":"pub fn offset(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this entry from the start of its containing section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this entry from the start of its containing section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":161922,"byte_end":161996,"line_start":1306,"line_end":1306,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162128,"byte_end":162136,"line_start":1312,"line_end":1312,"column_start":12,"column_end":20},"name":"encoding","qualname":"<CommonInformationEntry<R>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this CIE.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this CIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162068,"byte_end":162116,"line_start":1311,"line_end":1311,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162383,"byte_end":162395,"line_start":1321,"line_end":1321,"column_start":12,"column_end":24},"name":"address_size","qualname":"<CommonInformationEntry<R>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The size of addresses (in bytes) in this CIE.\n","sig":null,"attributes":[{"value":"/ The size of addresses (in bytes) in this CIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162322,"byte_end":162371,"line_start":1320,"line_end":1320,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162614,"byte_end":162626,"line_start":1329,"line_end":1329,"column_start":12,"column_end":24},"name":"instructions","qualname":"<CommonInformationEntry<R>>::instructions","value":"pub fn instructions<'a, Section>(&Self, &'a Section, &'a BaseAddresses)\n-> CallFrameInstructionIter where Section: UnwindSection<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over this CIE's initial instructions.","sig":null,"attributes":[{"value":"/ Iterate over this CIE's initial instructions.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162448,"byte_end":162497,"line_start":1325,"line_end":1325,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162502,"byte_end":162505,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162510,"byte_end":162531,"line_start":1327,"line_end":1327,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":162536,"byte_end":162602,"line_start":1328,"line_end":1328,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163465,"byte_end":163474,"line_start":1353,"line_end":1353,"column_start":12,"column_end":21},"name":"entry_len","qualname":"<CommonInformationEntry<R>>::entry_len","value":"pub fn entry_len(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" > A constant that gives the number of bytes of the CIE structure, not\n > including the length field itself (see Section 7.2.2). The size of the\n > length field plus the value of length must be an integral multiple of\n > the address size.\n","sig":null,"attributes":[{"value":"/ > A constant that gives the number of bytes of the CIE structure, not","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163191,"byte_end":163264,"line_start":1349,"line_end":1349,"column_start":5,"column_end":78}},{"value":"/ > including the length field itself (see Section 7.2.2). The size of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163269,"byte_end":163345,"line_start":1350,"line_end":1350,"column_start":5,"column_end":81}},{"value":"/ > length field plus the value of length must be an integral multiple of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163350,"byte_end":163425,"line_start":1351,"line_end":1351,"column_start":5,"column_end":80}},{"value":"/ > the address size.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163430,"byte_end":163453,"line_start":1352,"line_end":1352,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163694,"byte_end":163701,"line_start":1359,"line_end":1359,"column_start":12,"column_end":19},"name":"version","qualname":"<CommonInformationEntry<R>>::version","value":"pub fn version(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" > A version number (see Section 7.23). This number is specific to the\n > call frame information and is independent of the DWARF version number.\n","sig":null,"attributes":[{"value":"/ > A version number (see Section 7.23). This number is specific to the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163528,"byte_end":163601,"line_start":1357,"line_end":1357,"column_start":5,"column_end":78}},{"value":"/ > call frame information and is independent of the DWARF version number.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163606,"byte_end":163682,"line_start":1358,"line_end":1358,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163915,"byte_end":163927,"line_start":1367,"line_end":1367,"column_start":12,"column_end":24},"name":"augmentation","qualname":"<CommonInformationEntry<R>>::augmentation","value":"pub fn augmentation(&Self) -> Option<&Augmentation>","parent":null,"children":[],"decl_id":null,"docs":" Get the augmentation data, if any exists.","sig":null,"attributes":[{"value":"/ Get the augmentation data, if any exists.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163749,"byte_end":163794,"line_start":1363,"line_end":1363,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163799,"byte_end":163802,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ The only augmentation understood by `gimli` is that which is defined by","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163807,"byte_end":163882,"line_start":1365,"line_end":1365,"column_start":5,"column_end":80}},{"value":"/ `.eh_frame`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":163887,"byte_end":163903,"line_start":1366,"line_end":1366,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164060,"byte_end":164068,"line_start":1372,"line_end":1372,"column_start":12,"column_end":20},"name":"has_lsda","qualname":"<CommonInformationEntry<R>>::has_lsda","value":"pub fn has_lsda(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this CIE's FDEs have a LSDA.\n","sig":null,"attributes":[{"value":"/ True if this CIE's FDEs have a LSDA.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164008,"byte_end":164048,"line_start":1371,"line_end":1371,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164235,"byte_end":164248,"line_start":1377,"line_end":1377,"column_start":12,"column_end":25},"name":"lsda_encoding","qualname":"<CommonInformationEntry<R>>::lsda_encoding","value":"pub fn lsda_encoding(&Self) -> Option<constants::DwEhPe>","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding of the LSDA address for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the encoding of the LSDA address for this CIE's FDEs.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164159,"byte_end":164223,"line_start":1376,"line_end":1376,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164456,"byte_end":164481,"line_start":1383,"line_end":1383,"column_start":12,"column_end":37},"name":"personality_with_encoding","qualname":"<CommonInformationEntry<R>>::personality_with_encoding","value":"pub fn personality_with_encoding(&Self)\n-> Option<(constants::DwEhPe, Pointer)>","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding and address of the personality routine handler\n for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the encoding and address of the personality routine handler","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164345,"byte_end":164415,"line_start":1381,"line_end":1381,"column_start":5,"column_end":75}},{"value":"/ for this CIE's FDEs.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164420,"byte_end":164444,"line_start":1382,"line_end":1382,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164703,"byte_end":164714,"line_start":1389,"line_end":1389,"column_start":12,"column_end":23},"name":"personality","qualname":"<CommonInformationEntry<R>>::personality","value":"pub fn personality(&Self) -> Option<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" Return the address of the personality routine handler\n for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the address of the personality routine handler","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164605,"byte_end":164662,"line_start":1387,"line_end":1387,"column_start":5,"column_end":62}},{"value":"/ for this CIE's FDEs.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164667,"byte_end":164691,"line_start":1388,"line_end":1388,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164945,"byte_end":164965,"line_start":1397,"line_end":1397,"column_start":12,"column_end":32},"name":"fde_address_encoding","qualname":"<CommonInformationEntry<R>>::fde_address_encoding","value":"pub fn fde_address_encoding(&Self) -> Option<constants::DwEhPe>","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding of the addresses for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the encoding of the addresses for this CIE's FDEs.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":164872,"byte_end":164933,"line_start":1396,"line_end":1396,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165154,"byte_end":165174,"line_start":1402,"line_end":1402,"column_start":12,"column_end":32},"name":"is_signal_trampoline","qualname":"<CommonInformationEntry<R>>::is_signal_trampoline","value":"pub fn is_signal_trampoline(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this CIE's FDEs are trampolines for signal handlers.\n","sig":null,"attributes":[{"value":"/ True if this CIE's FDEs are trampolines for signal handlers.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165078,"byte_end":165142,"line_start":1401,"line_end":1401,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165390,"byte_end":165411,"line_start":1408,"line_end":1408,"column_start":12,"column_end":33},"name":"code_alignment_factor","qualname":"<CommonInformationEntry<R>>::code_alignment_factor","value":"pub fn code_alignment_factor(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" > A constant that is factored out of all advance location instructions\n > (see Section 6.4.2.1).\n","sig":null,"attributes":[{"value":"/ > A constant that is factored out of all advance location instructions","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165271,"byte_end":165345,"line_start":1406,"line_end":1406,"column_start":5,"column_end":79}},{"value":"/ > (see Section 6.4.2.1).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165350,"byte_end":165378,"line_start":1407,"line_end":1407,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165635,"byte_end":165656,"line_start":1414,"line_end":1414,"column_start":12,"column_end":33},"name":"data_alignment_factor","qualname":"<CommonInformationEntry<R>>::data_alignment_factor","value":"pub fn data_alignment_factor(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" > A constant that is factored out of certain offset instructions (see\n > below). The resulting value is (operand * data_alignment_factor).\n","sig":null,"attributes":[{"value":"/ > A constant that is factored out of certain offset instructions (see","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165474,"byte_end":165547,"line_start":1412,"line_end":1412,"column_start":5,"column_end":78}},{"value":"/ > below). The resulting value is (operand * data_alignment_factor).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165552,"byte_end":165623,"line_start":1413,"line_end":1413,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165948,"byte_end":165971,"line_start":1421,"line_end":1421,"column_start":12,"column_end":35},"name":"return_address_register","qualname":"<CommonInformationEntry<R>>::return_address_register","value":"pub fn return_address_register(&Self) -> Register","parent":null,"children":[],"decl_id":null,"docs":" > An unsigned ... constant that indicates which column in the rule\n > table represents the return address of the function. Note that this\n > column might not correspond to an actual machine register.\n","sig":null,"attributes":[{"value":"/ > An unsigned ... constant that indicates which column in the rule","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165719,"byte_end":165789,"line_start":1418,"line_end":1418,"column_start":5,"column_end":75}},{"value":"/ > table represents the return address of the function. Note that this","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165794,"byte_end":165867,"line_start":1419,"line_end":1419,"column_start":5,"column_end":78}},{"value":"/ > column might not correspond to an actual machine register.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":165872,"byte_end":165936,"line_start":1420,"line_end":1420,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":5020},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":166200,"byte_end":166228,"line_start":1430,"line_end":1430,"column_start":12,"column_end":40},"name":"PartialFrameDescriptionEntry","qualname":"::read::cfi::PartialFrameDescriptionEntry","value":"PartialFrameDescriptionEntry {  }","parent":null,"children":[{"krate":0,"index":5024},{"krate":0,"index":5025},{"krate":0,"index":5026},{"krate":0,"index":5027},{"krate":0,"index":5028},{"krate":0,"index":5029},{"krate":0,"index":5030}],"decl_id":null,"docs":" A partially parsed `FrameDescriptionEntry`.","sig":null,"attributes":[{"value":"/ A partially parsed `FrameDescriptionEntry`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":166039,"byte_end":166086,"line_start":1426,"line_end":1426,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":166087,"byte_end":166090,"line_start":1427,"line_end":1427,"column_start":1,"column_end":4}},{"value":"/ Fully parsing this FDE requires first parsing its CIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":166091,"byte_end":166149,"line_start":1428,"line_end":1428,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":167275,"byte_end":167280,"line_start":1466,"line_end":1466,"column_start":12,"column_end":17},"name":"parse","qualname":"<PartialFrameDescriptionEntry>::parse","value":"pub fn parse<F>(&Self, F) -> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&Section, &BaseAddresses, Section::Offset) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" Fully parse this FDE.","sig":null,"attributes":[{"value":"/ Fully parse this FDE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":167033,"byte_end":167058,"line_start":1461,"line_end":1461,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":167063,"byte_end":167066,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ You must provide a function get its associated CIE (either by parsing it","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":167071,"byte_end":167147,"line_start":1463,"line_end":1463,"column_start":5,"column_end":81}},{"value":"/ on demand, or looking it up in some table mapping offsets to CIEs that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":167152,"byte_end":167226,"line_start":1464,"line_end":1464,"column_start":5,"column_end":79}},{"value":"/ you've already parsed, etc.)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":167231,"byte_end":167263,"line_start":1465,"line_end":1465,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5060},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":167853,"byte_end":167874,"line_start":1485,"line_end":1485,"column_start":12,"column_end":33},"name":"FrameDescriptionEntry","qualname":"::read::cfi::FrameDescriptionEntry","value":"FrameDescriptionEntry {  }","parent":null,"children":[{"krate":0,"index":5063},{"krate":0,"index":5064},{"krate":0,"index":5065},{"krate":0,"index":5066},{"krate":0,"index":5067},{"krate":0,"index":5068},{"krate":0,"index":5069},{"krate":0,"index":5070},{"krate":0,"index":5071}],"decl_id":null,"docs":" A `FrameDescriptionEntry` is a set of CFA instructions for an address range.\n","sig":null,"attributes":[{"value":"/ A `FrameDescriptionEntry` is a set of CFA instructions for an address range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":167722,"byte_end":167802,"line_start":1483,"line_end":1483,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":172066,"byte_end":172070,"line_start":1610,"line_end":1610,"column_start":12,"column_end":16},"name":"rows","qualname":"<FrameDescriptionEntry<R>>::rows","value":"pub fn rows<'a,\n            Section: UnwindSection<R>>(&Self, &'a Section, &'a BaseAddresses,\n                                       &'a mut UninitializedUnwindContext<R>)\n-> Result<UnwindTable>","parent":null,"children":[],"decl_id":null,"docs":" Return the table of unwind information for this FDE.\n","sig":null,"attributes":[{"value":"/ Return the table of unwind information for this FDE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":171984,"byte_end":172040,"line_start":1608,"line_end":1608,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":172045,"byte_end":172054,"line_start":1609,"line_end":1609,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":172693,"byte_end":172716,"line_start":1625,"line_end":1625,"column_start":12,"column_end":35},"name":"unwind_info_for_address","qualname":"<FrameDescriptionEntry<R>>::unwind_info_for_address","value":"pub fn unwind_info_for_address<Section: UnwindSection<R>>(&Self, &Section,\n                                                          &BaseAddresses,\n                                                          &mut UninitializedUnwindContext<R>,\n                                                          u64)\n-> Result<UnwindTableRow<R>>","parent":null,"children":[],"decl_id":null,"docs":" Find the frame unwind information for the given address.","sig":null,"attributes":[{"value":"/ Find the frame unwind information for the given address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":172335,"byte_end":172395,"line_start":1619,"line_end":1619,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":172400,"byte_end":172403,"line_start":1620,"line_end":1620,"column_start":5,"column_end":8}},{"value":"/ If found, the unwind information is returned along with the reset","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":172408,"byte_end":172477,"line_start":1621,"line_end":1621,"column_start":5,"column_end":74}},{"value":"/ context in the form `Ok((unwind_info, context))`. If not found,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":172482,"byte_end":172549,"line_start":1622,"line_end":1622,"column_start":5,"column_end":72}},{"value":"/ `Err(gimli::Error::NoUnwindInfoForAddress)` is returned. If parsing or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":172554,"byte_end":172628,"line_start":1623,"line_end":1623,"column_start":5,"column_end":79}},{"value":"/ CFI evaluation fails, the error is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":172633,"byte_end":172681,"line_start":1624,"line_end":1624,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173506,"byte_end":173512,"line_start":1649,"line_end":1649,"column_start":12,"column_end":18},"name":"offset","qualname":"<FrameDescriptionEntry<R>>::offset","value":"pub fn offset(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this entry from the start of its containing section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this entry from the start of its containing section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173420,"byte_end":173494,"line_start":1648,"line_end":1648,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173616,"byte_end":173619,"line_start":1654,"line_end":1654,"column_start":12,"column_end":15},"name":"cie","qualname":"<FrameDescriptionEntry<R>>::cie","value":"pub fn cie(&Self) -> &CommonInformationEntry<R>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this FDE's CIE.\n","sig":null,"attributes":[{"value":"/ Get a reference to this FDE's CIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173566,"byte_end":173604,"line_start":1653,"line_end":1653,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173996,"byte_end":174005,"line_start":1662,"line_end":1662,"column_start":12,"column_end":21},"name":"entry_len","qualname":"<FrameDescriptionEntry<R>>::entry_len","value":"pub fn entry_len(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" > A constant that gives the number of bytes of the header and\n > instruction stream for this function, not including the length field\n > itself (see Section 7.2.2). The size of the length field plus the value\n > of length must be an integral multiple of the address size.\n","sig":null,"attributes":[{"value":"/ > A constant that gives the number of bytes of the header and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173688,"byte_end":173753,"line_start":1658,"line_end":1658,"column_start":5,"column_end":70}},{"value":"/ > instruction stream for this function, not including the length field","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173758,"byte_end":173832,"line_start":1659,"line_end":1659,"column_start":5,"column_end":79}},{"value":"/ > itself (see Section 7.2.2). The size of the length field plus the value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173837,"byte_end":173914,"line_start":1660,"line_end":1660,"column_start":5,"column_end":82}},{"value":"/ > of length must be an integral multiple of the address size.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173919,"byte_end":173984,"line_start":1661,"line_end":1661,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":174345,"byte_end":174357,"line_start":1673,"line_end":1673,"column_start":12,"column_end":24},"name":"instructions","qualname":"<FrameDescriptionEntry<R>>::instructions","value":"pub fn instructions<'a, Section>(&Self, &'a Section, &'a BaseAddresses)\n-> CallFrameInstructionIter where Section: UnwindSection<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over this FDE's instructions.","sig":null,"attributes":[{"value":"/ Iterate over this FDE's instructions.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":174059,"byte_end":174100,"line_start":1666,"line_end":1666,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":174105,"byte_end":174108,"line_start":1667,"line_end":1667,"column_start":5,"column_end":8}},{"value":"/ Will not include the CIE's initial instructions, if you want those do","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":174113,"byte_end":174186,"line_start":1668,"line_end":1668,"column_start":5,"column_end":78}},{"value":"/ `fde.cie().instructions()` first.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":174191,"byte_end":174228,"line_start":1669,"line_end":1669,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":174233,"byte_end":174236,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":174241,"byte_end":174262,"line_start":1671,"line_end":1671,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":174267,"byte_end":174333,"line_start":1672,"line_end":1672,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175056,"byte_end":175071,"line_start":1694,"line_end":1694,"column_start":12,"column_end":27},"name":"initial_address","qualname":"<FrameDescriptionEntry<R>>::initial_address","value":"pub fn initial_address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The first address for which this entry has unwind information for.\n","sig":null,"attributes":[{"value":"/ The first address for which this entry has unwind information for.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":174974,"byte_end":175044,"line_start":1693,"line_end":1693,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175231,"byte_end":175234,"line_start":1700,"line_end":1700,"column_start":12,"column_end":15},"name":"len","qualname":"<FrameDescriptionEntry<R>>::len","value":"pub fn len(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes of instructions that this entry has unwind\n information for.\n","sig":null,"attributes":[{"value":"/ The number of bytes of instructions that this entry has unwind","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175128,"byte_end":175194,"line_start":1698,"line_end":1698,"column_start":5,"column_end":71}},{"value":"/ information for.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175199,"byte_end":175219,"line_start":1699,"line_end":1699,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175510,"byte_end":175518,"line_start":1709,"line_end":1709,"column_start":12,"column_end":20},"name":"contains","qualname":"<FrameDescriptionEntry<R>>::contains","value":"pub fn contains(&Self, u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the given address is within this FDE, `false`\n otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if the given address is within this FDE, `false`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175289,"byte_end":175355,"line_start":1704,"line_end":1704,"column_start":5,"column_end":71}},{"value":"/ otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175360,"byte_end":175374,"line_start":1705,"line_end":1705,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175379,"byte_end":175382,"line_start":1706,"line_end":1706,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `entry.initial_address() <= address <","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175387,"byte_end":175450,"line_start":1707,"line_end":1707,"column_start":5,"column_end":68}},{"value":"/ entry.initial_address() + entry.len()`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175455,"byte_end":175498,"line_start":1708,"line_end":1708,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175785,"byte_end":175789,"line_start":1717,"line_end":1717,"column_start":12,"column_end":16},"name":"lsda","qualname":"<FrameDescriptionEntry<R>>::lsda","value":"pub fn lsda(&Self) -> Option<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" The address of this FDE's language-specific data area (LSDA), if it has\n any.\n","sig":null,"attributes":[{"value":"/ The address of this FDE's language-specific data area (LSDA), if it has","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175685,"byte_end":175760,"line_start":1715,"line_end":1715,"column_start":5,"column_end":80}},{"value":"/ any.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175765,"byte_end":175773,"line_start":1716,"line_end":1716,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175987,"byte_end":176007,"line_start":1723,"line_end":1723,"column_start":12,"column_end":32},"name":"is_signal_trampoline","qualname":"<FrameDescriptionEntry<R>>::is_signal_trampoline","value":"pub fn is_signal_trampoline(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this FDE's function is a trampoline for a signal handler.\n","sig":null,"attributes":[{"value":"/ Return true if this FDE's function is a trampoline for a signal handler.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175885,"byte_end":175961,"line_start":1721,"line_end":1721,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":175966,"byte_end":175975,"line_start":1722,"line_end":1722,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176322,"byte_end":176333,"line_start":1731,"line_end":1731,"column_start":12,"column_end":23},"name":"personality","qualname":"<FrameDescriptionEntry<R>>::personality","value":"pub fn personality(&Self) -> Option<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" Return the address of the FDE's function's personality routine\n handler. The personality routine does language-specific clean up when\n unwinding the stack frames with the intent to not run them again.\n","sig":null,"attributes":[{"value":"/ Return the address of the FDE's function's personality routine","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176078,"byte_end":176144,"line_start":1727,"line_end":1727,"column_start":5,"column_end":71}},{"value":"/ handler. The personality routine does language-specific clean up when","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176149,"byte_end":176222,"line_start":1728,"line_end":1728,"column_start":5,"column_end":78}},{"value":"/ unwinding the stack frames with the intent to not run them again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176227,"byte_end":176296,"line_start":1729,"line_end":1729,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176301,"byte_end":176310,"line_start":1730,"line_end":1730,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5095},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177773,"byte_end":177799,"line_start":1767,"line_end":1767,"column_start":12,"column_end":38},"name":"UninitializedUnwindContext","qualname":"::read::cfi::UninitializedUnwindContext","value":"","parent":null,"children":[],"decl_id":null,"docs":" Common context needed when evaluating the call frame unwinding information.","sig":null,"attributes":[{"value":"/ Common context needed when evaluating the call frame unwinding information.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176404,"byte_end":176483,"line_start":1736,"line_end":1736,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176484,"byte_end":176487,"line_start":1737,"line_end":1737,"column_start":1,"column_end":4}},{"value":"/ To avoid re-allocating the context multiple times when evaluating multiple","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176488,"byte_end":176566,"line_start":1738,"line_end":1738,"column_start":1,"column_end":79}},{"value":"/ CFI programs, it can be reused. At first, a context is uninitialized","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176567,"byte_end":176639,"line_start":1739,"line_end":1739,"column_start":1,"column_end":73}},{"value":"/ (`UninitializedUnwindContext`). It can be initialized by providing the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176640,"byte_end":176714,"line_start":1740,"line_end":1740,"column_start":1,"column_end":75}},{"value":"/ `CommonInformationEntry` for the CFI program about to be evaluated and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176715,"byte_end":176789,"line_start":1741,"line_end":1741,"column_start":1,"column_end":75}},{"value":"/ calling `UninitializedUnwindContext::initialize`. The result is a `&mut UnwindContext`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176790,"byte_end":176880,"line_start":1742,"line_end":1742,"column_start":1,"column_end":91}},{"value":"/ which borrows the uninitialized context, and can be used to evaluate and run a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176881,"byte_end":176963,"line_start":1743,"line_end":1743,"column_start":1,"column_end":83}},{"value":"/ `FrameDescriptionEntry`'s CFI program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":176964,"byte_end":177006,"line_start":1744,"line_end":1744,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177007,"byte_end":177010,"line_start":1745,"line_end":1745,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177011,"byte_end":177018,"line_start":1746,"line_end":1746,"column_start":1,"column_end":8}},{"value":"/ use gimli::{UninitializedUnwindContext, UnwindTable};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177019,"byte_end":177076,"line_start":1747,"line_end":1747,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177077,"byte_end":177080,"line_start":1748,"line_end":1748,"column_start":1,"column_end":4}},{"value":"/ # fn foo<'a>(some_fde: gimli::FrameDescriptionEntry<gimli::EndianSlice<'a, gimli::LittleEndian>>)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177081,"byte_end":177182,"line_start":1749,"line_end":1749,"column_start":1,"column_end":102}},{"value":"/ #            -> gimli::Result<()> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177183,"byte_end":177222,"line_start":1750,"line_end":1750,"column_start":1,"column_end":40}},{"value":"/ # let eh_frame: gimli::EhFrame<_> = unreachable!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177223,"byte_end":177278,"line_start":1751,"line_end":1751,"column_start":1,"column_end":56}},{"value":"/ # let bases = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177279,"byte_end":177314,"line_start":1752,"line_end":1752,"column_start":1,"column_end":36}},{"value":"/ // An uninitialized context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177315,"byte_end":177347,"line_start":1753,"line_end":1753,"column_start":1,"column_end":33}},{"value":"/ let mut ctx = UninitializedUnwindContext::new();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177348,"byte_end":177400,"line_start":1754,"line_end":1754,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177401,"byte_end":177404,"line_start":1755,"line_end":1755,"column_start":1,"column_end":4}},{"value":"/ // Initialize the context by evaluating the CIE's initial instruction program,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177405,"byte_end":177487,"line_start":1756,"line_end":1756,"column_start":1,"column_end":83}},{"value":"/ // and generate the unwind table.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177488,"byte_end":177525,"line_start":1757,"line_end":1757,"column_start":1,"column_end":38}},{"value":"/ let mut table = some_fde.rows(&eh_frame, &bases, &mut ctx)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177526,"byte_end":177590,"line_start":1758,"line_end":1758,"column_start":1,"column_end":65}},{"value":"/ while let Some(row) = table.next_row()? {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177591,"byte_end":177636,"line_start":1759,"line_end":1759,"column_start":1,"column_end":46}},{"value":"/     // Do stuff with each row...","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177637,"byte_end":177673,"line_start":1760,"line_end":1760,"column_start":1,"column_end":37}},{"value":"/ #   let _ = row;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177674,"byte_end":177694,"line_start":1761,"line_end":1761,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177695,"byte_end":177700,"line_start":1762,"line_end":1762,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177701,"byte_end":177721,"line_start":1763,"line_end":1763,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177722,"byte_end":177729,"line_start":1764,"line_end":1764,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177730,"byte_end":177737,"line_start":1765,"line_end":1765,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177949,"byte_end":177952,"line_start":1771,"line_end":1771,"column_start":12,"column_end":15},"name":"new","qualname":"<UninitializedUnwindContext<R>>::new","value":"pub fn new() -> UninitializedUnwindContext<R>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new call frame unwinding context.\n","sig":null,"attributes":[{"value":"/ Construct a new call frame unwinding context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177888,"byte_end":177937,"line_start":1770,"line_end":1770,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":178479,"byte_end":178489,"line_start":1789,"line_end":1789,"column_start":12,"column_end":22},"name":"initialize","qualname":"<UninitializedUnwindContext<R>>::initialize","value":"pub fn initialize<Section: UnwindSection<R>>(&mut Self, &Section,\n                                             &BaseAddresses,\n                                             &CommonInformationEntry<R>)\n-> Result<&mut UnwindContext<R>>","parent":null,"children":[],"decl_id":null,"docs":" Run the CIE's initial instructions, creating and return an\n `UnwindContext`.\n","sig":null,"attributes":[{"value":"/ Run the CIE's initial instructions, creating and return an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":178380,"byte_end":178442,"line_start":1787,"line_end":1787,"column_start":5,"column_end":67}},{"value":"/ `UnwindContext`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":178447,"byte_end":178467,"line_start":1788,"line_end":1788,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":5105},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":179062,"byte_end":179075,"line_start":1811,"line_end":1811,"column_start":12,"column_end":25},"name":"UnwindContext","qualname":"::read::cfi::UnwindContext","value":"UnwindContext {  }","parent":null,"children":[{"krate":0,"index":5107},{"krate":0,"index":5109},{"krate":0,"index":5110},{"krate":0,"index":5111}],"decl_id":null,"docs":" An unwinding context.\n","sig":null,"attributes":[{"value":"/ An unwinding context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":178997,"byte_end":179022,"line_start":1809,"line_end":1809,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":5124},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":186084,"byte_end":186095,"line_start":2010,"line_end":2010,"column_start":12,"column_end":23},"name":"UnwindTable","qualname":"::read::cfi::UnwindTable","value":"UnwindTable {  }","parent":null,"children":[{"krate":0,"index":5127},{"krate":0,"index":5128},{"krate":0,"index":5129},{"krate":0,"index":5130},{"krate":0,"index":5131},{"krate":0,"index":5132},{"krate":0,"index":5133}],"decl_id":null,"docs":" The `UnwindTable` iteratively evaluates a `FrameDescriptionEntry`'s\n `CallFrameInstruction` program, yielding the each row one at a time.","sig":null,"attributes":[{"value":"/ The `UnwindTable` iteratively evaluates a `FrameDescriptionEntry`'s","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183377,"byte_end":183448,"line_start":1953,"line_end":1953,"column_start":1,"column_end":72}},{"value":"/ `CallFrameInstruction` program, yielding the each row one at a time.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183449,"byte_end":183521,"line_start":1954,"line_end":1954,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183522,"byte_end":183525,"line_start":1955,"line_end":1955,"column_start":1,"column_end":4}},{"value":"/ > 6.4.1 Structure of Call Frame Information","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183526,"byte_end":183573,"line_start":1956,"line_end":1956,"column_start":1,"column_end":48}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183574,"byte_end":183579,"line_start":1957,"line_end":1957,"column_start":1,"column_end":6}},{"value":"/ > DWARF supports virtual unwinding by defining an architecture independent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183580,"byte_end":183658,"line_start":1958,"line_end":1958,"column_start":1,"column_end":79}},{"value":"/ > basis for recording how procedures save and restore registers during their","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183659,"byte_end":183739,"line_start":1959,"line_end":1959,"column_start":1,"column_end":81}},{"value":"/ > lifetimes. This basis must be augmented on some machines with specific","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183740,"byte_end":183816,"line_start":1960,"line_end":1960,"column_start":1,"column_end":77}},{"value":"/ > information that is defined by an architecture specific ABI authoring","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183817,"byte_end":183892,"line_start":1961,"line_end":1961,"column_start":1,"column_end":76}},{"value":"/ > committee, a hardware vendor, or a compiler producer. The body defining a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183893,"byte_end":183972,"line_start":1962,"line_end":1962,"column_start":1,"column_end":80}},{"value":"/ > specific augmentation is referred to below as the “augmenter.”","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183973,"byte_end":184045,"line_start":1963,"line_end":1963,"column_start":1,"column_end":69}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184046,"byte_end":184051,"line_start":1964,"line_end":1964,"column_start":1,"column_end":6}},{"value":"/ > Abstractly, this mechanism describes a very large table that has the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184052,"byte_end":184126,"line_start":1965,"line_end":1965,"column_start":1,"column_end":75}},{"value":"/ > following structure:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184127,"byte_end":184153,"line_start":1966,"line_end":1966,"column_start":1,"column_end":27}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184154,"byte_end":184159,"line_start":1967,"line_end":1967,"column_start":1,"column_end":6}},{"value":"/ > <table>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184160,"byte_end":184173,"line_start":1968,"line_end":1968,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184174,"byte_end":184186,"line_start":1969,"line_end":1969,"column_start":1,"column_end":13}},{"value":"/ >     <th>LOC</th><th>CFA</th><th>R0</th><th>R1</th><td>...</td><th>RN</th>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184187,"byte_end":184266,"line_start":1970,"line_end":1970,"column_start":1,"column_end":80}},{"value":"/ >   </tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184267,"byte_end":184280,"line_start":1971,"line_end":1971,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184281,"byte_end":184293,"line_start":1972,"line_end":1972,"column_start":1,"column_end":13}},{"value":"/ >     <th>L0</th> <td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184294,"byte_end":184371,"line_start":1973,"line_end":1973,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184372,"byte_end":184385,"line_start":1974,"line_end":1974,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184386,"byte_end":184398,"line_start":1975,"line_end":1975,"column_start":1,"column_end":13}},{"value":"/ >     <th>L1</th> <td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184399,"byte_end":184476,"line_start":1976,"line_end":1976,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184477,"byte_end":184490,"line_start":1977,"line_end":1977,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184491,"byte_end":184503,"line_start":1978,"line_end":1978,"column_start":1,"column_end":13}},{"value":"/ >     <td>...</td><td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184504,"byte_end":184581,"line_start":1979,"line_end":1979,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184582,"byte_end":184595,"line_start":1980,"line_end":1980,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184596,"byte_end":184608,"line_start":1981,"line_end":1981,"column_start":1,"column_end":13}},{"value":"/ >     <th>LN</th> <td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184609,"byte_end":184686,"line_start":1982,"line_end":1982,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184687,"byte_end":184700,"line_start":1983,"line_end":1983,"column_start":1,"column_end":14}},{"value":"/ > </table>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184701,"byte_end":184715,"line_start":1984,"line_end":1984,"column_start":1,"column_end":15}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184716,"byte_end":184721,"line_start":1985,"line_end":1985,"column_start":1,"column_end":6}},{"value":"/ > The first column indicates an address for every location that contains code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184722,"byte_end":184803,"line_start":1986,"line_end":1986,"column_start":1,"column_end":82}},{"value":"/ > in a program. (In shared objects, this is an object-relative offset.) The","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184804,"byte_end":184883,"line_start":1987,"line_end":1987,"column_start":1,"column_end":80}},{"value":"/ > remaining columns contain virtual unwinding rules that are associated with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184884,"byte_end":184964,"line_start":1988,"line_end":1988,"column_start":1,"column_end":81}},{"value":"/ > the indicated location.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184965,"byte_end":184994,"line_start":1989,"line_end":1989,"column_start":1,"column_end":30}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":184995,"byte_end":185000,"line_start":1990,"line_end":1990,"column_start":1,"column_end":6}},{"value":"/ > The CFA column defines the rule which computes the Canonical Frame Address","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185001,"byte_end":185081,"line_start":1991,"line_end":1991,"column_start":1,"column_end":81}},{"value":"/ > value; it may be either a register and a signed offset that are added","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185082,"byte_end":185157,"line_start":1992,"line_end":1992,"column_start":1,"column_end":76}},{"value":"/ > together, or a DWARF expression that is evaluated.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185158,"byte_end":185214,"line_start":1993,"line_end":1993,"column_start":1,"column_end":57}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185215,"byte_end":185220,"line_start":1994,"line_end":1994,"column_start":1,"column_end":6}},{"value":"/ > The remaining columns are labeled by register number. This includes some","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185221,"byte_end":185299,"line_start":1995,"line_end":1995,"column_start":1,"column_end":79}},{"value":"/ > registers that have special designation on some architectures such as the PC","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185300,"byte_end":185382,"line_start":1996,"line_end":1996,"column_start":1,"column_end":83}},{"value":"/ > and the stack pointer register. (The actual mapping of registers for a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185383,"byte_end":185459,"line_start":1997,"line_end":1997,"column_start":1,"column_end":77}},{"value":"/ > particular architecture is defined by the augmenter.) The register columns","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185460,"byte_end":185540,"line_start":1998,"line_end":1998,"column_start":1,"column_end":81}},{"value":"/ > contain rules that describe whether a given register has been saved and the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185541,"byte_end":185622,"line_start":1999,"line_end":1999,"column_start":1,"column_end":82}},{"value":"/ > rule to find the value for the register in the previous frame.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185623,"byte_end":185691,"line_start":2000,"line_end":2000,"column_start":1,"column_end":69}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185692,"byte_end":185697,"line_start":2001,"line_end":2001,"column_start":1,"column_end":6}},{"value":"/ > ...","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185698,"byte_end":185707,"line_start":2002,"line_end":2002,"column_start":1,"column_end":10}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185708,"byte_end":185713,"line_start":2003,"line_end":2003,"column_start":1,"column_end":6}},{"value":"/ > This table would be extremely large if actually constructed as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185714,"byte_end":185782,"line_start":2004,"line_end":2004,"column_start":1,"column_end":69}},{"value":"/ > described. Most of the entries at any point in the table are identical to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185783,"byte_end":185862,"line_start":2005,"line_end":2005,"column_start":1,"column_end":80}},{"value":"/ > the ones above them. The whole table can be represented quite compactly by","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185863,"byte_end":185943,"line_start":2006,"line_end":2006,"column_start":1,"column_end":81}},{"value":"/ > recording just the differences starting at the beginning address of each","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":185944,"byte_end":186022,"line_start":2007,"line_end":2007,"column_start":1,"column_end":79}},{"value":"/ > subroutine in the program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":186023,"byte_end":186055,"line_start":2008,"line_end":2008,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":186678,"byte_end":186681,"line_start":2027,"line_end":2027,"column_start":12,"column_end":15},"name":"new","qualname":"<UnwindTable>::new","value":"pub fn new<Section: UnwindSection<R>>(&'a Section, &'a BaseAddresses,\n                                      &'a mut UninitializedUnwindContext<R>,\n                                      &FrameDescriptionEntry<R>)\n-> Result<UnwindTable>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnwindTable` for the given\n `FrameDescriptionEntry`'s CFI unwinding program.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnwindTable` for the given","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":186562,"byte_end":186609,"line_start":2025,"line_end":2025,"column_start":5,"column_end":52}},{"value":"/ `FrameDescriptionEntry`'s CFI unwinding program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":186614,"byte_end":186666,"line_start":2026,"line_end":2026,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":188628,"byte_end":188636,"line_start":2078,"line_end":2078,"column_start":12,"column_end":20},"name":"next_row","qualname":"<UnwindTable>::next_row","value":"pub fn next_row(&mut Self) -> Result<Option<&UnwindTableRow<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate call frame instructions until the next row of the table is\n completed, and return it.","sig":null,"attributes":[{"value":"/ Evaluate call frame instructions until the next row of the table is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":188372,"byte_end":188443,"line_start":2073,"line_end":2073,"column_start":5,"column_end":76}},{"value":"/ completed, and return it.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":188448,"byte_end":188477,"line_start":2074,"line_end":2074,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":188482,"byte_end":188485,"line_start":2075,"line_end":2075,"column_start":5,"column_end":8}},{"value":"/ Unfortunately, this cannot be used with `FallibleIterator` because of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":188490,"byte_end":188563,"line_start":2076,"line_end":2076,"column_start":5,"column_end":78}},{"value":"/ the restricted lifetime of the yielded item.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":188568,"byte_end":188616,"line_start":2077,"line_end":2077,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":5138},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":203541,"byte_end":203557,"line_start":2502,"line_end":2502,"column_start":12,"column_end":28},"name":"RegisterRuleIter","qualname":"::read::cfi::RegisterRuleIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An unordered iterator for register rules.\n","sig":null,"attributes":[{"value":"/ An unordered iterator for register rules.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":203460,"byte_end":203505,"line_start":2500,"line_end":2500,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5151},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204043,"byte_end":204057,"line_start":2517,"line_end":2517,"column_start":12,"column_end":26},"name":"UnwindTableRow","qualname":"::read::cfi::UnwindTableRow","value":"UnwindTableRow {  }","parent":null,"children":[{"krate":0,"index":5153},{"krate":0,"index":5154},{"krate":0,"index":5155},{"krate":0,"index":5156},{"krate":0,"index":5157}],"decl_id":null,"docs":" A row in the virtual unwind table that describes how to find the values of\n the registers in the *previous* frame for a range of PC addresses.\n","sig":null,"attributes":[{"value":"/ A row in the virtual unwind table that describes how to find the values of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":203843,"byte_end":203921,"line_start":2514,"line_end":2514,"column_start":1,"column_end":79}},{"value":"/ the registers in the *previous* frame for a range of PC addresses.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":203922,"byte_end":203992,"line_start":2515,"line_end":2515,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204791,"byte_end":204804,"line_start":2546,"line_end":2546,"column_start":12,"column_end":25},"name":"start_address","qualname":"<UnwindTableRow<R>>::start_address","value":"pub fn start_address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the starting PC address that this row applies to.\n","sig":null,"attributes":[{"value":"/ Get the starting PC address that this row applies to.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204722,"byte_end":204779,"line_start":2545,"line_end":2545,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205226,"byte_end":205237,"line_start":2557,"line_end":2557,"column_start":12,"column_end":23},"name":"end_address","qualname":"<UnwindTableRow<R>>::end_address","value":"pub fn end_address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the end PC address where this row's register rules become\n unapplicable.","sig":null,"attributes":[{"value":"/ Get the end PC address where this row's register rules become","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204859,"byte_end":204924,"line_start":2550,"line_end":2550,"column_start":5,"column_end":70}},{"value":"/ unapplicable.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204929,"byte_end":204946,"line_start":2551,"line_end":2551,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204951,"byte_end":204954,"line_start":2552,"line_end":2552,"column_start":5,"column_end":8}},{"value":"/ In other words, this row describes how to recover the last frame's","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204959,"byte_end":205029,"line_start":2553,"line_end":2553,"column_start":5,"column_end":75}},{"value":"/ registers for all PCs where `row.start_address() <= PC <","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205034,"byte_end":205094,"line_start":2554,"line_end":2554,"column_start":5,"column_end":65}},{"value":"/ row.end_address()`. This row does NOT describe how to recover registers","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205099,"byte_end":205174,"line_start":2555,"line_end":2555,"column_start":5,"column_end":80}},{"value":"/ when `PC == row.end_address()`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205179,"byte_end":205214,"line_start":2556,"line_end":2556,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205405,"byte_end":205413,"line_start":2563,"line_end":2563,"column_start":12,"column_end":20},"name":"contains","qualname":"<UnwindTableRow<R>>::contains","value":"pub fn contains(&Self, u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the given `address` is within this row's address range,\n `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Return `true` if the given `address` is within this row's address range,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205290,"byte_end":205366,"line_start":2561,"line_end":2561,"column_start":5,"column_end":81}},{"value":"/ `false` otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205371,"byte_end":205393,"line_start":2562,"line_end":2562,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205732,"byte_end":205747,"line_start":2571,"line_end":2571,"column_start":12,"column_end":27},"name":"saved_args_size","qualname":"<UnwindTableRow<R>>::saved_args_size","value":"pub fn saved_args_size(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the amount of args currently on the stack.","sig":null,"attributes":[{"value":"/ Returns the amount of args currently on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205524,"byte_end":205578,"line_start":2567,"line_end":2567,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205583,"byte_end":205586,"line_start":2568,"line_end":2568,"column_start":5,"column_end":8}},{"value":"/ When unwinding, if the personality function requested a change in IP,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205591,"byte_end":205664,"line_start":2569,"line_end":2569,"column_start":5,"column_end":78}},{"value":"/ the SP needs to be adjusted by saved_args_size.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205669,"byte_end":205720,"line_start":2570,"line_end":2570,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205885,"byte_end":205888,"line_start":2576,"line_end":2576,"column_start":12,"column_end":15},"name":"cfa","qualname":"<UnwindTableRow<R>>::cfa","value":"pub fn cfa(&Self) -> &CfaRule<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical frame address (CFA) recovery rule for this row.\n","sig":null,"attributes":[{"value":"/ Get the canonical frame address (CFA) recovery rule for this row.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205804,"byte_end":205873,"line_start":2575,"line_end":2575,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209642,"byte_end":209650,"line_start":2624,"line_end":2624,"column_start":12,"column_end":20},"name":"register","qualname":"<UnwindTableRow<R>>::register","value":"pub fn register(&Self, Register) -> RegisterRule<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the register recovery rule for the given register number.","sig":null,"attributes":[{"value":"/ Get the register recovery rule for the given register number.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":205942,"byte_end":206007,"line_start":2580,"line_end":2580,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206012,"byte_end":206015,"line_start":2581,"line_end":2581,"column_start":5,"column_end":8}},{"value":"/ The register number mapping is architecture dependent. For example, in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206020,"byte_end":206094,"line_start":2582,"line_end":2582,"column_start":5,"column_end":79}},{"value":"/ the x86-64 ABI the register number mapping is defined in Figure 3.36:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206099,"byte_end":206172,"line_start":2583,"line_end":2583,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206177,"byte_end":206180,"line_start":2584,"line_end":2584,"column_start":5,"column_end":8}},{"value":"/ > Figure 3.36: DWARF Register Number Mapping","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206185,"byte_end":206233,"line_start":2585,"line_end":2585,"column_start":5,"column_end":53}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206238,"byte_end":206243,"line_start":2586,"line_end":2586,"column_start":5,"column_end":10}},{"value":"/ > <table>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206248,"byte_end":206261,"line_start":2587,"line_end":2587,"column_start":5,"column_end":18}},{"value":"/ >   <tr><th>Register Name</th>                    <th>Number</th>  <th>Abbreviation</th></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206266,"byte_end":206363,"line_start":2588,"line_end":2588,"column_start":5,"column_end":102}},{"value":"/ >   <tr><td>General Purpose Register RAX</td>     <td>0</td>       <td>%rax</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206368,"byte_end":206457,"line_start":2589,"line_end":2589,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RDX</td>     <td>1</td>       <td>%rdx</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206462,"byte_end":206551,"line_start":2590,"line_end":2590,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RCX</td>     <td>2</td>       <td>%rcx</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206556,"byte_end":206645,"line_start":2591,"line_end":2591,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RBX</td>     <td>3</td>       <td>%rbx</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206650,"byte_end":206739,"line_start":2592,"line_end":2592,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RSI</td>     <td>4</td>       <td>%rsi</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206744,"byte_end":206833,"line_start":2593,"line_end":2593,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RDI</td>     <td>5</td>       <td>%rdi</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206838,"byte_end":206927,"line_start":2594,"line_end":2594,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RBP</td>     <td>6</td>       <td>%rbp</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":206932,"byte_end":207021,"line_start":2595,"line_end":2595,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>Stack Pointer Register RSP</td>       <td>7</td>       <td>%rsp</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207026,"byte_end":207115,"line_start":2596,"line_end":2596,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>Extended Integer Registers 8-15</td>  <td>8-15</td>    <td>%r8-%r15</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207120,"byte_end":207213,"line_start":2597,"line_end":2597,"column_start":5,"column_end":98}},{"value":"/ >   <tr><td>Return Address RA</td>                <td>16</td>      <td></td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207218,"byte_end":207303,"line_start":2598,"line_end":2598,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>Vector Registers 0–7</td>             <td>17-24</td>   <td>%xmm0–%xmm7</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207308,"byte_end":207408,"line_start":2599,"line_end":2599,"column_start":5,"column_end":101}},{"value":"/ >   <tr><td>Extended Vector Registers 8–15</td>   <td>25-32</td>   <td>%xmm8–%xmm15</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207413,"byte_end":207514,"line_start":2600,"line_end":2600,"column_start":5,"column_end":102}},{"value":"/ >   <tr><td>Floating Point Registers 0–7</td>     <td>33-40</td>   <td>%st0–%st7</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207519,"byte_end":207617,"line_start":2601,"line_end":2601,"column_start":5,"column_end":99}},{"value":"/ >   <tr><td>MMX Registers 0–7</td>                <td>41-48</td>   <td>%mm0–%mm7</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207622,"byte_end":207720,"line_start":2602,"line_end":2602,"column_start":5,"column_end":99}},{"value":"/ >   <tr><td>Flag Register</td>                    <td>49</td>      <td>%rFLAGS</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207725,"byte_end":207817,"line_start":2603,"line_end":2603,"column_start":5,"column_end":97}},{"value":"/ >   <tr><td>Segment Register ES</td>              <td>50</td>      <td>%es</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207822,"byte_end":207910,"line_start":2604,"line_end":2604,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register CS</td>              <td>51</td>      <td>%cs</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":207915,"byte_end":208003,"line_start":2605,"line_end":2605,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register SS</td>              <td>52</td>      <td>%ss</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208008,"byte_end":208096,"line_start":2606,"line_end":2606,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register DS</td>              <td>53</td>      <td>%ds</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208101,"byte_end":208189,"line_start":2607,"line_end":2607,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register FS</td>              <td>54</td>      <td>%fs</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208194,"byte_end":208282,"line_start":2608,"line_end":2608,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register GS</td>              <td>55</td>      <td>%gs</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208287,"byte_end":208375,"line_start":2609,"line_end":2609,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Reserved</td>                         <td>56-57</td>   <td></td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208380,"byte_end":208465,"line_start":2610,"line_end":2610,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>FS Base address</td>                  <td>58</td>      <td>%fs.base</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208470,"byte_end":208563,"line_start":2611,"line_end":2611,"column_start":5,"column_end":98}},{"value":"/ >   <tr><td>GS Base address</td>                  <td>59</td>      <td>%gs.base</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208568,"byte_end":208661,"line_start":2612,"line_end":2612,"column_start":5,"column_end":98}},{"value":"/ >   <tr><td>Reserved</td>                         <td>60-61</td>   <td></td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208666,"byte_end":208751,"line_start":2613,"line_end":2613,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>Task Register</td>                    <td>62</td>      <td>%tr</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208756,"byte_end":208844,"line_start":2614,"line_end":2614,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>LDT Register</td>                     <td>63</td>      <td>%ldtr</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208849,"byte_end":208939,"line_start":2615,"line_end":2615,"column_start":5,"column_end":95}},{"value":"/ >   <tr><td>128-bit Media Control and Status</td> <td>64</td>      <td>%mxcsr</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":208944,"byte_end":209035,"line_start":2616,"line_end":2616,"column_start":5,"column_end":96}},{"value":"/ >   <tr><td>x87 Control Word</td>                 <td>65</td>      <td>%fcw</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209040,"byte_end":209129,"line_start":2617,"line_end":2617,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>x87 Status Word</td>                  <td>66</td>      <td>%fsw</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209134,"byte_end":209223,"line_start":2618,"line_end":2618,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>Upper Vector Registers 16–31</td>     <td>67-82</td>   <td>%xmm16–%xmm31</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209228,"byte_end":209330,"line_start":2619,"line_end":2619,"column_start":5,"column_end":103}},{"value":"/ >   <tr><td>Reserved</td>                         <td>83-117</td>  <td></td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209335,"byte_end":209420,"line_start":2620,"line_end":2620,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>Vector Mask Registers 0–7</td>        <td>118-125</td> <td>%k0–%k7</td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209425,"byte_end":209521,"line_start":2621,"line_end":2621,"column_start":5,"column_end":97}},{"value":"/ >   <tr><td>Reserved</td>                         <td>126-129</td> <td></td></tr>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209526,"byte_end":209611,"line_start":2622,"line_end":2622,"column_start":5,"column_end":90}},{"value":"/ > </table>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209616,"byte_end":209630,"line_start":2623,"line_end":2623,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210362,"byte_end":210371,"line_start":2643,"line_end":2643,"column_start":12,"column_end":21},"name":"registers","qualname":"<UnwindTableRow<R>>::registers","value":"pub fn registers(&Self) -> RegisterRuleIter<, R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all defined register `(number, rule)` pairs.","sig":null,"attributes":[{"value":"/ Iterate over all defined register `(number, rule)` pairs.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209747,"byte_end":209808,"line_start":2628,"line_end":2628,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209813,"byte_end":209816,"line_start":2629,"line_end":2629,"column_start":5,"column_end":8}},{"value":"/ The rules are not iterated in any guaranteed order. Any register that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209821,"byte_end":209894,"line_start":2630,"line_end":2630,"column_start":5,"column_end":78}},{"value":"/ does not make an appearance in the iterator implicitly has the rule","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209899,"byte_end":209970,"line_start":2631,"line_end":2631,"column_start":5,"column_end":76}},{"value":"/ `RegisterRule::Undefined`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":209975,"byte_end":210005,"line_start":2632,"line_end":2632,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210010,"byte_end":210013,"line_start":2633,"line_end":2633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210018,"byte_end":210025,"line_start":2634,"line_end":2634,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{EndianSlice, LittleEndian, UnwindTableRow};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210030,"byte_end":210091,"line_start":2635,"line_end":2635,"column_start":5,"column_end":66}},{"value":"/ # fn foo<'input>(unwind_table_row: UnwindTableRow<EndianSlice<'input, LittleEndian>>) {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210096,"byte_end":210187,"line_start":2636,"line_end":2636,"column_start":5,"column_end":96}},{"value":"/ for &(register, ref rule) in unwind_table_row.registers() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210192,"byte_end":210255,"line_start":2637,"line_end":2637,"column_start":5,"column_end":68}},{"value":"/     // ...","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210260,"byte_end":210274,"line_start":2638,"line_end":2638,"column_start":5,"column_end":19}},{"value":"/     # drop(register); drop(rule);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210279,"byte_end":210316,"line_start":2639,"line_end":2639,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210321,"byte_end":210326,"line_start":2640,"line_end":2640,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210331,"byte_end":210338,"line_start":2641,"line_end":2641,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210343,"byte_end":210350,"line_start":2642,"line_end":2642,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":5177},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210635,"byte_end":210652,"line_start":2652,"line_end":2652,"column_start":5,"column_end":22},"name":"RegisterAndOffset","qualname":"::read::cfi::CfaRule::RegisterAndOffset","value":"CfaRule::RegisterAndOffset { register, offset }","parent":{"krate":0,"index":5175},"children":[],"decl_id":null,"docs":" The CFA is given offset from the given register's value.\n","sig":null,"attributes":[{"value":"/ The CFA is given offset from the given register's value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210570,"byte_end":210630,"line_start":2651,"line_end":2651,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5180},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210917,"byte_end":210927,"line_start":2660,"line_end":2660,"column_start":5,"column_end":15},"name":"Expression","qualname":"::read::cfi::CfaRule::Expression","value":"CfaRule::Expression(Expression<R>)","parent":{"krate":0,"index":5175},"children":[],"decl_id":null,"docs":" The CFA is obtained by evaluating this `Reader` as a DWARF expression\n program.\n","sig":null,"attributes":[{"value":"/ The CFA is obtained by evaluating this `Reader` as a DWARF expression","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210822,"byte_end":210895,"line_start":2658,"line_end":2658,"column_start":5,"column_end":78}},{"value":"/ program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210900,"byte_end":210912,"line_start":2659,"line_end":2659,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":5175},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210545,"byte_end":210552,"line_start":2650,"line_end":2650,"column_start":10,"column_end":17},"name":"CfaRule","qualname":"::read::cfi::CfaRule","value":"pub enum CfaRule<R: Reader> {\n\n    /// The CFA is given offset from the given register's value.\n    RegisterAndOffset {\n        /// The register containing the base value.\n        register: Register,\n        /// The offset from the register's base value.\n        offset: i64,\n    },\n\n    /// The CFA is obtained by evaluating this `Reader` as a DWARF expression\n    /// program.\n    Expression(Expression<R>),\n}","parent":null,"children":[{"krate":0,"index":5177},{"krate":0,"index":5180}],"decl_id":null,"docs":" The canonical frame address (CFA) recovery rules.\n","sig":null,"attributes":[{"value":"/ The canonical frame address (CFA) recovery rules.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210443,"byte_end":210496,"line_start":2648,"line_end":2648,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5202},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211891,"byte_end":211900,"line_start":2693,"line_end":2693,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::read::cfi::RegisterRule::Undefined","value":"RegisterRule::Undefined","parent":{"krate":0,"index":5200},"children":[],"decl_id":null,"docs":" > A register that has this rule has no recoverable value in the previous\n > frame. (By convention, it is not preserved by a callee.)\n","sig":null,"attributes":[{"value":"/ > A register that has this rule has no recoverable value in the previous","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211743,"byte_end":211819,"line_start":2691,"line_end":2691,"column_start":5,"column_end":81}},{"value":"/ > frame. (By convention, it is not preserved by a callee.)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211824,"byte_end":211886,"line_start":2692,"line_end":2692,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5204},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212082,"byte_end":212091,"line_start":2698,"line_end":2698,"column_start":5,"column_end":14},"name":"SameValue","qualname":"::read::cfi::RegisterRule::SameValue","value":"RegisterRule::SameValue","parent":{"krate":0,"index":5200},"children":[],"decl_id":null,"docs":" > This register has not been modified from the previous frame. (By\n > convention, it is preserved by the callee, but the callee has not\n > modified it.)\n","sig":null,"attributes":[{"value":"/ > This register has not been modified from the previous frame. (By","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211907,"byte_end":211977,"line_start":2695,"line_end":2695,"column_start":5,"column_end":75}},{"value":"/ > convention, it is preserved by the callee, but the callee has not","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211982,"byte_end":212053,"line_start":2696,"line_end":2696,"column_start":5,"column_end":76}},{"value":"/ > modified it.)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212058,"byte_end":212077,"line_start":2697,"line_end":2697,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5206},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212243,"byte_end":212249,"line_start":2702,"line_end":2702,"column_start":5,"column_end":11},"name":"Offset","qualname":"::read::cfi::RegisterRule::Offset","value":"RegisterRule::Offset(i64)","parent":{"krate":0,"index":5200},"children":[],"decl_id":null,"docs":" \"The previous value of this register is saved at the address CFA+N where\n CFA is the current CFA value and N is a signed offset.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is saved at the address CFA+N where","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212098,"byte_end":212174,"line_start":2700,"line_end":2700,"column_start":5,"column_end":81}},{"value":"/ CFA is the current CFA value and N is a signed offset.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212179,"byte_end":212238,"line_start":2701,"line_end":2701,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5209},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212395,"byte_end":212404,"line_start":2706,"line_end":2706,"column_start":5,"column_end":14},"name":"ValOffset","qualname":"::read::cfi::RegisterRule::ValOffset","value":"RegisterRule::ValOffset(i64)","parent":{"krate":0,"index":5200},"children":[],"decl_id":null,"docs":" \"The previous value of this register is the value CFA+N where CFA is the\n current CFA value and N is a signed offset.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is the value CFA+N where CFA is the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212261,"byte_end":212337,"line_start":2704,"line_end":2704,"column_start":5,"column_end":81}},{"value":"/ current CFA value and N is a signed offset.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212342,"byte_end":212390,"line_start":2705,"line_end":2705,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5212},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212512,"byte_end":212520,"line_start":2710,"line_end":2710,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::cfi::RegisterRule::Register","value":"RegisterRule::Register(Register)","parent":{"krate":0,"index":5200},"children":[],"decl_id":null,"docs":" \"The previous value of this register is stored in another register\n numbered R.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is stored in another register","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212416,"byte_end":212486,"line_start":2708,"line_end":2708,"column_start":5,"column_end":75}},{"value":"/ numbered R.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212491,"byte_end":212507,"line_start":2709,"line_end":2709,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5215},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212661,"byte_end":212671,"line_start":2714,"line_end":2714,"column_start":5,"column_end":15},"name":"Expression","qualname":"::read::cfi::RegisterRule::Expression","value":"RegisterRule::Expression(Expression<R>)","parent":{"krate":0,"index":5200},"children":[],"decl_id":null,"docs":" \"The previous value of this register is located at the address produced\n by executing the DWARF expression.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is located at the address produced","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212537,"byte_end":212612,"line_start":2712,"line_end":2712,"column_start":5,"column_end":80}},{"value":"/ by executing the DWARF expression.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212617,"byte_end":212656,"line_start":2713,"line_end":2713,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5218},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212804,"byte_end":212817,"line_start":2718,"line_end":2718,"column_start":5,"column_end":18},"name":"ValExpression","qualname":"::read::cfi::RegisterRule::ValExpression","value":"RegisterRule::ValExpression(Expression<R>)","parent":{"krate":0,"index":5200},"children":[],"decl_id":null,"docs":" \"The previous value of this register is the value produced by executing\n the DWARF expression.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is the value produced by executing","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212693,"byte_end":212768,"line_start":2716,"line_end":2716,"column_start":5,"column_end":80}},{"value":"/ the DWARF expression.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212773,"byte_end":212799,"line_start":2717,"line_end":2717,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5221},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212920,"byte_end":212933,"line_start":2721,"line_end":2721,"column_start":5,"column_end":18},"name":"Architectural","qualname":"::read::cfi::RegisterRule::Architectural","value":"RegisterRule::Architectural","parent":{"krate":0,"index":5200},"children":[],"decl_id":null,"docs":" \"The rule is defined externally to this specification by the augmenter.\"\n","sig":null,"attributes":[{"value":"/ \"The rule is defined externally to this specification by the augmenter.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212839,"byte_end":212915,"line_start":2720,"line_end":2720,"column_start":5,"column_end":81}}]},{"kind":"Enum","id":{"krate":0,"index":5200},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211713,"byte_end":211725,"line_start":2690,"line_end":2690,"column_start":10,"column_end":22},"name":"RegisterRule","qualname":"::read::cfi::RegisterRule","value":"pub enum RegisterRule<R: Reader> {\n\n    /// > A register that has this rule has no recoverable value in the previous\n    /// > frame. (By convention, it is not preserved by a callee.)\n    Undefined,\n\n    /// > This register has not been modified from the previous frame. (By\n    /// > convention, it is preserved by the callee, but the callee has not\n    /// > modified it.)\n    SameValue,\n\n    /// \"The previous value of this register is saved at the address CFA+N where\n    /// CFA is the current CFA value and N is a signed offset.\"\n    Offset(i64),\n\n    /// \"The previous value of this register is the value CFA+N where CFA is the\n    /// current CFA value and N is a signed offset.\"\n    ValOffset(i64),\n\n    /// \"The previous value of this register is stored in another register\n    /// numbered R.\"\n    Register(Register),\n\n    /// \"The previous value of this register is located at the address produced\n    /// by executing the DWARF expression.\"\n    Expression(Expression<R>),\n\n    /// \"The previous value of this register is the value produced by executing\n    /// the DWARF expression.\"\n    ValExpression(Expression<R>),\n\n    /// \"The rule is defined externally to this specification by the augmenter.\"\n    Architectural,\n}","parent":null,"children":[{"krate":0,"index":5202},{"krate":0,"index":5204},{"krate":0,"index":5206},{"krate":0,"index":5209},{"krate":0,"index":5212},{"krate":0,"index":5215},{"krate":0,"index":5218},{"krate":0,"index":5221}],"decl_id":null,"docs":" An entry in the abstract CFI table that describes how to find the value of a\n register.","sig":null,"attributes":[{"value":"/ An entry in the abstract CFI table that describes how to find the value of a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211392,"byte_end":211472,"line_start":2683,"line_end":2683,"column_start":1,"column_end":81}},{"value":"/ register.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211473,"byte_end":211486,"line_start":2684,"line_end":2684,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211487,"byte_end":211490,"line_start":2685,"line_end":2685,"column_start":1,"column_end":4}},{"value":"/ \"The register columns contain rules that describe whether a given register","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211491,"byte_end":211569,"line_start":2686,"line_end":2686,"column_start":1,"column_end":79}},{"value":"/ has been saved and the rule to find the value for the register in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211570,"byte_end":211643,"line_start":2687,"line_end":2687,"column_start":1,"column_end":74}},{"value":"/ previous frame.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211644,"byte_end":211664,"line_start":2688,"line_end":2688,"column_start":1,"column_end":21}}]},{"kind":"StructVariant","id":{"krate":0,"index":5242},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213839,"byte_end":213845,"line_start":2746,"line_end":2746,"column_start":5,"column_end":11},"name":"SetLoc","qualname":"::read::cfi::CallFrameInstruction::SetLoc","value":"CallFrameInstruction::SetLoc { address }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_set_loc\n >\n > The DW_CFA_set_loc instruction takes a single operand that represents\n > a target address. The required action is to create a new table row\n > using the specified address as the location. All other values in the\n > new row are initially identical to the current row. The new location\n > value is always greater than the current one. If the segment_size\n > field of this FDE's CIE is non- zero, the initial location is preceded\n > by a segment selector of the given length.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_set_loc","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213276,"byte_end":213299,"line_start":2737,"line_end":2737,"column_start":5,"column_end":28}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213304,"byte_end":213309,"line_start":2738,"line_end":2738,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_set_loc instruction takes a single operand that represents","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213314,"byte_end":213389,"line_start":2739,"line_end":2739,"column_start":5,"column_end":80}},{"value":"/ > a target address. The required action is to create a new table row","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213394,"byte_end":213466,"line_start":2740,"line_end":2740,"column_start":5,"column_end":77}},{"value":"/ > using the specified address as the location. All other values in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213471,"byte_end":213545,"line_start":2741,"line_end":2741,"column_start":5,"column_end":79}},{"value":"/ > new row are initially identical to the current row. The new location","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213550,"byte_end":213624,"line_start":2742,"line_end":2742,"column_start":5,"column_end":79}},{"value":"/ > value is always greater than the current one. If the segment_size","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213629,"byte_end":213700,"line_start":2743,"line_end":2743,"column_start":5,"column_end":76}},{"value":"/ > field of this FDE's CIE is non- zero, the initial location is preceded","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213705,"byte_end":213781,"line_start":2744,"line_end":2744,"column_start":5,"column_end":81}},{"value":"/ > by a segment selector of the given length.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213786,"byte_end":213834,"line_start":2745,"line_end":2745,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":5244},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214522,"byte_end":214532,"line_start":2762,"line_end":2762,"column_start":5,"column_end":15},"name":"AdvanceLoc","qualname":"::read::cfi::CallFrameInstruction::AdvanceLoc","value":"CallFrameInstruction::AdvanceLoc { delta }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" The `AdvanceLoc` instruction is used for all of `DW_CFA_advance_loc` and\n `DW_CFA_advance_loc{1,2,4}`.","sig":null,"attributes":[{"value":"/ The `AdvanceLoc` instruction is used for all of `DW_CFA_advance_loc` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213914,"byte_end":213990,"line_start":2751,"line_end":2751,"column_start":5,"column_end":81}},{"value":"/ `DW_CFA_advance_loc{1,2,4}`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213995,"byte_end":214027,"line_start":2752,"line_end":2752,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214032,"byte_end":214035,"line_start":2753,"line_end":2753,"column_start":5,"column_end":8}},{"value":"/ > 2. DW_CFA_advance_loc","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214040,"byte_end":214067,"line_start":2754,"line_end":2754,"column_start":5,"column_end":32}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214072,"byte_end":214077,"line_start":2755,"line_end":2755,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_advance instruction takes a single operand (encoded with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214082,"byte_end":214155,"line_start":2756,"line_end":2756,"column_start":5,"column_end":78}},{"value":"/ > the opcode) that represents a constant delta. The required action is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214160,"byte_end":214234,"line_start":2757,"line_end":2757,"column_start":5,"column_end":79}},{"value":"/ > to create a new table row with a location value that is computed by","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214239,"byte_end":214312,"line_start":2758,"line_end":2758,"column_start":5,"column_end":78}},{"value":"/ > taking the current entry’s location value and adding the value of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214317,"byte_end":214390,"line_start":2759,"line_end":2759,"column_start":5,"column_end":76}},{"value":"/ > delta * code_alignment_factor. All other values in the new row are","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214395,"byte_end":214467,"line_start":2760,"line_end":2760,"column_start":5,"column_end":77}},{"value":"/ > initially identical to the current row.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214472,"byte_end":214517,"line_start":2761,"line_end":2761,"column_start":5,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":5246},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214962,"byte_end":214968,"line_start":2774,"line_end":2774,"column_start":5,"column_end":11},"name":"DefCfa","qualname":"::read::cfi::CallFrameInstruction::DefCfa","value":"CallFrameInstruction::DefCfa { register, offset }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_def_cfa\n >\n > The DW_CFA_def_cfa instruction takes two unsigned LEB128 operands\n > representing a register number and a (non-factored) offset. The\n > required action is to define the current CFA rule to use the provided\n > register and offset.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_def_cfa","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214663,"byte_end":214686,"line_start":2768,"line_end":2768,"column_start":5,"column_end":28}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214691,"byte_end":214696,"line_start":2769,"line_end":2769,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa instruction takes two unsigned LEB128 operands","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214701,"byte_end":214772,"line_start":2770,"line_end":2770,"column_start":5,"column_end":76}},{"value":"/ > representing a register number and a (non-factored) offset. The","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214777,"byte_end":214846,"line_start":2771,"line_end":2771,"column_start":5,"column_end":74}},{"value":"/ > required action is to define the current CFA rule to use the provided","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214851,"byte_end":214926,"line_start":2772,"line_end":2772,"column_start":5,"column_end":80}},{"value":"/ > register and offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":214931,"byte_end":214957,"line_start":2773,"line_end":2773,"column_start":5,"column_end":31}}]},{"kind":"StructVariant","id":{"krate":0,"index":5249},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215517,"byte_end":215525,"line_start":2788,"line_end":2788,"column_start":5,"column_end":13},"name":"DefCfaSf","qualname":"::read::cfi::CallFrameInstruction::DefCfaSf","value":"CallFrameInstruction::DefCfaSf { register, factored_offset }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 2. DW_CFA_def_cfa_sf\n >\n > The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned\n > LEB128 value representing a register number and a signed LEB128\n > factored offset. This instruction is identical to DW_CFA_def_cfa\n > except that the second operand is signed and factored. The resulting\n > offset is factored_offset * data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 2. DW_CFA_def_cfa_sf","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215111,"byte_end":215137,"line_start":2781,"line_end":2781,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215142,"byte_end":215147,"line_start":2782,"line_end":2782,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215152,"byte_end":215223,"line_start":2783,"line_end":2783,"column_start":5,"column_end":76}},{"value":"/ > LEB128 value representing a register number and a signed LEB128","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215228,"byte_end":215297,"line_start":2784,"line_end":2784,"column_start":5,"column_end":74}},{"value":"/ > factored offset. This instruction is identical to DW_CFA_def_cfa","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215302,"byte_end":215372,"line_start":2785,"line_end":2785,"column_start":5,"column_end":75}},{"value":"/ > except that the second operand is signed and factored. The resulting","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215377,"byte_end":215451,"line_start":2786,"line_end":2786,"column_start":5,"column_end":79}},{"value":"/ > offset is factored_offset * data_alignment_factor.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215456,"byte_end":215512,"line_start":2787,"line_end":2787,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":5252},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216088,"byte_end":216102,"line_start":2802,"line_end":2802,"column_start":5,"column_end":19},"name":"DefCfaRegister","qualname":"::read::cfi::CallFrameInstruction::DefCfaRegister","value":"CallFrameInstruction::DefCfaRegister { register }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 3. DW_CFA_def_cfa_register\n >\n > The DW_CFA_def_cfa_register instruction takes a single unsigned LEB128\n > operand representing a register number. The required action is to\n > define the current CFA rule to use the provided register (but to keep\n > the old offset). This operation is valid only if the current CFA rule\n > is defined to use a register and offset.\n","sig":null,"attributes":[{"value":"/ > 3. DW_CFA_def_cfa_register","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215673,"byte_end":215705,"line_start":2795,"line_end":2795,"column_start":5,"column_end":37}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215710,"byte_end":215715,"line_start":2796,"line_end":2796,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_register instruction takes a single unsigned LEB128","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215720,"byte_end":215796,"line_start":2797,"line_end":2797,"column_start":5,"column_end":81}},{"value":"/ > operand representing a register number. The required action is to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215801,"byte_end":215872,"line_start":2798,"line_end":2798,"column_start":5,"column_end":76}},{"value":"/ > define the current CFA rule to use the provided register (but to keep","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215877,"byte_end":215952,"line_start":2799,"line_end":2799,"column_start":5,"column_end":80}},{"value":"/ > the old offset). This operation is valid only if the current CFA rule","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":215957,"byte_end":216032,"line_start":2800,"line_end":2800,"column_start":5,"column_end":80}},{"value":"/ > is defined to use a register and offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216037,"byte_end":216083,"line_start":2801,"line_end":2801,"column_start":5,"column_end":51}}]},{"kind":"StructVariant","id":{"krate":0,"index":5254},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216604,"byte_end":216616,"line_start":2814,"line_end":2814,"column_start":5,"column_end":17},"name":"DefCfaOffset","qualname":"::read::cfi::CallFrameInstruction::DefCfaOffset","value":"CallFrameInstruction::DefCfaOffset { offset }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 4. DW_CFA_def_cfa_offset\n >\n > The DW_CFA_def_cfa_offset instruction takes a single unsigned LEB128\n > operand representing a (non-factored) offset. The required action is\n > to define the current CFA rule to use the provided offset (but to keep\n > the old register). This operation is valid only if the current CFA\n > rule is defined to use a register and offset.\n","sig":null,"attributes":[{"value":"/ > 4. DW_CFA_def_cfa_offset","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216187,"byte_end":216217,"line_start":2807,"line_end":2807,"column_start":5,"column_end":35}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216222,"byte_end":216227,"line_start":2808,"line_end":2808,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_offset instruction takes a single unsigned LEB128","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216232,"byte_end":216306,"line_start":2809,"line_end":2809,"column_start":5,"column_end":79}},{"value":"/ > operand representing a (non-factored) offset. The required action is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216311,"byte_end":216385,"line_start":2810,"line_end":2810,"column_start":5,"column_end":79}},{"value":"/ > to define the current CFA rule to use the provided offset (but to keep","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216390,"byte_end":216466,"line_start":2811,"line_end":2811,"column_start":5,"column_end":81}},{"value":"/ > the old register). This operation is valid only if the current CFA","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216471,"byte_end":216543,"line_start":2812,"line_end":2812,"column_start":5,"column_end":77}},{"value":"/ > rule is defined to use a register and offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216548,"byte_end":216599,"line_start":2813,"line_end":2813,"column_start":5,"column_end":56}}]},{"kind":"StructVariant","id":{"krate":0,"index":5256},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217162,"byte_end":217176,"line_start":2827,"line_end":2827,"column_start":5,"column_end":19},"name":"DefCfaOffsetSf","qualname":"::read::cfi::CallFrameInstruction::DefCfaOffsetSf","value":"CallFrameInstruction::DefCfaOffsetSf { factored_offset }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 5. DW_CFA_def_cfa_offset_sf\n >\n > The DW_CFA_def_cfa_offset_sf instruction takes a signed LEB128 operand\n > representing a factored offset. This instruction is identical to\n > DW_CFA_def_cfa_offset except that the operand is signed and\n > factored. The resulting offset is factored_offset *\n > data_alignment_factor. This operation is valid only if the current CFA\n > rule is defined to use a register and offset.\n","sig":null,"attributes":[{"value":"/ > 5. DW_CFA_def_cfa_offset_sf","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216689,"byte_end":216722,"line_start":2819,"line_end":2819,"column_start":5,"column_end":38}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216727,"byte_end":216732,"line_start":2820,"line_end":2820,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_offset_sf instruction takes a signed LEB128 operand","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216737,"byte_end":216813,"line_start":2821,"line_end":2821,"column_start":5,"column_end":81}},{"value":"/ > representing a factored offset. This instruction is identical to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216818,"byte_end":216888,"line_start":2822,"line_end":2822,"column_start":5,"column_end":75}},{"value":"/ > DW_CFA_def_cfa_offset except that the operand is signed and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216893,"byte_end":216958,"line_start":2823,"line_end":2823,"column_start":5,"column_end":70}},{"value":"/ > factored. The resulting offset is factored_offset *","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":216963,"byte_end":217020,"line_start":2824,"line_end":2824,"column_start":5,"column_end":62}},{"value":"/ > data_alignment_factor. This operation is valid only if the current CFA","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217025,"byte_end":217101,"line_start":2825,"line_end":2825,"column_start":5,"column_end":81}},{"value":"/ > rule is defined to use a register and offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217106,"byte_end":217157,"line_start":2826,"line_end":2826,"column_start":5,"column_end":56}}]},{"kind":"StructVariant","id":{"krate":0,"index":5258},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217579,"byte_end":217595,"line_start":2838,"line_end":2838,"column_start":5,"column_end":21},"name":"DefCfaExpression","qualname":"::read::cfi::CallFrameInstruction::DefCfaExpression","value":"CallFrameInstruction::DefCfaExpression { expression }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 6. DW_CFA_def_cfa_expression\n >\n > The DW_CFA_def_cfa_expression instruction takes a single operand\n > encoded as a DW_FORM_exprloc value representing a DWARF\n > expression. The required action is to establish that expression as the\n > means by which the current CFA is computed.\n","sig":null,"attributes":[{"value":"/ > 6. DW_CFA_def_cfa_expression","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217254,"byte_end":217288,"line_start":2832,"line_end":2832,"column_start":5,"column_end":39}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217293,"byte_end":217298,"line_start":2833,"line_end":2833,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_expression instruction takes a single operand","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217303,"byte_end":217373,"line_start":2834,"line_end":2834,"column_start":5,"column_end":75}},{"value":"/ > encoded as a DW_FORM_exprloc value representing a DWARF","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217378,"byte_end":217439,"line_start":2835,"line_end":2835,"column_start":5,"column_end":66}},{"value":"/ > expression. The required action is to establish that expression as the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217444,"byte_end":217520,"line_start":2836,"line_end":2836,"column_start":5,"column_end":81}},{"value":"/ > means by which the current CFA is computed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217525,"byte_end":217574,"line_start":2837,"line_end":2837,"column_start":5,"column_end":54}}]},{"kind":"StructVariant","id":{"krate":0,"index":5260},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217984,"byte_end":217993,"line_start":2849,"line_end":2849,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::read::cfi::CallFrameInstruction::Undefined","value":"CallFrameInstruction::Undefined { register }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_undefined\n >\n > The DW_CFA_undefined instruction takes a single unsigned LEB128\n > operand that represents a register number. The required action is to\n > set the rule for the specified register to “undefined.”\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_undefined","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217721,"byte_end":217746,"line_start":2844,"line_end":2844,"column_start":5,"column_end":30}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217751,"byte_end":217756,"line_start":2845,"line_end":2845,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_undefined instruction takes a single unsigned LEB128","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217761,"byte_end":217830,"line_start":2846,"line_end":2846,"column_start":5,"column_end":74}},{"value":"/ > operand that represents a register number. The required action is to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217835,"byte_end":217909,"line_start":2847,"line_end":2847,"column_start":5,"column_end":79}},{"value":"/ > set the rule for the specified register to “undefined.”","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":217914,"byte_end":217979,"line_start":2848,"line_end":2848,"column_start":5,"column_end":66}}]},{"kind":"StructVariant","id":{"krate":0,"index":5262},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218344,"byte_end":218353,"line_start":2859,"line_end":2859,"column_start":5,"column_end":14},"name":"SameValue","qualname":"::read::cfi::CallFrameInstruction::SameValue","value":"CallFrameInstruction::SameValue { register }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 2. DW_CFA_same_value\n >\n > The DW_CFA_same_value instruction takes a single unsigned LEB128\n > operand that represents a register number. The required action is to\n > set the rule for the specified register to “same value.”\n","sig":null,"attributes":[{"value":"/ > 2. DW_CFA_same_value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218078,"byte_end":218104,"line_start":2854,"line_end":2854,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218109,"byte_end":218114,"line_start":2855,"line_end":2855,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_same_value instruction takes a single unsigned LEB128","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218119,"byte_end":218189,"line_start":2856,"line_end":2856,"column_start":5,"column_end":75}},{"value":"/ > operand that represents a register number. The required action is to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218194,"byte_end":218268,"line_start":2857,"line_end":2857,"column_start":5,"column_end":79}},{"value":"/ > set the rule for the specified register to “same value.”","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218273,"byte_end":218339,"line_start":2858,"line_end":2858,"column_start":5,"column_end":67}}]},{"kind":"StructVariant","id":{"krate":0,"index":5264},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218975,"byte_end":218981,"line_start":2874,"line_end":2874,"column_start":5,"column_end":11},"name":"Offset","qualname":"::read::cfi::CallFrameInstruction::Offset","value":"CallFrameInstruction::Offset { register, factored_offset }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" The `Offset` instruction represents both `DW_CFA_offset` and\n `DW_CFA_offset_extended`.","sig":null,"attributes":[{"value":"/ The `Offset` instruction represents both `DW_CFA_offset` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218438,"byte_end":218502,"line_start":2864,"line_end":2864,"column_start":5,"column_end":69}},{"value":"/ `DW_CFA_offset_extended`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218507,"byte_end":218536,"line_start":2865,"line_end":2865,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218541,"byte_end":218544,"line_start":2866,"line_end":2866,"column_start":5,"column_end":8}},{"value":"/ > 3. DW_CFA_offset","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218549,"byte_end":218571,"line_start":2867,"line_end":2867,"column_start":5,"column_end":27}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218576,"byte_end":218581,"line_start":2868,"line_end":2868,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_offset instruction takes two operands: a register number","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218586,"byte_end":218659,"line_start":2869,"line_end":2869,"column_start":5,"column_end":78}},{"value":"/ > (encoded with the opcode) and an unsigned LEB128 constant representing","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218664,"byte_end":218740,"line_start":2870,"line_end":2870,"column_start":5,"column_end":81}},{"value":"/ > a factored offset. The required action is to change the rule for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218745,"byte_end":218819,"line_start":2871,"line_end":2871,"column_start":5,"column_end":79}},{"value":"/ > register indicated by the register number to be an offset(N) rule","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218824,"byte_end":218895,"line_start":2872,"line_end":2872,"column_start":5,"column_end":76}},{"value":"/ > where the value of N is factored offset * data_alignment_factor.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":218900,"byte_end":218970,"line_start":2873,"line_end":2873,"column_start":5,"column_end":75}}]},{"kind":"StructVariant","id":{"krate":0,"index":5267},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219569,"byte_end":219585,"line_start":2889,"line_end":2889,"column_start":5,"column_end":21},"name":"OffsetExtendedSf","qualname":"::read::cfi::CallFrameInstruction::OffsetExtendedSf","value":"CallFrameInstruction::OffsetExtendedSf { register, factored_offset }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 5. DW_CFA_offset_extended_sf\n >\n > The DW_CFA_offset_extended_sf instruction takes two operands: an\n > unsigned LEB128 value representing a register number and a signed\n > LEB128 factored offset. This instruction is identical to\n > DW_CFA_offset_extended except that the second operand is signed and\n > factored. The resulting offset is factored_offset *\n > data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 5. DW_CFA_offset_extended_sf","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219129,"byte_end":219163,"line_start":2881,"line_end":2881,"column_start":5,"column_end":39}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219168,"byte_end":219173,"line_start":2882,"line_end":2882,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_offset_extended_sf instruction takes two operands: an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219178,"byte_end":219248,"line_start":2883,"line_end":2883,"column_start":5,"column_end":75}},{"value":"/ > unsigned LEB128 value representing a register number and a signed","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219253,"byte_end":219324,"line_start":2884,"line_end":2884,"column_start":5,"column_end":76}},{"value":"/ > LEB128 factored offset. This instruction is identical to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219329,"byte_end":219391,"line_start":2885,"line_end":2885,"column_start":5,"column_end":67}},{"value":"/ > DW_CFA_offset_extended except that the second operand is signed and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219396,"byte_end":219469,"line_start":2886,"line_end":2886,"column_start":5,"column_end":78}},{"value":"/ > factored. The resulting offset is factored_offset *","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219474,"byte_end":219531,"line_start":2887,"line_end":2887,"column_start":5,"column_end":62}},{"value":"/ > data_alignment_factor.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219536,"byte_end":219564,"line_start":2888,"line_end":2888,"column_start":5,"column_end":33}}]},{"kind":"StructVariant","id":{"krate":0,"index":5270},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220131,"byte_end":220140,"line_start":2903,"line_end":2903,"column_start":5,"column_end":14},"name":"ValOffset","qualname":"::read::cfi::CallFrameInstruction::ValOffset","value":"CallFrameInstruction::ValOffset { register, factored_offset }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 6. DW_CFA_val_offset\n >\n > The DW_CFA_val_offset instruction takes two unsigned LEB128 operands\n > representing a register number and a factored offset. The required\n > action is to change the rule for the register indicated by the\n > register number to be a val_offset(N) rule where the value of N is\n > factored_offset * data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 6. DW_CFA_val_offset","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219733,"byte_end":219759,"line_start":2896,"line_end":2896,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219764,"byte_end":219769,"line_start":2897,"line_end":2897,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_val_offset instruction takes two unsigned LEB128 operands","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219774,"byte_end":219848,"line_start":2898,"line_end":2898,"column_start":5,"column_end":79}},{"value":"/ > representing a register number and a factored offset. The required","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219853,"byte_end":219925,"line_start":2899,"line_end":2899,"column_start":5,"column_end":77}},{"value":"/ > action is to change the rule for the register indicated by the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":219930,"byte_end":219998,"line_start":2900,"line_end":2900,"column_start":5,"column_end":73}},{"value":"/ > register number to be a val_offset(N) rule where the value of N is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220003,"byte_end":220075,"line_start":2901,"line_end":2901,"column_start":5,"column_end":77}},{"value":"/ > factored_offset * data_alignment_factor.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220080,"byte_end":220126,"line_start":2902,"line_end":2902,"column_start":5,"column_end":51}}]},{"kind":"StructVariant","id":{"krate":0,"index":5273},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220703,"byte_end":220714,"line_start":2917,"line_end":2917,"column_start":5,"column_end":16},"name":"ValOffsetSf","qualname":"::read::cfi::CallFrameInstruction::ValOffsetSf","value":"CallFrameInstruction::ValOffsetSf { register, factored_offset }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 7. DW_CFA_val_offset_sf\n >\n > The DW_CFA_val_offset_sf instruction takes two operands: an unsigned\n > LEB128 value representing a register number and a signed LEB128\n > factored offset. This instruction is identical to DW_CFA_val_offset\n > except that the second operand is signed and factored. The resulting\n > offset is factored_offset * data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 7. DW_CFA_val_offset_sf","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220288,"byte_end":220317,"line_start":2910,"line_end":2910,"column_start":5,"column_end":34}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220322,"byte_end":220327,"line_start":2911,"line_end":2911,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_val_offset_sf instruction takes two operands: an unsigned","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220332,"byte_end":220406,"line_start":2912,"line_end":2912,"column_start":5,"column_end":79}},{"value":"/ > LEB128 value representing a register number and a signed LEB128","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220411,"byte_end":220480,"line_start":2913,"line_end":2913,"column_start":5,"column_end":74}},{"value":"/ > factored offset. This instruction is identical to DW_CFA_val_offset","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220485,"byte_end":220558,"line_start":2914,"line_end":2914,"column_start":5,"column_end":78}},{"value":"/ > except that the second operand is signed and factored. The resulting","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220563,"byte_end":220637,"line_start":2915,"line_end":2915,"column_start":5,"column_end":79}},{"value":"/ > offset is factored_offset * data_alignment_factor.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220642,"byte_end":220698,"line_start":2916,"line_end":2916,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":5276},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221151,"byte_end":221159,"line_start":2930,"line_end":2930,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::cfi::CallFrameInstruction::Register","value":"CallFrameInstruction::Register { dest_register, src_register }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 8. DW_CFA_register\n >\n > The DW_CFA_register instruction takes two unsigned LEB128 operands\n > representing register numbers. The required action is to set the rule\n > for the first register to be register(R) where R is the second\n > register.\n","sig":null,"attributes":[{"value":"/ > 8. DW_CFA_register","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220862,"byte_end":220886,"line_start":2924,"line_end":2924,"column_start":5,"column_end":29}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220891,"byte_end":220896,"line_start":2925,"line_end":2925,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_register instruction takes two unsigned LEB128 operands","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220901,"byte_end":220973,"line_start":2926,"line_end":2926,"column_start":5,"column_end":77}},{"value":"/ > representing register numbers. The required action is to set the rule","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":220978,"byte_end":221053,"line_start":2927,"line_end":2927,"column_start":5,"column_end":80}},{"value":"/ > for the first register to be register(R) where R is the second","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221058,"byte_end":221126,"line_start":2928,"line_end":2928,"column_start":5,"column_end":73}},{"value":"/ > register.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221131,"byte_end":221146,"line_start":2929,"line_end":2929,"column_start":5,"column_end":20}}]},{"kind":"StructVariant","id":{"krate":0,"index":5279},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221996,"byte_end":222006,"line_start":2947,"line_end":2947,"column_start":5,"column_end":15},"name":"Expression","qualname":"::read::cfi::CallFrameInstruction::Expression","value":"CallFrameInstruction::Expression { register, expression }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 9. DW_CFA_expression\n >\n > The DW_CFA_expression instruction takes two operands: an unsigned\n > LEB128 value representing a register number, and a DW_FORM_block value\n > representing a DWARF expression. The required action is to change the\n > rule for the register indicated by the register number to be an\n > expression(E) rule where E is the DWARF expression. That is, the DWARF\n > expression computes the address. The value of the CFA is pushed on the\n > DWARF evaluation stack prior to execution of the DWARF expression.\n","sig":null,"attributes":[{"value":"/ > 9. DW_CFA_expression","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221405,"byte_end":221431,"line_start":2938,"line_end":2938,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221436,"byte_end":221441,"line_start":2939,"line_end":2939,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_expression instruction takes two operands: an unsigned","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221446,"byte_end":221517,"line_start":2940,"line_end":2940,"column_start":5,"column_end":76}},{"value":"/ > LEB128 value representing a register number, and a DW_FORM_block value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221522,"byte_end":221598,"line_start":2941,"line_end":2941,"column_start":5,"column_end":81}},{"value":"/ > representing a DWARF expression. The required action is to change the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221603,"byte_end":221678,"line_start":2942,"line_end":2942,"column_start":5,"column_end":80}},{"value":"/ > rule for the register indicated by the register number to be an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221683,"byte_end":221752,"line_start":2943,"line_end":2943,"column_start":5,"column_end":74}},{"value":"/ > expression(E) rule where E is the DWARF expression. That is, the DWARF","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221757,"byte_end":221833,"line_start":2944,"line_end":2944,"column_start":5,"column_end":81}},{"value":"/ > expression computes the address. The value of the CFA is pushed on the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221838,"byte_end":221914,"line_start":2945,"line_end":2945,"column_start":5,"column_end":81}},{"value":"/ > DWARF evaluation stack prior to execution of the DWARF expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":221919,"byte_end":221991,"line_start":2946,"line_end":2946,"column_start":5,"column_end":77}}]},{"kind":"StructVariant","id":{"krate":0,"index":5282},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222793,"byte_end":222806,"line_start":2964,"line_end":2964,"column_start":5,"column_end":18},"name":"ValExpression","qualname":"::read::cfi::CallFrameInstruction::ValExpression","value":"CallFrameInstruction::ValExpression { register, expression }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 10. DW_CFA_val_expression\n >\n > The DW_CFA_val_expression instruction takes two operands: an unsigned\n > LEB128 value representing a register number, and a DW_FORM_block value\n > representing a DWARF expression. The required action is to change the\n > rule for the register indicated by the register number to be a\n > val_expression(E) rule where E is the DWARF expression. That is, the\n > DWARF expression computes the value of the given register. The value\n > of the CFA is pushed on the DWARF evaluation stack prior to execution\n > of the DWARF expression.\n","sig":null,"attributes":[{"value":"/ > 10. DW_CFA_val_expression","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222160,"byte_end":222191,"line_start":2954,"line_end":2954,"column_start":5,"column_end":36}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222196,"byte_end":222201,"line_start":2955,"line_end":2955,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_val_expression instruction takes two operands: an unsigned","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222206,"byte_end":222281,"line_start":2956,"line_end":2956,"column_start":5,"column_end":80}},{"value":"/ > LEB128 value representing a register number, and a DW_FORM_block value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222286,"byte_end":222362,"line_start":2957,"line_end":2957,"column_start":5,"column_end":81}},{"value":"/ > representing a DWARF expression. The required action is to change the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222367,"byte_end":222442,"line_start":2958,"line_end":2958,"column_start":5,"column_end":80}},{"value":"/ > rule for the register indicated by the register number to be a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222447,"byte_end":222515,"line_start":2959,"line_end":2959,"column_start":5,"column_end":73}},{"value":"/ > val_expression(E) rule where E is the DWARF expression. That is, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222520,"byte_end":222594,"line_start":2960,"line_end":2960,"column_start":5,"column_end":79}},{"value":"/ > DWARF expression computes the value of the given register. The value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222599,"byte_end":222673,"line_start":2961,"line_end":2961,"column_start":5,"column_end":79}},{"value":"/ > of the CFA is pushed on the DWARF evaluation stack prior to execution","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222678,"byte_end":222753,"line_start":2962,"line_end":2962,"column_start":5,"column_end":80}},{"value":"/ > of the DWARF expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222758,"byte_end":222788,"line_start":2963,"line_end":2963,"column_start":5,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":5285},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223401,"byte_end":223408,"line_start":2980,"line_end":2980,"column_start":5,"column_end":12},"name":"Restore","qualname":"::read::cfi::CallFrameInstruction::Restore","value":"CallFrameInstruction::Restore { register }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" The `Restore` instruction represents both `DW_CFA_restore` and\n `DW_CFA_restore_extended`.","sig":null,"attributes":[{"value":"/ The `Restore` instruction represents both `DW_CFA_restore` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":222960,"byte_end":223026,"line_start":2971,"line_end":2971,"column_start":5,"column_end":71}},{"value":"/ `DW_CFA_restore_extended`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223031,"byte_end":223061,"line_start":2972,"line_end":2972,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223066,"byte_end":223069,"line_start":2973,"line_end":2973,"column_start":5,"column_end":8}},{"value":"/ > 11. DW_CFA_restore","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223074,"byte_end":223098,"line_start":2974,"line_end":2974,"column_start":5,"column_end":29}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223103,"byte_end":223108,"line_start":2975,"line_end":2975,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_restore instruction takes a single operand (encoded with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223113,"byte_end":223186,"line_start":2976,"line_end":2976,"column_start":5,"column_end":78}},{"value":"/ > the opcode) that represents a register number. The required action is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223191,"byte_end":223266,"line_start":2977,"line_end":2977,"column_start":5,"column_end":80}},{"value":"/ > to change the rule for the indicated register to the rule assigned it","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223271,"byte_end":223346,"line_start":2978,"line_end":2978,"column_start":5,"column_end":80}},{"value":"/ > by the initial_instructions in the CIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223351,"byte_end":223396,"line_start":2979,"line_end":2979,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5287},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223750,"byte_end":223763,"line_start":2991,"line_end":2991,"column_start":5,"column_end":18},"name":"RememberState","qualname":"::read::cfi::CallFrameInstruction::RememberState","value":"CallFrameInstruction::RememberState","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_remember_state\n >\n > The DW_CFA_remember_state instruction takes no operands. The required\n > action is to push the set of rules for every register onto an implicit\n > stack.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_remember_state","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223527,"byte_end":223557,"line_start":2986,"line_end":2986,"column_start":5,"column_end":35}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223562,"byte_end":223567,"line_start":2987,"line_end":2987,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_remember_state instruction takes no operands. The required","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223572,"byte_end":223647,"line_start":2988,"line_end":2988,"column_start":5,"column_end":80}},{"value":"/ > action is to push the set of rules for every register onto an implicit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223652,"byte_end":223728,"line_start":2989,"line_end":2989,"column_start":5,"column_end":81}},{"value":"/ > stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223733,"byte_end":223745,"line_start":2990,"line_end":2990,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5289},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224005,"byte_end":224017,"line_start":2998,"line_end":2998,"column_start":5,"column_end":17},"name":"RestoreState","qualname":"::read::cfi::CallFrameInstruction::RestoreState","value":"CallFrameInstruction::RestoreState","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 2. DW_CFA_restore_state\n >\n > The DW_CFA_restore_state instruction takes no operands. The required\n > action is to pop the set of rules off the implicit stack and place\n > them in the current row.\n","sig":null,"attributes":[{"value":"/ > 2. DW_CFA_restore_state","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223770,"byte_end":223799,"line_start":2993,"line_end":2993,"column_start":5,"column_end":34}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223804,"byte_end":223809,"line_start":2994,"line_end":2994,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_restore_state instruction takes no operands. The required","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223814,"byte_end":223888,"line_start":2995,"line_end":2995,"column_start":5,"column_end":79}},{"value":"/ > action is to pop the set of rules off the implicit stack and place","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223893,"byte_end":223965,"line_start":2996,"line_end":2996,"column_start":5,"column_end":77}},{"value":"/ > them in the current row.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":223970,"byte_end":224000,"line_start":2997,"line_end":2997,"column_start":5,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":5291},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224335,"byte_end":224343,"line_start":3007,"line_end":3007,"column_start":5,"column_end":13},"name":"ArgsSize","qualname":"::read::cfi::CallFrameInstruction::ArgsSize","value":"CallFrameInstruction::ArgsSize { size }","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > DW_CFA_GNU_args_size\n >\n > GNU Extension\n >\n > The DW_CFA_GNU_args_size instruction takes an unsigned LEB128 operand\n > representing an argument size. This instruction specifies the total of\n > the size of the arguments which have been pushed onto the stack.\n","sig":null,"attributes":[{"value":"/ > DW_CFA_GNU_args_size","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224024,"byte_end":224050,"line_start":3000,"line_end":3000,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224055,"byte_end":224060,"line_start":3001,"line_end":3001,"column_start":5,"column_end":10}},{"value":"/ > GNU Extension","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224065,"byte_end":224084,"line_start":3002,"line_end":3002,"column_start":5,"column_end":24}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224089,"byte_end":224094,"line_start":3003,"line_end":3003,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_GNU_args_size instruction takes an unsigned LEB128 operand","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224099,"byte_end":224174,"line_start":3004,"line_end":3004,"column_start":5,"column_end":80}},{"value":"/ > representing an argument size. This instruction specifies the total of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224179,"byte_end":224255,"line_start":3005,"line_end":3005,"column_start":5,"column_end":81}},{"value":"/ > the size of the arguments which have been pushed onto the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224260,"byte_end":224330,"line_start":3006,"line_end":3006,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5293},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224674,"byte_end":224677,"line_start":3017,"line_end":3017,"column_start":5,"column_end":8},"name":"Nop","qualname":"::read::cfi::CallFrameInstruction::Nop","value":"CallFrameInstruction::Nop","parent":{"krate":0,"index":5240},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_nop\n >\n > The DW_CFA_nop instruction has no operands and no required actions. It\n > is used as padding to make a CIE or FDE an appropriate size.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_nop","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224488,"byte_end":224507,"line_start":3013,"line_end":3013,"column_start":5,"column_end":24}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224512,"byte_end":224517,"line_start":3014,"line_end":3014,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_nop instruction has no operands and no required actions. It","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224522,"byte_end":224598,"line_start":3015,"line_end":3015,"column_start":5,"column_end":81}},{"value":"/ > is used as padding to make a CIE or FDE an appropriate size.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224603,"byte_end":224669,"line_start":3016,"line_end":3016,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":5240},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213202,"byte_end":213222,"line_start":2735,"line_end":2735,"column_start":10,"column_end":30},"name":"CallFrameInstruction","qualname":"::read::cfi::CallFrameInstruction","value":"pub enum CallFrameInstruction<R: Reader> {\n\n    /// > 1. DW_CFA_set_loc\n    /// >\n    /// > The DW_CFA_set_loc instruction takes a single operand that represents\n    /// > a target address. The required action is to create a new table row\n    /// > using the specified address as the location. All other values in the\n    /// > new row are initially identical to the current row. The new location\n    /// > value is always greater than the current one. If the segment_size\n    /// > field of this FDE's CIE is non- zero, the initial location is preceded\n    /// > by a segment selector of the given length.\n    SetLoc {\n        /// The target address.\n        address: u64,\n    },\n\n    /// The `AdvanceLoc` instruction is used for all of `DW_CFA_advance_loc` and\n    /// `DW_CFA_advance_loc{1,2,4}`.\n    ///\n    /// > 2. DW_CFA_advance_loc\n    /// >\n    /// > The DW_CFA_advance instruction takes a single operand (encoded with\n    /// > the opcode) that represents a constant delta. The required action is\n    /// > to create a new table row with a location value that is computed by\n    /// > taking the current entry’s location value and adding the value of\n    /// > delta * code_alignment_factor. All other values in the new row are\n    /// > initially identical to the current row.\n    AdvanceLoc {\n        /// The delta to be added to the current address.\n        delta: u32,\n    },\n\n    /// > 1. DW_CFA_def_cfa\n    /// >\n    /// > The DW_CFA_def_cfa instruction takes two unsigned LEB128 operands\n    /// > representing a register number and a (non-factored) offset. The\n    /// > required action is to define the current CFA rule to use the provided\n    /// > register and offset.\n    DefCfa {\n        /// The target register's number.\n        register: Register,\n        /// The non-factored offset.\n        offset: u64,\n    },\n\n    /// > 2. DW_CFA_def_cfa_sf\n    /// >\n    /// > The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned\n    /// > LEB128 value representing a register number and a signed LEB128\n    /// > factored offset. This instruction is identical to DW_CFA_def_cfa\n    /// > except that the second operand is signed and factored. The resulting\n    /// > offset is factored_offset * data_alignment_factor.\n    DefCfaSf {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: i64,\n    },\n\n    /// > 3. DW_CFA_def_cfa_register\n    /// >\n    /// > The DW_CFA_def_cfa_register instruction takes a single unsigned LEB128\n    /// > operand representing a register number. The required action is to\n    /// > define the current CFA rule to use the provided register (but to keep\n    /// > the old offset). This operation is valid only if the current CFA rule\n    /// > is defined to use a register and offset.\n    DefCfaRegister {\n        /// The target register's number.\n        register: Register,\n    },\n\n    /// > 4. DW_CFA_def_cfa_offset\n    /// >\n    /// > The DW_CFA_def_cfa_offset instruction takes a single unsigned LEB128\n    /// > operand representing a (non-factored) offset. The required action is\n    /// > to define the current CFA rule to use the provided offset (but to keep\n    /// > the old register). This operation is valid only if the current CFA\n    /// > rule is defined to use a register and offset.\n    DefCfaOffset {\n        /// The non-factored offset.\n        offset: u64,\n    },\n\n    /// > 5. DW_CFA_def_cfa_offset_sf\n    /// >\n    /// > The DW_CFA_def_cfa_offset_sf instruction takes a signed LEB128 operand\n    /// > representing a factored offset. This instruction is identical to\n    /// > DW_CFA_def_cfa_offset except that the operand is signed and\n    /// > factored. The resulting offset is factored_offset *\n    /// > data_alignment_factor. This operation is valid only if the current CFA\n    /// > rule is defined to use a register and offset.\n    DefCfaOffsetSf {\n        /// The factored offset.\n        factored_offset: i64,\n    },\n\n    /// > 6. DW_CFA_def_cfa_expression\n    /// >\n    /// > The DW_CFA_def_cfa_expression instruction takes a single operand\n    /// > encoded as a DW_FORM_exprloc value representing a DWARF\n    /// > expression. The required action is to establish that expression as the\n    /// > means by which the current CFA is computed.\n    DefCfaExpression {\n        /// The DWARF expression.\n        expression: Expression<R>,\n    },\n\n    /// > 1. DW_CFA_undefined\n    /// >\n    /// > The DW_CFA_undefined instruction takes a single unsigned LEB128\n    /// > operand that represents a register number. The required action is to\n    /// > set the rule for the specified register to “undefined.”\n    Undefined {\n        /// The target register's number.\n        register: Register,\n    },\n\n    /// > 2. DW_CFA_same_value\n    /// >\n    /// > The DW_CFA_same_value instruction takes a single unsigned LEB128\n    /// > operand that represents a register number. The required action is to\n    /// > set the rule for the specified register to “same value.”\n    SameValue {\n        /// The target register's number.\n        register: Register,\n    },\n\n    /// The `Offset` instruction represents both `DW_CFA_offset` and\n    /// `DW_CFA_offset_extended`.\n    ///\n    /// > 3. DW_CFA_offset\n    /// >\n    /// > The DW_CFA_offset instruction takes two operands: a register number\n    /// > (encoded with the opcode) and an unsigned LEB128 constant representing\n    /// > a factored offset. The required action is to change the rule for the\n    /// > register indicated by the register number to be an offset(N) rule\n    /// > where the value of N is factored offset * data_alignment_factor.\n    Offset {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: u64,\n    },\n\n    /// > 5. DW_CFA_offset_extended_sf\n    /// >\n    /// > The DW_CFA_offset_extended_sf instruction takes two operands: an\n    /// > unsigned LEB128 value representing a register number and a signed\n    /// > LEB128 factored offset. This instruction is identical to\n    /// > DW_CFA_offset_extended except that the second operand is signed and\n    /// > factored. The resulting offset is factored_offset *\n    /// > data_alignment_factor.\n    OffsetExtendedSf {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: i64,\n    },\n\n    /// > 6. DW_CFA_val_offset\n    /// >\n    /// > The DW_CFA_val_offset instruction takes two unsigned LEB128 operands\n    /// > representing a register number and a factored offset. The required\n    /// > action is to change the rule for the register indicated by the\n    /// > register number to be a val_offset(N) rule where the value of N is\n    /// > factored_offset * data_alignment_factor.\n    ValOffset {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: u64,\n    },\n\n    /// > 7. DW_CFA_val_offset_sf\n    /// >\n    /// > The DW_CFA_val_offset_sf instruction takes two operands: an unsigned\n    /// > LEB128 value representing a register number and a signed LEB128\n    /// > factored offset. This instruction is identical to DW_CFA_val_offset\n    /// > except that the second operand is signed and factored. The resulting\n    /// > offset is factored_offset * data_alignment_factor.\n    ValOffsetSf {\n        /// The target register's number.\n        register: Register,\n        /// The factored offset.\n        factored_offset: i64,\n    },\n\n    /// > 8. DW_CFA_register\n    /// >\n    /// > The DW_CFA_register instruction takes two unsigned LEB128 operands\n    /// > representing register numbers. The required action is to set the rule\n    /// > for the first register to be register(R) where R is the second\n    /// > register.\n    Register {\n        /// The number of the register whose rule is being changed.\n        dest_register: Register,\n        /// The number of the register where the other register's value can be\n        /// found.\n        src_register: Register,\n    },\n\n    /// > 9. DW_CFA_expression\n    /// >\n    /// > The DW_CFA_expression instruction takes two operands: an unsigned\n    /// > LEB128 value representing a register number, and a DW_FORM_block value\n    /// > representing a DWARF expression. The required action is to change the\n    /// > rule for the register indicated by the register number to be an\n    /// > expression(E) rule where E is the DWARF expression. That is, the DWARF\n    /// > expression computes the address. The value of the CFA is pushed on the\n    /// > DWARF evaluation stack prior to execution of the DWARF expression.\n    Expression {\n        /// The target register's number.\n        register: Register,\n        /// The DWARF expression.\n        expression: Expression<R>,\n    },\n\n    /// > 10. DW_CFA_val_expression\n    /// >\n    /// > The DW_CFA_val_expression instruction takes two operands: an unsigned\n    /// > LEB128 value representing a register number, and a DW_FORM_block value\n    /// > representing a DWARF expression. The required action is to change the\n    /// > rule for the register indicated by the register number to be a\n    /// > val_expression(E) rule where E is the DWARF expression. That is, the\n    /// > DWARF expression computes the value of the given register. The value\n    /// > of the CFA is pushed on the DWARF evaluation stack prior to execution\n    /// > of the DWARF expression.\n    ValExpression {\n        /// The target register's number.\n        register: Register,\n        /// The DWARF expression.\n        expression: Expression<R>,\n    },\n\n    /// The `Restore` instruction represents both `DW_CFA_restore` and\n    /// `DW_CFA_restore_extended`.\n    ///\n    /// > 11. DW_CFA_restore\n    /// >\n    /// > The DW_CFA_restore instruction takes a single operand (encoded with\n    /// > the opcode) that represents a register number. The required action is\n    /// > to change the rule for the indicated register to the rule assigned it\n    /// > by the initial_instructions in the CIE.\n    Restore {\n        /// The register to be reset.\n        register: Register,\n    },\n\n    /// > 1. DW_CFA_remember_state\n    /// >\n    /// > The DW_CFA_remember_state instruction takes no operands. The required\n    /// > action is to push the set of rules for every register onto an implicit\n    /// > stack.\n    RememberState,\n\n    /// > 2. DW_CFA_restore_state\n    /// >\n    /// > The DW_CFA_restore_state instruction takes no operands. The required\n    /// > action is to pop the set of rules off the implicit stack and place\n    /// > them in the current row.\n    RestoreState,\n\n    /// > DW_CFA_GNU_args_size\n    /// >\n    /// > GNU Extension\n    /// >\n    /// > The DW_CFA_GNU_args_size instruction takes an unsigned LEB128 operand\n    /// > representing an argument size. This instruction specifies the total of\n    /// > the size of the arguments which have been pushed onto the stack.\n    ArgsSize {\n        /// The size of the arguments which have been pushed onto the stack\n        size: u64,\n    },\n\n    /// > 1. DW_CFA_nop\n    /// >\n    /// > The DW_CFA_nop instruction has no operands and no required actions. It\n    /// > is used as padding to make a CIE or FDE an appropriate size.\n    Nop,\n}","parent":null,"children":[{"krate":0,"index":5242},{"krate":0,"index":5244},{"krate":0,"index":5246},{"krate":0,"index":5249},{"krate":0,"index":5252},{"krate":0,"index":5254},{"krate":0,"index":5256},{"krate":0,"index":5258},{"krate":0,"index":5260},{"krate":0,"index":5262},{"krate":0,"index":5264},{"krate":0,"index":5267},{"krate":0,"index":5270},{"krate":0,"index":5273},{"krate":0,"index":5276},{"krate":0,"index":5279},{"krate":0,"index":5282},{"krate":0,"index":5285},{"krate":0,"index":5287},{"krate":0,"index":5289},{"krate":0,"index":5291},{"krate":0,"index":5293}],"decl_id":null,"docs":" A parsed call frame instruction.\n","sig":null,"attributes":[{"value":"/ A parsed call frame instruction.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":213117,"byte_end":213153,"line_start":2733,"line_end":2733,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5312},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":232789,"byte_end":232813,"line_start":3229,"line_end":3229,"column_start":12,"column_end":36},"name":"CallFrameInstructionIter","qualname":"::read::cfi::CallFrameInstructionIter","value":"CallFrameInstructionIter {  }","parent":null,"children":[{"krate":0,"index":5315},{"krate":0,"index":5316},{"krate":0,"index":5317}],"decl_id":null,"docs":" A lazy iterator parsing call frame instructions.","sig":null,"attributes":[{"value":"/ A lazy iterator parsing call frame instructions.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":232608,"byte_end":232660,"line_start":3224,"line_end":3224,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":232661,"byte_end":232664,"line_start":3225,"line_end":3225,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":232665,"byte_end":232686,"line_start":3226,"line_end":3226,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":232687,"byte_end":232753,"line_start":3227,"line_end":3227,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":233059,"byte_end":233063,"line_start":3237,"line_end":3237,"column_start":12,"column_end":16},"name":"next","qualname":"<CallFrameInstructionIter>::next","value":"pub fn next(&mut Self) -> Result<Option<CallFrameInstruction<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the next call frame instruction.\n","sig":null,"attributes":[{"value":"/ Parse the next call frame instruction.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":233005,"byte_end":233047,"line_start":3236,"line_end":3236,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5327},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234297,"byte_end":234303,"line_start":3281,"line_end":3281,"column_start":5,"column_end":11},"name":"Direct","qualname":"::read::cfi::Pointer::Direct","value":"Pointer::Direct(u64)","parent":{"krate":0,"index":5326},"children":[],"decl_id":null,"docs":" This value is the decoded pointer value.\n","sig":null,"attributes":[{"value":"/ This value is the decoded pointer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234248,"byte_end":234292,"line_start":3280,"line_end":3280,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5330},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234612,"byte_end":234620,"line_start":3289,"line_end":3289,"column_start":5,"column_end":13},"name":"Indirect","qualname":"::read::cfi::Pointer::Indirect","value":"Pointer::Indirect(u64)","parent":{"krate":0,"index":5326},"children":[],"decl_id":null,"docs":" This value is *not* the pointer value, but points to the address of\n where the real pointer value lives. In other words, deref this pointer\n to get the real pointer value.","sig":null,"attributes":[{"value":"/ This value is *not* the pointer value, but points to the address of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234315,"byte_end":234386,"line_start":3283,"line_end":3283,"column_start":5,"column_end":76}},{"value":"/ where the real pointer value lives. In other words, deref this pointer","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234391,"byte_end":234465,"line_start":3284,"line_end":3284,"column_start":5,"column_end":79}},{"value":"/ to get the real pointer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234470,"byte_end":234504,"line_start":3285,"line_end":3285,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234509,"byte_end":234512,"line_start":3286,"line_end":3286,"column_start":5,"column_end":8}},{"value":"/ Chase this pointer at your own risk: do you trust the DWARF data it came","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234517,"byte_end":234593,"line_start":3287,"line_end":3287,"column_start":5,"column_end":81}},{"value":"/ from?","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234598,"byte_end":234607,"line_start":3288,"line_end":3288,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":5326},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234234,"byte_end":234241,"line_start":3279,"line_end":3279,"column_start":10,"column_end":17},"name":"Pointer","qualname":"::read::cfi::Pointer","value":"pub enum Pointer {\n\n    /// This value is the decoded pointer value.\n    Direct(u64),\n\n    /// This value is *not* the pointer value, but points to the address of\n    /// where the real pointer value lives. In other words, deref this pointer\n    /// to get the real pointer value.\n    ///\n    /// Chase this pointer at your own risk: do you trust the DWARF data it came\n    /// from?\n    Indirect(u64),\n}","parent":null,"children":[{"krate":0,"index":5327},{"krate":0,"index":5330}],"decl_id":null,"docs":" A decoded pointer.\n","sig":null,"attributes":[{"value":"/ A decoded pointer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234157,"byte_end":234179,"line_start":3277,"line_end":3277,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5360},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374108,"byte_end":374113,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Dwarf","qualname":"::read::dwarf::Dwarf","value":"Dwarf { debug_abbrev, debug_addr, debug_aranges, debug_info, debug_line, debug_line_str, debug_str, debug_str_offsets, debug_types, locations, ranges, file_type, sup }","parent":null,"children":[{"krate":0,"index":5362},{"krate":0,"index":5363},{"krate":0,"index":5364},{"krate":0,"index":5365},{"krate":0,"index":5366},{"krate":0,"index":5367},{"krate":0,"index":5368},{"krate":0,"index":5369},{"krate":0,"index":5370},{"krate":0,"index":5371},{"krate":0,"index":5372},{"krate":0,"index":5373},{"krate":0,"index":5374}],"decl_id":null,"docs":" All of the commonly used DWARF sections, and other common information.\n","sig":null,"attributes":[{"value":"/ All of the commonly used DWARF sections, and other common information.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":373996,"byte_end":374070,"line_start":19,"line_end":19,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":5362},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374164,"byte_end":374176,"line_start":23,"line_end":23,"column_start":9,"column_end":21},"name":"debug_abbrev","qualname":"::read::dwarf::Dwarf::debug_abbrev","value":"read::abbrev::DebugAbbrev<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_abbrev` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374123,"byte_end":374155,"line_start":22,"line_end":22,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5363},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374238,"byte_end":374248,"line_start":26,"line_end":26,"column_start":9,"column_end":19},"name":"debug_addr","qualname":"::read::dwarf::Dwarf::debug_addr","value":"read::addr::DebugAddr<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_addr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374199,"byte_end":374229,"line_start":25,"line_end":25,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":5364},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374311,"byte_end":374324,"line_start":29,"line_end":29,"column_start":9,"column_end":22},"name":"debug_aranges","qualname":"::read::dwarf::Dwarf::debug_aranges","value":"read::aranges::DebugAranges<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_aranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374269,"byte_end":374302,"line_start":28,"line_end":28,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":5365},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374387,"byte_end":374397,"line_start":32,"line_end":32,"column_start":9,"column_end":19},"name":"debug_info","qualname":"::read::dwarf::Dwarf::debug_info","value":"read::unit::DebugInfo<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374348,"byte_end":374378,"line_start":31,"line_end":31,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":5366},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374457,"byte_end":374467,"line_start":35,"line_end":35,"column_start":9,"column_end":19},"name":"debug_line","qualname":"::read::dwarf::Dwarf::debug_line","value":"read::line::DebugLine<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374418,"byte_end":374448,"line_start":34,"line_end":34,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":5367},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374531,"byte_end":374545,"line_start":38,"line_end":38,"column_start":9,"column_end":23},"name":"debug_line_str","qualname":"::read::dwarf::Dwarf::debug_line_str","value":"read::str::DebugLineStr<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374488,"byte_end":374522,"line_start":37,"line_end":37,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":5368},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374607,"byte_end":374616,"line_start":41,"line_end":41,"column_start":9,"column_end":18},"name":"debug_str","qualname":"::read::dwarf::Dwarf::debug_str","value":"read::str::DebugStr<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374569,"byte_end":374598,"line_start":40,"line_end":40,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":5369},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374682,"byte_end":374699,"line_start":44,"line_end":44,"column_start":9,"column_end":26},"name":"debug_str_offsets","qualname":"::read::dwarf::Dwarf::debug_str_offsets","value":"read::str::DebugStrOffsets<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str_offsets` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374636,"byte_end":374673,"line_start":43,"line_end":43,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":5370},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374766,"byte_end":374777,"line_start":47,"line_end":47,"column_start":9,"column_end":20},"name":"debug_types","qualname":"::read::dwarf::Dwarf::debug_types","value":"read::unit::DebugTypes<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374726,"byte_end":374757,"line_start":46,"line_end":46,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":5371},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374882,"byte_end":374891,"line_start":50,"line_end":50,"column_start":9,"column_end":18},"name":"locations","qualname":"::read::dwarf::Dwarf::locations","value":"read::loclists::LocationLists<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The location lists in the `.debug_loc` and `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ The location lists in the `.debug_loc` and `.debug_loclists` sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374799,"byte_end":374873,"line_start":49,"line_end":49,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":5372},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374999,"byte_end":375005,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"name":"ranges","qualname":"::read::dwarf::Dwarf::ranges","value":"read::rnglists::RangeLists<R>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The range lists in the `.debug_ranges` and `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ The range lists in the `.debug_ranges` and `.debug_rnglists` sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":374916,"byte_end":374990,"line_start":52,"line_end":52,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":5373},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375062,"byte_end":375071,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"name":"file_type","qualname":"::read::dwarf::Dwarf::file_type","value":"common::DwarfFileType","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The type of this file.\n","sig":null,"attributes":[{"value":"/ The type of this file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375027,"byte_end":375053,"line_start":55,"line_end":55,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":5374},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375157,"byte_end":375160,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"name":"sup","qualname":"::read::dwarf::Dwarf::sup","value":"core::option::Option<alloc::sync::Arc<read::dwarf::Dwarf<R>>>","parent":{"krate":0,"index":5360},"children":[],"decl_id":null,"docs":" The DWARF sections for a supplementary object file.\n","sig":null,"attributes":[{"value":"/ The DWARF sections for a supplementary object file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375093,"byte_end":375148,"line_start":58,"line_end":58,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375760,"byte_end":375764,"line_start":74,"line_end":74,"column_start":12,"column_end":16},"name":"load","qualname":"<Dwarf<T>>::load","value":"pub fn load<F, E>(F) -> core::result::Result<Self, E> where\nF: FnMut(SectionId) -> core::result::Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Try to load the DWARF sections using the given loader function.","sig":null,"attributes":[{"value":"/ Try to load the DWARF sections using the given loader function.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375211,"byte_end":375278,"line_start":63,"line_end":63,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375283,"byte_end":375286,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ `section` loads a DWARF section from the object file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375291,"byte_end":375348,"line_start":65,"line_end":65,"column_start":5,"column_end":62}},{"value":"/ It should return an empty section if the section does not exist.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375353,"byte_end":375421,"line_start":66,"line_end":66,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375426,"byte_end":375429,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ `section` may either directly return a `Reader` instance (such as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375434,"byte_end":375503,"line_start":68,"line_end":68,"column_start":5,"column_end":74}},{"value":"/ `EndianSlice`), or it may return some other type and then convert","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375508,"byte_end":375577,"line_start":69,"line_end":69,"column_start":5,"column_end":74}},{"value":"/ that type into a `Reader` using `Dwarf::borrow`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375582,"byte_end":375634,"line_start":70,"line_end":70,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375639,"byte_end":375642,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ After loading, the user should set the `file_type` field and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375647,"byte_end":375711,"line_start":72,"line_end":72,"column_start":5,"column_end":69}},{"value":"/ call `load_sup` if required.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375716,"byte_end":375748,"line_start":73,"line_end":73,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377107,"byte_end":377115,"line_start":105,"line_end":105,"column_start":12,"column_end":20},"name":"load_sup","qualname":"<Dwarf<T>>::load_sup","value":"pub fn load_sup<F, E>(&mut Self, F) -> core::result::Result<(), E> where\nF: FnMut(SectionId) -> core::result::Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Load the DWARF sections from the supplementary object file.","sig":null,"attributes":[{"value":"/ Load the DWARF sections from the supplementary object file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":376910,"byte_end":376973,"line_start":100,"line_end":100,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":376978,"byte_end":376981,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ `section` operates the same as for `load`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":376986,"byte_end":377032,"line_start":102,"line_end":102,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377037,"byte_end":377040,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Sets `self.sup`, replacing any previous value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377045,"byte_end":377095,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378643,"byte_end":378649,"line_start":140,"line_end":140,"column_start":12,"column_end":18},"name":"borrow","qualname":"<Dwarf<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> Dwarf<R> where F: FnMut(&'a T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dwarf` structure that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `Dwarf` structure that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377334,"byte_end":377400,"line_start":113,"line_end":113,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377405,"byte_end":377408,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377413,"byte_end":377478,"line_start":115,"line_end":115,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377483,"byte_end":377486,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377491,"byte_end":377511,"line_start":117,"line_end":117,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377516,"byte_end":377519,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ It can be useful to load DWARF sections into owned data structures,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377524,"byte_end":377595,"line_start":119,"line_end":119,"column_start":5,"column_end":76}},{"value":"/ such as `Vec`. However, we do not implement the `Reader` trait","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377600,"byte_end":377666,"line_start":120,"line_end":120,"column_start":5,"column_end":71}},{"value":"/ for `Vec`, because it would be very inefficient, but this trait","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377671,"byte_end":377738,"line_start":121,"line_end":121,"column_start":5,"column_end":72}},{"value":"/ is required for all of the methods that parse the DWARF data.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377743,"byte_end":377808,"line_start":122,"line_end":122,"column_start":5,"column_end":70}},{"value":"/ So we first load the DWARF sections into `Vec`s, and then use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377813,"byte_end":377878,"line_start":123,"line_end":123,"column_start":5,"column_end":70}},{"value":"/ `borrow` to create `Reader`s that reference the data.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377883,"byte_end":377940,"line_start":124,"line_end":124,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377945,"byte_end":377948,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377953,"byte_end":377971,"line_start":126,"line_end":126,"column_start":5,"column_end":23}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":377976,"byte_end":378024,"line_start":127,"line_end":127,"column_start":5,"column_end":53}},{"value":"/ # let loader = |name| -> Result<_, gimli::Error> { unimplemented!() };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378029,"byte_end":378103,"line_start":128,"line_end":128,"column_start":5,"column_end":79}},{"value":"/ # let sup_loader = |name| -> Result<_, gimli::Error> { unimplemented!() };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378108,"byte_end":378186,"line_start":129,"line_end":129,"column_start":5,"column_end":83}},{"value":"/ // Read the DWARF sections into `Vec`s with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378191,"byte_end":378275,"line_start":130,"line_end":130,"column_start":5,"column_end":89}},{"value":"/ let mut owned_dwarf: gimli::Dwarf<Vec<u8>> = gimli::Dwarf::load(loader)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378280,"byte_end":378357,"line_start":131,"line_end":131,"column_start":5,"column_end":82}},{"value":"/ owned_dwarf.load_sup(sup_loader)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378362,"byte_end":378400,"line_start":132,"line_end":132,"column_start":5,"column_end":43}},{"value":"/ // Create references to the DWARF sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378405,"byte_end":378452,"line_start":133,"line_end":133,"column_start":5,"column_end":52}},{"value":"/ let dwarf = owned_dwarf.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378457,"byte_end":378503,"line_start":134,"line_end":134,"column_start":5,"column_end":51}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378508,"byte_end":378570,"line_start":135,"line_end":135,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378575,"byte_end":378582,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ # unreachable!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378587,"byte_end":378607,"line_start":137,"line_end":137,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378612,"byte_end":378619,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":378624,"byte_end":378631,"line_start":139,"line_end":139,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379668,"byte_end":379671,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"sup","qualname":"<Dwarf<T>>::sup","value":"pub fn sup(&Self) -> Option<&Dwarf<T>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the DWARF sections for supplementary object file.\n","sig":null,"attributes":[{"value":"/ Return a reference to the DWARF sections for supplementary object file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379581,"byte_end":379656,"line_start":161,"line_end":161,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379974,"byte_end":379979,"line_start":173,"line_end":173,"column_start":12,"column_end":17},"name":"units","qualname":"<Dwarf<R>>::units","value":"pub fn units(&Self) -> DebugInfoUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the unit headers in the `.debug_info` section.","sig":null,"attributes":[{"value":"/ Iterate the unit headers in the `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379785,"byte_end":379843,"line_start":168,"line_end":168,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379848,"byte_end":379851,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379856,"byte_end":379877,"line_start":170,"line_end":170,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379882,"byte_end":379948,"line_start":171,"line_end":171,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379953,"byte_end":379962,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380143,"byte_end":380147,"line_start":179,"line_end":179,"column_start":12,"column_end":16},"name":"unit","qualname":"<Dwarf<R>>::unit","value":"pub fn unit(&Self, UnitHeader<R>) -> Result<Unit<R>>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Unit` from the given unit header.\n","sig":null,"attributes":[{"value":"/ Construct a new `Unit` from the given unit header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380063,"byte_end":380117,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380122,"byte_end":380131,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380437,"byte_end":380447,"line_start":188,"line_end":188,"column_start":12,"column_end":22},"name":"type_units","qualname":"<Dwarf<R>>::type_units","value":"pub fn type_units(&Self) -> DebugTypesUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the type-unit headers in the `.debug_types` section.","sig":null,"attributes":[{"value":"/ Iterate the type-unit headers in the `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380242,"byte_end":380306,"line_start":183,"line_end":183,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380311,"byte_end":380314,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380319,"byte_end":380340,"line_start":185,"line_end":185,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380345,"byte_end":380411,"line_start":186,"line_end":186,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380416,"byte_end":380425,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380656,"byte_end":380669,"line_start":195,"line_end":195,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<Dwarf<R>>::abbreviations","value":"pub fn abbreviations(&Self, &UnitHeader<R>) -> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse the abbreviations for a compilation unit.\n","sig":null,"attributes":[{"value":"/ Parse the abbreviations for a compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380533,"byte_end":380584,"line_start":192,"line_end":192,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380635,"byte_end":380644,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380858,"byte_end":380871,"line_start":201,"line_end":201,"column_start":12,"column_end":25},"name":"string_offset","qualname":"<Dwarf<R>>::string_offset","value":"pub fn string_offset(&Self, &Unit<R>, DebugStrOffsetsIndex<R::Offset>)\n-> Result<DebugStrOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Return the string offset at the given index.\n","sig":null,"attributes":[{"value":"/ Return the string offset at the given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380784,"byte_end":380832,"line_start":199,"line_end":199,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":380837,"byte_end":380846,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381211,"byte_end":381217,"line_start":212,"line_end":212,"column_start":12,"column_end":18},"name":"string","qualname":"<Dwarf<R>>::string","value":"pub fn string(&Self, DebugStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the string at the given offset in `.debug_str`.\n","sig":null,"attributes":[{"value":"/ Return the string at the given offset in `.debug_str`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381127,"byte_end":381185,"line_start":210,"line_end":210,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381190,"byte_end":381199,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381414,"byte_end":381425,"line_start":218,"line_end":218,"column_start":12,"column_end":23},"name":"line_string","qualname":"<Dwarf<R>>::line_string","value":"pub fn line_string(&Self, DebugLineStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the string at the given offset in `.debug_line_str`.\n","sig":null,"attributes":[{"value":"/ Return the string at the given offset in `.debug_line_str`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381325,"byte_end":381388,"line_start":216,"line_end":216,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381393,"byte_end":381402,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":382238,"byte_end":382249,"line_start":236,"line_end":236,"column_start":12,"column_end":23},"name":"attr_string","qualname":"<Dwarf<R>>::attr_string","value":"pub fn attr_string(&Self, &Unit<R>, AttributeValue<R>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Return an attribute value as a string slice.","sig":null,"attributes":[{"value":"/ Return an attribute value as a string slice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381542,"byte_end":381590,"line_start":222,"line_end":222,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381595,"byte_end":381598,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381603,"byte_end":381640,"line_start":224,"line_end":224,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381645,"byte_end":381648,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ - an inline `DW_FORM_string` string","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381653,"byte_end":381692,"line_start":226,"line_end":226,"column_start":5,"column_end":44}},{"value":"/ - a `DW_FORM_strp` reference to an offset into the `.debug_str` section","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381697,"byte_end":381772,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/ - a `DW_FORM_strp_sup` reference to an offset into a supplementary","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381777,"byte_end":381847,"line_start":228,"line_end":228,"column_start":5,"column_end":75}},{"value":"/ object file","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381852,"byte_end":381867,"line_start":229,"line_end":229,"column_start":5,"column_end":20}},{"value":"/ - a `DW_FORM_line_strp` reference to an offset into the `.debug_line_str`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381872,"byte_end":381949,"line_start":230,"line_end":230,"column_start":5,"column_end":82}},{"value":"/ section","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381954,"byte_end":381965,"line_start":231,"line_end":231,"column_start":5,"column_end":16}},{"value":"/ - a `DW_FORM_strx` index into the `.debug_str_offsets` entries for the unit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":381970,"byte_end":382049,"line_start":232,"line_end":232,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":382054,"byte_end":382057,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ then return the attribute's string value. Returns an error if the attribute","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":382062,"byte_end":382141,"line_start":234,"line_end":234,"column_start":5,"column_end":84}},{"value":"/ value does not have a string form, or if a string form has an invalid value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":382146,"byte_end":382226,"line_start":235,"line_end":235,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383295,"byte_end":383302,"line_start":261,"line_end":261,"column_start":12,"column_end":19},"name":"address","qualname":"<Dwarf<R>>::address","value":"pub fn address(&Self, &Unit<R>, DebugAddrIndex<R::Offset>) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the address at the given index.\n","sig":null,"attributes":[{"value":"/ Return the address at the given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383241,"byte_end":383283,"line_start":260,"line_end":260,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383797,"byte_end":383809,"line_start":275,"line_end":275,"column_start":12,"column_end":24},"name":"attr_address","qualname":"<Dwarf<R>>::attr_address","value":"pub fn attr_address(&Self, &Unit<R>, AttributeValue<R>) -> Result<Option<u64>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as an address.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as an address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383490,"byte_end":383541,"line_start":266,"line_end":266,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383546,"byte_end":383549,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383554,"byte_end":383591,"line_start":268,"line_end":268,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383596,"byte_end":383599,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_addr`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383604,"byte_end":383626,"line_start":270,"line_end":270,"column_start":5,"column_end":27}},{"value":"/ - a `DW_FORM_addrx` index into the `.debug_addr` entries for the unit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383631,"byte_end":383704,"line_start":271,"line_end":271,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383709,"byte_end":383712,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ then return the address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383717,"byte_end":383745,"line_start":273,"line_end":273,"column_start":5,"column_end":33}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":383750,"byte_end":383785,"line_start":274,"line_end":274,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":384164,"byte_end":384177,"line_start":284,"line_end":284,"column_start":12,"column_end":25},"name":"ranges_offset","qualname":"<Dwarf<R>>::ranges_offset","value":"pub fn ranges_offset(&Self, &Unit<R>, DebugRngListsIndex<R::Offset>)\n-> Result<RangeListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Return the range list offset at the given index.\n","sig":null,"attributes":[{"value":"/ Return the range list offset at the given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":384100,"byte_end":384152,"line_start":283,"line_end":283,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":384490,"byte_end":384496,"line_start":294,"line_end":294,"column_start":12,"column_end":18},"name":"ranges","qualname":"<Dwarf<R>>::ranges","value":"pub fn ranges(&Self, &Unit<R>, RangeListsOffset<R::Offset>)\n-> Result<RngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `RangeListEntry`s starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Iterate over the `RangeListEntry`s starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":384410,"byte_end":384478,"line_start":293,"line_end":293,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385217,"byte_end":385235,"line_start":317,"line_end":317,"column_start":12,"column_end":30},"name":"attr_ranges_offset","qualname":"<Dwarf<R>>::attr_ranges_offset","value":"pub fn attr_ranges_offset(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<RangeListsOffset<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a range list offset.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a range list offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":384797,"byte_end":384857,"line_start":308,"line_end":308,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":384862,"byte_end":384865,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":384870,"byte_end":384907,"line_start":310,"line_end":310,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":384912,"byte_end":384915,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_ranges` or `.debug_rnglists` sections","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":384920,"byte_end":385011,"line_start":312,"line_end":312,"column_start":5,"column_end":96}},{"value":"/ - a `DW_FORM_rnglistx` index into the `.debug_rnglists` entries for the unit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385016,"byte_end":385096,"line_start":313,"line_end":313,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385101,"byte_end":385104,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ then return the range list offset of the range list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385109,"byte_end":385165,"line_start":315,"line_end":315,"column_start":5,"column_end":61}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385170,"byte_end":385205,"line_start":316,"line_end":316,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":386039,"byte_end":386050,"line_start":338,"line_end":338,"column_start":12,"column_end":23},"name":"attr_ranges","qualname":"<Dwarf<R>>::attr_ranges","value":"pub fn attr_ranges(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<RngListIter<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a range list entry iterator.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a range list entry iterator.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385604,"byte_end":385672,"line_start":329,"line_end":329,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385677,"byte_end":385680,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385685,"byte_end":385722,"line_start":331,"line_end":331,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385727,"byte_end":385730,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_ranges` or `.debug_rnglists` sections","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385735,"byte_end":385826,"line_start":333,"line_end":333,"column_start":5,"column_end":96}},{"value":"/ - a `DW_FORM_rnglistx` index into the `.debug_rnglists` entries for the unit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385831,"byte_end":385911,"line_start":334,"line_end":334,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385916,"byte_end":385919,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ then return an iterator over the entries in the range list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385924,"byte_end":385987,"line_start":336,"line_end":336,"column_start":5,"column_end":68}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":385992,"byte_end":386027,"line_start":337,"line_end":337,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":386505,"byte_end":386515,"line_start":352,"line_end":352,"column_start":12,"column_end":22},"name":"die_ranges","qualname":"<Dwarf<R>>::die_ranges","value":"pub fn die_ranges(&Self, &Unit<R>, &DebuggingInformationEntry<, , R>)\n-> Result<RangeIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for the address ranges of a `DebuggingInformationEntry`.","sig":null,"attributes":[{"value":"/ Return an iterator for the address ranges of a `DebuggingInformationEntry`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":386336,"byte_end":386415,"line_start":349,"line_end":349,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":386420,"byte_end":386423,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ This uses `DW_AT_low_pc`, `DW_AT_high_pc` and `DW_AT_ranges`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":386428,"byte_end":386493,"line_start":351,"line_end":351,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":388284,"byte_end":388295,"line_start":398,"line_end":398,"column_start":12,"column_end":23},"name":"unit_ranges","qualname":"<Dwarf<R>>::unit_ranges","value":"pub fn unit_ranges(&Self, &Unit<R>) -> Result<RangeIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for the address ranges of a `Unit`.","sig":null,"attributes":[{"value":"/ Return an iterator for the address ranges of a `Unit`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":388088,"byte_end":388146,"line_start":394,"line_end":394,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":388151,"byte_end":388154,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ This uses `DW_AT_low_pc`, `DW_AT_high_pc` and `DW_AT_ranges` of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":388159,"byte_end":388230,"line_start":396,"line_end":396,"column_start":5,"column_end":76}},{"value":"/ root `DebuggingInformationEntry`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":388235,"byte_end":388272,"line_start":397,"line_end":397,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":388621,"byte_end":388637,"line_start":406,"line_end":406,"column_start":12,"column_end":28},"name":"locations_offset","qualname":"<Dwarf<R>>::locations_offset","value":"pub fn locations_offset(&Self, &Unit<R>, DebugLocListsIndex<R::Offset>)\n-> Result<LocationListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Return the location list offset at the given index.\n","sig":null,"attributes":[{"value":"/ Return the location list offset at the given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":388554,"byte_end":388609,"line_start":405,"line_end":405,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":388959,"byte_end":388968,"line_start":416,"line_end":416,"column_start":12,"column_end":21},"name":"locations","qualname":"<Dwarf<R>>::locations","value":"pub fn locations(&Self, &Unit<R>, LocationListsOffset<R::Offset>)\n-> Result<LocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `LocationListEntry`s starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Iterate over the `LocationListEntry`s starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":388876,"byte_end":388947,"line_start":415,"line_end":415,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390028,"byte_end":390049,"line_start":448,"line_end":448,"column_start":12,"column_end":33},"name":"attr_locations_offset","qualname":"<Dwarf<R>>::attr_locations_offset","value":"pub fn attr_locations_offset(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<LocationListsOffset<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a location list offset.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a location list offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":389602,"byte_end":389665,"line_start":439,"line_end":439,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":389670,"byte_end":389673,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":389678,"byte_end":389715,"line_start":441,"line_end":441,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":389720,"byte_end":389723,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_loc` or `.debug_loclists` sections","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":389728,"byte_end":389816,"line_start":443,"line_end":443,"column_start":5,"column_end":93}},{"value":"/ - a `DW_FORM_loclistx` index into the `.debug_loclists` entries for the unit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":389821,"byte_end":389901,"line_start":444,"line_end":444,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":389906,"byte_end":389909,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ then return the location list offset of the location list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":389914,"byte_end":389976,"line_start":446,"line_end":446,"column_start":5,"column_end":67}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":389981,"byte_end":390016,"line_start":447,"line_end":447,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390896,"byte_end":390910,"line_start":471,"line_end":471,"column_start":12,"column_end":26},"name":"attr_locations","qualname":"<Dwarf<R>>::attr_locations","value":"pub fn attr_locations(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<LocListIter<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a location list entry iterator.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a location list entry iterator.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390458,"byte_end":390529,"line_start":462,"line_end":462,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390534,"byte_end":390537,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390542,"byte_end":390579,"line_start":464,"line_end":464,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390584,"byte_end":390587,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_loc` or `.debug_loclists` sections","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390592,"byte_end":390680,"line_start":466,"line_end":466,"column_start":5,"column_end":93}},{"value":"/ - a `DW_FORM_loclistx` index into the `.debug_loclists` entries for the unit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390685,"byte_end":390765,"line_start":467,"line_end":467,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390770,"byte_end":390773,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ then return an iterator over the entries in the location list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390778,"byte_end":390844,"line_start":469,"line_end":469,"column_start":5,"column_end":71}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":390849,"byte_end":390884,"line_start":470,"line_end":470,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":391380,"byte_end":391396,"line_start":485,"line_end":485,"column_start":12,"column_end":28},"name":"lookup_offset_id","qualname":"<Dwarf<R>>::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(bool, SectionId, R::Offset)>","parent":null,"children":[],"decl_id":null,"docs":" Call `Reader::lookup_offset_id` for each section, and return the first match.","sig":null,"attributes":[{"value":"/ Call `Reader::lookup_offset_id` for each section, and return the first match.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":391202,"byte_end":391283,"line_start":482,"line_end":482,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":391288,"byte_end":391291,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ The first element of the tuple is `true` for supplementary sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":391296,"byte_end":391368,"line_start":484,"line_end":484,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":392588,"byte_end":392600,"line_start":508,"line_end":508,"column_start":12,"column_end":24},"name":"format_error","qualname":"<Dwarf<R>>::format_error","value":"pub fn format_error(&Self, Error) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a string representation of the given error.","sig":null,"attributes":[{"value":"/ Returns a string representation of the given error.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":392416,"byte_end":392471,"line_start":505,"line_end":505,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":392476,"byte_end":392479,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ This uses information from the DWARF sections to provide more information in some cases.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":392484,"byte_end":392576,"line_start":507,"line_end":507,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":5381},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393352,"byte_end":393356,"line_start":532,"line_end":532,"column_start":12,"column_end":16},"name":"Unit","qualname":"::read::dwarf::Unit","value":"Unit { header, abbreviations, name, comp_dir, low_pc, str_offsets_base, addr_base, loclists_base, rnglists_base, line_program }","parent":null,"children":[{"krate":0,"index":5384},{"krate":0,"index":5385},{"krate":0,"index":5386},{"krate":0,"index":5387},{"krate":0,"index":5388},{"krate":0,"index":5389},{"krate":0,"index":5390},{"krate":0,"index":5391},{"krate":0,"index":5392},{"krate":0,"index":5393}],"decl_id":null,"docs":" All of the commonly used information for a unit in the `.debug_info` or `.debug_types`\n sections.\n","sig":null,"attributes":[{"value":"/ All of the commonly used information for a unit in the `.debug_info` or `.debug_types`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393219,"byte_end":393309,"line_start":529,"line_end":529,"column_start":1,"column_end":91}},{"value":"/ sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393310,"byte_end":393323,"line_start":530,"line_end":530,"column_start":1,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":5384},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393498,"byte_end":393504,"line_start":538,"line_end":538,"column_start":9,"column_end":15},"name":"header","qualname":"::read::dwarf::Unit::header","value":"read::unit::UnitHeader<R, Offset>","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The header of the unit.\n","sig":null,"attributes":[{"value":"/ The header of the unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393462,"byte_end":393489,"line_start":537,"line_end":537,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5385},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393585,"byte_end":393598,"line_start":541,"line_end":541,"column_start":9,"column_end":22},"name":"abbreviations","qualname":"::read::dwarf::Unit::abbreviations","value":"read::abbrev::Abbreviations","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The parsed abbreviations for the unit.\n","sig":null,"attributes":[{"value":"/ The parsed abbreviations for the unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393534,"byte_end":393576,"line_start":540,"line_end":540,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":5386},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393672,"byte_end":393676,"line_start":544,"line_end":544,"column_start":9,"column_end":13},"name":"name","qualname":"::read::dwarf::Unit::name","value":"core::option::Option<R>","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The `DW_AT_name` attribute of the unit.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_name` attribute of the unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393620,"byte_end":393663,"line_start":543,"line_end":543,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":5387},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393750,"byte_end":393758,"line_start":547,"line_end":547,"column_start":9,"column_end":17},"name":"comp_dir","qualname":"::read::dwarf::Unit::comp_dir","value":"core::option::Option<R>","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The `DW_AT_comp_dir` attribute of the unit.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_comp_dir` attribute of the unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393694,"byte_end":393741,"line_start":546,"line_end":546,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":5388},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393845,"byte_end":393851,"line_start":550,"line_end":550,"column_start":9,"column_end":15},"name":"low_pc","qualname":"::read::dwarf::Unit::low_pc","value":"u64","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The `DW_AT_low_pc` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_low_pc` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393776,"byte_end":393836,"line_start":549,"line_end":549,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":5389},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393942,"byte_end":393958,"line_start":553,"line_end":553,"column_start":9,"column_end":25},"name":"str_offsets_base","qualname":"::read::dwarf::Unit::str_offsets_base","value":"common::DebugStrOffsetsBase<Offset>","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The `DW_AT_str_offsets_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_str_offsets_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393863,"byte_end":393933,"line_start":552,"line_end":552,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":5390},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394066,"byte_end":394075,"line_start":556,"line_end":556,"column_start":9,"column_end":18},"name":"addr_base","qualname":"::read::dwarf::Unit::addr_base","value":"common::DebugAddrBase<Offset>","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The `DW_AT_addr_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_addr_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":393994,"byte_end":394057,"line_start":555,"line_end":555,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":5391},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394181,"byte_end":394194,"line_start":559,"line_end":559,"column_start":9,"column_end":22},"name":"loclists_base","qualname":"::read::dwarf::Unit::loclists_base","value":"common::DebugLocListsBase<Offset>","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The `DW_AT_loclists_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_loclists_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394105,"byte_end":394172,"line_start":558,"line_end":558,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":5392},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394304,"byte_end":394317,"line_start":562,"line_end":562,"column_start":9,"column_end":22},"name":"rnglists_base","qualname":"::read::dwarf::Unit::rnglists_base","value":"common::DebugRngListsBase<Offset>","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The `DW_AT_rnglists_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_rnglists_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394228,"byte_end":394295,"line_start":561,"line_end":561,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":5393},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394400,"byte_end":394412,"line_start":565,"line_end":565,"column_start":9,"column_end":21},"name":"line_program","qualname":"::read::dwarf::Unit::line_program","value":"core::option::Option<read::line::IncompleteLineProgram<R, Offset>>","parent":{"krate":0,"index":5381},"children":[],"decl_id":null,"docs":" The line number program of the unit.\n","sig":null,"attributes":[{"value":"/ The line number program of the unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394351,"byte_end":394391,"line_start":564,"line_end":564,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394569,"byte_end":394572,"line_start":571,"line_end":571,"column_start":12,"column_end":15},"name":"new","qualname":"<Unit<R>>::new","value":"pub fn new(&Dwarf<R>, UnitHeader<R>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Unit` from the given unit header.\n","sig":null,"attributes":[{"value":"/ Construct a new `Unit` from the given unit header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394489,"byte_end":394543,"line_start":569,"line_end":569,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394548,"byte_end":394557,"line_start":570,"line_end":570,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":398639,"byte_end":398647,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"encoding","qualname":"<Unit<R>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this unit.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":398564,"byte_end":398613,"line_start":671,"line_end":671,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":398618,"byte_end":398627,"line_start":672,"line_end":672,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":398784,"byte_end":398789,"line_start":678,"line_end":678,"column_start":12,"column_end":17},"name":"entry","qualname":"<Unit<R>>::entry","value":"pub fn entry(&Self, UnitOffset<R::Offset>)\n-> Result<DebuggingInformationEntry<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Read the `DebuggingInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Read the `DebuggingInformationEntry` at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":398711,"byte_end":398772,"line_start":677,"line_end":677,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399016,"byte_end":399023,"line_start":684,"line_end":684,"column_start":12,"column_end":19},"name":"entries","qualname":"<Unit<R>>::entries","value":"pub fn entries(&Self) -> EntriesCursor<, , R>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":398936,"byte_end":398990,"line_start":682,"line_end":682,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":398995,"byte_end":399004,"line_start":683,"line_end":683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399230,"byte_end":399247,"line_start":691,"line_end":691,"column_start":12,"column_end":29},"name":"entries_at_offset","qualname":"<Unit<R>>::entries_at_offset","value":"pub fn entries_at_offset(&Self, UnitOffset<R::Offset>)\n-> Result<EntriesCursor<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399113,"byte_end":399166,"line_start":688,"line_end":688,"column_start":5,"column_end":58}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399171,"byte_end":399204,"line_start":689,"line_end":689,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399209,"byte_end":399218,"line_start":690,"line_end":690,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399521,"byte_end":399533,"line_start":698,"line_end":698,"column_start":12,"column_end":24},"name":"entries_tree","qualname":"<Unit<R>>::entries_tree","value":"pub fn entries_tree(&Self, Option<UnitOffset<R::Offset>>)\n-> Result<EntriesTree<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s as a tree\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s as a tree","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399394,"byte_end":399457,"line_start":695,"line_end":695,"column_start":5,"column_end":68}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399462,"byte_end":399495,"line_start":696,"line_end":696,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399500,"byte_end":399509,"line_start":697,"line_end":697,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399776,"byte_end":399787,"line_start":704,"line_end":704,"column_start":12,"column_end":23},"name":"entries_raw","qualname":"<Unit<R>>::entries_raw","value":"pub fn entries_raw(&Self, Option<UnitOffset<R::Offset>>)\n-> Result<EntriesRaw<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Read the raw data that defines the Debugging Information Entries.\n","sig":null,"attributes":[{"value":"/ Read the raw data that defines the Debugging Information Entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399681,"byte_end":399750,"line_start":702,"line_end":702,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399755,"byte_end":399764,"line_start":703,"line_end":703,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":400155,"byte_end":400180,"line_start":711,"line_end":711,"column_start":12,"column_end":37},"name":"copy_relocated_attributes","qualname":"<Unit<R>>::copy_relocated_attributes","value":"pub fn copy_relocated_attributes(&mut Self, &Unit<R>)","parent":null,"children":[],"decl_id":null,"docs":" Copy attributes that are subject to relocation from another unit. This is intended\n to be used to copy attributes from a skeleton compilation unit to the corresponding\n split compilation unit.\n","sig":null,"attributes":[{"value":"/ Copy attributes that are subject to relocation from another unit. This is intended","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":399933,"byte_end":400019,"line_start":708,"line_end":708,"column_start":5,"column_end":91}},{"value":"/ to be used to copy attributes from a skeleton compilation unit to the corresponding","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":400024,"byte_end":400111,"line_start":709,"line_end":709,"column_start":5,"column_end":92}},{"value":"/ split compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":400116,"byte_end":400143,"line_start":710,"line_end":710,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":400656,"byte_end":400670,"line_start":724,"line_end":724,"column_start":12,"column_end":26},"name":"to_unit_offset","qualname":"<UnitSectionOffset<T>>::to_unit_offset","value":"pub fn to_unit_offset<R>(&Self, &Unit<R>) -> Option<UnitOffset<T>> where\nR: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the given unit,\n instead of relative to the start of the section.\n Returns `None` if the offset is not within the unit entries.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the given unit,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":400450,"byte_end":400518,"line_start":721,"line_end":721,"column_start":5,"column_end":73}},{"value":"/ instead of relative to the start of the section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":400523,"byte_end":400575,"line_start":722,"line_end":722,"column_start":5,"column_end":57}},{"value":"/ Returns `None` if the offset is not within the unit entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":400580,"byte_end":400644,"line_start":723,"line_end":723,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":401779,"byte_end":401801,"line_start":755,"line_end":755,"column_start":12,"column_end":34},"name":"to_unit_section_offset","qualname":"<UnitOffset<T>>::to_unit_section_offset","value":"pub fn to_unit_section_offset<R>(&Self, &Unit<R>) -> UnitSectionOffset<T>\nwhere R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the .debug_info section,\n instead of relative to the start of the given compilation unit.","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the .debug_info section,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":401561,"byte_end":401638,"line_start":751,"line_end":751,"column_start":5,"column_end":82}},{"value":"/ instead of relative to the start of the given compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":401643,"byte_end":401710,"line_start":752,"line_end":752,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":401715,"byte_end":401718,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ Does not check that the offset is valid.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":401723,"byte_end":401767,"line_start":754,"line_end":754,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":5398},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402408,"byte_end":402417,"line_start":774,"line_end":774,"column_start":12,"column_end":21},"name":"RangeIter","qualname":"::read::dwarf::RangeIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator for the address ranges of a `DebuggingInformationEntry`.","sig":null,"attributes":[{"value":"/ An iterator for the address ranges of a `DebuggingInformationEntry`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402241,"byte_end":402313,"line_start":770,"line_end":770,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402314,"byte_end":402317,"line_start":771,"line_end":771,"column_start":1,"column_end":4}},{"value":"/ Returned by `Dwarf::die_ranges` and `Dwarf::unit_ranges`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402318,"byte_end":402379,"line_start":772,"line_end":772,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402773,"byte_end":402777,"line_start":790,"line_end":790,"column_start":12,"column_end":16},"name":"next","qualname":"<RangeIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<Range>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next range.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402718,"byte_end":402761,"line_start":789,"line_end":789,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5416},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405533,"byte_end":405544,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"EndianSlice","qualname":"::read::endian_slice::EndianSlice","value":"EndianSlice {  }","parent":null,"children":[{"krate":0,"index":5419},{"krate":0,"index":5420}],"decl_id":null,"docs":" A `&[u8]` slice with endianity metadata.","sig":null,"attributes":[{"value":"/ A `&[u8]` slice with endianity metadata.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405324,"byte_end":405368,"line_start":11,"line_end":11,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405369,"byte_end":405372,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This implements the `Reader` trait, which is used for all reading of DWARF sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405373,"byte_end":405461,"line_start":13,"line_end":13,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405819,"byte_end":405822,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<EndianSlice>::new","value":"pub fn new(&'input [u8], Endian) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `EndianSlice` with the given slice and endianity.\n","sig":null,"attributes":[{"value":"/ Construct a new `EndianSlice` with the given slice and endianity.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405724,"byte_end":405793,"line_start":27,"line_end":27,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405798,"byte_end":405807,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406111,"byte_end":406114,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"buf","qualname":"<EndianSlice>::buf","value":"pub fn buf(&Self) -> &'input [u8]","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the raw slice.\n","sig":null,"attributes":[{"value":"/ Return a reference to the raw slice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405942,"byte_end":405982,"line_start":33,"line_end":33,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405987,"byte_end":405996,"line_start":34,"line_end":34,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"Method renamed to EndianSlice::slice; use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406020,"byte_end":406099,"line_start":36,"line_end":36,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406236,"byte_end":406241,"line_start":43,"line_end":43,"column_start":12,"column_end":17},"name":"slice","qualname":"<EndianSlice>::slice","value":"pub fn slice(&Self) -> &'input [u8]","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the raw slice.\n","sig":null,"attributes":[{"value":"/ Return a reference to the raw slice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406170,"byte_end":406210,"line_start":41,"line_end":41,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406215,"byte_end":406224,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406524,"byte_end":406532,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"split_at","qualname":"<EndianSlice>::split_at","value":"pub fn split_at(&Self, usize) -> (EndianSlice, EndianSlice)","parent":null,"children":[],"decl_id":null,"docs":" Split the slice in two at the given index, resulting in the tuple where\n the first item has range [0, idx), and the second has range [idx,\n len). Panics if the index is out of bounds.\n","sig":null,"attributes":[{"value":"/ Split the slice in two at the given index, resulting in the tuple where","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406297,"byte_end":406372,"line_start":47,"line_end":47,"column_start":5,"column_end":80}},{"value":"/ the first item has range [0, idx), and the second has range [idx,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406377,"byte_end":406446,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"/ len). Panics if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406451,"byte_end":406498,"line_start":49,"line_end":49,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406503,"byte_end":406512,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406805,"byte_end":406809,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"find","qualname":"<EndianSlice>::find","value":"pub fn find(&Self, u8) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Find the first occurence of a byte in the slice, and return its index.\n","sig":null,"attributes":[{"value":"/ Find the first occurence of a byte in the slice, and return its index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406705,"byte_end":406779,"line_start":58,"line_end":58,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406784,"byte_end":406793,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407033,"byte_end":407044,"line_start":67,"line_end":67,"column_start":12,"column_end":23},"name":"offset_from","qualname":"<EndianSlice>::offset_from","value":"pub fn offset_from(&Self, EndianSlice) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the offset of the start of the slice relative to the start\n of the given slice.\n","sig":null,"attributes":[{"value":"/ Return the offset of the start of the slice relative to the start","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406910,"byte_end":406979,"line_start":64,"line_end":64,"column_start":5,"column_end":74}},{"value":"/ of the given slice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":406984,"byte_end":407007,"line_start":65,"line_end":65,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407012,"byte_end":407021,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407536,"byte_end":407545,"line_start":79,"line_end":79,"column_start":12,"column_end":21},"name":"to_string","qualname":"<EndianSlice>::to_string","value":"pub fn to_string(&Self) -> Result<&'input str>","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice to a string using `str::from_utf8`.","sig":null,"attributes":[{"value":"/ Converts the slice to a string using `str::from_utf8`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407377,"byte_end":407435,"line_start":75,"line_end":75,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407440,"byte_end":407443,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the slice contains invalid characters.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407448,"byte_end":407510,"line_start":77,"line_end":77,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407515,"byte_end":407524,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407784,"byte_end":407799,"line_start":86,"line_end":86,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<EndianSlice>::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice to a string, including invalid characters,\n using `String::from_utf8_lossy`.\n","sig":null,"attributes":[{"value":"/ Converts the slice to a string, including invalid characters,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407652,"byte_end":407717,"line_start":83,"line_end":83,"column_start":5,"column_end":70}},{"value":"/ using `String::from_utf8_lossy`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407722,"byte_end":407758,"line_start":84,"line_end":84,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":407763,"byte_end":407772,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408984,"byte_end":408989,"line_start":123,"line_end":123,"column_start":12,"column_end":17},"name":"range","qualname":"<EndianSlice>::range","value":"pub fn range(&Self, Range<usize>) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Take the given `start..end` range of the underlying slice and return a\n new `EndianSlice`.","sig":null,"attributes":[{"value":"/ Take the given `start..end` range of the underlying slice and return a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408559,"byte_end":408633,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/ new `EndianSlice`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408638,"byte_end":408660,"line_start":113,"line_end":113,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408665,"byte_end":408668,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408673,"byte_end":408680,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EndianSlice, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408685,"byte_end":408728,"line_start":116,"line_end":116,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408733,"byte_end":408736,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ let slice = &[0x01, 0x02, 0x03, 0x04];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408741,"byte_end":408783,"line_start":118,"line_end":118,"column_start":5,"column_end":47}},{"value":"/ let endian_slice = EndianSlice::new(slice, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408788,"byte_end":408849,"line_start":119,"line_end":119,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(endian_slice.range(1..3),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408854,"byte_end":408894,"line_start":120,"line_end":120,"column_start":5,"column_end":45}},{"value":"/            EndianSlice::new(&slice[1..3], LittleEndian));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408899,"byte_end":408960,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408965,"byte_end":408972,"line_start":122,"line_end":122,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409587,"byte_end":409597,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"range_from","qualname":"<EndianSlice>::range_from","value":"pub fn range_from(&Self, RangeFrom<usize>) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Take the given `start..` range of the underlying slice and return a new\n `EndianSlice`.","sig":null,"attributes":[{"value":"/ Take the given `start..` range of the underlying slice and return a new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409162,"byte_end":409237,"line_start":130,"line_end":130,"column_start":5,"column_end":80}},{"value":"/ `EndianSlice`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409242,"byte_end":409260,"line_start":131,"line_end":131,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409265,"byte_end":409268,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409273,"byte_end":409280,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EndianSlice, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409285,"byte_end":409328,"line_start":134,"line_end":134,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409333,"byte_end":409336,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ let slice = &[0x01, 0x02, 0x03, 0x04];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409341,"byte_end":409383,"line_start":136,"line_end":136,"column_start":5,"column_end":47}},{"value":"/ let endian_slice = EndianSlice::new(slice, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409388,"byte_end":409449,"line_start":137,"line_end":137,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(endian_slice.range_from(2..),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409454,"byte_end":409498,"line_start":138,"line_end":138,"column_start":5,"column_end":49}},{"value":"/            EndianSlice::new(&slice[2..], LittleEndian));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409503,"byte_end":409563,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409568,"byte_end":409575,"line_start":140,"line_end":140,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410195,"byte_end":410203,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"range_to","qualname":"<EndianSlice>::range_to","value":"pub fn range_to(&Self, RangeTo<usize>) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Take the given `..end` range of the underlying slice and return a new\n `EndianSlice`.","sig":null,"attributes":[{"value":"/ Take the given `..end` range of the underlying slice and return a new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409774,"byte_end":409847,"line_start":148,"line_end":148,"column_start":5,"column_end":78}},{"value":"/ `EndianSlice`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409852,"byte_end":409870,"line_start":149,"line_end":149,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409875,"byte_end":409878,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409883,"byte_end":409890,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EndianSlice, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409895,"byte_end":409938,"line_start":152,"line_end":152,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409943,"byte_end":409946,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ let slice = &[0x01, 0x02, 0x03, 0x04];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409951,"byte_end":409993,"line_start":154,"line_end":154,"column_start":5,"column_end":47}},{"value":"/ let endian_slice = EndianSlice::new(slice, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":409998,"byte_end":410059,"line_start":155,"line_end":155,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(endian_slice.range_to(..3),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410064,"byte_end":410106,"line_start":156,"line_end":156,"column_start":5,"column_end":47}},{"value":"/            EndianSlice::new(&slice[..3], LittleEndian));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410111,"byte_end":410171,"line_start":157,"line_end":157,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410176,"byte_end":410183,"line_start":158,"line_end":158,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5456},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":414933,"byte_end":414947,"line_start":18,"line_end":18,"column_start":12,"column_end":26},"name":"ReaderOffsetId","qualname":"::read::reader::ReaderOffsetId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for an offset within a section reader.","sig":null,"attributes":[{"value":"/ An identifier for an offset within a section reader.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":414571,"byte_end":414627,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":414628,"byte_end":414631,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This is used for error reporting. The meaning of this value is specific to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":414632,"byte_end":414710,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ each reader implementation. The values should be chosen to be unique amongst","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":414711,"byte_end":414791,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ all readers. If values are not unique then errors may point to the wrong reader.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":414792,"byte_end":414876,"line_start":16,"line_end":16,"column_start":1,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":5458},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":414948,"byte_end":414955,"line_start":18,"line_end":18,"column_start":27,"column_end":34},"name":"0","qualname":"::read::reader::ReaderOffsetId::0","value":"u64","parent":{"krate":0,"index":5456},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":755},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415107,"byte_end":415119,"line_start":23,"line_end":23,"column_start":11,"column_end":23},"name":"ReaderOffset","qualname":"::read::reader::ReaderOffset","value":"ReaderOffset: Debug + Copy + Eq + Ord + Hash + Add<Output = Self> + AddAssign + Sub<Output =\nSelf>","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763}],"decl_id":null,"docs":" A trait for offsets with a DWARF section.","sig":null,"attributes":[{"value":"/ A trait for offsets with a DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":414959,"byte_end":415004,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415005,"byte_end":415008,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This allows consumers to choose a size that is appropriate for their address space.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415009,"byte_end":415096,"line_start":22,"line_end":22,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415254,"byte_end":415261,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::read::reader::ReaderOffset::from_u8","value":"pub fn from_u8(u8) -> Self","parent":{"krate":0,"index":755},"children":[],"decl_id":null,"docs":" Convert a u8 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert a u8 to an offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415216,"byte_end":415246,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415327,"byte_end":415335,"line_start":30,"line_end":30,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::read::reader::ReaderOffset::from_u16","value":"pub fn from_u16(u16) -> Self","parent":{"krate":0,"index":755},"children":[],"decl_id":null,"docs":" Convert a u16 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert a u16 to an offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415288,"byte_end":415319,"line_start":29,"line_end":29,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415403,"byte_end":415411,"line_start":33,"line_end":33,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::read::reader::ReaderOffset::from_i16","value":"pub fn from_i16(i16) -> Self","parent":{"krate":0,"index":755},"children":[],"decl_id":null,"docs":" Convert an i16 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert an i16 to an offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415363,"byte_end":415395,"line_start":32,"line_end":32,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415478,"byte_end":415486,"line_start":36,"line_end":36,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::read::reader::ReaderOffset::from_u32","value":"pub fn from_u32(u32) -> Self","parent":{"krate":0,"index":755},"children":[],"decl_id":null,"docs":" Convert a u32 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert a u32 to an offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415439,"byte_end":415470,"line_start":35,"line_end":35,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415631,"byte_end":415639,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::read::reader::ReaderOffset::from_u64","value":"pub fn from_u64(u64) -> Result<Self>","parent":{"krate":0,"index":755},"children":[],"decl_id":null,"docs":" Convert a u64 to an offset.","sig":null,"attributes":[{"value":"/ Convert a u64 to an offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415514,"byte_end":415545,"line_start":38,"line_end":38,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415550,"byte_end":415553,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ Returns `Error::UnsupportedOffset` if the value is too large.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415558,"byte_end":415623,"line_start":40,"line_end":40,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415714,"byte_end":415722,"line_start":44,"line_end":44,"column_start":8,"column_end":16},"name":"into_u64","qualname":"::read::reader::ReaderOffset::into_u64","value":"pub fn into_u64(Self) -> u64","parent":{"krate":0,"index":755},"children":[],"decl_id":null,"docs":" Convert an offset to a u64.\n","sig":null,"attributes":[{"value":"/ Convert an offset to a u64.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415675,"byte_end":415706,"line_start":43,"line_end":43,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415807,"byte_end":415819,"line_start":47,"line_end":47,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::read::reader::ReaderOffset::wrapping_add","value":"pub fn wrapping_add(Self, Self) -> Self","parent":{"krate":0,"index":755},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + other`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415742,"byte_end":415799,"line_start":46,"line_end":46,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415910,"byte_end":415921,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::read::reader::ReaderOffset::checked_sub","value":"pub fn checked_sub(Self, Self) -> Option<Self>","parent":{"krate":0,"index":755},"children":[],"decl_id":null,"docs":" Checked subtraction. Computes `self - other`.\n","sig":null,"attributes":[{"value":"/ Checked subtraction. Computes `self - other`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415853,"byte_end":415902,"line_start":49,"line_end":49,"column_start":5,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":791},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420066,"byte_end":420072,"line_start":208,"line_end":208,"column_start":11,"column_end":17},"name":"Reader","qualname":"::read::reader::Reader","value":"Reader: Debug + Clone","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":815},{"krate":0,"index":817},{"krate":0,"index":819},{"krate":0,"index":821},{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":827},{"krate":0,"index":829},{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846}],"decl_id":null,"docs":" A trait for reading the data from a DWARF section.","sig":null,"attributes":[{"value":"/ A trait for reading the data from a DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418472,"byte_end":418526,"line_start":189,"line_end":189,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418527,"byte_end":418530,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ All read operations advance the section offset of the reader","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418531,"byte_end":418595,"line_start":191,"line_end":191,"column_start":1,"column_end":65}},{"value":"/ unless specified otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418596,"byte_end":418627,"line_start":192,"line_end":192,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418628,"byte_end":418631,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ## Choosing a `Reader` Implementation","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418632,"byte_end":418673,"line_start":194,"line_end":194,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418674,"byte_end":418677,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ `gimli` comes with a few different `Reader` implementations and lets you","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418678,"byte_end":418754,"line_start":196,"line_end":196,"column_start":1,"column_end":77}},{"value":"/ choose the one that is right for your use case. A `Reader` is essentially a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418755,"byte_end":418834,"line_start":197,"line_end":197,"column_start":1,"column_end":80}},{"value":"/ view into the raw bytes that make up some DWARF, but this view might borrow","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418835,"byte_end":418914,"line_start":198,"line_end":198,"column_start":1,"column_end":80}},{"value":"/ the underlying data or use reference counting ownership, and it might be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418915,"byte_end":418991,"line_start":199,"line_end":199,"column_start":1,"column_end":77}},{"value":"/ thread safe or not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":418992,"byte_end":419015,"line_start":200,"line_end":200,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":419016,"byte_end":419019,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ | Implementation    | Ownership         | Thread Safe | Notes |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":419020,"byte_end":419087,"line_start":202,"line_end":202,"column_start":1,"column_end":68}},{"value":"/ |:------------------|:------------------|:------------|:------|","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":419088,"byte_end":419155,"line_start":203,"line_end":203,"column_start":1,"column_end":68}},{"value":"/ | [`EndianSlice`](./struct.EndianSlice.html)        | Borrowed          | Yes         | Fastest, but requires that all of your code work with borrows. |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":419156,"byte_end":419312,"line_start":204,"line_end":204,"column_start":1,"column_end":157}},{"value":"/ | [`EndianRcSlice`](./struct.EndianRcSlice.html)    | Reference counted | No          | Shared ownership via reference counting, which alleviates the borrow restrictions of `EndianSlice` but imposes reference counting increments and decrements. Cannot be sent across threads, because the reference count is not atomic. |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":419313,"byte_end":419637,"line_start":205,"line_end":205,"column_start":1,"column_end":325}},{"value":"/ | [`EndianArcSlice`](./struct.EndianArcSlice.html)  | Reference counted | Yes         | The same as `EndianRcSlice`, but uses atomic reference counting, and therefore reference counting operations are slower but `EndianArcSlice`s may be sent across threads. |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":419638,"byte_end":419901,"line_start":206,"line_end":206,"column_start":1,"column_end":264}},{"value":"/ | [`EndianReader<T>`](./struct.EndianReader.html)   | Same as `T`       | Same as `T` | Escape hatch for easily defining your own type of `Reader`. |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":419902,"byte_end":420055,"line_start":207,"line_end":207,"column_start":1,"column_end":154}}]},{"kind":"Type","id":{"krate":0,"index":792},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420145,"byte_end":420151,"line_start":210,"line_end":210,"column_start":10,"column_end":16},"name":"Endian","qualname":"::read::reader::Reader::Endian","value":"type Endian: Endianity;","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" The endianity of bytes that are read.\n","sig":null,"attributes":[{"value":"/ The endianity of bytes that are read.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420094,"byte_end":420135,"line_start":209,"line_end":209,"column_start":5,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":793},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420221,"byte_end":420227,"line_start":213,"line_end":213,"column_start":10,"column_end":16},"name":"Offset","qualname":"::read::reader::Reader::Offset","value":"type Offset: ReaderOffset;","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" The type used for offsets and lengths.\n","sig":null,"attributes":[{"value":"/ The type used for offsets and lengths.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420169,"byte_end":420211,"line_start":212,"line_end":212,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420304,"byte_end":420310,"line_start":216,"line_end":216,"column_start":8,"column_end":14},"name":"endian","qualname":"::read::reader::Reader::endian","value":"pub fn endian(&Self) -> Self::Endian","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Return the endianity of bytes that are read.\n","sig":null,"attributes":[{"value":"/ Return the endianity of bytes that are read.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420248,"byte_end":420296,"line_start":215,"line_end":215,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420389,"byte_end":420392,"line_start":219,"line_end":219,"column_start":8,"column_end":11},"name":"len","qualname":"::read::reader::Reader::len","value":"pub fn len(&Self) -> Self::Offset","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Return the number of bytes remaining.\n","sig":null,"attributes":[{"value":"/ Return the number of bytes remaining.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420340,"byte_end":420381,"line_start":218,"line_end":218,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420476,"byte_end":420481,"line_start":222,"line_end":222,"column_start":8,"column_end":13},"name":"empty","qualname":"::read::reader::Reader::empty","value":"pub fn empty(&mut Self)","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Set the number of bytes remaining to zero.\n","sig":null,"attributes":[{"value":"/ Set the number of bytes remaining to zero.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420422,"byte_end":420468,"line_start":221,"line_end":221,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420569,"byte_end":420577,"line_start":225,"line_end":225,"column_start":8,"column_end":16},"name":"truncate","qualname":"::read::reader::Reader::truncate","value":"pub fn truncate(&mut Self, Self::Offset) -> Result<()>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Set the number of bytes remaining to the specified length.\n","sig":null,"attributes":[{"value":"/ Set the number of bytes remaining to the specified length.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420499,"byte_end":420561,"line_start":224,"line_end":224,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420852,"byte_end":420863,"line_start":232,"line_end":232,"column_start":8,"column_end":19},"name":"offset_from","qualname":"::read::reader::Reader::offset_from","value":"pub fn offset_from(&Self, &Self) -> Self::Offset","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Return the offset of this reader's data relative to the start of\n the given base reader's data.","sig":null,"attributes":[{"value":"/ Return the offset of this reader's data relative to the start of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420628,"byte_end":420696,"line_start":227,"line_end":227,"column_start":5,"column_end":73}},{"value":"/ the given base reader's data.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420701,"byte_end":420734,"line_start":228,"line_end":228,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420739,"byte_end":420742,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ May panic if this reader's data is not contained within the given","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420747,"byte_end":420816,"line_start":230,"line_end":230,"column_start":5,"column_end":74}},{"value":"/ base reader's data.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420821,"byte_end":420844,"line_start":231,"line_end":231,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420969,"byte_end":420978,"line_start":235,"line_end":235,"column_start":8,"column_end":17},"name":"offset_id","qualname":"::read::reader::Reader::offset_id","value":"pub fn offset_id(&Self) -> ReaderOffsetId","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Return an identifier for the current reader offset.\n","sig":null,"attributes":[{"value":"/ Return an identifier for the current reader offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420906,"byte_end":420961,"line_start":234,"line_end":234,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421117,"byte_end":421133,"line_start":239,"line_end":239,"column_start":8,"column_end":24},"name":"lookup_offset_id","qualname":"::read::reader::Reader::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId) -> Option<Self::Offset>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Return the offset corresponding to the given `id` if\n it is associated with this reader.\n","sig":null,"attributes":[{"value":"/ Return the offset corresponding to the given `id` if","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421010,"byte_end":421066,"line_start":237,"line_end":237,"column_start":5,"column_end":61}},{"value":"/ it is associated with this reader.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421071,"byte_end":421109,"line_start":238,"line_end":238,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421308,"byte_end":421312,"line_start":243,"line_end":243,"column_start":8,"column_end":12},"name":"find","qualname":"::read::reader::Reader::find","value":"pub fn find(&Self, u8) -> Result<Self::Offset>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Find the index of the first occurence of the given byte.\n The offset of the reader is not changed.\n","sig":null,"attributes":[{"value":"/ Find the index of the first occurence of the given byte.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421191,"byte_end":421251,"line_start":241,"line_end":241,"column_start":5,"column_end":65}},{"value":"/ The offset of the reader is not changed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421256,"byte_end":421300,"line_start":242,"line_end":242,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421410,"byte_end":421414,"line_start":246,"line_end":246,"column_start":8,"column_end":12},"name":"skip","qualname":"::read::reader::Reader::skip","value":"pub fn skip(&mut Self, Self::Offset) -> Result<()>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Discard the specified number of bytes.\n","sig":null,"attributes":[{"value":"/ Discard the specified number of bytes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421360,"byte_end":421402,"line_start":245,"line_end":245,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421650,"byte_end":421655,"line_start":252,"line_end":252,"column_start":8,"column_end":13},"name":"split","qualname":"::read::reader::Reader::split","value":"pub fn split(&mut Self, Self::Offset) -> Result<Self>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Split a reader in two.","sig":null,"attributes":[{"value":"/ Split a reader in two.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421465,"byte_end":421491,"line_start":248,"line_end":248,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421496,"byte_end":421499,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ A new reader is returned that can be used to read the next","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421504,"byte_end":421566,"line_start":250,"line_end":250,"column_start":5,"column_end":67}},{"value":"/ `len` bytes, and `self` is advanced so that it reads the remainder.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421571,"byte_end":421642,"line_start":251,"line_end":251,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421936,"byte_end":421944,"line_start":260,"line_end":260,"column_start":8,"column_end":16},"name":"to_slice","qualname":"::read::reader::Reader::to_slice","value":"pub fn to_slice(&Self) -> Result<Cow<, [u8]>>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Return all remaining data as a clone-on-write slice.","sig":null,"attributes":[{"value":"/ Return all remaining data as a clone-on-write slice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421708,"byte_end":421764,"line_start":254,"line_end":254,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421769,"byte_end":421772,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ The slice will be borrowed where possible, but some readers may","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421777,"byte_end":421844,"line_start":256,"line_end":256,"column_start":5,"column_end":72}},{"value":"/ always return an owned vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421849,"byte_end":421883,"line_start":257,"line_end":257,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421888,"byte_end":421891,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Does not advance the reader.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421896,"byte_end":421928,"line_start":259,"line_end":259,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422284,"byte_end":422293,"line_start":270,"line_end":270,"column_start":8,"column_end":17},"name":"to_string","qualname":"::read::reader::Reader::to_string","value":"pub fn to_string(&Self) -> Result<Cow<, str>>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Convert all remaining data to a clone-on-write string.","sig":null,"attributes":[{"value":"/ Convert all remaining data to a clone-on-write string.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":421979,"byte_end":422037,"line_start":262,"line_end":262,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422042,"byte_end":422045,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ The string will be borrowed where possible, but some readers may","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422050,"byte_end":422118,"line_start":264,"line_end":264,"column_start":5,"column_end":73}},{"value":"/ always return an owned string.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422123,"byte_end":422157,"line_start":265,"line_end":265,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422162,"byte_end":422165,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Does not advance the reader.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422170,"byte_end":422202,"line_start":267,"line_end":267,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422207,"byte_end":422210,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the data contains invalid characters.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422215,"byte_end":422276,"line_start":269,"line_end":269,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422588,"byte_end":422603,"line_start":278,"line_end":278,"column_start":8,"column_end":23},"name":"to_string_lossy","qualname":"::read::reader::Reader::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> Result<Cow<, str>>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Convert all remaining data to a clone-on-write string, including invalid characters.","sig":null,"attributes":[{"value":"/ Convert all remaining data to a clone-on-write string, including invalid characters.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422327,"byte_end":422415,"line_start":272,"line_end":272,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422420,"byte_end":422423,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ The string will be borrowed where possible, but some readers may","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422428,"byte_end":422496,"line_start":274,"line_end":274,"column_start":5,"column_end":73}},{"value":"/ always return an owned string.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422501,"byte_end":422535,"line_start":275,"line_end":275,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422540,"byte_end":422543,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Does not advance the reader.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422548,"byte_end":422580,"line_start":277,"line_end":277,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422691,"byte_end":422701,"line_start":281,"line_end":281,"column_start":8,"column_end":18},"name":"read_slice","qualname":"::read::reader::Reader::read_slice","value":"pub fn read_slice(&mut Self, &mut [u8]) -> Result<()>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read exactly `buf.len()` bytes into `buf`.\n","sig":null,"attributes":[{"value":"/ Read exactly `buf.len()` bytes into `buf`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422637,"byte_end":422683,"line_start":280,"line_end":280,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422791,"byte_end":422804,"line_start":285,"line_end":285,"column_start":8,"column_end":21},"name":"read_u8_array","qualname":"::read::reader::Reader::read_u8_array","value":"pub fn read_u8_array<A>(&mut Self) -> Result<A> where A: Sized + Default +\nAsMut<[u8]>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read a u8 array.\n","sig":null,"attributes":[{"value":"/ Read a u8 array.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422749,"byte_end":422769,"line_start":283,"line_end":283,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":422774,"byte_end":422783,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423102,"byte_end":423110,"line_start":296,"line_end":296,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::read::reader::Reader::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Return true if the number of bytes remaining is zero.\n","sig":null,"attributes":[{"value":"/ Return true if the number of bytes remaining is zero.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423023,"byte_end":423080,"line_start":294,"line_end":294,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423085,"byte_end":423094,"line_start":295,"line_end":295,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423222,"byte_end":423229,"line_start":302,"line_end":302,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::read::reader::Reader::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read a u8.\n","sig":null,"attributes":[{"value":"/ Read a u8.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423186,"byte_end":423200,"line_start":300,"line_end":300,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423205,"byte_end":423214,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423370,"byte_end":423377,"line_start":309,"line_end":309,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::read::reader::Reader::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an i8.\n","sig":null,"attributes":[{"value":"/ Read an i8.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423333,"byte_end":423348,"line_start":307,"line_end":307,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423353,"byte_end":423362,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423524,"byte_end":423532,"line_start":316,"line_end":316,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::read::reader::Reader::read_u16","value":"pub fn read_u16(&mut Self) -> Result<u16>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read a u16.\n","sig":null,"attributes":[{"value":"/ Read a u16.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423487,"byte_end":423502,"line_start":314,"line_end":314,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423507,"byte_end":423516,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423697,"byte_end":423705,"line_start":323,"line_end":323,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::read::reader::Reader::read_i16","value":"pub fn read_i16(&mut Self) -> Result<i16>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an i16.\n","sig":null,"attributes":[{"value":"/ Read an i16.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423659,"byte_end":423675,"line_start":321,"line_end":321,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423680,"byte_end":423689,"line_start":322,"line_end":322,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423869,"byte_end":423877,"line_start":330,"line_end":330,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::read::reader::Reader::read_u32","value":"pub fn read_u32(&mut Self) -> Result<u32>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read a u32.\n","sig":null,"attributes":[{"value":"/ Read a u32.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423832,"byte_end":423847,"line_start":328,"line_end":328,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":423852,"byte_end":423861,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424042,"byte_end":424050,"line_start":337,"line_end":337,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::read::reader::Reader::read_i32","value":"pub fn read_i32(&mut Self) -> Result<i32>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an i32.\n","sig":null,"attributes":[{"value":"/ Read an i32.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424004,"byte_end":424020,"line_start":335,"line_end":335,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424025,"byte_end":424034,"line_start":336,"line_end":336,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424214,"byte_end":424222,"line_start":344,"line_end":344,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::read::reader::Reader::read_u64","value":"pub fn read_u64(&mut Self) -> Result<u64>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read a u64.\n","sig":null,"attributes":[{"value":"/ Read a u64.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424177,"byte_end":424192,"line_start":342,"line_end":342,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424197,"byte_end":424206,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424387,"byte_end":424395,"line_start":351,"line_end":351,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::read::reader::Reader::read_i64","value":"pub fn read_i64(&mut Self) -> Result<i64>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an i64.\n","sig":null,"attributes":[{"value":"/ Read an i64.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424349,"byte_end":424365,"line_start":349,"line_end":349,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424370,"byte_end":424379,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424559,"byte_end":424567,"line_start":358,"line_end":358,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::read::reader::Reader::read_f32","value":"pub fn read_f32(&mut Self) -> Result<f32>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read a f32.\n","sig":null,"attributes":[{"value":"/ Read a f32.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424522,"byte_end":424537,"line_start":356,"line_end":356,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424542,"byte_end":424551,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424731,"byte_end":424739,"line_start":365,"line_end":365,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::read::reader::Reader::read_f64","value":"pub fn read_f64(&mut Self) -> Result<f64>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read a f64.\n","sig":null,"attributes":[{"value":"/ Read a f64.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424694,"byte_end":424709,"line_start":363,"line_end":363,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424714,"byte_end":424723,"line_start":364,"line_end":364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425007,"byte_end":425016,"line_start":376,"line_end":376,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::read::reader::Reader::read_uint","value":"pub fn read_uint(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an unsigned n-bytes integer u64.","sig":null,"attributes":[{"value":"/ Read an unsigned n-bytes integer u64.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424866,"byte_end":424907,"line_start":370,"line_end":370,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424912,"byte_end":424915,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424920,"byte_end":424932,"line_start":372,"line_end":372,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424937,"byte_end":424940,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ Panics when nbytes < 1 or nbytes > 8","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424945,"byte_end":424985,"line_start":374,"line_end":374,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":424990,"byte_end":424999,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425261,"byte_end":425287,"line_start":383,"line_end":383,"column_start":8,"column_end":34},"name":"read_null_terminated_slice","qualname":"::read::reader::Reader::read_null_terminated_slice","value":"pub fn read_null_terminated_slice(&mut Self) -> Result<Self>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read a null-terminated slice, and return it (excluding the null).\n","sig":null,"attributes":[{"value":"/ Read a null-terminated slice, and return it (excluding the null).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425184,"byte_end":425253,"line_start":382,"line_end":382,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425511,"byte_end":425523,"line_start":391,"line_end":391,"column_start":8,"column_end":20},"name":"read_uleb128","qualname":"::read::reader::Reader::read_uleb128","value":"pub fn read_uleb128(&mut Self) -> Result<u64>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 encoded integer.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 encoded integer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425459,"byte_end":425503,"line_start":390,"line_end":390,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425648,"byte_end":425664,"line_start":396,"line_end":396,"column_start":8,"column_end":24},"name":"read_uleb128_u32","qualname":"::read::reader::Reader::read_uleb128_u32","value":"pub fn read_uleb128_u32(&mut Self) -> Result<u32>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 encoded u32.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 encoded u32.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425600,"byte_end":425640,"line_start":395,"line_end":395,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425865,"byte_end":425881,"line_start":403,"line_end":403,"column_start":8,"column_end":24},"name":"read_uleb128_u16","qualname":"::read::reader::Reader::read_uleb128_u16","value":"pub fn read_uleb128_u16(&mut Self) -> Result<u16>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 encoded u16.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 encoded u16.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425817,"byte_end":425857,"line_start":402,"line_end":402,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":426002,"byte_end":426014,"line_start":408,"line_end":408,"column_start":8,"column_end":20},"name":"read_sleb128","qualname":"::read::reader::Reader::read_sleb128","value":"pub fn read_sleb128(&mut Self) -> Result<i64>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read a signed LEB128 encoded integer.\n","sig":null,"attributes":[{"value":"/ Read a signed LEB128 encoded integer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":425953,"byte_end":425994,"line_start":407,"line_end":407,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":426265,"byte_end":426284,"line_start":416,"line_end":416,"column_start":8,"column_end":27},"name":"read_initial_length","qualname":"::read::reader::Reader::read_initial_length","value":"pub fn read_initial_length(&mut Self) -> Result<(Self::Offset, Format)>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an initial length field.","sig":null,"attributes":[{"value":"/ Read an initial length field.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":426089,"byte_end":426122,"line_start":412,"line_end":412,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":426127,"byte_end":426130,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ This field is encoded as either a 32-bit length or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":426135,"byte_end":426189,"line_start":414,"line_end":414,"column_start":5,"column_end":59}},{"value":"/ a 64-bit length, and the returned `Format` indicates which.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":426194,"byte_end":426257,"line_start":415,"line_end":415,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":426918,"byte_end":426930,"line_start":432,"line_end":432,"column_start":8,"column_end":20},"name":"read_address","qualname":"::read::reader::Reader::read_address","value":"pub fn read_address(&mut Self, u8) -> Result<u64>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Read an address-sized integer, and return it as a `u64`.\n","sig":null,"attributes":[{"value":"/ Read an address-sized integer, and return it as a `u64`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":426850,"byte_end":426910,"line_start":431,"line_end":431,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":427470,"byte_end":427479,"line_start":446,"line_end":446,"column_start":8,"column_end":17},"name":"read_word","qualname":"::read::reader::Reader::read_word","value":"pub fn read_word(&mut Self, Format) -> Result<Self::Offset>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Parse a word-sized integer according to the DWARF format.","sig":null,"attributes":[{"value":"/ Parse a word-sized integer according to the DWARF format.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":427279,"byte_end":427340,"line_start":442,"line_end":442,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":427345,"byte_end":427348,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ These are always used to encode section offsets or lengths,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":427353,"byte_end":427416,"line_start":444,"line_end":444,"column_start":5,"column_end":68}},{"value":"/ and so have a type of `Self::Offset`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":427421,"byte_end":427462,"line_start":445,"line_end":445,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":427824,"byte_end":427835,"line_start":455,"line_end":455,"column_start":8,"column_end":19},"name":"read_length","qualname":"::read::reader::Reader::read_length","value":"pub fn read_length(&mut Self, Format) -> Result<Self::Offset>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Parse a word-sized section length according to the DWARF format.\n","sig":null,"attributes":[{"value":"/ Parse a word-sized section length according to the DWARF format.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":427734,"byte_end":427802,"line_start":453,"line_end":453,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":427807,"byte_end":427816,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":428021,"byte_end":428032,"line_start":461,"line_end":461,"column_start":8,"column_end":19},"name":"read_offset","qualname":"::read::reader::Reader::read_offset","value":"pub fn read_offset(&mut Self, Format) -> Result<Self::Offset>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Parse a word-sized section offset according to the DWARF format.\n","sig":null,"attributes":[{"value":"/ Parse a word-sized section offset according to the DWARF format.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":427931,"byte_end":427999,"line_start":459,"line_end":459,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":428004,"byte_end":428013,"line_start":460,"line_end":460,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":428260,"byte_end":428277,"line_start":468,"line_end":468,"column_start":8,"column_end":25},"name":"read_sized_offset","qualname":"::read::reader::Reader::read_sized_offset","value":"pub fn read_sized_offset(&mut Self, u8) -> Result<Self::Offset>","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":" Parse a section offset of the given size.","sig":null,"attributes":[{"value":"/ Parse a section offset of the given size.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":428128,"byte_end":428173,"line_start":465,"line_end":465,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":428178,"byte_end":428181,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ This is used for `DW_FORM_ref_addr` values in DWARF version 2.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":428186,"byte_end":428252,"line_start":467,"line_end":467,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":5471},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429287,"byte_end":429298,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"DebugAbbrev","qualname":"::read::abbrev::DebugAbbrev","value":"DebugAbbrev {  }","parent":null,"children":[{"krate":0,"index":5473}],"decl_id":null,"docs":" The `DebugAbbrev` struct represents the abbreviations describing\n `DebuggingInformationEntry`s' attribute names and forms found in the\n `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `DebugAbbrev` struct represents the abbreviations describing","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429066,"byte_end":429134,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ `DebuggingInformationEntry`s' attribute names and forms found in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429135,"byte_end":429207,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ `.debug_abbrev` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429208,"byte_end":429236,"line_start":17,"line_end":17,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430039,"byte_end":430042,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugAbbrev<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugAbbrev` instance from the data in the `.debug_abbrev`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugAbbrev` instance from the data in the `.debug_abbrev`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429433,"byte_end":429512,"line_start":27,"line_end":27,"column_start":5,"column_end":84}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429517,"byte_end":429529,"line_start":28,"line_end":28,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429534,"byte_end":429537,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_abbrev` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429542,"byte_end":429619,"line_start":30,"line_end":30,"column_start":5,"column_end":82}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429624,"byte_end":429694,"line_start":31,"line_end":31,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429699,"byte_end":429738,"line_start":32,"line_end":32,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429743,"byte_end":429746,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429751,"byte_end":429758,"line_start":34,"line_end":34,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAbbrev, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429763,"byte_end":429806,"line_start":35,"line_end":35,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429811,"byte_end":429814,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429819,"byte_end":429860,"line_start":37,"line_end":37,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_abbrev_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429865,"byte_end":429919,"line_start":38,"line_end":38,"column_start":5,"column_end":59}},{"value":"/ let debug_abbrev = DebugAbbrev::new(read_debug_abbrev_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429924,"byte_end":430015,"line_start":39,"line_end":39,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430020,"byte_end":430027,"line_start":40,"line_end":40,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430403,"byte_end":430416,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<DebugAbbrev<R>>::abbreviations","value":"pub fn abbreviations(&Self, DebugAbbrevOffset<R::Offset>)\n-> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse the abbreviations at the given `offset` within this\n `.debug_abbrev` section.","sig":null,"attributes":[{"value":"/ Parse the abbreviations at the given `offset` within this","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430218,"byte_end":430279,"line_start":47,"line_end":47,"column_start":5,"column_end":66}},{"value":"/ `.debug_abbrev` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430284,"byte_end":430312,"line_start":48,"line_end":48,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430317,"byte_end":430320,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ The `offset` should generally be retrieved from a unit header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430325,"byte_end":430391,"line_start":50,"line_end":50,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431337,"byte_end":431343,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugAbbrev<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugAbbrev<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugAbbrev` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugAbbrev` section that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430703,"byte_end":430773,"line_start":62,"line_end":62,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430778,"byte_end":430781,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430786,"byte_end":430851,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430856,"byte_end":430859,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430864,"byte_end":430884,"line_start":66,"line_end":66,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430889,"byte_end":430892,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430897,"byte_end":430915,"line_start":68,"line_end":68,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430920,"byte_end":430965,"line_start":69,"line_end":69,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430970,"byte_end":431054,"line_start":70,"line_end":70,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugAbbrev<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431059,"byte_end":431127,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431132,"byte_end":431179,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431184,"byte_end":431234,"line_start":73,"line_end":73,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431239,"byte_end":431301,"line_start":74,"line_end":74,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431306,"byte_end":431313,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431318,"byte_end":431325,"line_start":76,"line_end":76,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5485},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":432052,"byte_end":432065,"line_start":109,"line_end":109,"column_start":12,"column_end":25},"name":"Abbreviations","qualname":"::read::abbrev::Abbreviations","value":"Abbreviations {  }","parent":null,"children":[{"krate":0,"index":5486},{"krate":0,"index":5487}],"decl_id":null,"docs":" A set of type abbreviations.","sig":null,"attributes":[{"value":"/ A set of type abbreviations.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431839,"byte_end":431871,"line_start":103,"line_end":103,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431872,"byte_end":431875,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Construct an `Abbreviations` instance with the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431876,"byte_end":431926,"line_start":105,"line_end":105,"column_start":1,"column_end":51}},{"value":"/ [`abbreviations()`](struct.UnitHeader.html#method.abbreviations)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431927,"byte_end":431995,"line_start":106,"line_end":106,"column_start":1,"column_end":69}},{"value":"/ method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431996,"byte_end":432007,"line_start":107,"line_end":107,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":433827,"byte_end":433830,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"get","qualname":"<Abbreviations>::get","value":"pub fn get(&Self, u64) -> Option<&Abbreviation>","parent":null,"children":[],"decl_id":null,"docs":" Get the abbreviation associated with the given code.\n","sig":null,"attributes":[{"value":"/ Get the abbreviation associated with the given code.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":433745,"byte_end":433801,"line_start":155,"line_end":155,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":433806,"byte_end":433815,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5494},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":434747,"byte_end":434759,"line_start":185,"line_end":185,"column_start":12,"column_end":24},"name":"Abbreviation","qualname":"::read::abbrev::Abbreviation","value":"Abbreviation {  }","parent":null,"children":[{"krate":0,"index":5495},{"krate":0,"index":5496},{"krate":0,"index":5497},{"krate":0,"index":5498}],"decl_id":null,"docs":" An abbreviation describes the shape of a `DebuggingInformationEntry`'s type:\n its code, tag type, whether it has children, and its set of attributes.\n","sig":null,"attributes":[{"value":"/ An abbreviation describes the shape of a `DebuggingInformationEntry`'s type:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":434540,"byte_end":434620,"line_start":182,"line_end":182,"column_start":1,"column_end":81}},{"value":"/ its code, tag type, whether it has children, and its set of attributes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":434621,"byte_end":434696,"line_start":183,"line_end":183,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435395,"byte_end":435399,"line_start":215,"line_end":215,"column_start":12,"column_end":16},"name":"code","qualname":"<Abbreviation>::code","value":"pub fn code(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get this abbreviation's code.\n","sig":null,"attributes":[{"value":"/ Get this abbreviation's code.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435336,"byte_end":435369,"line_start":213,"line_end":213,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435374,"byte_end":435383,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435503,"byte_end":435506,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"name":"tag","qualname":"<Abbreviation>::tag","value":"pub fn tag(&Self) -> constants::DwTag","parent":null,"children":[],"decl_id":null,"docs":" Get this abbreviation's tag.\n","sig":null,"attributes":[{"value":"/ Get this abbreviation's tag.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435445,"byte_end":435477,"line_start":219,"line_end":219,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435482,"byte_end":435491,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435664,"byte_end":435676,"line_start":227,"line_end":227,"column_start":12,"column_end":24},"name":"has_children","qualname":"<Abbreviation>::has_children","value":"pub fn has_children(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this abbreviation's type has children, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if this abbreviation's type has children, false otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435564,"byte_end":435638,"line_start":225,"line_end":225,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435643,"byte_end":435652,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435826,"byte_end":435836,"line_start":233,"line_end":233,"column_start":12,"column_end":22},"name":"attributes","qualname":"<Abbreviation>::attributes","value":"pub fn attributes(&Self) -> &[AttributeSpecification]","parent":null,"children":[],"decl_id":null,"docs":" Get this abbreviation's attributes.\n","sig":null,"attributes":[{"value":"/ Get this abbreviation's attributes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435761,"byte_end":435800,"line_start":231,"line_end":231,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":435805,"byte_end":435814,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5520},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439956,"byte_end":439978,"line_start":376,"line_end":376,"column_start":12,"column_end":34},"name":"AttributeSpecification","qualname":"::read::abbrev::AttributeSpecification","value":"AttributeSpecification {  }","parent":null,"children":[{"krate":0,"index":5521},{"krate":0,"index":5522},{"krate":0,"index":5523}],"decl_id":null,"docs":" The description of an attribute in an abbreviated type. It is a pair of name\n and form.\n","sig":null,"attributes":[{"value":"/ The description of an attribute in an abbreviated type. It is a pair of name","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439805,"byte_end":439885,"line_start":373,"line_end":373,"column_start":1,"column_end":81}},{"value":"/ and form.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439886,"byte_end":439899,"line_start":374,"line_end":374,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440238,"byte_end":440241,"line_start":386,"line_end":386,"column_start":12,"column_end":15},"name":"new","qualname":"<AttributeSpecification>::new","value":"pub fn new(constants::DwAt, constants::DwForm, Option<i64>)\n-> AttributeSpecification","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `AttributeSpecification` from the given name and form\n and implicit const value.\n","sig":null,"attributes":[{"value":"/ Construct a new `AttributeSpecification` from the given name and form","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440105,"byte_end":440178,"line_start":383,"line_end":383,"column_start":5,"column_end":78}},{"value":"/ and implicit const value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440183,"byte_end":440212,"line_start":384,"line_end":384,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440217,"byte_end":440226,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440819,"byte_end":440823,"line_start":404,"line_end":404,"column_start":12,"column_end":16},"name":"name","qualname":"<AttributeSpecification>::name","value":"pub fn name(&Self) -> constants::DwAt","parent":null,"children":[],"decl_id":null,"docs":" Get the attribute's name.\n","sig":null,"attributes":[{"value":"/ Get the attribute's name.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440764,"byte_end":440793,"line_start":402,"line_end":402,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440798,"byte_end":440807,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440936,"byte_end":440940,"line_start":410,"line_end":410,"column_start":12,"column_end":16},"name":"form","qualname":"<AttributeSpecification>::form","value":"pub fn form(&Self) -> constants::DwForm","parent":null,"children":[],"decl_id":null,"docs":" Get the attribute's form.\n","sig":null,"attributes":[{"value":"/ Get the attribute's form.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440881,"byte_end":440910,"line_start":408,"line_end":408,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440915,"byte_end":440924,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":441071,"byte_end":441091,"line_start":416,"line_end":416,"column_start":12,"column_end":32},"name":"implicit_const_value","qualname":"<AttributeSpecification>::implicit_const_value","value":"pub fn implicit_const_value(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Get the attribute's implicit const value.\n","sig":null,"attributes":[{"value":"/ Get the attribute's implicit const value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":441000,"byte_end":441045,"line_start":414,"line_end":414,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":441050,"byte_end":441059,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":441493,"byte_end":441497,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"size","qualname":"<AttributeSpecification>::size","value":"pub fn size<R: Reader>(&Self, &UnitHeader<R>) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the size of the attribute, in bytes.","sig":null,"attributes":[{"value":"/ Return the size of the attribute, in bytes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":441275,"byte_end":441322,"line_start":424,"line_end":424,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":441327,"byte_end":441330,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Note that because some attributes are variably sized, the size cannot","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":441335,"byte_end":441408,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ always be known without parsing, in which case we return `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":441413,"byte_end":441481,"line_start":427,"line_end":427,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":5536},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461035,"byte_end":461047,"line_start":8,"line_end":8,"column_start":12,"column_end":24},"name":"DebugAranges","qualname":"::read::aranges::DebugAranges","value":"DebugAranges {  }","parent":null,"children":[{"krate":0,"index":5538}],"decl_id":null,"docs":" The `DebugAranges` struct represents the DWARF address range information\n found in the `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ The `DebugAranges` struct represents the DWARF address range information","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":460865,"byte_end":460941,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ found in the `.debug_aranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":460942,"byte_end":460984,"line_start":6,"line_end":6,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461758,"byte_end":461761,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugAranges<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugAranges` instance from the data in the `.debug_aranges`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugAranges` instance from the data in the `.debug_aranges`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461170,"byte_end":461251,"line_start":16,"line_end":16,"column_start":5,"column_end":86}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461256,"byte_end":461268,"line_start":17,"line_end":17,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461273,"byte_end":461276,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_aranges` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461281,"byte_end":461359,"line_start":19,"line_end":19,"column_start":5,"column_end":83}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461364,"byte_end":461434,"line_start":20,"line_end":20,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461439,"byte_end":461478,"line_start":21,"line_end":21,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461483,"byte_end":461486,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461491,"byte_end":461498,"line_start":23,"line_end":23,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAranges, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461503,"byte_end":461547,"line_start":24,"line_end":24,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461552,"byte_end":461555,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461560,"byte_end":461579,"line_start":26,"line_end":26,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_aranges_section = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461584,"byte_end":461631,"line_start":27,"line_end":27,"column_start":5,"column_end":52}},{"value":"/ let debug_aranges =","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461636,"byte_end":461659,"line_start":28,"line_end":28,"column_start":5,"column_end":28}},{"value":"/     DebugAranges::new(read_debug_aranges_section(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461664,"byte_end":461734,"line_start":29,"line_end":29,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461739,"byte_end":461746,"line_start":30,"line_end":30,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462085,"byte_end":462092,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"headers","qualname":"<DebugAranges<R>>::headers","value":"pub fn headers(&Self) -> ArangeHeaderIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the sets of entries in the `.debug_aranges` section.","sig":null,"attributes":[{"value":"/ Iterate the sets of entries in the `.debug_aranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461947,"byte_end":462011,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462016,"byte_end":462019,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ Each set of entries belongs to a single unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462024,"byte_end":462073,"line_start":41,"line_end":41,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462328,"byte_end":462334,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"header","qualname":"<DebugAranges<R>>::header","value":"pub fn header(&Self, DebugArangesOffset<R::Offset>) -> Result<ArangeHeader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Get the header at the given offset.\n","sig":null,"attributes":[{"value":"/ Get the header at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462277,"byte_end":462316,"line_start":49,"line_end":49,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463210,"byte_end":463216,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugAranges<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugAranges<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugAranges` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugAranges` section that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462574,"byte_end":462645,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462650,"byte_end":462653,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462658,"byte_end":462723,"line_start":60,"line_end":60,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462728,"byte_end":462731,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462736,"byte_end":462756,"line_start":62,"line_end":62,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462761,"byte_end":462764,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462769,"byte_end":462787,"line_start":64,"line_end":64,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462792,"byte_end":462837,"line_start":65,"line_end":65,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462842,"byte_end":462926,"line_start":66,"line_end":66,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugAranges<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462931,"byte_end":463000,"line_start":67,"line_end":67,"column_start":5,"column_end":74}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463005,"byte_end":463052,"line_start":68,"line_end":68,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463057,"byte_end":463107,"line_start":69,"line_end":69,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463112,"byte_end":463174,"line_start":70,"line_end":70,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463179,"byte_end":463186,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463191,"byte_end":463198,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5550},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463743,"byte_end":463759,"line_start":99,"line_end":99,"column_start":12,"column_end":28},"name":"ArangeHeaderIter","qualname":"::read::aranges::ArangeHeaderIter","value":"ArangeHeaderIter {  }","parent":null,"children":[{"krate":0,"index":5552},{"krate":0,"index":5553}],"decl_id":null,"docs":" An iterator over the headers of a `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ An iterator over the headers of a `.debug_aranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463644,"byte_end":463707,"line_start":97,"line_end":97,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463931,"byte_end":463935,"line_start":106,"line_end":106,"column_start":12,"column_end":16},"name":"next","qualname":"<ArangeHeaderIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<ArangeHeader<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next header.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463875,"byte_end":463919,"line_start":105,"line_end":105,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":5560},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":464880,"byte_end":464892,"line_start":139,"line_end":139,"column_start":12,"column_end":24},"name":"ArangeHeader","qualname":"::read::aranges::ArangeHeader","value":"ArangeHeader {  }","parent":null,"children":[{"krate":0,"index":5563},{"krate":0,"index":5564},{"krate":0,"index":5565},{"krate":0,"index":5566},{"krate":0,"index":5567},{"krate":0,"index":5568}],"decl_id":null,"docs":" A header for a set of entries in the `.debug_arange` section.","sig":null,"attributes":[{"value":"/ A header for a set of entries in the `.debug_arange` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":464713,"byte_end":464778,"line_start":135,"line_end":135,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":464779,"byte_end":464782,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ These entries all belong to a single unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":464783,"byte_end":464829,"line_start":137,"line_end":137,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467081,"byte_end":467087,"line_start":208,"line_end":208,"column_start":12,"column_end":18},"name":"offset","qualname":"<ArangeHeader<R, Offset>>::offset","value":"pub fn offset(&Self) -> DebugArangesOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the offset of this header within the `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ Return the offset of this header within the `.debug_aranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":466982,"byte_end":467055,"line_start":206,"line_end":206,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467060,"byte_end":467069,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467251,"byte_end":467257,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"name":"length","qualname":"<ArangeHeader<R, Offset>>::length","value":"pub fn length(&Self) -> Offset","parent":null,"children":[],"decl_id":null,"docs":" Return the length of this set of entries, including the header.\n","sig":null,"attributes":[{"value":"/ Return the length of this set of entries, including the header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467158,"byte_end":467225,"line_start":212,"line_end":212,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467230,"byte_end":467239,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467393,"byte_end":467401,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"encoding","qualname":"<ArangeHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this set of entries.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this set of entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467308,"byte_end":467367,"line_start":218,"line_end":218,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467372,"byte_end":467381,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467534,"byte_end":467546,"line_start":226,"line_end":226,"column_start":12,"column_end":24},"name":"segment_size","qualname":"<ArangeHeader<R, Offset>>::segment_size","value":"pub fn segment_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the segment size for this set of entries.\n","sig":null,"attributes":[{"value":"/ Return the segment size for this set of entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467456,"byte_end":467508,"line_start":224,"line_end":224,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467513,"byte_end":467522,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467707,"byte_end":467724,"line_start":232,"line_end":232,"column_start":12,"column_end":29},"name":"debug_info_offset","qualname":"<ArangeHeader<R, Offset>>::debug_info_offset","value":"pub fn debug_info_offset(&Self) -> DebugInfoOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the offset into the .debug_info section for this set of arange entries.\n","sig":null,"attributes":[{"value":"/ Return the offset into the .debug_info section for this set of arange entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467599,"byte_end":467681,"line_start":230,"line_end":230,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467686,"byte_end":467695,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467871,"byte_end":467878,"line_start":238,"line_end":238,"column_start":12,"column_end":19},"name":"entries","qualname":"<ArangeHeader<R, Offset>>::entries","value":"pub fn entries(&Self) -> ArangeEntryIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the arange entries in this set.\n","sig":null,"attributes":[{"value":"/ Return the arange entries in this set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467803,"byte_end":467845,"line_start":236,"line_end":236,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":467850,"byte_end":467859,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5592},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468272,"byte_end":468287,"line_start":252,"line_end":252,"column_start":12,"column_end":27},"name":"ArangeEntryIter","qualname":"::read::aranges::ArangeEntryIter","value":"ArangeEntryIter {  }","parent":null,"children":[{"krate":0,"index":5594},{"krate":0,"index":5595},{"krate":0,"index":5596}],"decl_id":null,"docs":" An iterator over the aranges from a `.debug_aranges` section.","sig":null,"attributes":[{"value":"/ An iterator over the aranges from a `.debug_aranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468078,"byte_end":468143,"line_start":247,"line_end":247,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468144,"byte_end":468147,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468148,"byte_end":468169,"line_start":249,"line_end":249,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468170,"byte_end":468236,"line_start":250,"line_end":250,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468799,"byte_end":468803,"line_start":265,"line_end":265,"column_start":12,"column_end":16},"name":"next","qualname":"<ArangeEntryIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<ArangeEntry>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next arange.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next arange.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468405,"byte_end":468457,"line_start":259,"line_end":259,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468462,"byte_end":468465,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed arange as `Ok(Some(arange))`. Returns `Ok(None)`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468470,"byte_end":468547,"line_start":261,"line_end":261,"column_start":5,"column_end":82}},{"value":"/ when iteration is complete and all aranges have already been parsed and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468552,"byte_end":468627,"line_start":262,"line_end":262,"column_start":5,"column_end":80}},{"value":"/ yielded. If an error occurs while parsing the next arange, then this error","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468632,"byte_end":468710,"line_start":263,"line_end":263,"column_start":5,"column_end":83}},{"value":"/ is returned as `Err(e)`, and all subsequent calls return `Ok(None)`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468715,"byte_end":468787,"line_start":264,"line_end":264,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":5603},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":469667,"byte_end":469678,"line_start":296,"line_end":296,"column_start":12,"column_end":23},"name":"ArangeEntry","qualname":"::read::aranges::ArangeEntry","value":"ArangeEntry {  }","parent":null,"children":[{"krate":0,"index":5604},{"krate":0,"index":5605},{"krate":0,"index":5606}],"decl_id":null,"docs":" A single parsed arange.\n","sig":null,"attributes":[{"value":"/ A single parsed arange.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":469572,"byte_end":469599,"line_start":294,"line_end":294,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471148,"byte_end":471155,"line_start":344,"line_end":344,"column_start":12,"column_end":19},"name":"segment","qualname":"<ArangeEntry>::segment","value":"pub fn segment(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the segment selector of this arange.\n","sig":null,"attributes":[{"value":"/ Return the segment selector of this arange.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471075,"byte_end":471122,"line_start":342,"line_end":342,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471127,"byte_end":471136,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471286,"byte_end":471293,"line_start":350,"line_end":350,"column_start":12,"column_end":19},"name":"address","qualname":"<ArangeEntry>::address","value":"pub fn address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Return the beginning address of this arange.\n","sig":null,"attributes":[{"value":"/ Return the beginning address of this arange.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471212,"byte_end":471260,"line_start":348,"line_end":348,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471265,"byte_end":471274,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471405,"byte_end":471411,"line_start":356,"line_end":356,"column_start":12,"column_end":18},"name":"length","qualname":"<ArangeEntry>::length","value":"pub fn length(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Return the length of this arange.\n","sig":null,"attributes":[{"value":"/ Return the length of this arange.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471342,"byte_end":471379,"line_start":354,"line_end":354,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471384,"byte_end":471393,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471506,"byte_end":471511,"line_start":362,"line_end":362,"column_start":12,"column_end":17},"name":"range","qualname":"<ArangeEntry>::range","value":"pub fn range(&Self) -> Range","parent":null,"children":[],"decl_id":null,"docs":" Return the range.\n","sig":null,"attributes":[{"value":"/ Return the range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471459,"byte_end":471480,"line_start":360,"line_end":360,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":471485,"byte_end":471494,"line_start":361,"line_end":361,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":5634},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481124,"byte_end":481133,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"DebugLine","qualname":"::read::line::DebugLine","value":"DebugLine {  }","parent":null,"children":[{"krate":0,"index":5636}],"decl_id":null,"docs":" The `DebugLine` struct contains the source location to instruction mapping\n found in the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `DebugLine` struct contains the source location to instruction mapping","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":480955,"byte_end":481033,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ found in the `.debug_line` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481034,"byte_end":481073,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481854,"byte_end":481857,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLine<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLine` instance from the data in the `.debug_line`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLine` instance from the data in the `.debug_line`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481264,"byte_end":481339,"line_start":25,"line_end":25,"column_start":5,"column_end":80}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481344,"byte_end":481356,"line_start":26,"line_end":26,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481361,"byte_end":481364,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_line` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481369,"byte_end":481444,"line_start":28,"line_end":28,"column_start":5,"column_end":80}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481449,"byte_end":481519,"line_start":29,"line_end":29,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481524,"byte_end":481563,"line_start":30,"line_end":30,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481568,"byte_end":481571,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481576,"byte_end":481583,"line_start":32,"line_end":32,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLine, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481588,"byte_end":481629,"line_start":33,"line_end":33,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481634,"byte_end":481637,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481642,"byte_end":481683,"line_start":35,"line_end":35,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_line_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481688,"byte_end":481740,"line_start":36,"line_end":36,"column_start":5,"column_end":57}},{"value":"/ let debug_line = DebugLine::new(read_debug_line_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481745,"byte_end":481830,"line_start":37,"line_end":37,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481835,"byte_end":481842,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483179,"byte_end":483186,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"program","qualname":"<DebugLine<R>>::program","value":"pub fn program(&Self, DebugLineOffset<R::Offset>, u8, Option<R>, Option<R>)\n-> Result<IncompleteLineProgram<R>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the line number program whose header is at the given `offset` in the\n `.debug_line` section.","sig":null,"attributes":[{"value":"/ Parse the line number program whose header is at the given `offset` in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482027,"byte_end":482105,"line_start":45,"line_end":45,"column_start":5,"column_end":83}},{"value":"/ `.debug_line` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482110,"byte_end":482136,"line_start":46,"line_end":46,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482141,"byte_end":482144,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The `address_size` must match the compilation unit that the lines apply to.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482149,"byte_end":482228,"line_start":48,"line_end":48,"column_start":5,"column_end":84}},{"value":"/ The `comp_dir` should be from the `DW_AT_comp_dir` attribute of the compilation","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482233,"byte_end":482316,"line_start":49,"line_end":49,"column_start":5,"column_end":88}},{"value":"/ unit. The `comp_name` should be from the `DW_AT_name` attribute of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482321,"byte_end":482395,"line_start":50,"line_end":50,"column_start":5,"column_end":79}},{"value":"/ compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482400,"byte_end":482421,"line_start":51,"line_end":51,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482426,"byte_end":482429,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482434,"byte_end":482452,"line_start":53,"line_end":53,"column_start":5,"column_end":23}},{"value":"/ use gimli::{DebugLine, DebugLineOffset, IncompleteLineProgram, EndianSlice, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482457,"byte_end":482551,"line_start":54,"line_end":54,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482556,"byte_end":482559,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482564,"byte_end":482583,"line_start":56,"line_end":56,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_line_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482588,"byte_end":482640,"line_start":57,"line_end":57,"column_start":5,"column_end":57}},{"value":"/ let debug_line = DebugLine::new(read_debug_line_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482645,"byte_end":482730,"line_start":58,"line_end":58,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482735,"byte_end":482738,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ // In a real example, we'd grab the offset via a compilation unit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482743,"byte_end":482812,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"/ // entry's `DW_AT_stmt_list` attribute, and the address size from that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482817,"byte_end":482891,"line_start":61,"line_end":61,"column_start":5,"column_end":79}},{"value":"/ // unit directly.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482896,"byte_end":482917,"line_start":62,"line_end":62,"column_start":5,"column_end":26}},{"value":"/ let offset = DebugLineOffset(0);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482922,"byte_end":482958,"line_start":63,"line_end":63,"column_start":5,"column_end":41}},{"value":"/ let address_size = 8;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482963,"byte_end":482988,"line_start":64,"line_end":64,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482993,"byte_end":482996,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ let program = debug_line.program(offset, address_size, None, None)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483001,"byte_end":483071,"line_start":66,"line_end":66,"column_start":5,"column_end":75}},{"value":"/     .expect(\"should have found a header at that offset, and parsed it OK\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483076,"byte_end":483155,"line_start":67,"line_end":67,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483160,"byte_end":483167,"line_start":68,"line_end":68,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484305,"byte_end":484311,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugLine<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugLine<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugLine` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugLine` section that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483675,"byte_end":483743,"line_start":85,"line_end":85,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483748,"byte_end":483751,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483756,"byte_end":483821,"line_start":87,"line_end":87,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483826,"byte_end":483829,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483834,"byte_end":483854,"line_start":89,"line_end":89,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483859,"byte_end":483862,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483867,"byte_end":483885,"line_start":91,"line_end":91,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483890,"byte_end":483935,"line_start":92,"line_end":92,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483940,"byte_end":484024,"line_start":93,"line_end":93,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugLine<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484029,"byte_end":484095,"line_start":94,"line_end":94,"column_start":5,"column_end":71}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484100,"byte_end":484147,"line_start":95,"line_end":95,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484152,"byte_end":484202,"line_start":96,"line_end":96,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484207,"byte_end":484269,"line_start":97,"line_end":97,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484274,"byte_end":484281,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484286,"byte_end":484293,"line_start":99,"line_end":99,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":1046},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484941,"byte_end":484958,"line_start":126,"line_end":126,"column_start":10,"column_end":27},"name":"LineNumberProgram","qualname":"::read::line::LineNumberProgram","value":"LineProgram<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberProgram` has been renamed to `LineProgram`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberProgram` has been renamed to `LineProgram`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484768,"byte_end":484838,"line_start":124,"line_end":124,"column_start":1,"column_end":71}},{"value":"deprecated(note =\n             \"LineNumberProgram has been renamed to LineProgram, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484839,"byte_end":484931,"line_start":125,"line_end":125,"column_start":1,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":1049},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485196,"byte_end":485207,"line_start":131,"line_end":131,"column_start":11,"column_end":22},"name":"LineProgram","qualname":"::read::line::LineProgram","value":"LineProgram<R, Offset = <R as Reader>::Offset>","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053}],"decl_id":null,"docs":" A `LineProgram` provides access to a `LineProgramHeader` and\n a way to add files to the files table if necessary. Gimli consumers should\n never need to use or see this trait.\n","sig":null,"attributes":[{"value":"/ A `LineProgram` provides access to a `LineProgramHeader` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485001,"byte_end":485065,"line_start":128,"line_end":128,"column_start":1,"column_end":65}},{"value":"/ a way to add files to the files table if necessary. Gimli consumers should","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485066,"byte_end":485144,"line_start":129,"line_end":129,"column_start":1,"column_end":79}},{"value":"/ never need to use or see this trait.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485145,"byte_end":485185,"line_start":130,"line_end":130,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485373,"byte_end":485379,"line_start":137,"line_end":137,"column_start":8,"column_end":14},"name":"header","qualname":"::read::line::LineProgram::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":{"krate":0,"index":1049},"children":[],"decl_id":null,"docs":" Get a reference to the held `LineProgramHeader`.\n","sig":null,"attributes":[{"value":"/ Get a reference to the held `LineProgramHeader`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485313,"byte_end":485365,"line_start":136,"line_end":136,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485479,"byte_end":485487,"line_start":139,"line_end":139,"column_start":8,"column_end":16},"name":"add_file","qualname":"::read::line::LineProgram::add_file","value":"pub fn add_file(&mut Self, FileEntry<R, Offset>)","parent":{"krate":0,"index":1049},"children":[],"decl_id":null,"docs":" Add a file to the file table if necessary.\n","sig":null,"attributes":[{"value":"/ Add a file to the file table if necessary.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485425,"byte_end":485471,"line_start":138,"line_end":138,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1065},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":486380,"byte_end":486392,"line_start":170,"line_end":170,"column_start":10,"column_end":22},"name":"StateMachine","qualname":"::read::line::StateMachine","value":"LineRows<R, Program, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `StateMachine` has been renamed to `LineRows`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `StateMachine` has been renamed to `LineRows`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":486223,"byte_end":486285,"line_start":168,"line_end":168,"column_start":1,"column_end":63}},{"value":"deprecated(note =\n             \"StateMachine has been renamed to LineRows, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":486286,"byte_end":486370,"line_start":169,"line_end":169,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":5648},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":486773,"byte_end":486781,"line_start":178,"line_end":178,"column_start":12,"column_end":20},"name":"LineRows","qualname":"::read::line::LineRows","value":"LineRows {  }","parent":null,"children":[{"krate":0,"index":5652},{"krate":0,"index":5653},{"krate":0,"index":5654}],"decl_id":null,"docs":" Executes a `LineProgram` to iterate over the rows in the matrix of line number information.","sig":null,"attributes":[{"value":"/ Executes a `LineProgram` to iterate over the rows in the matrix of line number information.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":486446,"byte_end":486541,"line_start":172,"line_end":172,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":486542,"byte_end":486545,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ \"The hypothetical machine used by a consumer of the line number information","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":486546,"byte_end":486625,"line_start":174,"line_end":174,"column_start":1,"column_end":80}},{"value":"/ to expand the byte-coded instruction stream into a matrix of line number","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":486626,"byte_end":486702,"line_start":175,"line_end":175,"column_start":1,"column_end":77}},{"value":"/ information.\" -- Section 6.2.1","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":486703,"byte_end":486737,"line_start":176,"line_end":176,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488303,"byte_end":488309,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"header","qualname":"<LineRows<R, Program, Offset>>::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the header for this state machine's line number\n program.\n","sig":null,"attributes":[{"value":"/ Get a reference to the header for this state machine's line number","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488190,"byte_end":488260,"line_start":227,"line_end":227,"column_start":5,"column_end":75}},{"value":"/ program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488265,"byte_end":488277,"line_start":228,"line_end":228,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488282,"byte_end":488291,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488935,"byte_end":488943,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"next_row","qualname":"<LineRows<R, Program, Offset>>::next_row","value":"pub fn next_row(&mut Self)\n-> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>>","parent":null,"children":[],"decl_id":null,"docs":" Parse and execute the next instructions in the line number program until\n another row in the line number matrix is computed.","sig":null,"attributes":[{"value":"/ Parse and execute the next instructions in the line number program until","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488393,"byte_end":488469,"line_start":234,"line_end":234,"column_start":5,"column_end":81}},{"value":"/ another row in the line number matrix is computed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488474,"byte_end":488528,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488533,"byte_end":488536,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ The freshly computed row is returned as `Ok(Some((header, row)))`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488541,"byte_end":488611,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ If the matrix is complete, and there are no more new rows in the line","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488616,"byte_end":488689,"line_start":238,"line_end":238,"column_start":5,"column_end":78}},{"value":"/ number matrix, then `Ok(None)` is returned. If there was an error parsing","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488694,"byte_end":488771,"line_start":239,"line_end":239,"column_start":5,"column_end":82}},{"value":"/ an instruction, then `Err(e)` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488776,"byte_end":488822,"line_start":240,"line_end":240,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488827,"byte_end":488830,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Unfortunately, the references mean that this cannot be a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488835,"byte_end":488895,"line_start":242,"line_end":242,"column_start":5,"column_end":65}},{"value":"/ `FallibleIterator`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":488900,"byte_end":488923,"line_start":243,"line_end":243,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1085},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":489939,"byte_end":489945,"line_start":267,"line_end":267,"column_start":10,"column_end":16},"name":"Opcode","qualname":"::read::line::Opcode","value":"LineInstruction<R, <R as Reader>::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `Opcode` has been renamed to `LineInstruction`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `Opcode` has been renamed to `LineInstruction`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":489780,"byte_end":489843,"line_start":265,"line_end":265,"column_start":1,"column_end":64}},{"value":"deprecated(note =\n             \"Opcode has been renamed to LineInstruction, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":489844,"byte_end":489929,"line_start":266,"line_end":266,"column_start":1,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5668},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491147,"byte_end":491154,"line_start":299,"line_end":299,"column_start":5,"column_end":12},"name":"Special","qualname":"::read::line::LineInstruction::Special","value":"LineInstruction::Special(u8)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" > ### 6.2.5.1 Special Opcodes\n >\n > Each ubyte special opcode has the following effect on the state machine:\n >\n >   1. Add a signed integer to the line register.\n >\n >   2. Modify the operation pointer by incrementing the address and\n >   op_index registers as described below.\n >\n >   3. Append a row to the matrix using the current values of the state\n >   machine registers.\n >\n >   4. Set the basic_block register to “false.”\n >\n >   5. Set the prologue_end register to “false.”\n >\n >   6. Set the epilogue_begin register to “false.”\n >\n >   7. Set the discriminator register to 0.\n >\n > All of the special opcodes do those same seven things; they differ from\n > one another only in what values they add to the line, address and\n > op_index registers.\n","sig":null,"attributes":[{"value":"/ > ### 6.2.5.1 Special Opcodes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490216,"byte_end":490249,"line_start":276,"line_end":276,"column_start":5,"column_end":38}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490254,"byte_end":490259,"line_start":277,"line_end":277,"column_start":5,"column_end":10}},{"value":"/ > Each ubyte special opcode has the following effect on the state machine:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490264,"byte_end":490342,"line_start":278,"line_end":278,"column_start":5,"column_end":83}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490347,"byte_end":490352,"line_start":279,"line_end":279,"column_start":5,"column_end":10}},{"value":"/ >   1. Add a signed integer to the line register.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490357,"byte_end":490410,"line_start":280,"line_end":280,"column_start":5,"column_end":58}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490415,"byte_end":490420,"line_start":281,"line_end":281,"column_start":5,"column_end":10}},{"value":"/ >   2. Modify the operation pointer by incrementing the address and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490425,"byte_end":490496,"line_start":282,"line_end":282,"column_start":5,"column_end":76}},{"value":"/ >   op_index registers as described below.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490501,"byte_end":490547,"line_start":283,"line_end":283,"column_start":5,"column_end":51}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490552,"byte_end":490557,"line_start":284,"line_end":284,"column_start":5,"column_end":10}},{"value":"/ >   3. Append a row to the matrix using the current values of the state","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490562,"byte_end":490637,"line_start":285,"line_end":285,"column_start":5,"column_end":80}},{"value":"/ >   machine registers.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490642,"byte_end":490668,"line_start":286,"line_end":286,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490673,"byte_end":490678,"line_start":287,"line_end":287,"column_start":5,"column_end":10}},{"value":"/ >   4. Set the basic_block register to “false.”","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490683,"byte_end":490738,"line_start":288,"line_end":288,"column_start":5,"column_end":56}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490743,"byte_end":490748,"line_start":289,"line_end":289,"column_start":5,"column_end":10}},{"value":"/ >   5. Set the prologue_end register to “false.”","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490753,"byte_end":490809,"line_start":290,"line_end":290,"column_start":5,"column_end":57}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490814,"byte_end":490819,"line_start":291,"line_end":291,"column_start":5,"column_end":10}},{"value":"/ >   6. Set the epilogue_begin register to “false.”","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490824,"byte_end":490882,"line_start":292,"line_end":292,"column_start":5,"column_end":59}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490887,"byte_end":490892,"line_start":293,"line_end":293,"column_start":5,"column_end":10}},{"value":"/ >   7. Set the discriminator register to 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490897,"byte_end":490944,"line_start":294,"line_end":294,"column_start":5,"column_end":52}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490949,"byte_end":490954,"line_start":295,"line_end":295,"column_start":5,"column_end":10}},{"value":"/ > All of the special opcodes do those same seven things; they differ from","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490959,"byte_end":491036,"line_start":296,"line_end":296,"column_start":5,"column_end":82}},{"value":"/ > one another only in what values they add to the line, address and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491041,"byte_end":491112,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/ > op_index registers.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491117,"byte_end":491142,"line_start":298,"line_end":298,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5671},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491440,"byte_end":491444,"line_start":305,"line_end":305,"column_start":5,"column_end":9},"name":"Copy","qualname":"::read::line::LineInstruction::Copy","value":"LineInstruction::Copy","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"[`LineInstruction::Copy`] appends a row to the matrix using the current\n values of the state machine registers. Then it sets the discriminator\n register to 0, and sets the basic_block, prologue_end and epilogue_begin\n registers to “false.”\"\n","sig":null,"attributes":[{"value":"/ \"[`LineInstruction::Copy`] appends a row to the matrix using the current","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491165,"byte_end":491241,"line_start":301,"line_end":301,"column_start":5,"column_end":81}},{"value":"/ values of the state machine registers. Then it sets the discriminator","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491246,"byte_end":491319,"line_start":302,"line_end":302,"column_start":5,"column_end":78}},{"value":"/ register to 0, and sets the basic_block, prologue_end and epilogue_begin","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491324,"byte_end":491400,"line_start":303,"line_end":303,"column_start":5,"column_end":81}},{"value":"/ registers to “false.”\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491405,"byte_end":491435,"line_start":304,"line_end":304,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5673},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491659,"byte_end":491668,"line_start":310,"line_end":310,"column_start":5,"column_end":14},"name":"AdvancePc","qualname":"::read::line::LineInstruction::AdvancePc","value":"LineInstruction::AdvancePc(u64)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"The DW_LNS_advance_pc opcode takes a single unsigned LEB128 operand as\n the operation advance and modifies the address and op_index registers\n [the same as `LineInstruction::Special`]\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_advance_pc opcode takes a single unsigned LEB128 operand as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491451,"byte_end":491526,"line_start":307,"line_end":307,"column_start":5,"column_end":80}},{"value":"/ the operation advance and modifies the address and op_index registers","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491531,"byte_end":491604,"line_start":308,"line_end":308,"column_start":5,"column_end":78}},{"value":"/ [the same as `LineInstruction::Special`]\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491609,"byte_end":491654,"line_start":309,"line_end":309,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5676},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491829,"byte_end":491840,"line_start":314,"line_end":314,"column_start":5,"column_end":16},"name":"AdvanceLine","qualname":"::read::line::LineInstruction::AdvanceLine","value":"LineInstruction::AdvanceLine(i64)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"The DW_LNS_advance_line opcode takes a single signed LEB128 operand and\n adds that value to the line register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_advance_line opcode takes a single signed LEB128 operand and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491680,"byte_end":491756,"line_start":312,"line_end":312,"column_start":5,"column_end":81}},{"value":"/ adds that value to the line register of the state machine.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491761,"byte_end":491824,"line_start":313,"line_end":313,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5679},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491993,"byte_end":492000,"line_start":318,"line_end":318,"column_start":5,"column_end":12},"name":"SetFile","qualname":"::read::line::LineInstruction::SetFile","value":"LineInstruction::SetFile(u64)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_file opcode takes a single unsigned LEB128 operand and\n stores it in the file register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_file opcode takes a single unsigned LEB128 operand and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491852,"byte_end":491926,"line_start":316,"line_end":316,"column_start":5,"column_end":79}},{"value":"/ stores it in the file register of the state machine.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":491931,"byte_end":491988,"line_start":317,"line_end":317,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5682},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492157,"byte_end":492166,"line_start":322,"line_end":322,"column_start":5,"column_end":14},"name":"SetColumn","qualname":"::read::line::LineInstruction::SetColumn","value":"LineInstruction::SetColumn(u64)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_column opcode takes a single unsigned LEB128 operand and\n stores it in the column register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_column opcode takes a single unsigned LEB128 operand and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492012,"byte_end":492088,"line_start":320,"line_end":320,"column_start":5,"column_end":81}},{"value":"/ stores it in the column register of the state machine.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492093,"byte_end":492152,"line_start":321,"line_end":321,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5685},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492349,"byte_end":492364,"line_start":327,"line_end":327,"column_start":5,"column_end":20},"name":"NegateStatement","qualname":"::read::line::LineInstruction::NegateStatement","value":"LineInstruction::NegateStatement","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"The DW_LNS_negate_stmt opcode takes no operands. It sets the is_stmt\n register of the state machine to the logical negation of its current\n value.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_negate_stmt opcode takes no operands. It sets the is_stmt","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492178,"byte_end":492251,"line_start":324,"line_end":324,"column_start":5,"column_end":78}},{"value":"/ register of the state machine to the logical negation of its current","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492256,"byte_end":492328,"line_start":325,"line_end":325,"column_start":5,"column_end":77}},{"value":"/ value.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492333,"byte_end":492344,"line_start":326,"line_end":326,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5687},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492511,"byte_end":492524,"line_start":331,"line_end":331,"column_start":5,"column_end":18},"name":"SetBasicBlock","qualname":"::read::line::LineInstruction::SetBasicBlock","value":"LineInstruction::SetBasicBlock","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_basic_block opcode takes no operands. It sets the\n basic_block register of the state machine to “true.”\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_basic_block opcode takes no operands. It sets the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492371,"byte_end":492440,"line_start":329,"line_end":329,"column_start":5,"column_end":74}},{"value":"/ basic_block register of the state machine to “true.”\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492445,"byte_end":492506,"line_start":330,"line_end":330,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5689},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493279,"byte_end":493289,"line_start":344,"line_end":344,"column_start":5,"column_end":15},"name":"ConstAddPc","qualname":"::read::line::LineInstruction::ConstAddPc","value":"LineInstruction::ConstAddPc","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" > The DW_LNS_const_add_pc opcode takes no operands. It advances the\n > address and op_index registers by the increments corresponding to\n > special opcode 255.\n >\n > When the line number program needs to advance the address by a small\n > amount, it can use a single special opcode, which occupies a single\n > byte. When it needs to advance the address by up to twice the range of\n > the last special opcode, it can use DW_LNS_const_add_pc followed by a\n > special opcode, for a total of two bytes. Only if it needs to advance\n > the address by more than twice that range will it need to use both\n > DW_LNS_advance_pc and a special opcode, requiring three or more bytes.\n","sig":null,"attributes":[{"value":"/ > The DW_LNS_const_add_pc opcode takes no operands. It advances the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492531,"byte_end":492602,"line_start":333,"line_end":333,"column_start":5,"column_end":76}},{"value":"/ > address and op_index registers by the increments corresponding to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492607,"byte_end":492678,"line_start":334,"line_end":334,"column_start":5,"column_end":76}},{"value":"/ > special opcode 255.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492683,"byte_end":492708,"line_start":335,"line_end":335,"column_start":5,"column_end":30}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492713,"byte_end":492718,"line_start":336,"line_end":336,"column_start":5,"column_end":10}},{"value":"/ > When the line number program needs to advance the address by a small","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492723,"byte_end":492797,"line_start":337,"line_end":337,"column_start":5,"column_end":79}},{"value":"/ > amount, it can use a single special opcode, which occupies a single","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492802,"byte_end":492875,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/ > byte. When it needs to advance the address by up to twice the range of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492880,"byte_end":492956,"line_start":339,"line_end":339,"column_start":5,"column_end":81}},{"value":"/ > the last special opcode, it can use DW_LNS_const_add_pc followed by a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":492961,"byte_end":493036,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ > special opcode, for a total of two bytes. Only if it needs to advance","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493041,"byte_end":493116,"line_start":341,"line_end":341,"column_start":5,"column_end":80}},{"value":"/ > the address by more than twice that range will it need to use both","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493121,"byte_end":493193,"line_start":342,"line_end":342,"column_start":5,"column_end":77}},{"value":"/ > DW_LNS_advance_pc and a special opcode, requiring three or more bytes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493198,"byte_end":493274,"line_start":343,"line_end":343,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5691},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493689,"byte_end":493699,"line_start":351,"line_end":351,"column_start":5,"column_end":15},"name":"FixedAddPc","qualname":"::read::line::LineInstruction::FixedAddPc","value":"LineInstruction::FixedAddPc(u16)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" > The DW_LNS_fixed_advance_pc opcode takes a single uhalf (unencoded)\n > operand and adds it to the address register of the state machine and\n > sets the op_index register to 0. This is the only standard opcode whose\n > operand is not a variable length number. It also does not multiply the\n > operand by the minimum_instruction_length field of the header.\n","sig":null,"attributes":[{"value":"/ > The DW_LNS_fixed_advance_pc opcode takes a single uhalf (unencoded)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493296,"byte_end":493369,"line_start":346,"line_end":346,"column_start":5,"column_end":78}},{"value":"/ > operand and adds it to the address register of the state machine and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493374,"byte_end":493448,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ > sets the op_index register to 0. This is the only standard opcode whose","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493453,"byte_end":493530,"line_start":348,"line_end":348,"column_start":5,"column_end":82}},{"value":"/ > operand is not a variable length number. It also does not multiply the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493535,"byte_end":493611,"line_start":349,"line_end":349,"column_start":5,"column_end":81}},{"value":"/ > operand by the minimum_instruction_length field of the header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493616,"byte_end":493684,"line_start":350,"line_end":350,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5694},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493803,"byte_end":493817,"line_start":354,"line_end":354,"column_start":5,"column_end":19},"name":"SetPrologueEnd","qualname":"::read::line::LineInstruction::SetPrologueEnd","value":"LineInstruction::SetPrologueEnd","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"[`LineInstruction::SetPrologueEnd`] sets the prologue_end register to “true”.\"\n","sig":null,"attributes":[{"value":"/ \"[`LineInstruction::SetPrologueEnd`] sets the prologue_end register to “true”.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493711,"byte_end":493798,"line_start":353,"line_end":353,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5696},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493928,"byte_end":493944,"line_start":358,"line_end":358,"column_start":5,"column_end":21},"name":"SetEpilogueBegin","qualname":"::read::line::LineInstruction::SetEpilogueBegin","value":"LineInstruction::SetEpilogueBegin","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"[`LineInstruction::SetEpilogueBegin`] sets the epilogue_begin register to\n “true”.\"\n","sig":null,"attributes":[{"value":"/ \"[`LineInstruction::SetEpilogueBegin`] sets the epilogue_begin register to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493824,"byte_end":493902,"line_start":356,"line_end":356,"column_start":5,"column_end":83}},{"value":"/ “true”.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493907,"byte_end":493923,"line_start":357,"line_end":357,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5698},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494098,"byte_end":494104,"line_start":362,"line_end":362,"column_start":5,"column_end":11},"name":"SetIsa","qualname":"::read::line::LineInstruction::SetIsa","value":"LineInstruction::SetIsa(u64)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_isa opcode takes a single unsigned LEB128 operand and\n stores that value in the isa register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_isa opcode takes a single unsigned LEB128 operand and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":493951,"byte_end":494024,"line_start":360,"line_end":360,"column_start":5,"column_end":78}},{"value":"/ stores that value in the isa register of the state machine.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494029,"byte_end":494093,"line_start":361,"line_end":361,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5701},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494171,"byte_end":494187,"line_start":365,"line_end":365,"column_start":5,"column_end":21},"name":"UnknownStandard0","qualname":"::read::line::LineInstruction::UnknownStandard0","value":"LineInstruction::UnknownStandard0(constants::DwLns)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" An unknown standard opcode with zero operands.\n","sig":null,"attributes":[{"value":"/ An unknown standard opcode with zero operands.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494116,"byte_end":494166,"line_start":364,"line_end":364,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5704},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494265,"byte_end":494281,"line_start":368,"line_end":368,"column_start":5,"column_end":21},"name":"UnknownStandard1","qualname":"::read::line::LineInstruction::UnknownStandard1","value":"LineInstruction::UnknownStandard1(constants::DwLns, u64)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" An unknown standard opcode with one operand.\n","sig":null,"attributes":[{"value":"/ An unknown standard opcode with one operand.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494212,"byte_end":494260,"line_start":367,"line_end":367,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5708},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494370,"byte_end":494386,"line_start":371,"line_end":371,"column_start":5,"column_end":21},"name":"UnknownStandardN","qualname":"::read::line::LineInstruction::UnknownStandardN","value":"LineInstruction::UnknownStandardN(constants::DwLns, R)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" An unknown standard opcode with multiple operands.\n","sig":null,"attributes":[{"value":"/ An unknown standard opcode with multiple operands.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494311,"byte_end":494365,"line_start":370,"line_end":370,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5712},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494956,"byte_end":494967,"line_start":380,"line_end":380,"column_start":5,"column_end":16},"name":"EndSequence","qualname":"::read::line::LineInstruction::EndSequence","value":"LineInstruction::EndSequence","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" > [`LineInstruction::EndSequence`] sets the end_sequence register of the state\n > machine to “true” and appends a row to the matrix using the current\n > values of the state-machine registers. Then it resets the registers to\n > the initial values specified above (see Section 6.2.2). Every line\n > number program sequence must end with a DW_LNE_end_sequence instruction\n > which creates a row whose address is that of the byte after the last\n > target machine instruction of the sequence.\n","sig":null,"attributes":[{"value":"/ > [`LineInstruction::EndSequence`] sets the end_sequence register of the state","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494414,"byte_end":494496,"line_start":373,"line_end":373,"column_start":5,"column_end":87}},{"value":"/ > machine to “true” and appends a row to the matrix using the current","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494501,"byte_end":494578,"line_start":374,"line_end":374,"column_start":5,"column_end":78}},{"value":"/ > values of the state-machine registers. Then it resets the registers to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494583,"byte_end":494659,"line_start":375,"line_end":375,"column_start":5,"column_end":81}},{"value":"/ > the initial values specified above (see Section 6.2.2). Every line","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494664,"byte_end":494736,"line_start":376,"line_end":376,"column_start":5,"column_end":77}},{"value":"/ > number program sequence must end with a DW_LNE_end_sequence instruction","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494741,"byte_end":494818,"line_start":377,"line_end":377,"column_start":5,"column_end":82}},{"value":"/ > which creates a row whose address is that of the byte after the last","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494823,"byte_end":494897,"line_start":378,"line_end":378,"column_start":5,"column_end":79}},{"value":"/ > target machine instruction of the sequence.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494902,"byte_end":494951,"line_start":379,"line_end":379,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5714},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495477,"byte_end":495487,"line_start":390,"line_end":390,"column_start":5,"column_end":15},"name":"SetAddress","qualname":"::read::line::LineInstruction::SetAddress","value":"LineInstruction::SetAddress(u64)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" > The DW_LNE_set_address opcode takes a single relocatable address as an\n > operand. The size of the operand is the size of an address on the target\n > machine. It sets the address register to the value given by the\n > relocatable address and sets the op_index register to 0.\n >\n > All of the other line number program opcodes that affect the address\n > register add a delta to it. This instruction stores a relocatable value\n > into it instead.\n","sig":null,"attributes":[{"value":"/ > The DW_LNE_set_address opcode takes a single relocatable address as an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":494974,"byte_end":495050,"line_start":382,"line_end":382,"column_start":5,"column_end":81}},{"value":"/ > operand. The size of the operand is the size of an address on the target","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495055,"byte_end":495133,"line_start":383,"line_end":383,"column_start":5,"column_end":83}},{"value":"/ > machine. It sets the address register to the value given by the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495138,"byte_end":495207,"line_start":384,"line_end":384,"column_start":5,"column_end":74}},{"value":"/ > relocatable address and sets the op_index register to 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495212,"byte_end":495274,"line_start":385,"line_end":385,"column_start":5,"column_end":67}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495279,"byte_end":495284,"line_start":386,"line_end":386,"column_start":5,"column_end":10}},{"value":"/ > All of the other line number program opcodes that affect the address","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495289,"byte_end":495363,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/ > register add a delta to it. This instruction stores a relocatable value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495368,"byte_end":495445,"line_start":388,"line_end":388,"column_start":5,"column_end":82}},{"value":"/ > into it instead.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495450,"byte_end":495472,"line_start":389,"line_end":389,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5717},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495641,"byte_end":495651,"line_start":394,"line_end":394,"column_start":5,"column_end":15},"name":"DefineFile","qualname":"::read::line::LineInstruction::DefineFile","value":"LineInstruction::DefineFile(FileEntry<R, Offset>)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" Defines a new source file in the line number program and appends it to\n the line number program header's list of source files.\n","sig":null,"attributes":[{"value":"/ Defines a new source file in the line number program and appends it to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495499,"byte_end":495573,"line_start":392,"line_end":392,"column_start":5,"column_end":79}},{"value":"/ the line number program header's list of source files.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495578,"byte_end":495636,"line_start":393,"line_end":393,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5720},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495849,"byte_end":495865,"line_start":399,"line_end":399,"column_start":5,"column_end":21},"name":"SetDiscriminator","qualname":"::read::line::LineInstruction::SetDiscriminator","value":"LineInstruction::SetDiscriminator(u64)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" \"The DW_LNE_set_discriminator opcode takes a single parameter, an\n unsigned LEB128 integer. It sets the discriminator register to the new\n value.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNE_set_discriminator opcode takes a single parameter, an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495680,"byte_end":495749,"line_start":396,"line_end":396,"column_start":5,"column_end":74}},{"value":"/ unsigned LEB128 integer. It sets the discriminator register to the new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495754,"byte_end":495828,"line_start":397,"line_end":397,"column_start":5,"column_end":79}},{"value":"/ value.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495833,"byte_end":495844,"line_start":398,"line_end":398,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5723},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495952,"byte_end":495967,"line_start":402,"line_end":402,"column_start":5,"column_end":20},"name":"UnknownExtended","qualname":"::read::line::LineInstruction::UnknownExtended","value":"LineInstruction::UnknownExtended(constants::DwLne, R)","parent":{"krate":0,"index":5665},"children":[],"decl_id":null,"docs":" An unknown extended opcode and the slice of its unparsed operands.\n","sig":null,"attributes":[{"value":"/ An unknown extended opcode and the slice of its unparsed operands.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":495877,"byte_end":495947,"line_start":401,"line_end":401,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":5665},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":490095,"byte_end":490110,"line_start":271,"line_end":271,"column_start":10,"column_end":25},"name":"LineInstruction","qualname":"::read::line::LineInstruction","value":"pub enum LineInstruction<R, Offset = <R as Reader>::Offset> where\n         R: Reader<Offset = Offset>, Offset: ReaderOffset {\n\n    /// > ### 6.2.5.1 Special Opcodes\n    /// >\n    /// > Each ubyte special opcode has the following effect on the state machine:\n    /// >\n    /// >   1. Add a signed integer to the line register.\n    /// >\n    /// >   2. Modify the operation pointer by incrementing the address and\n    /// >   op_index registers as described below.\n    /// >\n    /// >   3. Append a row to the matrix using the current values of the state\n    /// >   machine registers.\n    /// >\n    /// >   4. Set the basic_block register to “false.”\n    /// >\n    /// >   5. Set the prologue_end register to “false.”\n    /// >\n    /// >   6. Set the epilogue_begin register to “false.”\n    /// >\n    /// >   7. Set the discriminator register to 0.\n    /// >\n    /// > All of the special opcodes do those same seven things; they differ from\n    /// > one another only in what values they add to the line, address and\n    /// > op_index registers.\n    Special(u8),\n\n    /// \"[`LineInstruction::Copy`] appends a row to the matrix using the current\n    /// values of the state machine registers. Then it sets the discriminator\n    /// register to 0, and sets the basic_block, prologue_end and epilogue_begin\n    /// registers to “false.”\"\n    Copy,\n\n    /// \"The DW_LNS_advance_pc opcode takes a single unsigned LEB128 operand as\n    /// the operation advance and modifies the address and op_index registers\n    /// [the same as `LineInstruction::Special`]\"\n    AdvancePc(u64),\n\n    /// \"The DW_LNS_advance_line opcode takes a single signed LEB128 operand and\n    /// adds that value to the line register of the state machine.\"\n    AdvanceLine(i64),\n\n    /// \"The DW_LNS_set_file opcode takes a single unsigned LEB128 operand and\n    /// stores it in the file register of the state machine.\"\n    SetFile(u64),\n\n    /// \"The DW_LNS_set_column opcode takes a single unsigned LEB128 operand and\n    /// stores it in the column register of the state machine.\"\n    SetColumn(u64),\n\n    /// \"The DW_LNS_negate_stmt opcode takes no operands. It sets the is_stmt\n    /// register of the state machine to the logical negation of its current\n    /// value.\"\n    NegateStatement,\n\n    /// \"The DW_LNS_set_basic_block opcode takes no operands. It sets the\n    /// basic_block register of the state machine to “true.”\"\n    SetBasicBlock,\n\n    /// > The DW_LNS_const_add_pc opcode takes no operands. It advances the\n    /// > address and op_index registers by the increments corresponding to\n    /// > special opcode 255.\n    /// >\n    /// > When the line number program needs to advance the address by a small\n    /// > amount, it can use a single special opcode, which occupies a single\n    /// > byte. When it needs to advance the address by up to twice the range of\n    /// > the last special opcode, it can use DW_LNS_const_add_pc followed by a\n    /// > special opcode, for a total of two bytes. Only if it needs to advance\n    /// > the address by more than twice that range will it need to use both\n    /// > DW_LNS_advance_pc and a special opcode, requiring three or more bytes.\n    ConstAddPc,\n\n    /// > The DW_LNS_fixed_advance_pc opcode takes a single uhalf (unencoded)\n    /// > operand and adds it to the address register of the state machine and\n    /// > sets the op_index register to 0. This is the only standard opcode whose\n    /// > operand is not a variable length number. It also does not multiply the\n    /// > operand by the minimum_instruction_length field of the header.\n    FixedAddPc(u16),\n\n    /// \"[`LineInstruction::SetPrologueEnd`] sets the prologue_end register to “true”.\"\n    SetPrologueEnd,\n\n    /// \"[`LineInstruction::SetEpilogueBegin`] sets the epilogue_begin register to\n    /// “true”.\"\n    SetEpilogueBegin,\n\n    /// \"The DW_LNS_set_isa opcode takes a single unsigned LEB128 operand and\n    /// stores that value in the isa register of the state machine.\"\n    SetIsa(u64),\n\n    /// An unknown standard opcode with zero operands.\n    UnknownStandard0(constants::DwLns),\n\n    /// An unknown standard opcode with one operand.\n    UnknownStandard1(constants::DwLns, u64),\n\n    /// An unknown standard opcode with multiple operands.\n    UnknownStandardN(constants::DwLns, R),\n\n    /// > [`LineInstruction::EndSequence`] sets the end_sequence register of the state\n    /// > machine to “true” and appends a row to the matrix using the current\n    /// > values of the state-machine registers. Then it resets the registers to\n    /// > the initial values specified above (see Section 6.2.2). Every line\n    /// > number program sequence must end with a DW_LNE_end_sequence instruction\n    /// > which creates a row whose address is that of the byte after the last\n    /// > target machine instruction of the sequence.\n    EndSequence,\n\n    /// > The DW_LNE_set_address opcode takes a single relocatable address as an\n    /// > operand. The size of the operand is the size of an address on the target\n    /// > machine. It sets the address register to the value given by the\n    /// > relocatable address and sets the op_index register to 0.\n    /// >\n    /// > All of the other line number program opcodes that affect the address\n    /// > register add a delta to it. This instruction stores a relocatable value\n    /// > into it instead.\n    SetAddress(u64),\n\n    /// Defines a new source file in the line number program and appends it to\n    /// the line number program header's list of source files.\n    DefineFile(FileEntry<R, Offset>),\n\n    /// \"The DW_LNE_set_discriminator opcode takes a single parameter, an\n    /// unsigned LEB128 integer. It sets the discriminator register to the new\n    /// value.\"\n    SetDiscriminator(u64),\n\n    /// An unknown extended opcode and the slice of its unparsed operands.\n    UnknownExtended(constants::DwLne, R),\n}","parent":null,"children":[{"krate":0,"index":5668},{"krate":0,"index":5671},{"krate":0,"index":5673},{"krate":0,"index":5676},{"krate":0,"index":5679},{"krate":0,"index":5682},{"krate":0,"index":5685},{"krate":0,"index":5687},{"krate":0,"index":5689},{"krate":0,"index":5691},{"krate":0,"index":5694},{"krate":0,"index":5696},{"krate":0,"index":5698},{"krate":0,"index":5701},{"krate":0,"index":5704},{"krate":0,"index":5708},{"krate":0,"index":5712},{"krate":0,"index":5714},{"krate":0,"index":5717},{"krate":0,"index":5720},{"krate":0,"index":5723}],"decl_id":null,"docs":" A parsed line number program instruction.\n","sig":null,"attributes":[{"value":"/ A parsed line number program instruction.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":489995,"byte_end":490040,"line_start":269,"line_end":269,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1096},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503538,"byte_end":503549,"line_start":577,"line_end":577,"column_start":10,"column_end":21},"name":"OpcodesIter","qualname":"::read::line::OpcodesIter","value":"LineInstructions<R>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `OpcodesIter` has been renamed to `LineInstructions`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `OpcodesIter` has been renamed to `LineInstructions`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503367,"byte_end":503436,"line_start":575,"line_end":575,"column_start":1,"column_end":70}},{"value":"deprecated(note =\n             \"OpcodesIter has been renamed to LineInstructions, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503437,"byte_end":503528,"line_start":576,"line_end":576,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":5753},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503785,"byte_end":503801,"line_start":585,"line_end":585,"column_start":12,"column_end":28},"name":"LineInstructions","qualname":"::read::line::LineInstructions","value":"LineInstructions {  }","parent":null,"children":[{"krate":0,"index":5755}],"decl_id":null,"docs":" An iterator yielding parsed instructions.","sig":null,"attributes":[{"value":"/ An iterator yielding parsed instructions.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503577,"byte_end":503622,"line_start":579,"line_end":579,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503623,"byte_end":503626,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ See","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503627,"byte_end":503634,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/ [`LineProgramHeader::instructions`](./struct.LineProgramHeader.html#method.instructions)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503635,"byte_end":503727,"line_start":582,"line_end":582,"column_start":1,"column_end":93}},{"value":"/ for more details.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503728,"byte_end":503749,"line_start":583,"line_end":583,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504781,"byte_end":504797,"line_start":611,"line_end":611,"column_start":12,"column_end":28},"name":"next_instruction","qualname":"<LineInstructions<R>>::next_instruction","value":"pub fn next_instruction(&mut Self, &LineProgramHeader<R>)\n-> Result<Option<LineInstruction<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next instruction.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next instruction.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504188,"byte_end":504245,"line_start":599,"line_end":599,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504250,"byte_end":504253,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed instruction as `Ok(Some(instruction))`. Returns","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504258,"byte_end":504334,"line_start":601,"line_end":601,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)` when iteration is complete and all instructions have already been","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504339,"byte_end":504419,"line_start":602,"line_end":602,"column_start":5,"column_end":85}},{"value":"/ parsed and yielded. If an error occurs while parsing the next attribute,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504424,"byte_end":504500,"line_start":603,"line_end":603,"column_start":5,"column_end":81}},{"value":"/ then this error is returned as `Err(e)`, and all subsequent calls return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504505,"byte_end":504581,"line_start":604,"line_end":604,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504586,"byte_end":504601,"line_start":605,"line_end":605,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504606,"byte_end":504609,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Unfortunately, the `header` parameter means that this cannot be a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504614,"byte_end":504683,"line_start":607,"line_end":607,"column_start":5,"column_end":74}},{"value":"/ `FallibleIterator`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504688,"byte_end":504711,"line_start":608,"line_end":608,"column_start":5,"column_end":28}},{"value":"allow(clippy :: inline_always)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504716,"byte_end":504747,"line_start":609,"line_end":609,"column_start":5,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504752,"byte_end":504769,"line_start":610,"line_end":610,"column_start":5,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":1104},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505369,"byte_end":505382,"line_start":631,"line_end":631,"column_start":10,"column_end":23},"name":"LineNumberRow","qualname":"::read::line::LineNumberRow","value":"LineRow","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberRow` has been renamed to `LineRow`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberRow` has been renamed to `LineRow`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505212,"byte_end":505274,"line_start":629,"line_end":629,"column_start":1,"column_end":63}},{"value":"deprecated(note =\n             \"LineNumberRow has been renamed to LineRow, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505275,"byte_end":505359,"line_start":630,"line_end":630,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":5762},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505603,"byte_end":505610,"line_start":637,"line_end":637,"column_start":12,"column_end":19},"name":"LineRow","qualname":"::read::line::LineRow","value":"LineRow {  }","parent":null,"children":[{"krate":0,"index":5763},{"krate":0,"index":5764},{"krate":0,"index":5765},{"krate":0,"index":5766},{"krate":0,"index":5767},{"krate":0,"index":5768},{"krate":0,"index":5769},{"krate":0,"index":5770},{"krate":0,"index":5771},{"krate":0,"index":5772},{"krate":0,"index":5773},{"krate":0,"index":5774}],"decl_id":null,"docs":" A row in the line number program's resulting matrix.","sig":null,"attributes":[{"value":"/ A row in the line number program's resulting matrix.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505395,"byte_end":505451,"line_start":633,"line_end":633,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505452,"byte_end":505455,"line_start":634,"line_end":634,"column_start":1,"column_end":4}},{"value":"/ Each row is a copy of the registers of the state machine, as defined in section 6.2.2.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505456,"byte_end":505546,"line_start":635,"line_end":635,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505987,"byte_end":505990,"line_start":654,"line_end":654,"column_start":12,"column_end":15},"name":"new","qualname":"<LineRow>::new","value":"pub fn new<R: Reader>(&LineProgramHeader<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a line number row in the initial state for the given program.\n","sig":null,"attributes":[{"value":"/ Create a line number row in the initial state for the given program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505903,"byte_end":505975,"line_start":653,"line_end":653,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507110,"byte_end":507117,"line_start":681,"line_end":681,"column_start":12,"column_end":19},"name":"address","qualname":"<LineRow>::address","value":"pub fn address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"The program-counter value corresponding to a machine instruction\n generated by the compiler.\"\n","sig":null,"attributes":[{"value":"/ \"The program-counter value corresponding to a machine instruction","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":506979,"byte_end":507048,"line_start":678,"line_end":678,"column_start":5,"column_end":74}},{"value":"/ generated by the compiler.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507053,"byte_end":507084,"line_start":679,"line_end":679,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507089,"byte_end":507098,"line_start":680,"line_end":680,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507595,"byte_end":507603,"line_start":693,"line_end":693,"column_start":12,"column_end":20},"name":"op_index","qualname":"<LineRow>::op_index","value":"pub fn op_index(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" > An unsigned integer representing the index of an operation within a VLIW\n > instruction. The index of the first operation is 0. For non-VLIW\n > architectures, this register will always be 0.\n >\n > The address and op_index registers, taken together, form an operation\n > pointer that can reference any individual operation with the\n > instruction stream.\n","sig":null,"attributes":[{"value":"/ > An unsigned integer representing the index of an operation within a VLIW","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507168,"byte_end":507246,"line_start":685,"line_end":685,"column_start":5,"column_end":83}},{"value":"/ > instruction. The index of the first operation is 0. For non-VLIW","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507251,"byte_end":507321,"line_start":686,"line_end":686,"column_start":5,"column_end":75}},{"value":"/ > architectures, this register will always be 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507326,"byte_end":507378,"line_start":687,"line_end":687,"column_start":5,"column_end":57}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507383,"byte_end":507388,"line_start":688,"line_end":688,"column_start":5,"column_end":10}},{"value":"/ > The address and op_index registers, taken together, form an operation","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507393,"byte_end":507468,"line_start":689,"line_end":689,"column_start":5,"column_end":80}},{"value":"/ > pointer that can reference any individual operation with the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507473,"byte_end":507539,"line_start":690,"line_end":690,"column_start":5,"column_end":71}},{"value":"/ > instruction stream.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507544,"byte_end":507569,"line_start":691,"line_end":691,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507574,"byte_end":507583,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507797,"byte_end":507807,"line_start":700,"line_end":700,"column_start":12,"column_end":22},"name":"file_index","qualname":"<LineRow>::file_index","value":"pub fn file_index(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer indicating the identity of the source file\n corresponding to a machine instruction.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer indicating the identity of the source file","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507655,"byte_end":507722,"line_start":697,"line_end":697,"column_start":5,"column_end":72}},{"value":"/ corresponding to a machine instruction.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507727,"byte_end":507771,"line_start":698,"line_end":698,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507776,"byte_end":507785,"line_start":699,"line_end":699,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507948,"byte_end":507952,"line_start":706,"line_end":706,"column_start":12,"column_end":16},"name":"file","qualname":"<LineRow>::file","value":"pub fn file<'header, R: Reader>(&Self, &'header LineProgramHeader<R>)\n-> Option<&'header FileEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" The source file corresponding to the current machine instruction.\n","sig":null,"attributes":[{"value":"/ The source file corresponding to the current machine instruction.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507853,"byte_end":507922,"line_start":704,"line_end":704,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":507927,"byte_end":507936,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508418,"byte_end":508422,"line_start":718,"line_end":718,"column_start":12,"column_end":16},"name":"line","qualname":"<LineRow>::line","value":"pub fn line(&Self) -> Option<NonZeroU64>","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer indicating a source line number. Lines are numbered\n beginning at 1. The compiler may emit the value 0 in cases where an\n instruction cannot be attributed to any source line.\"\n Line number values of 0 are represented as `None`.\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer indicating a source line number. Lines are numbered","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508119,"byte_end":508195,"line_start":713,"line_end":713,"column_start":5,"column_end":81}},{"value":"/ beginning at 1. The compiler may emit the value 0 in cases where an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508200,"byte_end":508271,"line_start":714,"line_end":714,"column_start":5,"column_end":76}},{"value":"/ instruction cannot be attributed to any source line.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508276,"byte_end":508333,"line_start":715,"line_end":715,"column_start":5,"column_end":62}},{"value":"/ Line number values of 0 are represented as `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508338,"byte_end":508392,"line_start":716,"line_end":716,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508397,"byte_end":508406,"line_start":717,"line_end":717,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508751,"byte_end":508757,"line_start":726,"line_end":726,"column_start":12,"column_end":18},"name":"column","qualname":"<LineRow>::column","value":"pub fn column(&Self) -> ColumnType","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer indicating a column number within a source\n line. Columns are numbered beginning at 1. The value 0 is reserved to\n indicate that a statement begins at the “left edge” of the line.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer indicating a column number within a source","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508502,"byte_end":508569,"line_start":722,"line_end":722,"column_start":5,"column_end":72}},{"value":"/ line. Columns are numbered beginning at 1. The value 0 is reserved to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508574,"byte_end":508647,"line_start":723,"line_end":723,"column_start":5,"column_end":78}},{"value":"/ indicate that a statement begins at the “left edge” of the line.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508652,"byte_end":508725,"line_start":724,"line_end":724,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508730,"byte_end":508739,"line_start":725,"line_end":725,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509194,"byte_end":509201,"line_start":737,"line_end":737,"column_start":12,"column_end":19},"name":"is_stmt","qualname":"<LineRow>::is_stmt","value":"pub fn is_stmt(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current instruction is a recommended\n breakpoint location. A recommended breakpoint location is intended to\n “represent” a line, a statement and/or a semantically distinct subpart\n of a statement.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current instruction is a recommended","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508911,"byte_end":508982,"line_start":732,"line_end":732,"column_start":5,"column_end":76}},{"value":"/ breakpoint location. A recommended breakpoint location is intended to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":508987,"byte_end":509060,"line_start":733,"line_end":733,"column_start":5,"column_end":78}},{"value":"/ “represent” a line, a statement and/or a semantically distinct subpart","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509065,"byte_end":509143,"line_start":734,"line_end":734,"column_start":5,"column_end":79}},{"value":"/ of a statement.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509148,"byte_end":509168,"line_start":735,"line_end":735,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509173,"byte_end":509182,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509375,"byte_end":509386,"line_start":744,"line_end":744,"column_start":12,"column_end":23},"name":"basic_block","qualname":"<LineRow>::basic_block","value":"pub fn basic_block(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current instruction is the beginning of a\n basic block.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current instruction is the beginning of a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509251,"byte_end":509327,"line_start":741,"line_end":741,"column_start":5,"column_end":81}},{"value":"/ basic block.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509332,"byte_end":509349,"line_start":742,"line_end":742,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509354,"byte_end":509363,"line_start":743,"line_end":743,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509735,"byte_end":509747,"line_start":753,"line_end":753,"column_start":12,"column_end":24},"name":"end_sequence","qualname":"<LineRow>::end_sequence","value":"pub fn end_sequence(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current address is that of the first byte\n after the end of a sequence of target machine instructions. end_sequence\n terminates a sequence of lines; therefore other information in the same\n row is not meaningful.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current address is that of the first byte","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509440,"byte_end":509516,"line_start":748,"line_end":748,"column_start":5,"column_end":81}},{"value":"/ after the end of a sequence of target machine instructions. end_sequence","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509521,"byte_end":509597,"line_start":749,"line_end":749,"column_start":5,"column_end":81}},{"value":"/ terminates a sequence of lines; therefore other information in the same","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509602,"byte_end":509677,"line_start":750,"line_end":750,"column_start":5,"column_end":80}},{"value":"/ row is not meaningful.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509682,"byte_end":509709,"line_start":751,"line_end":751,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509714,"byte_end":509723,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509996,"byte_end":510008,"line_start":761,"line_end":761,"column_start":12,"column_end":24},"name":"prologue_end","qualname":"<LineRow>::prologue_end","value":"pub fn prologue_end(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current address is one (of possibly many)\n where execution should be suspended for an entry breakpoint of a\n function.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current address is one (of possibly many)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509802,"byte_end":509878,"line_start":757,"line_end":757,"column_start":5,"column_end":81}},{"value":"/ where execution should be suspended for an entry breakpoint of a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509883,"byte_end":509951,"line_start":758,"line_end":758,"column_start":5,"column_end":73}},{"value":"/ function.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509956,"byte_end":509970,"line_start":759,"line_end":759,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":509975,"byte_end":509984,"line_start":760,"line_end":760,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510256,"byte_end":510270,"line_start":769,"line_end":769,"column_start":12,"column_end":26},"name":"epilogue_begin","qualname":"<LineRow>::epilogue_begin","value":"pub fn epilogue_begin(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current address is one (of possibly many)\n where execution should be suspended for an exit breakpoint of a\n function.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current address is one (of possibly many)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510063,"byte_end":510139,"line_start":765,"line_end":765,"column_start":5,"column_end":81}},{"value":"/ where execution should be suspended for an exit breakpoint of a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510144,"byte_end":510211,"line_start":766,"line_end":766,"column_start":5,"column_end":72}},{"value":"/ function.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510216,"byte_end":510230,"line_start":767,"line_end":767,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510235,"byte_end":510244,"line_start":768,"line_end":768,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510777,"byte_end":510780,"line_start":782,"line_end":782,"column_start":12,"column_end":15},"name":"isa","qualname":"<LineRow>::isa","value":"pub fn isa(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Tag for the current instruction set architecture.","sig":null,"attributes":[{"value":"/ Tag for the current instruction set architecture.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510327,"byte_end":510380,"line_start":773,"line_end":773,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510385,"byte_end":510388,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ > An unsigned integer whose value encodes the applicable instruction set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510393,"byte_end":510469,"line_start":775,"line_end":775,"column_start":5,"column_end":81}},{"value":"/ > architecture for the current instruction.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510474,"byte_end":510521,"line_start":776,"line_end":776,"column_start":5,"column_end":52}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510526,"byte_end":510531,"line_start":777,"line_end":777,"column_start":5,"column_end":10}},{"value":"/ > The encoding of instruction sets should be shared by all users of a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510536,"byte_end":510609,"line_start":778,"line_end":778,"column_start":5,"column_end":78}},{"value":"/ > given architecture. It is recommended that this encoding be defined by","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510614,"byte_end":510690,"line_start":779,"line_end":779,"column_start":5,"column_end":81}},{"value":"/ > the ABI authoring committee for each architecture.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510695,"byte_end":510751,"line_start":780,"line_end":780,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510756,"byte_end":510765,"line_start":781,"line_end":781,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511264,"byte_end":511277,"line_start":793,"line_end":793,"column_start":12,"column_end":25},"name":"discriminator","qualname":"<LineRow>::discriminator","value":"pub fn discriminator(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer identifying the block to which the current\n instruction belongs. Discriminator values are assigned arbitrarily by\n the DWARF producer and serve to distinguish among multiple blocks that\n may all be associated with the same source file, line, and column. Where\n only one block exists for a given source position, the discriminator\n value should be zero.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer identifying the block to which the current","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510825,"byte_end":510892,"line_start":786,"line_end":786,"column_start":5,"column_end":72}},{"value":"/ instruction belongs. Discriminator values are assigned arbitrarily by","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510897,"byte_end":510970,"line_start":787,"line_end":787,"column_start":5,"column_end":78}},{"value":"/ the DWARF producer and serve to distinguish among multiple blocks that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":510975,"byte_end":511049,"line_start":788,"line_end":788,"column_start":5,"column_end":79}},{"value":"/ may all be associated with the same source file, line, and column. Where","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511054,"byte_end":511130,"line_start":789,"line_end":789,"column_start":5,"column_end":81}},{"value":"/ only one block exists for a given source position, the discriminator","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511135,"byte_end":511207,"line_start":790,"line_end":790,"column_start":5,"column_end":77}},{"value":"/ value should be zero.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511212,"byte_end":511238,"line_start":791,"line_end":791,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511243,"byte_end":511252,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511533,"byte_end":511540,"line_start":802,"line_end":802,"column_start":12,"column_end":19},"name":"execute","qualname":"<LineRow>::execute","value":"pub fn execute<R, Program>(&mut Self, LineInstruction<R>, &mut Program)\n-> bool where Program: LineProgram<R>, R: Reader","parent":null,"children":[],"decl_id":null,"docs":" Execute the given instruction, and return true if a new row in the\n line number matrix needs to be generated.","sig":null,"attributes":[{"value":"/ Execute the given instruction, and return true if a new row in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511332,"byte_end":511402,"line_start":797,"line_end":797,"column_start":5,"column_end":75}},{"value":"/ line number matrix needs to be generated.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511407,"byte_end":511452,"line_start":798,"line_end":798,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511457,"byte_end":511460,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ Unknown opcodes are treated as no-ops.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511465,"byte_end":511507,"line_start":800,"line_end":800,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":511512,"byte_end":511521,"line_start":801,"line_end":801,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":514673,"byte_end":514678,"line_start":908,"line_end":908,"column_start":12,"column_end":17},"name":"reset","qualname":"<LineRow>::reset","value":"pub fn reset<R: Reader>(&mut Self, &LineProgramHeader<R>)","parent":null,"children":[],"decl_id":null,"docs":" Perform any reset that was required after copying the previous row.\n","sig":null,"attributes":[{"value":"/ Perform any reset that was required after copying the previous row.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":514576,"byte_end":514647,"line_start":906,"line_end":906,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":514652,"byte_end":514661,"line_start":907,"line_end":907,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5788},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":517905,"byte_end":517913,"line_start":992,"line_end":992,"column_start":5,"column_end":13},"name":"LeftEdge","qualname":"::read::line::ColumnType::LeftEdge","value":"ColumnType::LeftEdge","parent":{"krate":0,"index":5787},"children":[],"decl_id":null,"docs":" The `LeftEdge` means that the statement begins at the start of the new\n line.\n","sig":null,"attributes":[{"value":"/ The `LeftEdge` means that the statement begins at the start of the new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":517812,"byte_end":517886,"line_start":990,"line_end":990,"column_start":5,"column_end":79}},{"value":"/ line.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":517891,"byte_end":517900,"line_start":991,"line_end":991,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5790},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":517969,"byte_end":517975,"line_start":994,"line_end":994,"column_start":5,"column_end":11},"name":"Column","qualname":"::read::line::ColumnType::Column","value":"ColumnType::Column(NonZeroU64)","parent":{"krate":0,"index":5787},"children":[],"decl_id":null,"docs":" A column number, whose range begins at 1.\n","sig":null,"attributes":[{"value":"/ A column number, whose range begins at 1.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":517919,"byte_end":517964,"line_start":993,"line_end":993,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":5787},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":517795,"byte_end":517805,"line_start":989,"line_end":989,"column_start":10,"column_end":20},"name":"ColumnType","qualname":"::read::line::ColumnType","value":"pub enum ColumnType {\n\n    /// The `LeftEdge` means that the statement begins at the start of the new\n    /// line.\n    LeftEdge,\n\n    /// A column number, whose range begins at 1.\n    Column(NonZeroU64),\n}","parent":null,"children":[{"krate":0,"index":5788},{"krate":0,"index":5790}],"decl_id":null,"docs":" The type of column that a row is referring to.\n","sig":null,"attributes":[{"value":"/ The type of column that a row is referring to.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":517673,"byte_end":517723,"line_start":987,"line_end":987,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1135},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518169,"byte_end":518187,"line_start":999,"line_end":999,"column_start":10,"column_end":28},"name":"LineNumberSequence","qualname":"::read::line::LineNumberSequence","value":"LineSequence<R>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberSequence` has been renamed to `LineSequence`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberSequence` has been renamed to `LineSequence`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":517992,"byte_end":518064,"line_start":997,"line_end":997,"column_start":1,"column_end":73}},{"value":"deprecated(note =\n             \"LineNumberSequence has been renamed to LineSequence, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518065,"byte_end":518159,"line_start":998,"line_end":998,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":5813},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518454,"byte_end":518466,"line_start":1005,"line_end":1005,"column_start":12,"column_end":24},"name":"LineSequence","qualname":"::read::line::LineSequence","value":"LineSequence { start, end }","parent":null,"children":[{"krate":0,"index":5815},{"krate":0,"index":5816},{"krate":0,"index":5817}],"decl_id":null,"docs":" A sequence within a line number program.  A sequence, as defined in section\n 6.2.5 of the standard, is a linear subset of a line number program within\n which addresses are monotonically increasing.\n","sig":null,"attributes":[{"value":"/ A sequence within a line number program.  A sequence, as defined in section","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518211,"byte_end":518290,"line_start":1001,"line_end":1001,"column_start":1,"column_end":80}},{"value":"/ 6.2.5 of the standard, is a linear subset of a line number program within","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518291,"byte_end":518368,"line_start":1002,"line_end":1002,"column_start":1,"column_end":78}},{"value":"/ which addresses are monotonically increasing.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518369,"byte_end":518418,"line_start":1003,"line_end":1003,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":5815},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518587,"byte_end":518592,"line_start":1008,"line_end":1008,"column_start":9,"column_end":14},"name":"start","qualname":"::read::line::LineSequence::start","value":"u64","parent":{"krate":0,"index":5813},"children":[],"decl_id":null,"docs":" The first address that is covered by this sequence within the line number\n program.\n","sig":null,"attributes":[{"value":"/ The first address that is covered by this sequence within the line number","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518484,"byte_end":518561,"line_start":1006,"line_end":1006,"column_start":5,"column_end":82}},{"value":"/ program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518566,"byte_end":518578,"line_start":1007,"line_end":1007,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":5816},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518712,"byte_end":518715,"line_start":1011,"line_end":1011,"column_start":9,"column_end":12},"name":"end","qualname":"::read::line::LineSequence::end","value":"u64","parent":{"krate":0,"index":5813},"children":[],"decl_id":null,"docs":" The first address that is *not* covered by this sequence within the line\n number program.\n","sig":null,"attributes":[{"value":"/ The first address that is *not* covered by this sequence within the line","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518603,"byte_end":518679,"line_start":1009,"line_end":1009,"column_start":5,"column_end":81}},{"value":"/ number program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518684,"byte_end":518703,"line_start":1010,"line_end":1010,"column_start":5,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":1137},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518967,"byte_end":518990,"line_start":1019,"line_end":1019,"column_start":10,"column_end":33},"name":"LineNumberProgramHeader","qualname":"::read::line::LineNumberProgramHeader","value":"LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberProgramHeader` has been renamed to `LineProgramHeader`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberProgramHeader` has been renamed to `LineProgramHeader`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518764,"byte_end":518846,"line_start":1015,"line_end":1015,"column_start":1,"column_end":83}},{"value":"deprecated(note =\n             \"LineNumberProgramHeader has been renamed to LineProgramHeader, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":518847,"byte_end":518957,"line_start":1016,"line_end":1018,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":5824},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":519203,"byte_end":519220,"line_start":1024,"line_end":1024,"column_start":12,"column_end":29},"name":"LineProgramHeader","qualname":"::read::line::LineProgramHeader","value":"LineProgramHeader {  }","parent":null,"children":[{"krate":0,"index":5827},{"krate":0,"index":5828},{"krate":0,"index":5829},{"krate":0,"index":5830},{"krate":0,"index":5831},{"krate":0,"index":5832},{"krate":0,"index":5833},{"krate":0,"index":5834},{"krate":0,"index":5835},{"krate":0,"index":5836},{"krate":0,"index":5837},{"krate":0,"index":5838},{"krate":0,"index":5839},{"krate":0,"index":5840}],"decl_id":null,"docs":" A header for a line number program in the `.debug_line` section, as defined\n in section 6.2.4 of the standard.\n","sig":null,"attributes":[{"value":"/ A header for a line number program in the `.debug_line` section, as defined","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":519035,"byte_end":519114,"line_start":1021,"line_end":1021,"column_start":1,"column_end":80}},{"value":"/ in section 6.2.4 of the standard.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":519115,"byte_end":519152,"line_start":1022,"line_end":1022,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521294,"byte_end":521300,"line_start":1083,"line_end":1083,"column_start":12,"column_end":18},"name":"offset","qualname":"<LineProgramHeader<R, Offset>>::offset","value":"pub fn offset(&Self) -> DebugLineOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the offset of the line number program header in the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ Return the offset of the line number program header in the `.debug_line` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521197,"byte_end":521282,"line_start":1082,"line_end":1082,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521506,"byte_end":521517,"line_start":1089,"line_end":1089,"column_start":12,"column_end":23},"name":"unit_length","qualname":"<LineProgramHeader<R, Offset>>::unit_length","value":"pub fn unit_length(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Return the length of the line number program and header, not including\n the length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Return the length of the line number program and header, not including","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521371,"byte_end":521445,"line_start":1087,"line_end":1087,"column_start":5,"column_end":79}},{"value":"/ the length of the encoded length itself.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521450,"byte_end":521494,"line_start":1088,"line_end":1088,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521654,"byte_end":521662,"line_start":1094,"line_end":1094,"column_start":12,"column_end":20},"name":"encoding","qualname":"<LineProgramHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this header's line program.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this header's line program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521576,"byte_end":521642,"line_start":1093,"line_end":1093,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521779,"byte_end":521786,"line_start":1099,"line_end":1099,"column_start":12,"column_end":19},"name":"version","qualname":"<LineProgramHeader<R, Offset>>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the version of this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the version of this header's line program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521717,"byte_end":521767,"line_start":1098,"line_end":1098,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521980,"byte_end":521993,"line_start":1105,"line_end":1105,"column_start":12,"column_end":25},"name":"header_length","qualname":"<LineProgramHeader<R, Offset>>::header_length","value":"pub fn header_length(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the encoded line number program header, not including\n the length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the encoded line number program header, not including","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521844,"byte_end":521919,"line_start":1103,"line_end":1103,"column_start":5,"column_end":80}},{"value":"/ the length of the encoded length itself.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521924,"byte_end":521968,"line_start":1104,"line_end":1104,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522120,"byte_end":522132,"line_start":1110,"line_end":1110,"column_start":12,"column_end":24},"name":"address_size","qualname":"<LineProgramHeader<R, Offset>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the size in bytes of a target machine address.\n","sig":null,"attributes":[{"value":"/ Get the size in bytes of a target machine address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522054,"byte_end":522108,"line_start":1109,"line_end":1109,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522270,"byte_end":522276,"line_start":1115,"line_end":1115,"column_start":12,"column_end":18},"name":"format","qualname":"<LineProgramHeader<R, Offset>>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Whether this line program is encoded in 64- or 32-bit DWARF.\n","sig":null,"attributes":[{"value":"/ Whether this line program is encoded in 64- or 32-bit DWARF.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522194,"byte_end":522258,"line_start":1114,"line_end":1114,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522416,"byte_end":522429,"line_start":1120,"line_end":1120,"column_start":12,"column_end":25},"name":"line_encoding","qualname":"<LineProgramHeader<R, Offset>>::line_encoding","value":"pub fn line_encoding(&Self) -> LineEncoding","parent":null,"children":[],"decl_id":null,"docs":" Get the line encoding parameters for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the line encoding parameters for this header's line program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522336,"byte_end":522404,"line_start":1119,"line_end":1119,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522607,"byte_end":522633,"line_start":1126,"line_end":1126,"column_start":12,"column_end":38},"name":"minimum_instruction_length","qualname":"<LineProgramHeader<R, Offset>>::minimum_instruction_length","value":"pub fn minimum_instruction_length(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum instruction length any instruction in this header's line\n program may have.\n","sig":null,"attributes":[{"value":"/ Get the minimum instruction length any instruction in this header's line","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522493,"byte_end":522569,"line_start":1124,"line_end":1124,"column_start":5,"column_end":81}},{"value":"/ program may have.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522574,"byte_end":522595,"line_start":1125,"line_end":1125,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522831,"byte_end":522865,"line_start":1132,"line_end":1132,"column_start":12,"column_end":46},"name":"maximum_operations_per_instruction","qualname":"<LineProgramHeader<R, Offset>>::maximum_operations_per_instruction","value":"pub fn maximum_operations_per_instruction(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the maximum number of operations each instruction in this header's\n line program may have.\n","sig":null,"attributes":[{"value":"/ Get the maximum number of operations each instruction in this header's","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522714,"byte_end":522788,"line_start":1130,"line_end":1130,"column_start":5,"column_end":79}},{"value":"/ line program may have.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522793,"byte_end":522819,"line_start":1131,"line_end":1131,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523057,"byte_end":523072,"line_start":1138,"line_end":1138,"column_start":12,"column_end":27},"name":"default_is_stmt","qualname":"<LineProgramHeader<R, Offset>>::default_is_stmt","value":"pub fn default_is_stmt(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get the default value of the `is_stmt` register for this header's line\n program.\n","sig":null,"attributes":[{"value":"/ Get the default value of the `is_stmt` register for this header's line","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":522954,"byte_end":523028,"line_start":1136,"line_end":1136,"column_start":5,"column_end":79}},{"value":"/ program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523033,"byte_end":523045,"line_start":1137,"line_end":1137,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523209,"byte_end":523218,"line_start":1143,"line_end":1143,"column_start":12,"column_end":21},"name":"line_base","qualname":"<LineProgramHeader<R, Offset>>::line_base","value":"pub fn line_base(&Self) -> i8","parent":null,"children":[],"decl_id":null,"docs":" Get the line base for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the line base for this header's line program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523144,"byte_end":523197,"line_start":1142,"line_end":1142,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523348,"byte_end":523358,"line_start":1148,"line_end":1148,"column_start":12,"column_end":22},"name":"line_range","qualname":"<LineProgramHeader<R, Offset>>::line_range","value":"pub fn line_range(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the line range for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the line range for this header's line program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523282,"byte_end":523336,"line_start":1147,"line_end":1147,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523486,"byte_end":523497,"line_start":1153,"line_end":1153,"column_start":12,"column_end":23},"name":"opcode_base","qualname":"<LineProgramHeader<R, Offset>>::opcode_base","value":"pub fn opcode_base(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get opcode base for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get opcode base for this header's line program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523423,"byte_end":523474,"line_start":1152,"line_end":1152,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523668,"byte_end":523691,"line_start":1159,"line_end":1159,"column_start":12,"column_end":35},"name":"standard_opcode_lengths","qualname":"<LineProgramHeader<R, Offset>>::standard_opcode_lengths","value":"pub fn standard_opcode_lengths(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" An array of `u8` that specifies the number of LEB128 operands for\n each of the standard opcodes.\n","sig":null,"attributes":[{"value":"/ An array of `u8` that specifies the number of LEB128 operands for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523549,"byte_end":523618,"line_start":1157,"line_end":1157,"column_start":5,"column_end":74}},{"value":"/ each of the standard opcodes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523623,"byte_end":523656,"line_start":1158,"line_end":1158,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523808,"byte_end":523830,"line_start":1164,"line_end":1164,"column_start":12,"column_end":34},"name":"directory_entry_format","qualname":"<LineProgramHeader<R, Offset>>::directory_entry_format","value":"pub fn directory_entry_format(&Self) -> &[FileEntryFormat]","parent":null,"children":[],"decl_id":null,"docs":" Get the format of a directory entry.\n","sig":null,"attributes":[{"value":"/ Get the format of a directory entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523756,"byte_end":523796,"line_start":1163,"line_end":1163,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":524173,"byte_end":524192,"line_start":1172,"line_end":1172,"column_start":12,"column_end":31},"name":"include_directories","qualname":"<LineProgramHeader<R, Offset>>::include_directories","value":"pub fn include_directories(&Self) -> &[AttributeValue<R, Offset>]","parent":null,"children":[],"decl_id":null,"docs":" Get the set of include directories for this header's line program.","sig":null,"attributes":[{"value":"/ Get the set of include directories for this header's line program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523914,"byte_end":523984,"line_start":1168,"line_end":1168,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523989,"byte_end":523992,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ For DWARF version <= 4, the compilation's current directory is not included","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":523997,"byte_end":524076,"line_start":1170,"line_end":1170,"column_start":5,"column_end":84}},{"value":"/ in the return value, but is implicitly considered to be in the set per spec.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":524081,"byte_end":524161,"line_start":1171,"line_end":1171,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":524438,"byte_end":524447,"line_start":1179,"line_end":1179,"column_start":12,"column_end":21},"name":"directory","qualname":"<LineProgramHeader<R, Offset>>::directory","value":"pub fn directory(&Self, u64) -> Option<AttributeValue<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" The include directory with the given directory index.","sig":null,"attributes":[{"value":"/ The include directory with the given directory index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":524283,"byte_end":524340,"line_start":1176,"line_end":1176,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":524345,"byte_end":524348,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ A directory index of 0 corresponds to the compilation unit directory.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":524353,"byte_end":524426,"line_start":1178,"line_end":1178,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":524964,"byte_end":524986,"line_start":1193,"line_end":1193,"column_start":12,"column_end":34},"name":"file_name_entry_format","qualname":"<LineProgramHeader<R, Offset>>::file_name_entry_format","value":"pub fn file_name_entry_format(&Self) -> &[FileEntryFormat]","parent":null,"children":[],"decl_id":null,"docs":" Get the format of a file name entry.\n","sig":null,"attributes":[{"value":"/ Get the format of a file name entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":524912,"byte_end":524952,"line_start":1192,"line_end":1192,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525248,"byte_end":525266,"line_start":1201,"line_end":1201,"column_start":12,"column_end":30},"name":"file_has_timestamp","qualname":"<LineProgramHeader<R, Offset>>::file_has_timestamp","value":"pub fn file_has_timestamp(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the file entries may have valid timestamps.","sig":null,"attributes":[{"value":"/ Return true if the file entries may have valid timestamps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525070,"byte_end":525132,"line_start":1197,"line_end":1197,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525137,"byte_end":525140,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ Only returns false if we definitely know that all timestamp fields","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525145,"byte_end":525215,"line_start":1199,"line_end":1199,"column_start":5,"column_end":75}},{"value":"/ are invalid.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525220,"byte_end":525236,"line_start":1200,"line_end":1200,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525655,"byte_end":525668,"line_start":1213,"line_end":1213,"column_start":12,"column_end":25},"name":"file_has_size","qualname":"<LineProgramHeader<R, Offset>>::file_has_size","value":"pub fn file_has_size(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the file entries may have valid sizes.","sig":null,"attributes":[{"value":"/ Return true if the file entries may have valid sizes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525487,"byte_end":525544,"line_start":1209,"line_end":1209,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525549,"byte_end":525552,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ Only returns false if we definitely know that all size fields","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525557,"byte_end":525622,"line_start":1211,"line_end":1211,"column_start":5,"column_end":70}},{"value":"/ are invalid.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525627,"byte_end":525643,"line_start":1212,"line_end":1212,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525964,"byte_end":525976,"line_start":1222,"line_end":1222,"column_start":12,"column_end":24},"name":"file_has_md5","qualname":"<LineProgramHeader<R, Offset>>::file_has_md5","value":"pub fn file_has_md5(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the file name entry format contains an MD5 field.\n","sig":null,"attributes":[{"value":"/ Return true if the file name entry format contains an MD5 field.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":525884,"byte_end":525952,"line_start":1221,"line_end":1221,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526211,"byte_end":526221,"line_start":1229,"line_end":1229,"column_start":12,"column_end":22},"name":"file_names","qualname":"<LineProgramHeader<R, Offset>>::file_names","value":"pub fn file_names(&Self) -> &[FileEntry<R, Offset>]","parent":null,"children":[],"decl_id":null,"docs":" Get the list of source files that appear in this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the list of source files that appear in this header's line program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526124,"byte_end":526199,"line_start":1228,"line_end":1228,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526537,"byte_end":526541,"line_start":1238,"line_end":1238,"column_start":12,"column_end":16},"name":"file","qualname":"<LineProgramHeader<R, Offset>>::file","value":"pub fn file(&Self, u64) -> Option<&FileEntry<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" The source file with the given file index.","sig":null,"attributes":[{"value":"/ The source file with the given file index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526298,"byte_end":526344,"line_start":1233,"line_end":1233,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526349,"byte_end":526352,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ A file index of 0 corresponds to the compilation unit file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526357,"byte_end":526420,"line_start":1235,"line_end":1235,"column_start":5,"column_end":68}},{"value":"/ Note that a file index of 0 is invalid for DWARF version <= 4,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526425,"byte_end":526491,"line_start":1236,"line_end":1236,"column_start":5,"column_end":71}},{"value":"/ but we support it anyway.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526496,"byte_end":526525,"line_start":1237,"line_end":1237,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527607,"byte_end":527622,"line_start":1269,"line_end":1269,"column_start":12,"column_end":27},"name":"raw_program_buf","qualname":"<LineProgramHeader<R, Offset>>::raw_program_buf","value":"pub fn raw_program_buf(&Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the raw, un-parsed `EndianSlice` containing this header's line number\n program.","sig":null,"attributes":[{"value":"/ Get the raw, un-parsed `EndianSlice` containing this header's line number","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526910,"byte_end":526987,"line_start":1251,"line_end":1251,"column_start":5,"column_end":82}},{"value":"/ program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":526992,"byte_end":527004,"line_start":1252,"line_end":1252,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527009,"byte_end":527012,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527017,"byte_end":527024,"line_start":1254,"line_end":1254,"column_start":5,"column_end":12}},{"value":"/ # fn foo() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527029,"byte_end":527045,"line_start":1255,"line_end":1255,"column_start":5,"column_end":21}},{"value":"/ use gimli::{LineProgramHeader, EndianSlice, NativeEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527050,"byte_end":527112,"line_start":1256,"line_end":1256,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527117,"byte_end":527120,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ fn get_line_number_program_header<'a>() -> LineProgramHeader<EndianSlice<'a, NativeEndian>> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527125,"byte_end":527222,"line_start":1258,"line_end":1258,"column_start":5,"column_end":102}},{"value":"/     // Get a line number program header from some offset in a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527227,"byte_end":527292,"line_start":1259,"line_end":1259,"column_start":5,"column_end":70}},{"value":"/     // `.debug_line` section...","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527297,"byte_end":527332,"line_start":1260,"line_end":1260,"column_start":5,"column_end":40}},{"value":"/ #   unimplemented!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527337,"byte_end":527361,"line_start":1261,"line_end":1261,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527366,"byte_end":527371,"line_start":1262,"line_end":1262,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527376,"byte_end":527379,"line_start":1263,"line_end":1263,"column_start":5,"column_end":8}},{"value":"/ let header = get_line_number_program_header();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527384,"byte_end":527434,"line_start":1264,"line_end":1264,"column_start":5,"column_end":55}},{"value":"/ let raw_program = header.raw_program_buf();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527439,"byte_end":527486,"line_start":1265,"line_end":1265,"column_start":5,"column_end":52}},{"value":"/ println!(\"The length of the raw program in bytes is {}\", raw_program.len());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527491,"byte_end":527571,"line_start":1266,"line_end":1266,"column_start":5,"column_end":85}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527576,"byte_end":527583,"line_start":1267,"line_end":1267,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527588,"byte_end":527595,"line_start":1268,"line_end":1268,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527795,"byte_end":527807,"line_start":1275,"line_end":1275,"column_start":12,"column_end":24},"name":"instructions","qualname":"<LineProgramHeader<R, Offset>>::instructions","value":"pub fn instructions(&Self) -> LineInstructions<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the instructions in this header's line number program, parsing\n them as we go.\n","sig":null,"attributes":[{"value":"/ Iterate over the instructions in this header's line number program, parsing","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527681,"byte_end":527760,"line_start":1273,"line_end":1273,"column_start":5,"column_end":84}},{"value":"/ them as we go.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":527765,"byte_end":527783,"line_start":1274,"line_end":1274,"column_start":5,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1175},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":532735,"byte_end":532762,"line_start":1427,"line_end":1427,"column_start":10,"column_end":37},"name":"IncompleteLineNumberProgram","qualname":"::read::line::IncompleteLineNumberProgram","value":"IncompleteLineProgram<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `IncompleteLineNumberProgram` has been renamed to `IncompleteLineProgram`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `IncompleteLineNumberProgram` has been renamed to `IncompleteLineProgram`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":532516,"byte_end":532606,"line_start":1423,"line_end":1423,"column_start":1,"column_end":91}},{"value":"deprecated(note =\n             \"IncompleteLineNumberProgram has been renamed to IncompleteLineProgram, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":532607,"byte_end":532725,"line_start":1424,"line_end":1426,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":5864},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":532924,"byte_end":532945,"line_start":1431,"line_end":1431,"column_start":12,"column_end":33},"name":"IncompleteLineProgram","qualname":"::read::line::IncompleteLineProgram","value":"IncompleteLineProgram {  }","parent":null,"children":[{"krate":0,"index":5867}],"decl_id":null,"docs":" A line number program that has not been run to completion.\n","sig":null,"attributes":[{"value":"/ A line number program that has not been run to completion.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":532811,"byte_end":532873,"line_start":1429,"line_end":1429,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533277,"byte_end":533283,"line_start":1445,"line_end":1445,"column_start":12,"column_end":18},"name":"header","qualname":"<IncompleteLineProgram<R, Offset>>::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `LineProgramHeader` for this program.\n","sig":null,"attributes":[{"value":"/ Retrieve the `LineProgramHeader` for this program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533211,"byte_end":533265,"line_start":1444,"line_end":1444,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533488,"byte_end":533492,"line_start":1451,"line_end":1451,"column_start":12,"column_end":16},"name":"rows","qualname":"<IncompleteLineProgram<R, Offset>>::rows","value":"pub fn rows(Self) -> OneShotLineRows<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LineRows` for executing this program to iterate\n over rows in the line information matrix.\n","sig":null,"attributes":[{"value":"/ Construct a new `LineRows` for executing this program to iterate","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533358,"byte_end":533426,"line_start":1449,"line_end":1449,"column_start":5,"column_end":73}},{"value":"/ over rows in the line information matrix.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533431,"byte_end":533476,"line_start":1450,"line_end":1450,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534482,"byte_end":534491,"line_start":1476,"line_end":1476,"column_start":12,"column_end":21},"name":"sequences","qualname":"<IncompleteLineProgram<R, Offset>>::sequences","value":"pub fn sequences(Self)\n-> Result<(CompleteLineProgram<R, Offset>, Vec<LineSequence<R>>)>","parent":null,"children":[],"decl_id":null,"docs":" Execute the line number program, completing the `IncompleteLineProgram`\n into a `CompleteLineProgram` and producing an array of sequences within\n the line number program that can later be used with\n `CompleteLineProgram::resume_from`.","sig":null,"attributes":[{"value":"/ Execute the line number program, completing the `IncompleteLineProgram`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533577,"byte_end":533652,"line_start":1455,"line_end":1455,"column_start":5,"column_end":80}},{"value":"/ into a `CompleteLineProgram` and producing an array of sequences within","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533657,"byte_end":533732,"line_start":1456,"line_end":1456,"column_start":5,"column_end":80}},{"value":"/ the line number program that can later be used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533737,"byte_end":533792,"line_start":1457,"line_end":1457,"column_start":5,"column_end":60}},{"value":"/ `CompleteLineProgram::resume_from`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533797,"byte_end":533836,"line_start":1458,"line_end":1458,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533841,"byte_end":533844,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533849,"byte_end":533856,"line_start":1460,"line_end":1460,"column_start":5,"column_end":12}},{"value":"/ # fn foo() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533861,"byte_end":533877,"line_start":1461,"line_end":1461,"column_start":5,"column_end":21}},{"value":"/ use gimli::{IncompleteLineProgram, EndianSlice, NativeEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533882,"byte_end":533948,"line_start":1462,"line_end":1462,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533953,"byte_end":533956,"line_start":1463,"line_end":1463,"column_start":5,"column_end":8}},{"value":"/ fn get_line_number_program<'a>() -> IncompleteLineProgram<EndianSlice<'a, NativeEndian>> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533961,"byte_end":534055,"line_start":1464,"line_end":1464,"column_start":5,"column_end":99}},{"value":"/     // Get a line number program from some offset in a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534060,"byte_end":534118,"line_start":1465,"line_end":1465,"column_start":5,"column_end":63}},{"value":"/     // `.debug_line` section...","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534123,"byte_end":534158,"line_start":1466,"line_end":1466,"column_start":5,"column_end":40}},{"value":"/ #   unimplemented!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534163,"byte_end":534187,"line_start":1467,"line_end":1467,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534192,"byte_end":534197,"line_start":1468,"line_end":1468,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534202,"byte_end":534205,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ let program = get_line_number_program();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534210,"byte_end":534254,"line_start":1470,"line_end":1470,"column_start":5,"column_end":49}},{"value":"/ let (program, sequences) = program.sequences().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534259,"byte_end":534319,"line_start":1471,"line_end":1471,"column_start":5,"column_end":65}},{"value":"/ println!(\"There are {} sequences in this line number program\", sequences.len());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534324,"byte_end":534408,"line_start":1472,"line_end":1472,"column_start":5,"column_end":89}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534413,"byte_end":534420,"line_start":1473,"line_end":1473,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534425,"byte_end":534432,"line_start":1474,"line_end":1474,"column_start":5,"column_end":12}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":534437,"byte_end":534470,"line_start":1475,"line_end":1475,"column_start":5,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1184},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536046,"byte_end":536071,"line_start":1520,"line_end":1520,"column_start":10,"column_end":35},"name":"CompleteLineNumberProgram","qualname":"::read::line::CompleteLineNumberProgram","value":"CompleteLineProgram<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `CompleteLineNumberProgram` has been renamed to `CompleteLineProgram`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `CompleteLineNumberProgram` has been renamed to `CompleteLineProgram`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":535835,"byte_end":535921,"line_start":1516,"line_end":1516,"column_start":1,"column_end":87}},{"value":"deprecated(note =\n             \"CompleteLineNumberProgram has been renamed to CompleteLineProgram, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":535922,"byte_end":536036,"line_start":1517,"line_end":1519,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":5891},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536238,"byte_end":536257,"line_start":1524,"line_end":1524,"column_start":12,"column_end":31},"name":"CompleteLineProgram","qualname":"::read::line::CompleteLineProgram","value":"CompleteLineProgram {  }","parent":null,"children":[{"krate":0,"index":5894}],"decl_id":null,"docs":" A line number program that has previously been run to completion.\n","sig":null,"attributes":[{"value":"/ A line number program that has previously been run to completion.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536118,"byte_end":536187,"line_start":1522,"line_end":1522,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536587,"byte_end":536593,"line_start":1538,"line_end":1538,"column_start":12,"column_end":18},"name":"header","qualname":"<CompleteLineProgram<R, Offset>>::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `LineProgramHeader` for this program.\n","sig":null,"attributes":[{"value":"/ Retrieve the `LineProgramHeader` for this program.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536521,"byte_end":536575,"line_start":1537,"line_end":1537,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537458,"byte_end":537469,"line_start":1563,"line_end":1563,"column_start":12,"column_end":23},"name":"resume_from","qualname":"<CompleteLineProgram<R, Offset>>::resume_from","value":"pub fn resume_from<'program>(&'program Self, &LineSequence<R>)\n-> ResumedLineRows","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LineRows` for executing the subset of the line\n number program identified by 'sequence' and  generating the line information\n matrix.","sig":null,"attributes":[{"value":"/ Construct a new `LineRows` for executing the subset of the line","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536668,"byte_end":536735,"line_start":1542,"line_end":1542,"column_start":5,"column_end":72}},{"value":"/ number program identified by 'sequence' and  generating the line information","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536740,"byte_end":536820,"line_start":1543,"line_end":1543,"column_start":5,"column_end":85}},{"value":"/ matrix.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536825,"byte_end":536836,"line_start":1544,"line_end":1544,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536841,"byte_end":536844,"line_start":1545,"line_end":1545,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536849,"byte_end":536856,"line_start":1546,"line_end":1546,"column_start":5,"column_end":12}},{"value":"/ # fn foo() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536861,"byte_end":536877,"line_start":1547,"line_end":1547,"column_start":5,"column_end":21}},{"value":"/ use gimli::{IncompleteLineProgram, EndianSlice, NativeEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536882,"byte_end":536948,"line_start":1548,"line_end":1548,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536953,"byte_end":536956,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ fn get_line_number_program<'a>() -> IncompleteLineProgram<EndianSlice<'a, NativeEndian>> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536961,"byte_end":537055,"line_start":1550,"line_end":1550,"column_start":5,"column_end":99}},{"value":"/     // Get a line number program from some offset in a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537060,"byte_end":537118,"line_start":1551,"line_end":1551,"column_start":5,"column_end":63}},{"value":"/     // `.debug_line` section...","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537123,"byte_end":537158,"line_start":1552,"line_end":1552,"column_start":5,"column_end":40}},{"value":"/ #   unimplemented!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537163,"byte_end":537187,"line_start":1553,"line_end":1553,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537192,"byte_end":537197,"line_start":1554,"line_end":1554,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537202,"byte_end":537205,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ let program = get_line_number_program();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537210,"byte_end":537254,"line_start":1556,"line_end":1556,"column_start":5,"column_end":49}},{"value":"/ let (program, sequences) = program.sequences().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537259,"byte_end":537319,"line_start":1557,"line_end":1557,"column_start":5,"column_end":65}},{"value":"/ for sequence in &sequences {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537324,"byte_end":537356,"line_start":1558,"line_end":1558,"column_start":5,"column_end":37}},{"value":"/     let mut sm = program.resume_from(sequence);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537361,"byte_end":537412,"line_start":1559,"line_end":1559,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537417,"byte_end":537422,"line_start":1560,"line_end":1560,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537427,"byte_end":537434,"line_start":1561,"line_end":1561,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537439,"byte_end":537446,"line_start":1562,"line_end":1562,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5918},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537762,"byte_end":537771,"line_start":1573,"line_end":1573,"column_start":12,"column_end":21},"name":"FileEntry","qualname":"::read::line::FileEntry","value":"FileEntry {  }","parent":null,"children":[{"krate":0,"index":5921},{"krate":0,"index":5922},{"krate":0,"index":5923},{"krate":0,"index":5924},{"krate":0,"index":5925}],"decl_id":null,"docs":" An entry in the `LineProgramHeader`'s `file_names` set.\n","sig":null,"attributes":[{"value":"/ An entry in the `LineProgramHeader`'s `file_names` set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":537646,"byte_end":537705,"line_start":1571,"line_end":1571,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":538954,"byte_end":538963,"line_start":1612,"line_end":1612,"column_start":12,"column_end":21},"name":"path_name","qualname":"<FileEntry<R, Offset>>::path_name","value":"pub fn path_name(&Self) -> AttributeValue<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" > A slice containing the full or relative path name of\n > a source file. If the entry contains a file name or a relative path\n > name, the file is located relative to either the compilation directory\n > (as specified by the DW_AT_comp_dir attribute given in the compilation\n > unit) or one of the directories in the include_directories section.\n","sig":null,"attributes":[{"value":"/ > A slice containing the full or relative path name of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":538566,"byte_end":538624,"line_start":1607,"line_end":1607,"column_start":5,"column_end":63}},{"value":"/ > a source file. If the entry contains a file name or a relative path","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":538629,"byte_end":538702,"line_start":1608,"line_end":1608,"column_start":5,"column_end":78}},{"value":"/ > name, the file is located relative to either the compilation directory","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":538707,"byte_end":538783,"line_start":1609,"line_end":1609,"column_start":5,"column_end":81}},{"value":"/ > (as specified by the DW_AT_comp_dir attribute given in the compilation","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":538788,"byte_end":538864,"line_start":1610,"line_end":1610,"column_start":5,"column_end":81}},{"value":"/ > unit) or one of the directories in the include_directories section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":538869,"byte_end":538942,"line_start":1611,"line_end":1611,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539628,"byte_end":539643,"line_start":1627,"line_end":1627,"column_start":12,"column_end":27},"name":"directory_index","qualname":"<FileEntry<R, Offset>>::directory_index","value":"pub fn directory_index(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" > An unsigned LEB128 number representing the directory index of the\n > directory in which the file was found.\n >\n > ...\n >\n > The directory index represents an entry in the include_directories\n > section of the line number program header. The index is 0 if the file\n > was found in the current directory of the compilation, 1 if it was found\n > in the first directory in the include_directories section, and so\n > on. The directory index is ignored for file names that represent full\n > path names.\n","sig":null,"attributes":[{"value":"/ > An unsigned LEB128 number representing the directory index of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539044,"byte_end":539115,"line_start":1616,"line_end":1616,"column_start":5,"column_end":76}},{"value":"/ > directory in which the file was found.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539120,"byte_end":539164,"line_start":1617,"line_end":1617,"column_start":5,"column_end":49}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539169,"byte_end":539174,"line_start":1618,"line_end":1618,"column_start":5,"column_end":10}},{"value":"/ > ...","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539179,"byte_end":539188,"line_start":1619,"line_end":1619,"column_start":5,"column_end":14}},{"value":"/ >","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539193,"byte_end":539198,"line_start":1620,"line_end":1620,"column_start":5,"column_end":10}},{"value":"/ > The directory index represents an entry in the include_directories","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539203,"byte_end":539275,"line_start":1621,"line_end":1621,"column_start":5,"column_end":77}},{"value":"/ > section of the line number program header. The index is 0 if the file","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539280,"byte_end":539355,"line_start":1622,"line_end":1622,"column_start":5,"column_end":80}},{"value":"/ > was found in the current directory of the compilation, 1 if it was found","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539360,"byte_end":539438,"line_start":1623,"line_end":1623,"column_start":5,"column_end":83}},{"value":"/ > in the first directory in the include_directories section, and so","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539443,"byte_end":539514,"line_start":1624,"line_end":1624,"column_start":5,"column_end":76}},{"value":"/ > on. The directory index is ignored for file names that represent full","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539519,"byte_end":539594,"line_start":1625,"line_end":1625,"column_start":5,"column_end":80}},{"value":"/ > path names.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539599,"byte_end":539616,"line_start":1626,"line_end":1626,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539828,"byte_end":539837,"line_start":1634,"line_end":1634,"column_start":12,"column_end":21},"name":"directory","qualname":"<FileEntry<R, Offset>>::directory","value":"pub fn directory(&Self, &LineProgramHeader<R>)\n-> Option<AttributeValue<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Get this file's directory.","sig":null,"attributes":[{"value":"/ Get this file's directory.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539700,"byte_end":539730,"line_start":1631,"line_end":1631,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539735,"byte_end":539738,"line_start":1632,"line_end":1632,"column_start":5,"column_end":8}},{"value":"/ A directory index of 0 corresponds to the compilation unit directory.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539743,"byte_end":539816,"line_start":1633,"line_end":1633,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540085,"byte_end":540094,"line_start":1640,"line_end":1640,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<FileEntry<R, Offset>>::timestamp","value":"pub fn timestamp(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The implementation-defined time of last modification of the file,\n or 0 if not available.\n","sig":null,"attributes":[{"value":"/ The implementation-defined time of last modification of the file,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":539973,"byte_end":540042,"line_start":1638,"line_end":1638,"column_start":5,"column_end":74}},{"value":"/ or 0 if not available.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540047,"byte_end":540073,"line_start":1639,"line_end":1639,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540341,"byte_end":540358,"line_start":1648,"line_end":1648,"column_start":12,"column_end":29},"name":"last_modification","qualname":"<FileEntry<R, Offset>>::last_modification","value":"pub fn last_modification(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned LEB128 number representing the time of last modification of\n the file, or 0 if not available.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned LEB128 number representing the time of last modification of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540145,"byte_end":540221,"line_start":1644,"line_end":1644,"column_start":5,"column_end":81}},{"value":"/ the file, or 0 if not available.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540226,"byte_end":540263,"line_start":1645,"line_end":1645,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540478,"byte_end":540482,"line_start":1653,"line_end":1653,"column_start":12,"column_end":16},"name":"size","qualname":"<FileEntry<R, Offset>>::size","value":"pub fn size(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The size of the file in bytes, or 0 if not available.\n","sig":null,"attributes":[{"value":"/ The size of the file in bytes, or 0 if not available.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540409,"byte_end":540466,"line_start":1652,"line_end":1652,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540714,"byte_end":540720,"line_start":1661,"line_end":1661,"column_start":12,"column_end":18},"name":"length","qualname":"<FileEntry<R, Offset>>::length","value":"pub fn length(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned LEB128 number representing the length in bytes of the file,\n or 0 if not available.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned LEB128 number representing the length in bytes of the file,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540528,"byte_end":540604,"line_start":1657,"line_end":1657,"column_start":5,"column_end":81}},{"value":"/ or 0 if not available.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540609,"byte_end":540636,"line_start":1658,"line_end":1658,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540904,"byte_end":540907,"line_start":1668,"line_end":1668,"column_start":12,"column_end":15},"name":"md5","qualname":"<FileEntry<R, Offset>>::md5","value":"pub fn md5(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" A 16-byte MD5 digest of the file contents.","sig":null,"attributes":[{"value":"/ A 16-byte MD5 digest of the file contents.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540766,"byte_end":540812,"line_start":1665,"line_end":1665,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540817,"byte_end":540820,"line_start":1666,"line_end":1666,"column_start":5,"column_end":8}},{"value":"/ Only valid if `LineProgramHeader::file_has_md5` returns `true`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540825,"byte_end":540892,"line_start":1667,"line_end":1667,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":5954},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":541087,"byte_end":541102,"line_start":1675,"line_end":1675,"column_start":12,"column_end":27},"name":"FileEntryFormat","qualname":"::read::line::FileEntryFormat","value":"FileEntryFormat { content_type, form }","parent":null,"children":[{"krate":0,"index":5955},{"krate":0,"index":5956}],"decl_id":null,"docs":" The format of a component of an include directory or file name entry.\n","sig":null,"attributes":[{"value":"/ The format of a component of an include directory or file name entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":540957,"byte_end":541030,"line_start":1673,"line_end":1673,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":5955},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":541183,"byte_end":541195,"line_start":1677,"line_end":1677,"column_start":9,"column_end":21},"name":"content_type","qualname":"::read::line::FileEntryFormat::content_type","value":"constants::DwLnct","parent":{"krate":0,"index":5954},"children":[],"decl_id":null,"docs":" The type of information that is represented by the component.\n","sig":null,"attributes":[{"value":"/ The type of information that is represented by the component.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":541109,"byte_end":541174,"line_start":1676,"line_end":1676,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":5956},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":541275,"byte_end":541279,"line_start":1680,"line_end":1680,"column_start":9,"column_end":13},"name":"form","qualname":"::read::line::FileEntryFormat::form","value":"constants::DwForm","parent":{"krate":0,"index":5954},"children":[],"decl_id":null,"docs":" The encoding form of the component value.\n","sig":null,"attributes":[{"value":"/ The encoding form of the component value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":541221,"byte_end":541266,"line_start":1679,"line_end":1679,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5977},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":590622,"byte_end":590630,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"DebugLoc","qualname":"::read::loclists::DebugLoc","value":"DebugLoc {  }","parent":null,"children":[{"krate":0,"index":5979}],"decl_id":null,"docs":" The raw contents of the `.debug_loc` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_loc` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":590522,"byte_end":590571,"line_start":12,"line_end":12,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591342,"byte_end":591345,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLoc<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLoc` instance from the data in the `.debug_loc`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLoc` instance from the data in the `.debug_loc`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":590760,"byte_end":590833,"line_start":22,"line_end":22,"column_start":5,"column_end":78}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":590838,"byte_end":590850,"line_start":23,"line_end":23,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":590855,"byte_end":590858,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_loc` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":590863,"byte_end":590937,"line_start":25,"line_end":25,"column_start":5,"column_end":79}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":590942,"byte_end":591012,"line_start":26,"line_end":26,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591017,"byte_end":591056,"line_start":27,"line_end":27,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591061,"byte_end":591064,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591069,"byte_end":591076,"line_start":29,"line_end":29,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLoc, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591081,"byte_end":591121,"line_start":30,"line_end":30,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591126,"byte_end":591129,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591134,"byte_end":591175,"line_start":32,"line_end":32,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_loc_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591180,"byte_end":591231,"line_start":33,"line_end":33,"column_start":5,"column_end":56}},{"value":"/ let debug_loc = DebugLoc::new(read_debug_loc_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591236,"byte_end":591318,"line_start":34,"line_end":34,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591323,"byte_end":591330,"line_start":35,"line_end":35,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":5991},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591874,"byte_end":591887,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"DebugLocLists","qualname":"::read::loclists::DebugLocLists","value":"DebugLocLists {  }","parent":null,"children":[{"krate":0,"index":5993}],"decl_id":null,"docs":" The `DebugLocLists` struct represents the DWARF data\n found in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ The `DebugLocLists` struct represents the DWARF data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591723,"byte_end":591779,"line_start":57,"line_end":57,"column_start":1,"column_end":57}},{"value":"/ found in the `.debug_loclists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591780,"byte_end":591823,"line_start":58,"line_end":58,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592633,"byte_end":592636,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLocLists<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLocLists` instance from the data in the `.debug_loclists`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLocLists` instance from the data in the `.debug_loclists`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592011,"byte_end":592094,"line_start":68,"line_end":68,"column_start":5,"column_end":88}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592099,"byte_end":592111,"line_start":69,"line_end":69,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592116,"byte_end":592119,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_loclists` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592124,"byte_end":592203,"line_start":71,"line_end":71,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592208,"byte_end":592278,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592283,"byte_end":592322,"line_start":73,"line_end":73,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592327,"byte_end":592330,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592335,"byte_end":592342,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLocLists, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592347,"byte_end":592392,"line_start":76,"line_end":76,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592397,"byte_end":592400,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592405,"byte_end":592446,"line_start":78,"line_end":78,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_loclists_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592451,"byte_end":592507,"line_start":79,"line_end":79,"column_start":5,"column_end":61}},{"value":"/ let debug_loclists = DebugLocLists::new(read_debug_loclists_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592512,"byte_end":592609,"line_start":80,"line_end":80,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592614,"byte_end":592621,"line_start":81,"line_end":81,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":593303,"byte_end":593332,"line_start":111,"line_end":111,"column_start":12,"column_end":41},"name":"default_for_encoding_and_file","qualname":"<DebugLocListsBase<Offset>>::default_for_encoding_and_file","value":"pub fn default_for_encoding_and_file(Encoding, DwarfFileType)\n-> DebugLocListsBase<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DebugLocListsBase` with the default value of DW_AT_loclists_base\n for the given `Encoding` and `DwarfFileType`.\n","sig":null,"attributes":[{"value":"/ Returns a `DebugLocListsBase` with the default value of DW_AT_loclists_base","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":593158,"byte_end":593237,"line_start":109,"line_end":109,"column_start":5,"column_end":84}},{"value":"/ for the given `Encoding` and `DwarfFileType`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":593242,"byte_end":593291,"line_start":110,"line_end":110,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6005},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594047,"byte_end":594060,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"LocationLists","qualname":"::read::loclists::LocationLists","value":"LocationLists {  }","parent":null,"children":[{"krate":0,"index":6007},{"krate":0,"index":6008}],"decl_id":null,"docs":" The DWARF data found in `.debug_loc` and `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ The DWARF data found in `.debug_loc` and `.debug_loclists` sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":593924,"byte_end":593996,"line_start":126,"line_end":126,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594296,"byte_end":594299,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<LocationLists<R>>::new","value":"pub fn new(DebugLoc<R>, DebugLocLists<R>) -> LocationLists<R>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LocationLists` instance from the data in the `.debug_loc` and\n `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ Construct a new `LocationLists` instance from the data in the `.debug_loc` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594166,"byte_end":594248,"line_start":134,"line_end":134,"column_start":5,"column_end":87}},{"value":"/ `.debug_loclists` sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594253,"byte_end":594284,"line_start":135,"line_end":135,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595135,"byte_end":595141,"line_start":160,"line_end":160,"column_start":12,"column_end":18},"name":"borrow","qualname":"<LocationLists<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> LocationLists<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `LocationLists` that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `LocationLists` that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594505,"byte_end":594569,"line_start":145,"line_end":145,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594574,"byte_end":594577,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594582,"byte_end":594647,"line_start":147,"line_end":147,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594652,"byte_end":594655,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594660,"byte_end":594680,"line_start":149,"line_end":149,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594685,"byte_end":594688,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594693,"byte_end":594711,"line_start":151,"line_end":151,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594716,"byte_end":594761,"line_start":152,"line_end":152,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594766,"byte_end":594850,"line_start":153,"line_end":153,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::LocationLists<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594855,"byte_end":594925,"line_start":154,"line_end":154,"column_start":5,"column_end":75}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594930,"byte_end":594977,"line_start":155,"line_end":155,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594982,"byte_end":595032,"line_start":156,"line_end":156,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595037,"byte_end":595099,"line_start":157,"line_end":157,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595104,"byte_end":595111,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595116,"byte_end":595123,"line_start":159,"line_end":159,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595957,"byte_end":595966,"line_start":183,"line_end":183,"column_start":12,"column_end":21},"name":"locations","qualname":"<LocationLists<R>>::locations","value":"pub fn locations(&Self, LocationListsOffset<R::Offset>, Encoding, u64,\n                 &DebugAddr<R>, DebugAddrBase<R::Offset>)\n-> Result<LocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `LocationListEntry`s starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the `LocationListEntry`s starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595461,"byte_end":595532,"line_start":172,"line_end":172,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595537,"byte_end":595540,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595545,"byte_end":595609,"line_start":174,"line_end":174,"column_start":5,"column_end":69}},{"value":"/ offset was contained in.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595614,"byte_end":595642,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595647,"byte_end":595650,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ The `base_address` should be obtained from the `DW_AT_low_pc` attribute in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595655,"byte_end":595737,"line_start":177,"line_end":177,"column_start":5,"column_end":87}},{"value":"/ `DW_TAG_compile_unit` entry for the compilation unit that contains this location","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595742,"byte_end":595826,"line_start":178,"line_end":178,"column_start":5,"column_end":89}},{"value":"/ list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595831,"byte_end":595840,"line_start":179,"line_end":179,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595845,"byte_end":595848,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595853,"byte_end":595874,"line_start":181,"line_end":181,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595879,"byte_end":595945,"line_start":182,"line_end":182,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":596584,"byte_end":596597,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"locations_dwo","qualname":"<LocationLists<R>>::locations_dwo","value":"pub fn locations_dwo(&Self, LocationListsOffset<R::Offset>, Encoding, u64,\n                     &DebugAddr<R>, DebugAddrBase<R::Offset>)\n-> Result<LocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Similar to `locations`, but with special handling for .dwo files.\n This should only been used when this `LocationLists` was loaded from a\n .dwo file.\n","sig":null,"attributes":[{"value":"/ Similar to `locations`, but with special handling for .dwo files.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":596405,"byte_end":596474,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/ This should only been used when this `LocationLists` was loaded from a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":596479,"byte_end":596553,"line_start":200,"line_end":200,"column_start":5,"column_end":79}},{"value":"/ .dwo file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":596558,"byte_end":596572,"line_start":201,"line_end":201,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597470,"byte_end":597483,"line_start":228,"line_end":228,"column_start":12,"column_end":25},"name":"raw_locations","qualname":"<LocationLists<R>>::raw_locations","value":"pub fn raw_locations(&Self, LocationListsOffset<R::Offset>, Encoding)\n-> Result<RawLocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the raw `LocationListEntry`s starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the raw `LocationListEntry`s starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597040,"byte_end":597115,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597120,"byte_end":597123,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597128,"byte_end":597192,"line_start":220,"line_end":220,"column_start":5,"column_end":69}},{"value":"/ offset was contained in.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597197,"byte_end":597225,"line_start":221,"line_end":221,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597230,"byte_end":597233,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This iterator does not perform any processing of the location entries,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597238,"byte_end":597312,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/ such as handling base addresses.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597317,"byte_end":597353,"line_start":224,"line_end":224,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597358,"byte_end":597361,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597366,"byte_end":597387,"line_start":226,"line_end":226,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597392,"byte_end":597458,"line_start":227,"line_end":227,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":598137,"byte_end":598154,"line_start":245,"line_end":245,"column_start":12,"column_end":29},"name":"raw_locations_dwo","qualname":"<LocationLists<R>>::raw_locations_dwo","value":"pub fn raw_locations_dwo(&Self, LocationListsOffset<R::Offset>, Encoding)\n-> Result<RawLocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Similar to `raw_locations`, but with special handling for .dwo files.\n This should only been used when this `LocationLists` was loaded from a\n .dwo file.\n","sig":null,"attributes":[{"value":"/ Similar to `raw_locations`, but with special handling for .dwo files.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":597954,"byte_end":598027,"line_start":242,"line_end":242,"column_start":5,"column_end":78}},{"value":"/ This should only been used when this `LocationLists` was loaded from a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":598032,"byte_end":598106,"line_start":243,"line_end":243,"column_start":5,"column_end":79}},{"value":"/ .dwo file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":598111,"byte_end":598125,"line_start":244,"line_end":244,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":599181,"byte_end":599191,"line_start":272,"line_end":272,"column_start":12,"column_end":22},"name":"get_offset","qualname":"<LocationLists<R>>::get_offset","value":"pub fn get_offset(&Self, Encoding, DebugLocListsBase<R::Offset>,\n                  DebugLocListsIndex<R::Offset>)\n-> Result<LocationListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `.debug_loclists` offset at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the `.debug_loclists` offset at the given `base` and `index`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":598843,"byte_end":598916,"line_start":266,"line_end":266,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":598921,"byte_end":598924,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_loclists_base` value from the compilation unit DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":598929,"byte_end":599014,"line_start":268,"line_end":268,"column_start":5,"column_end":90}},{"value":"/ This is an offset that points to the first entry following the header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":599019,"byte_end":599093,"line_start":269,"line_end":269,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":599098,"byte_end":599101,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_loclistx` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":599106,"byte_end":599169,"line_start":271,"line_end":271,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":599838,"byte_end":599854,"line_start":290,"line_end":290,"column_start":12,"column_end":28},"name":"lookup_offset_id","qualname":"<LocationLists<R>>::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(SectionId, R::Offset)>","parent":null,"children":[],"decl_id":null,"docs":" Call `Reader::lookup_offset_id` for each section, and return the first match.\n","sig":null,"attributes":[{"value":"/ Call `Reader::lookup_offset_id` for each section, and return the first match.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":599745,"byte_end":599826,"line_start":289,"line_end":289,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":6036},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600500,"byte_end":600514,"line_start":311,"line_end":311,"column_start":12,"column_end":26},"name":"RawLocListIter","qualname":"::read::loclists::RawLocListIter","value":"RawLocListIter {  }","parent":null,"children":[{"krate":0,"index":6038},{"krate":0,"index":6039},{"krate":0,"index":6040}],"decl_id":null,"docs":" A raw iterator over a location list.","sig":null,"attributes":[{"value":"/ A raw iterator over a location list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600315,"byte_end":600355,"line_start":306,"line_end":306,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600356,"byte_end":600359,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ This iterator does not perform any processing of the location entries,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600360,"byte_end":600434,"line_start":308,"line_end":308,"column_start":1,"column_end":75}},{"value":"/ such as handling base addresses.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600435,"byte_end":600471,"line_start":309,"line_end":309,"column_start":1,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":6046},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600743,"byte_end":600762,"line_start":321,"line_end":321,"column_start":5,"column_end":24},"name":"AddressOrOffsetPair","qualname":"::read::loclists::RawLocListEntry::AddressOrOffsetPair","value":"RawLocListEntry::AddressOrOffsetPair { begin, end, data }","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" A location from DWARF version <= 4.\n","sig":null,"attributes":[{"value":"/ A location from DWARF version <= 4.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600699,"byte_end":600738,"line_start":320,"line_end":320,"column_start":5,"column_end":44}}]},{"kind":"StructVariant","id":{"krate":0,"index":6050},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601012,"byte_end":601023,"line_start":330,"line_end":330,"column_start":5,"column_end":16},"name":"BaseAddress","qualname":"::read::loclists::RawLocListEntry::BaseAddress","value":"RawLocListEntry::BaseAddress { addr }","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" DW_LLE_base_address\n","sig":null,"attributes":[{"value":"/ DW_LLE_base_address","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600984,"byte_end":601007,"line_start":329,"line_end":329,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":6052},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601110,"byte_end":601122,"line_start":335,"line_end":335,"column_start":5,"column_end":17},"name":"BaseAddressx","qualname":"::read::loclists::RawLocListEntry::BaseAddressx","value":"RawLocListEntry::BaseAddressx { addr }","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" DW_LLE_base_addressx\n","sig":null,"attributes":[{"value":"/ DW_LLE_base_addressx","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601081,"byte_end":601105,"line_start":334,"line_end":334,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":6054},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601229,"byte_end":601239,"line_start":340,"line_end":340,"column_start":5,"column_end":15},"name":"StartxEndx","qualname":"::read::loclists::RawLocListEntry::StartxEndx","value":"RawLocListEntry::StartxEndx { begin, end, data }","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" DW_LLE_startx_endx\n","sig":null,"attributes":[{"value":"/ DW_LLE_startx_endx","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601202,"byte_end":601224,"line_start":339,"line_end":339,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":6058},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601468,"byte_end":601480,"line_start":349,"line_end":349,"column_start":5,"column_end":17},"name":"StartxLength","qualname":"::read::loclists::RawLocListEntry::StartxLength","value":"RawLocListEntry::StartxLength { begin, length, data }","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" DW_LLE_startx_length\n","sig":null,"attributes":[{"value":"/ DW_LLE_startx_length","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601439,"byte_end":601463,"line_start":348,"line_end":348,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":6062},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601691,"byte_end":601701,"line_start":358,"line_end":358,"column_start":5,"column_end":15},"name":"OffsetPair","qualname":"::read::loclists::RawLocListEntry::OffsetPair","value":"RawLocListEntry::OffsetPair { begin, end, data }","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" DW_LLE_offset_pair\n","sig":null,"attributes":[{"value":"/ DW_LLE_offset_pair","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601664,"byte_end":601686,"line_start":357,"line_end":357,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":6066},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601889,"byte_end":601904,"line_start":367,"line_end":367,"column_start":5,"column_end":20},"name":"DefaultLocation","qualname":"::read::loclists::RawLocListEntry::DefaultLocation","value":"RawLocListEntry::DefaultLocation { data }","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" DW_LLE_default_location\n","sig":null,"attributes":[{"value":"/ DW_LLE_default_location","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601857,"byte_end":601884,"line_start":366,"line_end":366,"column_start":5,"column_end":32}}]},{"kind":"StructVariant","id":{"krate":0,"index":6068},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601995,"byte_end":602003,"line_start":372,"line_end":372,"column_start":5,"column_end":13},"name":"StartEnd","qualname":"::read::loclists::RawLocListEntry::StartEnd","value":"RawLocListEntry::StartEnd { begin, end, data }","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" DW_LLE_start_end\n","sig":null,"attributes":[{"value":"/ DW_LLE_start_end","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":601970,"byte_end":601990,"line_start":371,"line_end":371,"column_start":5,"column_end":25}}]},{"kind":"StructVariant","id":{"krate":0,"index":6072},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":602187,"byte_end":602198,"line_start":381,"line_end":381,"column_start":5,"column_end":16},"name":"StartLength","qualname":"::read::loclists::RawLocListEntry::StartLength","value":"RawLocListEntry::StartLength { begin, length, data }","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" DW_LLE_start_length\n","sig":null,"attributes":[{"value":"/ DW_LLE_start_length","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":602159,"byte_end":602182,"line_start":380,"line_end":380,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":6044},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600666,"byte_end":600681,"line_start":319,"line_end":319,"column_start":10,"column_end":25},"name":"RawLocListEntry","qualname":"::read::loclists::RawLocListEntry","value":"pub enum RawLocListEntry<R: Reader> {\n\n    /// A location from DWARF version <= 4.\n    AddressOrOffsetPair {\n        /// Start of range. May be an address or an offset.\n        begin: u64,\n        /// End of range. May be an address or an offset.\n        end: u64,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_base_address\n    BaseAddress {\n        /// base address\n        addr: u64,\n    },\n\n    /// DW_LLE_base_addressx\n    BaseAddressx {\n        /// base address\n        addr: DebugAddrIndex<R::Offset>,\n    },\n\n    /// DW_LLE_startx_endx\n    StartxEndx {\n        /// start of range\n        begin: DebugAddrIndex<R::Offset>,\n        /// end of range\n        end: DebugAddrIndex<R::Offset>,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_startx_length\n    StartxLength {\n        /// start of range\n        begin: DebugAddrIndex<R::Offset>,\n        /// length of range\n        length: u64,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_offset_pair\n    OffsetPair {\n        /// start of range\n        begin: u64,\n        /// end of range\n        end: u64,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_default_location\n    DefaultLocation {\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_start_end\n    StartEnd {\n        /// start of range\n        begin: u64,\n        /// end of range\n        end: u64,\n        /// expression\n        data: Expression<R>,\n    },\n\n    /// DW_LLE_start_length\n    StartLength {\n        /// start of range\n        begin: u64,\n        /// length of range\n        length: u64,\n        /// expression\n        data: Expression<R>,\n    },\n}","parent":null,"children":[{"krate":0,"index":6046},{"krate":0,"index":6050},{"krate":0,"index":6052},{"krate":0,"index":6054},{"krate":0,"index":6058},{"krate":0,"index":6062},{"krate":0,"index":6066},{"krate":0,"index":6068},{"krate":0,"index":6072}],"decl_id":null,"docs":" A raw entry in .debug_loclists.\n","sig":null,"attributes":[{"value":"/ A raw entry in .debug_loclists.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":600597,"byte_end":600632,"line_start":317,"line_end":317,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":606608,"byte_end":606612,"line_start":482,"line_end":482,"column_start":12,"column_end":16},"name":"next","qualname":"<RawLocListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<RawLocListEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next location.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next location.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":606550,"byte_end":606596,"line_start":481,"line_end":481,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6082},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":607684,"byte_end":607695,"line_start":518,"line_end":518,"column_start":12,"column_end":23},"name":"LocListIter","qualname":"::read::loclists::LocListIter","value":"LocListIter {  }","parent":null,"children":[{"krate":0,"index":6084},{"krate":0,"index":6085},{"krate":0,"index":6086},{"krate":0,"index":6087}],"decl_id":null,"docs":" An iterator over a location list.","sig":null,"attributes":[{"value":"/ An iterator over a location list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":607404,"byte_end":607441,"line_start":512,"line_end":512,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":607442,"byte_end":607445,"line_start":513,"line_end":513,"column_start":1,"column_end":4}},{"value":"/ This iterator internally handles processing of base address selection entries","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":607446,"byte_end":607527,"line_start":514,"line_end":514,"column_start":1,"column_end":82}},{"value":"/ and list end entries.  Thus, it only returns location entries that are valid","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":607528,"byte_end":607608,"line_start":515,"line_end":515,"column_start":1,"column_end":81}},{"value":"/ and already adjusted for the base address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":607609,"byte_end":607655,"line_start":516,"line_end":516,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":608495,"byte_end":608499,"line_start":548,"line_end":548,"column_start":12,"column_end":16},"name":"next","qualname":"<LocListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<LocationListEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next location.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next location.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":608437,"byte_end":608483,"line_start":547,"line_end":547,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6091},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":611365,"byte_end":611382,"line_start":627,"line_end":627,"column_start":12,"column_end":29},"name":"LocationListEntry","qualname":"::read::loclists::LocationListEntry","value":"LocationListEntry { range, data }","parent":null,"children":[{"krate":0,"index":6093},{"krate":0,"index":6094}],"decl_id":null,"docs":" A location list entry from the `.debug_loc` or `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ A location list entry from the `.debug_loc` or `.debug_loclists` sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":611224,"byte_end":611302,"line_start":625,"line_end":625,"column_start":1,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":6093},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":611463,"byte_end":611468,"line_start":629,"line_end":629,"column_start":9,"column_end":14},"name":"range","qualname":"::read::loclists::LocationListEntry::range","value":"read::rnglists::Range","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" The address range that this location is valid for.\n","sig":null,"attributes":[{"value":"/ The address range that this location is valid for.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":611400,"byte_end":611454,"line_start":628,"line_end":628,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":6094},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":611545,"byte_end":611549,"line_start":632,"line_end":632,"column_start":9,"column_end":13},"name":"data","qualname":"::read::loclists::LocationListEntry::data","value":"read::op::Expression<R>","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" The data containing a single location description.\n","sig":null,"attributes":[{"value":"/ The data containing a single location description.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":611482,"byte_end":611536,"line_start":631,"line_end":631,"column_start":5,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":1332},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":642167,"byte_end":642173,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Header","qualname":"::read::lookup::LookupParser::Header","value":"type Header;","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" The type of the produced header.\n","sig":null,"attributes":[{"value":"/ The type of the produced header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":642121,"byte_end":642157,"line_start":16,"line_end":16,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1333},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":642224,"byte_end":642229,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"name":"Entry","qualname":"::read::lookup::LookupParser::Entry","value":"type Entry;","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" The type of the produced entry.\n","sig":null,"attributes":[{"value":"/ The type of the produced entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":642179,"byte_end":642214,"line_start":18,"line_end":18,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6182},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648064,"byte_end":648071,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"name":"UnitRef","qualname":"::read::op::DieReference::UnitRef","value":"DieReference::UnitRef(UnitOffset<T>)","parent":{"krate":0,"index":6180},"children":[],"decl_id":null,"docs":" A CU-relative reference.\n","sig":null,"attributes":[{"value":"/ A CU-relative reference.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648031,"byte_end":648059,"line_start":14,"line_end":14,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6185},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648130,"byte_end":648142,"line_start":17,"line_end":17,"column_start":5,"column_end":17},"name":"DebugInfoRef","qualname":"::read::op::DieReference::DebugInfoRef","value":"DieReference::DebugInfoRef(DebugInfoOffset<T>)","parent":{"krate":0,"index":6180},"children":[],"decl_id":null,"docs":" A section-relative reference.\n","sig":null,"attributes":[{"value":"/ A section-relative reference.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648092,"byte_end":648125,"line_start":16,"line_end":16,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":6180},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648001,"byte_end":648013,"line_start":13,"line_end":13,"column_start":10,"column_end":22},"name":"DieReference","qualname":"::read::op::DieReference","value":"pub enum DieReference<T = usize> {\n\n    /// A CU-relative reference.\n    UnitRef(UnitOffset<T>),\n\n    /// A section-relative reference.\n    DebugInfoRef(DebugInfoOffset<T>),\n}","parent":null,"children":[{"krate":0,"index":6182},{"krate":0,"index":6185}],"decl_id":null,"docs":" A reference to a DIE, either relative to the current CU or\n relative to the section.\n","sig":null,"attributes":[{"value":"/ A reference to a DIE, either relative to the current CU or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":647855,"byte_end":647917,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"/ relative to the section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":647918,"byte_end":647946,"line_start":11,"line_end":11,"column_start":1,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":6210},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648907,"byte_end":648912,"line_start":38,"line_end":38,"column_start":5,"column_end":10},"name":"Deref","qualname":"::read::op::Operation::Deref","value":"Operation::Deref { base_type, size, space }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Dereference the topmost value of the stack.\n","sig":null,"attributes":[{"value":"/ Dereference the topmost value of the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648855,"byte_end":648902,"line_start":37,"line_end":37,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6214},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649284,"byte_end":649288,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"Drop","qualname":"::read::op::Operation::Drop","value":"Operation::Drop","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Drop an item from the stack.\n","sig":null,"attributes":[{"value":"/ Drop an item from the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649247,"byte_end":649279,"line_start":47,"line_end":47,"column_start":5,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":6216},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649447,"byte_end":649451,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"Pick","qualname":"::read::op::Operation::Pick","value":"Operation::Pick { index }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Pick an item from the stack and push it on top of the stack.\n This operation handles `DW_OP_pick`, `DW_OP_dup`, and\n `DW_OP_over`.\n","sig":null,"attributes":[{"value":"/ Pick an item from the stack and push it on top of the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649294,"byte_end":649358,"line_start":49,"line_end":49,"column_start":5,"column_end":69}},{"value":"/ This operation handles `DW_OP_pick`, `DW_OP_dup`, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649363,"byte_end":649420,"line_start":50,"line_end":50,"column_start":5,"column_end":62}},{"value":"/ `DW_OP_over`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649425,"byte_end":649442,"line_start":51,"line_end":51,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6218},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649593,"byte_end":649597,"line_start":57,"line_end":57,"column_start":5,"column_end":9},"name":"Swap","qualname":"::read::op::Operation::Swap","value":"Operation::Swap","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Swap the top two stack items.\n","sig":null,"attributes":[{"value":"/ Swap the top two stack items.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649555,"byte_end":649588,"line_start":56,"line_end":56,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6220},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649645,"byte_end":649648,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"Rot","qualname":"::read::op::Operation::Rot","value":"Operation::Rot","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Rotate the top three stack items.\n","sig":null,"attributes":[{"value":"/ Rotate the top three stack items.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649603,"byte_end":649640,"line_start":58,"line_end":58,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6222},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649711,"byte_end":649714,"line_start":61,"line_end":61,"column_start":5,"column_end":8},"name":"Abs","qualname":"::read::op::Operation::Abs","value":"Operation::Abs","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Take the absolute value of the top of the stack.\n","sig":null,"attributes":[{"value":"/ Take the absolute value of the top of the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649654,"byte_end":649706,"line_start":60,"line_end":60,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6224},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649778,"byte_end":649781,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"And","qualname":"::read::op::Operation::And","value":"Operation::And","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Bitwise `and` of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `and` of the top two values on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649720,"byte_end":649773,"line_start":62,"line_end":62,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6226},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649835,"byte_end":649838,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"Div","qualname":"::read::op::Operation::Div","value":"Operation::Div","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Divide the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Divide the top two values on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649787,"byte_end":649830,"line_start":64,"line_end":64,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6228},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649894,"byte_end":649899,"line_start":67,"line_end":67,"column_start":5,"column_end":10},"name":"Minus","qualname":"::read::op::Operation::Minus","value":"Operation::Minus","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Subtract the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Subtract the top two values on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649844,"byte_end":649889,"line_start":66,"line_end":66,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6230},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649957,"byte_end":649960,"line_start":69,"line_end":69,"column_start":5,"column_end":8},"name":"Mod","qualname":"::read::op::Operation::Mod","value":"Operation::Mod","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Modulus of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Modulus of the top two values on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649905,"byte_end":649952,"line_start":68,"line_end":68,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6232},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650016,"byte_end":650019,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"Mul","qualname":"::read::op::Operation::Mul","value":"Operation::Mul","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Multiply the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Multiply the top two values on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":649966,"byte_end":650011,"line_start":70,"line_end":70,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6234},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650062,"byte_end":650065,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"Neg","qualname":"::read::op::Operation::Neg","value":"Operation::Neg","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Negate the top of the stack.\n","sig":null,"attributes":[{"value":"/ Negate the top of the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650025,"byte_end":650057,"line_start":72,"line_end":72,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6236},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650118,"byte_end":650121,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"Not","qualname":"::read::op::Operation::Not","value":"Operation::Not","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Bitwise `not` of the top of the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `not` of the top of the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650071,"byte_end":650113,"line_start":74,"line_end":74,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6238},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650184,"byte_end":650186,"line_start":77,"line_end":77,"column_start":5,"column_end":7},"name":"Or","qualname":"::read::op::Operation::Or","value":"Operation::Or","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Bitwise `or` of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `or` of the top two values on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650127,"byte_end":650179,"line_start":76,"line_end":76,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6240},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650237,"byte_end":650241,"line_start":79,"line_end":79,"column_start":5,"column_end":9},"name":"Plus","qualname":"::read::op::Operation::Plus","value":"Operation::Plus","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Add the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Add the top two values on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650192,"byte_end":650232,"line_start":78,"line_end":78,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":6242},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650305,"byte_end":650317,"line_start":81,"line_end":81,"column_start":5,"column_end":17},"name":"PlusConstant","qualname":"::read::op::Operation::PlusConstant","value":"Operation::PlusConstant { value }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Add a constant to the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Add a constant to the topmost value on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650247,"byte_end":650300,"line_start":80,"line_end":80,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6244},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650509,"byte_end":650512,"line_start":87,"line_end":87,"column_start":5,"column_end":8},"name":"Shl","qualname":"::read::op::Operation::Shl","value":"Operation::Shl","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Logical left shift of the 2nd value on the stack by the number\n of bits given by the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Logical left shift of the 2nd value on the stack by the number","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650381,"byte_end":650447,"line_start":85,"line_end":85,"column_start":5,"column_end":71}},{"value":"/ of bits given by the topmost value on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650452,"byte_end":650504,"line_start":86,"line_end":86,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6246},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650639,"byte_end":650642,"line_start":90,"line_end":90,"column_start":5,"column_end":8},"name":"Shr","qualname":"::read::op::Operation::Shr","value":"Operation::Shr","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Right shift of the 2nd value on the stack by the number of\n bits given by the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Right shift of the 2nd value on the stack by the number of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650518,"byte_end":650580,"line_start":88,"line_end":88,"column_start":5,"column_end":67}},{"value":"/ bits given by the topmost value on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650585,"byte_end":650634,"line_start":89,"line_end":89,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6248},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650779,"byte_end":650783,"line_start":93,"line_end":93,"column_start":5,"column_end":9},"name":"Shra","qualname":"::read::op::Operation::Shra","value":"Operation::Shra","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Arithmetic left shift of the 2nd value on the stack by the\n number of bits given by the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Arithmetic left shift of the 2nd value on the stack by the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650648,"byte_end":650710,"line_start":91,"line_end":91,"column_start":5,"column_end":67}},{"value":"/ number of bits given by the topmost value on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650715,"byte_end":650774,"line_start":92,"line_end":92,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6250},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650847,"byte_end":650850,"line_start":95,"line_end":95,"column_start":5,"column_end":8},"name":"Xor","qualname":"::read::op::Operation::Xor","value":"Operation::Xor","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Bitwise `xor` of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `xor` of the top two values on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650789,"byte_end":650842,"line_start":94,"line_end":94,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":6252},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650926,"byte_end":650929,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"Bra","qualname":"::read::op::Operation::Bra","value":"Operation::Bra { target }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Branch to the target location if the top of stack is nonzero.\n","sig":null,"attributes":[{"value":"/ Branch to the target location if the top of stack is nonzero.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":650856,"byte_end":650921,"line_start":96,"line_end":96,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6254},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651075,"byte_end":651077,"line_start":102,"line_end":102,"column_start":5,"column_end":7},"name":"Eq","qualname":"::read::op::Operation::Eq","value":"Operation::Eq","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Compare the top two stack values for equality.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values for equality.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651020,"byte_end":651070,"line_start":101,"line_end":101,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6256},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651136,"byte_end":651138,"line_start":104,"line_end":104,"column_start":5,"column_end":7},"name":"Ge","qualname":"::read::op::Operation::Ge","value":"Operation::Ge","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `>=`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `>=`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651083,"byte_end":651131,"line_start":103,"line_end":103,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6258},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651196,"byte_end":651198,"line_start":106,"line_end":106,"column_start":5,"column_end":7},"name":"Gt","qualname":"::read::op::Operation::Gt","value":"Operation::Gt","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `>`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `>`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651144,"byte_end":651191,"line_start":105,"line_end":105,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6260},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651257,"byte_end":651259,"line_start":108,"line_end":108,"column_start":5,"column_end":7},"name":"Le","qualname":"::read::op::Operation::Le","value":"Operation::Le","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `<=`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `<=`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651204,"byte_end":651252,"line_start":107,"line_end":107,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6262},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651317,"byte_end":651319,"line_start":110,"line_end":110,"column_start":5,"column_end":7},"name":"Lt","qualname":"::read::op::Operation::Lt","value":"Operation::Lt","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `<`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `<`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651265,"byte_end":651312,"line_start":109,"line_end":109,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6264},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651378,"byte_end":651380,"line_start":112,"line_end":112,"column_start":5,"column_end":7},"name":"Ne","qualname":"::read::op::Operation::Ne","value":"Operation::Ne","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `!=`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `!=`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651325,"byte_end":651373,"line_start":111,"line_end":111,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":6266},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651439,"byte_end":651443,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Skip","qualname":"::read::op::Operation::Skip","value":"Operation::Skip { target }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Unconditional branch to the target location.\n","sig":null,"attributes":[{"value":"/ Unconditional branch to the target location.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651386,"byte_end":651434,"line_start":113,"line_end":113,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":6268},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651634,"byte_end":651650,"line_start":120,"line_end":120,"column_start":5,"column_end":21},"name":"UnsignedConstant","qualname":"::read::op::Operation::UnsignedConstant","value":"Operation::UnsignedConstant { value }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Push an unsigned constant value on the stack.  This handles multiple\n DWARF opcodes.\n","sig":null,"attributes":[{"value":"/ Push an unsigned constant value on the stack.  This handles multiple","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651534,"byte_end":651606,"line_start":118,"line_end":118,"column_start":5,"column_end":77}},{"value":"/ DWARF opcodes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651611,"byte_end":651629,"line_start":119,"line_end":119,"column_start":5,"column_end":23}}]},{"kind":"StructVariant","id":{"krate":0,"index":6270},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651812,"byte_end":651826,"line_start":126,"line_end":126,"column_start":5,"column_end":19},"name":"SignedConstant","qualname":"::read::op::Operation::SignedConstant","value":"Operation::SignedConstant { value }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Push a signed constant value on the stack.  This handles multiple\n DWARF opcodes.\n","sig":null,"attributes":[{"value":"/ Push a signed constant value on the stack.  This handles multiple","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651715,"byte_end":651784,"line_start":124,"line_end":124,"column_start":5,"column_end":74}},{"value":"/ DWARF opcodes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651789,"byte_end":651807,"line_start":125,"line_end":125,"column_start":5,"column_end":23}}]},{"kind":"StructVariant","id":{"krate":0,"index":6272},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652012,"byte_end":652020,"line_start":133,"line_end":133,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::op::Operation::Register","value":"Operation::Register { register }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Indicate that this piece's location is in the given register.","sig":null,"attributes":[{"value":"/ Indicate that this piece's location is in the given register.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651891,"byte_end":651956,"line_start":130,"line_end":130,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651961,"byte_end":651964,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":651969,"byte_end":652007,"line_start":132,"line_end":132,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":6274},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652211,"byte_end":652225,"line_start":139,"line_end":139,"column_start":5,"column_end":19},"name":"RegisterOffset","qualname":"::read::op::Operation::RegisterOffset","value":"Operation::RegisterOffset { register, offset, base_type }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Find the value of the given register, add the offset, and then\n push the resulting sum on the stack.\n","sig":null,"attributes":[{"value":"/ Find the value of the given register, add the offset, and then","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652095,"byte_end":652161,"line_start":137,"line_end":137,"column_start":5,"column_end":71}},{"value":"/ push the resulting sum on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652166,"byte_end":652206,"line_start":138,"line_end":138,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":6278},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652597,"byte_end":652608,"line_start":149,"line_end":149,"column_start":5,"column_end":16},"name":"FrameOffset","qualname":"::read::op::Operation::FrameOffset","value":"Operation::FrameOffset { offset }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Compute the frame base (using `DW_AT_frame_base`), add the\n given offset, and then push the resulting sum on the stack.\n","sig":null,"attributes":[{"value":"/ Compute the frame base (using `DW_AT_frame_base`), add the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652462,"byte_end":652524,"line_start":147,"line_end":147,"column_start":5,"column_end":67}},{"value":"/ given offset, and then push the resulting sum on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652529,"byte_end":652592,"line_start":148,"line_end":148,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6280},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652696,"byte_end":652699,"line_start":154,"line_end":154,"column_start":5,"column_end":8},"name":"Nop","qualname":"::read::op::Operation::Nop","value":"Operation::Nop","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" No operation.\n","sig":null,"attributes":[{"value":"/ No operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652674,"byte_end":652691,"line_start":153,"line_end":153,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6282},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652751,"byte_end":652768,"line_start":156,"line_end":156,"column_start":5,"column_end":22},"name":"PushObjectAddress","qualname":"::read::op::Operation::PushObjectAddress","value":"Operation::PushObjectAddress","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Push the object address on the stack.\n","sig":null,"attributes":[{"value":"/ Push the object address on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652705,"byte_end":652746,"line_start":155,"line_end":155,"column_start":5,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":6284},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652923,"byte_end":652927,"line_start":160,"line_end":160,"column_start":5,"column_end":9},"name":"Call","qualname":"::read::op::Operation::Call","value":"Operation::Call { offset }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Evaluate a DWARF expression as a subroutine.  The expression\n comes from the `DW_AT_location` attribute of the indicated\n DIE.\n","sig":null,"attributes":[{"value":"/ Evaluate a DWARF expression as a subroutine.  The expression","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652774,"byte_end":652838,"line_start":157,"line_end":157,"column_start":5,"column_end":69}},{"value":"/ comes from the `DW_AT_location` attribute of the indicated","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652843,"byte_end":652905,"line_start":158,"line_end":158,"column_start":5,"column_end":67}},{"value":"/ DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":652910,"byte_end":652918,"line_start":159,"line_end":159,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6286},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653096,"byte_end":653099,"line_start":166,"line_end":166,"column_start":5,"column_end":8},"name":"TLS","qualname":"::read::op::Operation::TLS","value":"Operation::TLS","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Compute the address of a thread-local variable and push it on\n the stack.\n","sig":null,"attributes":[{"value":"/ Compute the address of a thread-local variable and push it on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653007,"byte_end":653072,"line_start":164,"line_end":164,"column_start":5,"column_end":70}},{"value":"/ the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653077,"byte_end":653091,"line_start":165,"line_end":165,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6288},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653166,"byte_end":653178,"line_start":168,"line_end":168,"column_start":5,"column_end":17},"name":"CallFrameCFA","qualname":"::read::op::Operation::CallFrameCFA","value":"Operation::CallFrameCFA","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Compute the call frame CFA and push it on the stack.\n","sig":null,"attributes":[{"value":"/ Compute the call frame CFA and push it on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653105,"byte_end":653161,"line_start":167,"line_end":167,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":6290},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653211,"byte_end":653216,"line_start":170,"line_end":170,"column_start":5,"column_end":10},"name":"Piece","qualname":"::read::op::Operation::Piece","value":"Operation::Piece { size_in_bits, bit_offset }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Terminate a piece.\n","sig":null,"attributes":[{"value":"/ Terminate a piece.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653184,"byte_end":653206,"line_start":169,"line_end":169,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":6293},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653668,"byte_end":653681,"line_start":182,"line_end":182,"column_start":5,"column_end":18},"name":"ImplicitValue","qualname":"::read::op::Operation::ImplicitValue","value":"Operation::ImplicitValue { data }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" The object has no location, but has a known constant value.","sig":null,"attributes":[{"value":"/ The object has no location, but has a known constant value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653506,"byte_end":653569,"line_start":178,"line_end":178,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653574,"byte_end":653577,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_implicit_value`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653582,"byte_end":653620,"line_start":180,"line_end":180,"column_start":5,"column_end":43}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653625,"byte_end":653663,"line_start":181,"line_end":181,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6295},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653920,"byte_end":653930,"line_start":190,"line_end":190,"column_start":5,"column_end":15},"name":"StackValue","qualname":"::read::op::Operation::StackValue","value":"Operation::StackValue","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" The object has no location, but its value is at the top of the stack.","sig":null,"attributes":[{"value":"/ The object has no location, but its value is at the top of the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653751,"byte_end":653824,"line_start":186,"line_end":186,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653829,"byte_end":653832,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_stack_value`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653837,"byte_end":653872,"line_start":188,"line_end":188,"column_start":5,"column_end":40}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653877,"byte_end":653915,"line_start":189,"line_end":189,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":6297},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654157,"byte_end":654172,"line_start":196,"line_end":196,"column_start":5,"column_end":20},"name":"ImplicitPointer","qualname":"::read::op::Operation::ImplicitPointer","value":"Operation::ImplicitPointer { value, byte_offset }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" The object is a pointer to a value which has no actual location,\n such as an implicit value or a stack value.","sig":null,"attributes":[{"value":"/ The object is a pointer to a value which has no actual location,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":653936,"byte_end":654004,"line_start":191,"line_end":191,"column_start":5,"column_end":73}},{"value":"/ such as an implicit value or a stack value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654009,"byte_end":654056,"line_start":192,"line_end":192,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654061,"byte_end":654064,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_implicit_pointer`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654069,"byte_end":654109,"line_start":194,"line_end":194,"column_start":5,"column_end":45}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654114,"byte_end":654152,"line_start":195,"line_end":195,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":6300},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654566,"byte_end":654576,"line_start":205,"line_end":205,"column_start":5,"column_end":15},"name":"EntryValue","qualname":"::read::op::Operation::EntryValue","value":"Operation::EntryValue { expression }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Evaluate an expression at the entry to the current subprogram, and push it on the stack.","sig":null,"attributes":[{"value":"/ Evaluate an expression at the entry to the current subprogram, and push it on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654421,"byte_end":654513,"line_start":202,"line_end":202,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654518,"byte_end":654521,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_entry_value`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654526,"byte_end":654561,"line_start":204,"line_end":204,"column_start":5,"column_end":40}}]},{"kind":"StructVariant","id":{"krate":0,"index":6302},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654984,"byte_end":654996,"line_start":216,"line_end":216,"column_start":5,"column_end":17},"name":"ParameterRef","qualname":"::read::op::Operation::ParameterRef","value":"Operation::ParameterRef { offset }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" This represents a parameter that was optimized out.","sig":null,"attributes":[{"value":"/ This represents a parameter that was optimized out.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654657,"byte_end":654712,"line_start":209,"line_end":209,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654717,"byte_end":654720,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ The offset points to the definition of the parameter, and is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654725,"byte_end":654789,"line_start":211,"line_end":211,"column_start":5,"column_end":69}},{"value":"/ matched to the `DW_TAG_GNU_call_site_parameter` in the caller that also","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654794,"byte_end":654869,"line_start":212,"line_end":212,"column_start":5,"column_end":80}},{"value":"/ points to the same definition of the parameter.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654874,"byte_end":654925,"line_start":213,"line_end":213,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654930,"byte_end":654933,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_GNU_parameter_ref`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":654938,"byte_end":654979,"line_start":215,"line_end":215,"column_start":5,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":6304},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655181,"byte_end":655188,"line_start":223,"line_end":223,"column_start":5,"column_end":12},"name":"Address","qualname":"::read::op::Operation::Address","value":"Operation::Address { address }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Relocate the address if needed, and push it on the stack.","sig":null,"attributes":[{"value":"/ Relocate the address if needed, and push it on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655074,"byte_end":655135,"line_start":220,"line_end":220,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655140,"byte_end":655143,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_addr`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655148,"byte_end":655176,"line_start":222,"line_end":222,"column_start":5,"column_end":33}}]},{"kind":"StructVariant","id":{"krate":0,"index":6306},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655424,"byte_end":655436,"line_start":231,"line_end":231,"column_start":5,"column_end":17},"name":"AddressIndex","qualname":"::read::op::Operation::AddressIndex","value":"Operation::AddressIndex { index }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Read the address at the given index in `.debug_addr, relocate the address if needed,\n and push it on the stack.","sig":null,"attributes":[{"value":"/ Read the address at the given index in `.debug_addr, relocate the address if needed,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655255,"byte_end":655343,"line_start":227,"line_end":227,"column_start":5,"column_end":93}},{"value":"/ and push it on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655348,"byte_end":655377,"line_start":228,"line_end":228,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655382,"byte_end":655385,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_addrx`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655390,"byte_end":655419,"line_start":230,"line_end":230,"column_start":5,"column_end":34}}]},{"kind":"StructVariant","id":{"krate":0,"index":6308},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655711,"byte_end":655724,"line_start":239,"line_end":239,"column_start":5,"column_end":18},"name":"ConstantIndex","qualname":"::read::op::Operation::ConstantIndex","value":"Operation::ConstantIndex { index }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Read the address at the given index in `.debug_addr, and push it on the stack.\n Do not relocate the address.","sig":null,"attributes":[{"value":"/ Read the address at the given index in `.debug_addr, and push it on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655544,"byte_end":655626,"line_start":235,"line_end":235,"column_start":5,"column_end":87}},{"value":"/ Do not relocate the address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655631,"byte_end":655663,"line_start":236,"line_end":236,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655668,"byte_end":655671,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_constx`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655676,"byte_end":655706,"line_start":238,"line_end":238,"column_start":5,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":6310},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655970,"byte_end":655982,"line_start":246,"line_end":246,"column_start":5,"column_end":17},"name":"TypedLiteral","qualname":"::read::op::Operation::TypedLiteral","value":"Operation::TypedLiteral { base_type, value }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Interpret the value bytes as a constant of a given type, and push it on the stack.","sig":null,"attributes":[{"value":"/ Interpret the value bytes as a constant of a given type, and push it on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655832,"byte_end":655918,"line_start":243,"line_end":243,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655923,"byte_end":655926,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_const_type`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":655931,"byte_end":655965,"line_start":245,"line_end":245,"column_start":5,"column_end":39}}]},{"kind":"StructVariant","id":{"krate":0,"index":6313},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656255,"byte_end":656262,"line_start":255,"line_end":255,"column_start":5,"column_end":12},"name":"Convert","qualname":"::read::op::Operation::Convert","value":"Operation::Convert { base_type }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Pop the top stack entry, convert it to a different type, and push it on the stack.","sig":null,"attributes":[{"value":"/ Pop the top stack entry, convert it to a different type, and push it on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656120,"byte_end":656206,"line_start":252,"line_end":252,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656211,"byte_end":656214,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_convert`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656219,"byte_end":656250,"line_start":254,"line_end":254,"column_start":5,"column_end":36}}]},{"kind":"StructVariant","id":{"krate":0,"index":6315},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656523,"byte_end":656534,"line_start":263,"line_end":263,"column_start":5,"column_end":16},"name":"Reinterpret","qualname":"::read::op::Operation::Reinterpret","value":"Operation::Reinterpret { base_type }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" Pop the top stack entry, reinterpret the bits in its value as a different type,\n and push it on the stack.","sig":null,"attributes":[{"value":"/ Pop the top stack entry, reinterpret the bits in its value as a different type,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656353,"byte_end":656436,"line_start":259,"line_end":259,"column_start":5,"column_end":88}},{"value":"/ and push it on the stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656441,"byte_end":656470,"line_start":260,"line_end":260,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656475,"byte_end":656478,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_reinterpret`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656483,"byte_end":656518,"line_start":262,"line_end":262,"column_start":5,"column_end":40}}]},{"kind":"StructVariant","id":{"krate":0,"index":6317},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656789,"byte_end":656798,"line_start":271,"line_end":271,"column_start":5,"column_end":14},"name":"WasmLocal","qualname":"::read::op::Operation::WasmLocal","value":"Operation::WasmLocal { index }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" The index of a local in the currently executing function.","sig":null,"attributes":[{"value":"/ The index of a local in the currently executing function.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656625,"byte_end":656686,"line_start":267,"line_end":267,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656691,"byte_end":656694,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_WASM_location 0x00`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656699,"byte_end":656741,"line_start":269,"line_end":269,"column_start":5,"column_end":47}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656746,"byte_end":656784,"line_start":270,"line_end":270,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":6319},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657027,"byte_end":657037,"line_start":279,"line_end":279,"column_start":5,"column_end":15},"name":"WasmGlobal","qualname":"::read::op::Operation::WasmGlobal","value":"Operation::WasmGlobal { index }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" The index of a global.","sig":null,"attributes":[{"value":"/ The index of a global.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656868,"byte_end":656894,"line_start":275,"line_end":275,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656899,"byte_end":656902,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_WASM_location 0x01` or `DW_OP_WASM_location 0x03`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656907,"byte_end":656979,"line_start":277,"line_end":277,"column_start":5,"column_end":77}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":656984,"byte_end":657022,"line_start":278,"line_end":278,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":6321},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657257,"byte_end":657266,"line_start":287,"line_end":287,"column_start":5,"column_end":14},"name":"WasmStack","qualname":"::read::op::Operation::WasmStack","value":"Operation::WasmStack { index }","parent":{"krate":0,"index":6207},"children":[],"decl_id":null,"docs":" The index of an item on the operand stack.","sig":null,"attributes":[{"value":"/ The index of an item on the operand stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657108,"byte_end":657154,"line_start":283,"line_end":283,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657159,"byte_end":657162,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_WASM_location 0x02`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657167,"byte_end":657209,"line_start":285,"line_end":285,"column_start":5,"column_end":47}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657214,"byte_end":657252,"line_start":286,"line_end":286,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":6207},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648740,"byte_end":648749,"line_start":32,"line_end":32,"column_start":10,"column_end":19},"name":"Operation","qualname":"::read::op::Operation","value":"pub enum Operation<R, Offset = <R as Reader>::Offset> where R: Reader<Offset =\n         Offset>, Offset: ReaderOffset {\n\n    /// Dereference the topmost value of the stack.\n    Deref {\n        /// The DIE of the base type or 0 to indicate the generic type\n        base_type: UnitOffset<Offset>,\n        /// The size of the data to dereference.\n        size: u8,\n        /// True if the dereference operation takes an address space\n        /// argument from the stack; false otherwise.\n        space: bool,\n    },\n\n    /// Drop an item from the stack.\n    Drop,\n\n    /// Pick an item from the stack and push it on top of the stack.\n    /// This operation handles `DW_OP_pick`, `DW_OP_dup`, and\n    /// `DW_OP_over`.\n    Pick {\n        /// The index, from the top of the stack, of the item to copy.\n        index: u8,\n    },\n\n    /// Swap the top two stack items.\n    Swap,\n\n    /// Rotate the top three stack items.\n    Rot,\n\n    /// Take the absolute value of the top of the stack.\n    Abs,\n\n    /// Bitwise `and` of the top two values on the stack.\n    And,\n\n    /// Divide the top two values on the stack.\n    Div,\n\n    /// Subtract the top two values on the stack.\n    Minus,\n\n    /// Modulus of the top two values on the stack.\n    Mod,\n\n    /// Multiply the top two values on the stack.\n    Mul,\n\n    /// Negate the top of the stack.\n    Neg,\n\n    /// Bitwise `not` of the top of the stack.\n    Not,\n\n    /// Bitwise `or` of the top two values on the stack.\n    Or,\n\n    /// Add the top two values on the stack.\n    Plus,\n\n    /// Add a constant to the topmost value on the stack.\n    PlusConstant {\n        /// The value to add.\n        value: u64,\n    },\n\n    /// Logical left shift of the 2nd value on the stack by the number\n    /// of bits given by the topmost value on the stack.\n    Shl,\n\n    /// Right shift of the 2nd value on the stack by the number of\n    /// bits given by the topmost value on the stack.\n    Shr,\n\n    /// Arithmetic left shift of the 2nd value on the stack by the\n    /// number of bits given by the topmost value on the stack.\n    Shra,\n\n    /// Bitwise `xor` of the top two values on the stack.\n    Xor,\n\n    /// Branch to the target location if the top of stack is nonzero.\n    Bra {\n        /// The relative offset to the target bytecode.\n        target: i16,\n    },\n\n    /// Compare the top two stack values for equality.\n    Eq,\n\n    /// Compare the top two stack values using `>=`.\n    Ge,\n\n    /// Compare the top two stack values using `>`.\n    Gt,\n\n    /// Compare the top two stack values using `<=`.\n    Le,\n\n    /// Compare the top two stack values using `<`.\n    Lt,\n\n    /// Compare the top two stack values using `!=`.\n    Ne,\n\n    /// Unconditional branch to the target location.\n    Skip {\n        /// The relative offset to the target bytecode.\n        target: i16,\n    },\n\n    /// Push an unsigned constant value on the stack.  This handles multiple\n    /// DWARF opcodes.\n    UnsignedConstant {\n        /// The value to push.\n        value: u64,\n    },\n\n    /// Push a signed constant value on the stack.  This handles multiple\n    /// DWARF opcodes.\n    SignedConstant {\n        /// The value to push.\n        value: i64,\n    },\n\n    /// Indicate that this piece's location is in the given register.\n    ///\n    /// Completes the piece or expression.\n    Register {\n        /// The register number.\n        register: Register,\n    },\n\n    /// Find the value of the given register, add the offset, and then\n    /// push the resulting sum on the stack.\n    RegisterOffset {\n        /// The register number.\n        register: Register,\n        /// The offset to add.\n        offset: i64,\n        /// The DIE of the base type or 0 to indicate the generic type\n        base_type: UnitOffset<Offset>,\n    },\n\n    /// Compute the frame base (using `DW_AT_frame_base`), add the\n    /// given offset, and then push the resulting sum on the stack.\n    FrameOffset {\n        /// The offset to add.\n        offset: i64,\n    },\n\n    /// No operation.\n    Nop,\n\n    /// Push the object address on the stack.\n    PushObjectAddress,\n\n    /// Evaluate a DWARF expression as a subroutine.  The expression\n    /// comes from the `DW_AT_location` attribute of the indicated\n    /// DIE.\n    Call {\n        /// The DIE to use.\n        offset: DieReference<Offset>,\n    },\n\n    /// Compute the address of a thread-local variable and push it on\n    /// the stack.\n    TLS,\n\n    /// Compute the call frame CFA and push it on the stack.\n    CallFrameCFA,\n\n    /// Terminate a piece.\n    Piece {\n        /// The size of this piece in bits.\n        size_in_bits: u64,\n        /// The bit offset of this piece.  If `None`, then this piece\n        /// was specified using `DW_OP_piece` and should start at the\n        /// next byte boundary.\n        bit_offset: Option<u64>,\n    },\n\n    /// The object has no location, but has a known constant value.\n    ///\n    /// Represents `DW_OP_implicit_value`.\n    /// Completes the piece or expression.\n    ImplicitValue {\n        /// The implicit value to use.\n        data: R,\n    },\n\n    /// The object has no location, but its value is at the top of the stack.\n    ///\n    /// Represents `DW_OP_stack_value`.\n    /// Completes the piece or expression.\n    StackValue,\n\n    /// The object is a pointer to a value which has no actual location,\n    /// such as an implicit value or a stack value.\n    ///\n    /// Represents `DW_OP_implicit_pointer`.\n    /// Completes the piece or expression.\n    ImplicitPointer {\n        /// The `.debug_info` offset of the value that this is an implicit pointer into.\n        value: DebugInfoOffset<Offset>,\n        /// The byte offset into the value that the implicit pointer points to.\n        byte_offset: i64,\n    },\n\n    /// Evaluate an expression at the entry to the current subprogram, and push it on the stack.\n    ///\n    /// Represents `DW_OP_entry_value`.\n    EntryValue {\n        /// The expression to be evaluated.\n        expression: R,\n    },\n\n    /// This represents a parameter that was optimized out.\n    ///\n    /// The offset points to the definition of the parameter, and is\n    /// matched to the `DW_TAG_GNU_call_site_parameter` in the caller that also\n    /// points to the same definition of the parameter.\n    ///\n    /// Represents `DW_OP_GNU_parameter_ref`.\n    ParameterRef {\n        /// The DIE to use.\n        offset: UnitOffset<Offset>,\n    },\n\n    /// Relocate the address if needed, and push it on the stack.\n    ///\n    /// Represents `DW_OP_addr`.\n    Address {\n        /// The offset to add.\n        address: u64,\n    },\n\n    /// Read the address at the given index in `.debug_addr, relocate the address if needed,\n    /// and push it on the stack.\n    ///\n    /// Represents `DW_OP_addrx`.\n    AddressIndex {\n        /// The index of the address in `.debug_addr`.\n        index: DebugAddrIndex<Offset>,\n    },\n\n    /// Read the address at the given index in `.debug_addr, and push it on the stack.\n    /// Do not relocate the address.\n    ///\n    /// Represents `DW_OP_constx`.\n    ConstantIndex {\n        /// The index of the address in `.debug_addr`.\n        index: DebugAddrIndex<Offset>,\n    },\n\n    /// Interpret the value bytes as a constant of a given type, and push it on the stack.\n    ///\n    /// Represents `DW_OP_const_type`.\n    TypedLiteral {\n        /// The DIE of the base type.\n        base_type: UnitOffset<Offset>,\n        /// The value bytes.\n        value: R,\n    },\n\n    /// Pop the top stack entry, convert it to a different type, and push it on the stack.\n    ///\n    /// Represents `DW_OP_convert`.\n    Convert {\n        /// The DIE of the base type.\n        base_type: UnitOffset<Offset>,\n    },\n\n    /// Pop the top stack entry, reinterpret the bits in its value as a different type,\n    /// and push it on the stack.\n    ///\n    /// Represents `DW_OP_reinterpret`.\n    Reinterpret {\n        /// The DIE of the base type.\n        base_type: UnitOffset<Offset>,\n    },\n\n    /// The index of a local in the currently executing function.\n    ///\n    /// Represents `DW_OP_WASM_location 0x00`.\n    /// Completes the piece or expression.\n    WasmLocal {\n        /// The index of the local.\n        index: u32,\n    },\n\n    /// The index of a global.\n    ///\n    /// Represents `DW_OP_WASM_location 0x01` or `DW_OP_WASM_location 0x03`.\n    /// Completes the piece or expression.\n    WasmGlobal {\n        /// The index of the global.\n        index: u32,\n    },\n\n    /// The index of an item on the operand stack.\n    ///\n    /// Represents `DW_OP_WASM_location 0x02`.\n    /// Completes the piece or expression.\n    WasmStack {\n        /// The index of the stack item. 0 is the bottom of the operand stack.\n        index: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":6210},{"krate":0,"index":6214},{"krate":0,"index":6216},{"krate":0,"index":6218},{"krate":0,"index":6220},{"krate":0,"index":6222},{"krate":0,"index":6224},{"krate":0,"index":6226},{"krate":0,"index":6228},{"krate":0,"index":6230},{"krate":0,"index":6232},{"krate":0,"index":6234},{"krate":0,"index":6236},{"krate":0,"index":6238},{"krate":0,"index":6240},{"krate":0,"index":6242},{"krate":0,"index":6244},{"krate":0,"index":6246},{"krate":0,"index":6248},{"krate":0,"index":6250},{"krate":0,"index":6252},{"krate":0,"index":6254},{"krate":0,"index":6256},{"krate":0,"index":6258},{"krate":0,"index":6260},{"krate":0,"index":6262},{"krate":0,"index":6264},{"krate":0,"index":6266},{"krate":0,"index":6268},{"krate":0,"index":6270},{"krate":0,"index":6272},{"krate":0,"index":6274},{"krate":0,"index":6278},{"krate":0,"index":6280},{"krate":0,"index":6282},{"krate":0,"index":6284},{"krate":0,"index":6286},{"krate":0,"index":6288},{"krate":0,"index":6290},{"krate":0,"index":6293},{"krate":0,"index":6295},{"krate":0,"index":6297},{"krate":0,"index":6300},{"krate":0,"index":6302},{"krate":0,"index":6304},{"krate":0,"index":6306},{"krate":0,"index":6308},{"krate":0,"index":6310},{"krate":0,"index":6313},{"krate":0,"index":6315},{"krate":0,"index":6317},{"krate":0,"index":6319},{"krate":0,"index":6321}],"decl_id":null,"docs":" A single decoded DWARF expression operation.","sig":null,"attributes":[{"value":"/ A single decoded DWARF expression operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648167,"byte_end":648215,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648216,"byte_end":648219,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ DWARF expression evaluation is done in two parts: first the raw","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648220,"byte_end":648287,"line_start":22,"line_end":22,"column_start":1,"column_end":68}},{"value":"/ bytes of the next part of the expression are decoded; and then the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648288,"byte_end":648358,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/ decoded operation is evaluated.  This approach lets other","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648359,"byte_end":648420,"line_start":24,"line_end":24,"column_start":1,"column_end":62}},{"value":"/ consumers inspect the DWARF expression without reimplementing the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648421,"byte_end":648490,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ decoding operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648491,"byte_end":648514,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648515,"byte_end":648518,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Multiple DWARF opcodes may decode into a single `Operation`.  For","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648519,"byte_end":648588,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ example, both `DW_OP_deref` and `DW_OP_xderef` are represented","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648589,"byte_end":648655,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"/ using `Operation::Deref`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":648656,"byte_end":648685,"line_start":30,"line_end":30,"column_start":1,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6367},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657893,"byte_end":657898,"line_start":310,"line_end":310,"column_start":5,"column_end":10},"name":"Empty","qualname":"::read::op::Location::Empty","value":"Location::Empty","parent":{"krate":0,"index":6364},"children":[],"decl_id":null,"docs":" The piece is empty.  Ordinarily this means the piece has been\n optimized away.\n","sig":null,"attributes":[{"value":"/ The piece is empty.  Ordinarily this means the piece has been","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657799,"byte_end":657864,"line_start":308,"line_end":308,"column_start":5,"column_end":70}},{"value":"/ optimized away.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657869,"byte_end":657888,"line_start":309,"line_end":309,"column_start":5,"column_end":24}}]},{"kind":"StructVariant","id":{"krate":0,"index":6369},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657946,"byte_end":657954,"line_start":312,"line_end":312,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::op::Location::Register","value":"Location::Register { register }","parent":{"krate":0,"index":6364},"children":[],"decl_id":null,"docs":" The piece is found in a register.\n","sig":null,"attributes":[{"value":"/ The piece is found in a register.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657904,"byte_end":657941,"line_start":311,"line_end":311,"column_start":5,"column_end":42}}]},{"kind":"StructVariant","id":{"krate":0,"index":6371},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658067,"byte_end":658074,"line_start":317,"line_end":317,"column_start":5,"column_end":12},"name":"Address","qualname":"::read::op::Location::Address","value":"Location::Address { address }","parent":{"krate":0,"index":6364},"children":[],"decl_id":null,"docs":" The piece is found in memory.\n","sig":null,"attributes":[{"value":"/ The piece is found in memory.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658029,"byte_end":658062,"line_start":316,"line_end":316,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":6373},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658193,"byte_end":658198,"line_start":322,"line_end":322,"column_start":5,"column_end":10},"name":"Value","qualname":"::read::op::Location::Value","value":"Location::Value { value }","parent":{"krate":0,"index":6364},"children":[],"decl_id":null,"docs":" The piece has no location but its value is known.\n","sig":null,"attributes":[{"value":"/ The piece has no location but its value is known.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658135,"byte_end":658188,"line_start":321,"line_end":321,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":6375},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658314,"byte_end":658319,"line_start":327,"line_end":327,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::read::op::Location::Bytes","value":"Location::Bytes { value }","parent":{"krate":0,"index":6364},"children":[],"decl_id":null,"docs":" The piece is represented by some constant bytes.\n","sig":null,"attributes":[{"value":"/ The piece is represented by some constant bytes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658257,"byte_end":658309,"line_start":326,"line_end":326,"column_start":5,"column_end":57}}]},{"kind":"StructVariant","id":{"krate":0,"index":6377},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658446,"byte_end":658461,"line_start":332,"line_end":332,"column_start":5,"column_end":20},"name":"ImplicitPointer","qualname":"::read::op::Location::ImplicitPointer","value":"Location::ImplicitPointer { value, byte_offset }","parent":{"krate":0,"index":6364},"children":[],"decl_id":null,"docs":" The piece is a pointer to a value which has no actual location.\n","sig":null,"attributes":[{"value":"/ The piece is a pointer to a value which has no actual location.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658374,"byte_end":658441,"line_start":331,"line_end":331,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":6364},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657685,"byte_end":657693,"line_start":303,"line_end":303,"column_start":10,"column_end":18},"name":"Location","qualname":"::read::op::Location","value":"pub enum Location<R, Offset = <R as Reader>::Offset> where R: Reader<Offset =\n         Offset>, Offset: ReaderOffset {\n\n    /// The piece is empty.  Ordinarily this means the piece has been\n    /// optimized away.\n    Empty,\n\n    /// The piece is found in a register.\n    Register {\n        /// The register number.\n        register: Register,\n    },\n\n    /// The piece is found in memory.\n    Address {\n        /// The address.\n        address: u64,\n    },\n\n    /// The piece has no location but its value is known.\n    Value {\n        /// The value.\n        value: Value,\n    },\n\n    /// The piece is represented by some constant bytes.\n    Bytes {\n        /// The value.\n        value: R,\n    },\n\n    /// The piece is a pointer to a value which has no actual location.\n    ImplicitPointer {\n        /// The `.debug_info` offset of the value that this is an implicit pointer into.\n        value: DebugInfoOffset<Offset>,\n        /// The byte offset into the value that the implicit pointer points to.\n        byte_offset: i64,\n    },\n}","parent":null,"children":[{"krate":0,"index":6367},{"krate":0,"index":6369},{"krate":0,"index":6371},{"krate":0,"index":6373},{"krate":0,"index":6375},{"krate":0,"index":6377}],"decl_id":null,"docs":" A single location of a piece of the result of a DWARF expression.\n","sig":null,"attributes":[{"value":"/ A single location of a piece of the result of a DWARF expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":657565,"byte_end":657634,"line_start":301,"line_end":301,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658865,"byte_end":658873,"line_start":346,"line_end":346,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Location<R, Offset>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the piece is empty.\n","sig":null,"attributes":[{"value":"/ Return true if the piece is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658815,"byte_end":658853,"line_start":345,"line_end":345,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":6399},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659124,"byte_end":659129,"line_start":357,"line_end":357,"column_start":12,"column_end":17},"name":"Piece","qualname":"::read::op::Piece","value":"Piece { size_in_bits, bit_offset, location }","parent":null,"children":[{"krate":0,"index":6402},{"krate":0,"index":6403},{"krate":0,"index":6404}],"decl_id":null,"docs":" The description of a single piece of the result of a DWARF\n expression.\n","sig":null,"attributes":[{"value":"/ The description of a single piece of the result of a DWARF","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658993,"byte_end":659055,"line_start":354,"line_end":354,"column_start":1,"column_end":63}},{"value":"/ expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659056,"byte_end":659071,"line_start":355,"line_end":355,"column_start":1,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":6402},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659370,"byte_end":659382,"line_start":364,"line_end":364,"column_start":9,"column_end":21},"name":"size_in_bits","qualname":"::read::op::Piece::size_in_bits","value":"core::option::Option<u64>","parent":{"krate":0,"index":6399},"children":[],"decl_id":null,"docs":" If given, the size of the piece in bits.  If `None`, there\n must be only one piece whose size is all of the object.\n","sig":null,"attributes":[{"value":"/ If given, the size of the piece in bits.  If `None`, there","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659235,"byte_end":659297,"line_start":362,"line_end":362,"column_start":5,"column_end":67}},{"value":"/ must be only one piece whose size is all of the object.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659302,"byte_end":659361,"line_start":363,"line_end":363,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":6403},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660008,"byte_end":660018,"line_start":376,"line_end":376,"column_start":9,"column_end":19},"name":"bit_offset","qualname":"::read::op::Piece::bit_offset","value":"core::option::Option<u64>","parent":{"krate":0,"index":6399},"children":[],"decl_id":null,"docs":" If given, the bit offset of the piece within the location.\n If the location is a `Location::Register` or `Location::Value`,\n then this offset is from the least significant bit end of\n the register or value.\n If the location is a `Location::Address` then the offset uses\n the bit numbering and direction conventions of the language\n and target system.","sig":null,"attributes":[{"value":"/ If given, the bit offset of the piece within the location.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659401,"byte_end":659463,"line_start":365,"line_end":365,"column_start":5,"column_end":67}},{"value":"/ If the location is a `Location::Register` or `Location::Value`,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659468,"byte_end":659535,"line_start":366,"line_end":366,"column_start":5,"column_end":72}},{"value":"/ then this offset is from the least significant bit end of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659540,"byte_end":659601,"line_start":367,"line_end":367,"column_start":5,"column_end":66}},{"value":"/ the register or value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659606,"byte_end":659632,"line_start":368,"line_end":368,"column_start":5,"column_end":31}},{"value":"/ If the location is a `Location::Address` then the offset uses","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659637,"byte_end":659702,"line_start":369,"line_end":369,"column_start":5,"column_end":70}},{"value":"/ the bit numbering and direction conventions of the language","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659707,"byte_end":659770,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/ and target system.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659775,"byte_end":659797,"line_start":371,"line_end":371,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659802,"byte_end":659805,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ If `None`, the piece starts at the location. If the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659810,"byte_end":659865,"line_start":373,"line_end":373,"column_start":5,"column_end":60}},{"value":"/ location is a register whose size is larger than the piece,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659870,"byte_end":659933,"line_start":374,"line_end":374,"column_start":5,"column_end":68}},{"value":"/ then placement within the register is defined by the ABI.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":659938,"byte_end":659999,"line_start":375,"line_end":375,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":6404},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660082,"byte_end":660090,"line_start":378,"line_end":378,"column_start":9,"column_end":17},"name":"location","qualname":"::read::op::Piece::location","value":"read::op::Location<R, Offset>","parent":{"krate":0,"index":6399},"children":[],"decl_id":null,"docs":" Where this piece is to be found.\n","sig":null,"attributes":[{"value":"/ Where this piece is to be found.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660037,"byte_end":660073,"line_start":377,"line_end":377,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":661129,"byte_end":661134,"line_start":411,"line_end":411,"column_start":12,"column_end":17},"name":"parse","qualname":"<Operation<R, Offset>>::parse","value":"pub fn parse(&mut R, Encoding) -> Result<Operation<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single DWARF expression operation.","sig":null,"attributes":[{"value":"/ Parse a single DWARF expression operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660788,"byte_end":660834,"line_start":403,"line_end":403,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660839,"byte_end":660842,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ This is useful when examining a DWARF expression for reasons other","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660847,"byte_end":660917,"line_start":405,"line_end":405,"column_start":5,"column_end":75}},{"value":"/ than direct evaluation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660922,"byte_end":660949,"line_start":406,"line_end":406,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660954,"byte_end":660957,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ `bytes` points to a the operation to decode.  It should point into","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660962,"byte_end":661032,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ the same array as `bytecode`, which should be the entire","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":661037,"byte_end":661097,"line_start":409,"line_end":409,"column_start":5,"column_end":65}},{"value":"/ expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":661102,"byte_end":661117,"line_start":410,"line_end":410,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6475},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678488,"byte_end":678496,"line_start":842,"line_end":842,"column_start":5,"column_end":13},"name":"Complete","qualname":"::read::op::EvaluationResult::Complete","value":"EvaluationResult::Complete","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` is complete, and `Evaluation::result()` can be called.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` is complete, and `Evaluation::result()` can be called.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678408,"byte_end":678483,"line_start":841,"line_end":841,"column_start":5,"column_end":80}}]},{"kind":"StructVariant","id":{"krate":0,"index":6477},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678718,"byte_end":678732,"line_start":846,"line_end":846,"column_start":5,"column_end":19},"name":"RequiresMemory","qualname":"::read::op::EvaluationResult::RequiresMemory","value":"EvaluationResult::RequiresMemory { address, size, space, base_type }","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs a value from memory to proceed further.  Once the\n caller determines what value to provide it should resume the `Evaluation`\n by calling `Evaluation::resume_with_memory`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs a value from memory to proceed further.  Once the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678502,"byte_end":678578,"line_start":843,"line_end":843,"column_start":5,"column_end":81}},{"value":"/ caller determines what value to provide it should resume the `Evaluation`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678583,"byte_end":678660,"line_start":844,"line_end":844,"column_start":5,"column_end":82}},{"value":"/ by calling `Evaluation::resume_with_memory`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678665,"byte_end":678713,"line_start":845,"line_end":845,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":6482},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679393,"byte_end":679409,"line_start":860,"line_end":860,"column_start":5,"column_end":21},"name":"RequiresRegister","qualname":"::read::op::EvaluationResult::RequiresRegister","value":"EvaluationResult::RequiresRegister { register, base_type }","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs a value from a register to proceed further.  Once\n the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_register`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs a value from a register to proceed further.  Once","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679171,"byte_end":679247,"line_start":857,"line_end":857,"column_start":5,"column_end":81}},{"value":"/ the caller determines what value to provide it should resume the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679252,"byte_end":679320,"line_start":858,"line_end":858,"column_start":5,"column_end":73}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_register`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679325,"byte_end":679388,"line_start":859,"line_end":859,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6485},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679973,"byte_end":679990,"line_start":871,"line_end":871,"column_start":5,"column_end":22},"name":"RequiresFrameBase","qualname":"::read::op::EvaluationResult::RequiresFrameBase","value":"EvaluationResult::RequiresFrameBase","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the frame base address to proceed further.  Once\n the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_frame_base`.  The frame\n base address is the address produced by the location description in the\n `DW_AT_frame_base` attribute of the current function.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the frame base address to proceed further.  Once","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679597,"byte_end":679672,"line_start":866,"line_end":866,"column_start":5,"column_end":80}},{"value":"/ the caller determines what value to provide it should resume the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679677,"byte_end":679745,"line_start":867,"line_end":867,"column_start":5,"column_end":73}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_frame_base`.  The frame","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679750,"byte_end":679826,"line_start":868,"line_end":868,"column_start":5,"column_end":81}},{"value":"/ base address is the address produced by the location description in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679831,"byte_end":679906,"line_start":869,"line_end":869,"column_start":5,"column_end":80}},{"value":"/ `DW_AT_frame_base` attribute of the current function.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679911,"byte_end":679968,"line_start":870,"line_end":870,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6487},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680206,"byte_end":680217,"line_start":875,"line_end":875,"column_start":5,"column_end":16},"name":"RequiresTls","qualname":"::read::op::EvaluationResult::RequiresTls","value":"EvaluationResult::RequiresTls(u64)","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs a value from TLS to proceed further.  Once the\n caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_tls`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs a value from TLS to proceed further.  Once the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":679996,"byte_end":680069,"line_start":872,"line_end":872,"column_start":5,"column_end":78}},{"value":"/ caller determines what value to provide it should resume the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680074,"byte_end":680138,"line_start":873,"line_end":873,"column_start":5,"column_end":69}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_tls`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680143,"byte_end":680201,"line_start":874,"line_end":874,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6490},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680440,"byte_end":680460,"line_start":879,"line_end":879,"column_start":5,"column_end":25},"name":"RequiresCallFrameCfa","qualname":"::read::op::EvaluationResult::RequiresCallFrameCfa","value":"EvaluationResult::RequiresCallFrameCfa","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the CFA to proceed further.  Once the caller\n determines what value to provide it should resume the `Evaluation` by\n calling `Evaluation::resume_with_call_frame_cfa`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the CFA to proceed further.  Once the caller","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680228,"byte_end":680299,"line_start":876,"line_end":876,"column_start":5,"column_end":76}},{"value":"/ determines what value to provide it should resume the `Evaluation` by","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680304,"byte_end":680377,"line_start":877,"line_end":877,"column_start":5,"column_end":78}},{"value":"/ calling `Evaluation::resume_with_call_frame_cfa`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680382,"byte_end":680435,"line_start":878,"line_end":878,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6492},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680718,"byte_end":680736,"line_start":884,"line_end":884,"column_start":5,"column_end":23},"name":"RequiresAtLocation","qualname":"::read::op::EvaluationResult::RequiresAtLocation","value":"EvaluationResult::RequiresAtLocation(DieReference<R::Offset>)","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the DWARF expression at the given location to\n proceed further.  Once the caller determines what value to provide it\n should resume the `Evaluation` by calling\n `Evaluation::resume_with_at_location`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the DWARF expression at the given location to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680466,"byte_end":680538,"line_start":880,"line_end":880,"column_start":5,"column_end":77}},{"value":"/ proceed further.  Once the caller determines what value to provide it","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680543,"byte_end":680616,"line_start":881,"line_end":881,"column_start":5,"column_end":78}},{"value":"/ should resume the `Evaluation` by calling","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680621,"byte_end":680666,"line_start":882,"line_end":882,"column_start":5,"column_end":50}},{"value":"/ `Evaluation::resume_with_at_location`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680671,"byte_end":680713,"line_start":883,"line_end":883,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6495},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681054,"byte_end":681072,"line_start":889,"line_end":889,"column_start":5,"column_end":23},"name":"RequiresEntryValue","qualname":"::read::op::EvaluationResult::RequiresEntryValue","value":"EvaluationResult::RequiresEntryValue(Expression<R>)","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the value produced by evaluating a DWARF\n expression at the entry point of the current subprogram.  Once the\n caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_entry_value`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the value produced by evaluating a DWARF","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680767,"byte_end":680834,"line_start":885,"line_end":885,"column_start":5,"column_end":72}},{"value":"/ expression at the entry point of the current subprogram.  Once the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680839,"byte_end":680909,"line_start":886,"line_end":886,"column_start":5,"column_end":75}},{"value":"/ caller determines what value to provide it should resume the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680914,"byte_end":680978,"line_start":887,"line_end":887,"column_start":5,"column_end":69}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_entry_value`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":680983,"byte_end":681049,"line_start":888,"line_end":888,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6498},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681367,"byte_end":681387,"line_start":894,"line_end":894,"column_start":5,"column_end":25},"name":"RequiresParameterRef","qualname":"::read::op::EvaluationResult::RequiresParameterRef","value":"EvaluationResult::RequiresParameterRef(UnitOffset<R::Offset>)","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the value of the parameter at the given location\n in the current function's caller.  Once the caller determines what value\n to provide it should resume the `Evaluation` by calling\n `Evaluation::resume_with_parameter_ref`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the value of the parameter at the given location","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681093,"byte_end":681168,"line_start":890,"line_end":890,"column_start":5,"column_end":80}},{"value":"/ in the current function's caller.  Once the caller determines what value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681173,"byte_end":681249,"line_start":891,"line_end":891,"column_start":5,"column_end":81}},{"value":"/ to provide it should resume the `Evaluation` by calling","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681254,"byte_end":681313,"line_start":892,"line_end":892,"column_start":5,"column_end":64}},{"value":"/ `Evaluation::resume_with_parameter_ref`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681318,"byte_end":681362,"line_start":893,"line_end":893,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6501},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681649,"byte_end":681673,"line_start":898,"line_end":898,"column_start":5,"column_end":29},"name":"RequiresRelocatedAddress","qualname":"::read::op::EvaluationResult::RequiresRelocatedAddress","value":"EvaluationResult::RequiresRelocatedAddress(u64)","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs an address to be relocated to proceed further.\n Once the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_relocated_address`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs an address to be relocated to proceed further.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681416,"byte_end":681489,"line_start":895,"line_end":895,"column_start":5,"column_end":78}},{"value":"/ Once the caller determines what value to provide it should resume the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681494,"byte_end":681567,"line_start":896,"line_end":896,"column_start":5,"column_end":78}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_relocated_address`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681572,"byte_end":681644,"line_start":897,"line_end":897,"column_start":5,"column_end":77}}]},{"kind":"StructVariant","id":{"krate":0,"index":6504},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681963,"byte_end":681985,"line_start":903,"line_end":903,"column_start":5,"column_end":27},"name":"RequiresIndexedAddress","qualname":"::read::op::EvaluationResult::RequiresIndexedAddress","value":"EvaluationResult::RequiresIndexedAddress { index, relocate }","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs an address from the `.debug_addr` section.\n This address may also need to be relocated.\n Once the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_indexed_address`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs an address from the `.debug_addr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681684,"byte_end":681753,"line_start":899,"line_end":899,"column_start":5,"column_end":74}},{"value":"/ This address may also need to be relocated.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681758,"byte_end":681805,"line_start":900,"line_end":900,"column_start":5,"column_end":52}},{"value":"/ Once the caller determines what value to provide it should resume the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681810,"byte_end":681883,"line_start":901,"line_end":901,"column_start":5,"column_end":78}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_indexed_address`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":681888,"byte_end":681958,"line_start":902,"line_end":902,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6507},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682513,"byte_end":682529,"line_start":914,"line_end":914,"column_start":5,"column_end":21},"name":"RequiresBaseType","qualname":"::read::op::EvaluationResult::RequiresBaseType","value":"EvaluationResult::RequiresBaseType(UnitOffset<R::Offset>)","parent":{"krate":0,"index":6473},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the `ValueType` for the base type DIE at\n the give unit offset.  Once the caller determines what value to provide it\n should resume the `Evaluation` by calling\n `Evaluation::resume_with_base_type`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the `ValueType` for the base type DIE at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682263,"byte_end":682330,"line_start":910,"line_end":910,"column_start":5,"column_end":72}},{"value":"/ the give unit offset.  Once the caller determines what value to provide it","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682335,"byte_end":682413,"line_start":911,"line_end":911,"column_start":5,"column_end":83}},{"value":"/ should resume the `Evaluation` by calling","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682418,"byte_end":682463,"line_start":912,"line_end":912,"column_start":5,"column_end":50}},{"value":"/ `Evaluation::resume_with_base_type`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682468,"byte_end":682508,"line_start":913,"line_end":913,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":6473},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678374,"byte_end":678390,"line_start":840,"line_end":840,"column_start":10,"column_end":26},"name":"EvaluationResult","qualname":"::read::op::EvaluationResult","value":"pub enum EvaluationResult<R: Reader> {\n\n    /// The `Evaluation` is complete, and `Evaluation::result()` can be called.\n    Complete,\n\n    /// The `Evaluation` needs a value from memory to proceed further.  Once the\n    /// caller determines what value to provide it should resume the `Evaluation`\n    /// by calling `Evaluation::resume_with_memory`.\n    RequiresMemory {\n        /// The address of the value required.\n        address: u64,\n        /// The size of the value required. This is guaranteed to be at most the\n        /// word size of the target architecture.\n        size: u8,\n        /// If not `None`, a target-specific address space value.\n        space: Option<u64>,\n        /// The DIE of the base type or 0 to indicate the generic type\n        base_type: UnitOffset<R::Offset>,\n    },\n\n    /// The `Evaluation` needs a value from a register to proceed further.  Once\n    /// the caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_register`.\n    RequiresRegister {\n        /// The register number.\n        register: Register,\n        /// The DIE of the base type or 0 to indicate the generic type\n        base_type: UnitOffset<R::Offset>,\n    },\n\n    /// The `Evaluation` needs the frame base address to proceed further.  Once\n    /// the caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_frame_base`.  The frame\n    /// base address is the address produced by the location description in the\n    /// `DW_AT_frame_base` attribute of the current function.\n    RequiresFrameBase,\n\n    /// The `Evaluation` needs a value from TLS to proceed further.  Once the\n    /// caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_tls`.\n    RequiresTls(u64),\n\n    /// The `Evaluation` needs the CFA to proceed further.  Once the caller\n    /// determines what value to provide it should resume the `Evaluation` by\n    /// calling `Evaluation::resume_with_call_frame_cfa`.\n    RequiresCallFrameCfa,\n\n    /// The `Evaluation` needs the DWARF expression at the given location to\n    /// proceed further.  Once the caller determines what value to provide it\n    /// should resume the `Evaluation` by calling\n    /// `Evaluation::resume_with_at_location`.\n    RequiresAtLocation(DieReference<R::Offset>),\n\n    /// The `Evaluation` needs the value produced by evaluating a DWARF\n    /// expression at the entry point of the current subprogram.  Once the\n    /// caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_entry_value`.\n    RequiresEntryValue(Expression<R>),\n\n    /// The `Evaluation` needs the value of the parameter at the given location\n    /// in the current function's caller.  Once the caller determines what value\n    /// to provide it should resume the `Evaluation` by calling\n    /// `Evaluation::resume_with_parameter_ref`.\n    RequiresParameterRef(UnitOffset<R::Offset>),\n\n    /// The `Evaluation` needs an address to be relocated to proceed further.\n    /// Once the caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_relocated_address`.\n    RequiresRelocatedAddress(u64),\n\n    /// The `Evaluation` needs an address from the `.debug_addr` section.\n    /// This address may also need to be relocated.\n    /// Once the caller determines what value to provide it should resume the\n    /// `Evaluation` by calling `Evaluation::resume_with_indexed_address`.\n    RequiresIndexedAddress {\n        /// The index of the address in the `.debug_addr` section,\n        /// relative to the `DW_AT_addr_base` of the compilation unit.\n        index: DebugAddrIndex<R::Offset>,\n        /// Whether the address also needs to be relocated.\n        relocate: bool,\n    },\n\n    /// The `Evaluation` needs the `ValueType` for the base type DIE at\n    /// the give unit offset.  Once the caller determines what value to provide it\n    /// should resume the `Evaluation` by calling\n    /// `Evaluation::resume_with_base_type`.\n    RequiresBaseType(UnitOffset<R::Offset>),\n}","parent":null,"children":[{"krate":0,"index":6475},{"krate":0,"index":6477},{"krate":0,"index":6482},{"krate":0,"index":6485},{"krate":0,"index":6487},{"krate":0,"index":6490},{"krate":0,"index":6492},{"krate":0,"index":6495},{"krate":0,"index":6498},{"krate":0,"index":6501},{"krate":0,"index":6504},{"krate":0,"index":6507}],"decl_id":null,"docs":" The state of an `Evaluation` after evaluating a DWARF expression.\n The evaluation is either `Complete`, or it requires more data\n to continue, as described by the variant.\n","sig":null,"attributes":[{"value":"/ The state of an `Evaluation` after evaluating a DWARF expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678155,"byte_end":678224,"line_start":836,"line_end":836,"column_start":1,"column_end":70}},{"value":"/ The evaluation is either `Complete`, or it requires more data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678225,"byte_end":678290,"line_start":837,"line_end":837,"column_start":1,"column_end":66}},{"value":"/ to continue, as described by the variant.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":678291,"byte_end":678336,"line_start":838,"line_end":838,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6519},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682684,"byte_end":682694,"line_start":919,"line_end":919,"column_start":12,"column_end":22},"name":"Expression","qualname":"::read::op::Expression","value":"","parent":null,"children":[],"decl_id":null,"docs":" The bytecode for a DWARF expression or location description.\n","sig":null,"attributes":[{"value":"/ The bytecode for a DWARF expression or location description.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682557,"byte_end":682621,"line_start":917,"line_end":917,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":6522},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682706,"byte_end":682711,"line_start":919,"line_end":919,"column_start":34,"column_end":39},"name":"0","qualname":"::read::op::Expression::0","value":"R","parent":{"krate":0,"index":6519},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683565,"byte_end":683575,"line_start":941,"line_end":941,"column_start":12,"column_end":22},"name":"evaluation","qualname":"<Expression<R>>::evaluation","value":"pub fn evaluation(Self, Encoding) -> Evaluation<R>","parent":null,"children":[],"decl_id":null,"docs":" Create an evaluation for this expression.","sig":null,"attributes":[{"value":"/ Create an evaluation for this expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682751,"byte_end":682796,"line_start":922,"line_end":922,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682801,"byte_end":682804,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ The `encoding` is determined by the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682809,"byte_end":682848,"line_start":924,"line_end":924,"column_start":5,"column_end":44}},{"value":"/ [`CompilationUnitHeader`](struct.CompilationUnitHeader.html) or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682853,"byte_end":682920,"line_start":925,"line_end":925,"column_start":5,"column_end":72}},{"value":"/ [`TypeUnitHeader`](struct.TypeUnitHeader.html) that this expression","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682925,"byte_end":682996,"line_start":926,"line_end":926,"column_start":5,"column_end":76}},{"value":"/ relates to.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683001,"byte_end":683016,"line_start":927,"line_end":927,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683021,"byte_end":683024,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683029,"byte_end":683043,"line_start":929,"line_end":929,"column_start":5,"column_end":19}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683048,"byte_end":683066,"line_start":930,"line_end":930,"column_start":5,"column_end":23}},{"value":"/ use gimli::Expression;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683071,"byte_end":683097,"line_start":931,"line_end":931,"column_start":5,"column_end":31}},{"value":"/ # let endian = gimli::LittleEndian;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683102,"byte_end":683141,"line_start":932,"line_end":932,"column_start":5,"column_end":44}},{"value":"/ # let debug_info = gimli::DebugInfo::from(gimli::EndianSlice::new(&[], endian));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683146,"byte_end":683230,"line_start":933,"line_end":933,"column_start":5,"column_end":89}},{"value":"/ # let unit = debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683235,"byte_end":683296,"line_start":934,"line_end":934,"column_start":5,"column_end":66}},{"value":"/ # let bytecode = gimli::EndianSlice::new(&[], endian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683301,"byte_end":683359,"line_start":935,"line_end":935,"column_start":5,"column_end":63}},{"value":"/ let expression = gimli::Expression(bytecode);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683364,"byte_end":683413,"line_start":936,"line_end":936,"column_start":5,"column_end":54}},{"value":"/ let mut eval = expression.evaluation(unit.encoding());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683418,"byte_end":683476,"line_start":937,"line_end":937,"column_start":5,"column_end":63}},{"value":"/ let mut result = eval.evaluate().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683481,"byte_end":683527,"line_start":938,"line_end":938,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683532,"byte_end":683539,"line_start":939,"line_end":939,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683544,"byte_end":683553,"line_start":940,"line_end":940,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683746,"byte_end":683756,"line_start":946,"line_end":946,"column_start":12,"column_end":22},"name":"operations","qualname":"<Expression<R>>::operations","value":"pub fn operations(Self, Encoding) -> OperationIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for the operations in the expression.\n","sig":null,"attributes":[{"value":"/ Return an iterator for the operations in the expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683674,"byte_end":683734,"line_start":945,"line_end":945,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":6546},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683991,"byte_end":684004,"line_start":956,"line_end":956,"column_start":12,"column_end":25},"name":"OperationIter","qualname":"::read::op::OperationIter","value":"OperationIter {  }","parent":null,"children":[{"krate":0,"index":6548},{"krate":0,"index":6549}],"decl_id":null,"docs":" An iterator for the operations in an expression.\n","sig":null,"attributes":[{"value":"/ An iterator for the operations in an expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":683897,"byte_end":683949,"line_start":954,"line_end":954,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684155,"byte_end":684159,"line_start":963,"line_end":963,"column_start":12,"column_end":16},"name":"next","qualname":"<OperationIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<Operation<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Read the next operation in an expression.\n","sig":null,"attributes":[{"value":"/ Read the next operation in an expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684098,"byte_end":684143,"line_start":962,"line_end":962,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684561,"byte_end":684572,"line_start":977,"line_end":977,"column_start":12,"column_end":23},"name":"offset_from","qualname":"<OperationIter<R>>::offset_from","value":"pub fn offset_from(&Self, &Expression<R>) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Return the current byte offset of the iterator.\n","sig":null,"attributes":[{"value":"/ Return the current byte offset of the iterator.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684498,"byte_end":684549,"line_start":976,"line_end":976,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":6558},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686700,"byte_end":686710,"line_start":1028,"line_end":1028,"column_start":12,"column_end":22},"name":"Evaluation","qualname":"::read::op::Evaluation","value":"Evaluation {  }","parent":null,"children":[{"krate":0,"index":6560},{"krate":0,"index":6561},{"krate":0,"index":6562},{"krate":0,"index":6563},{"krate":0,"index":6564},{"krate":0,"index":6565},{"krate":0,"index":6566},{"krate":0,"index":6567},{"krate":0,"index":6568},{"krate":0,"index":6569},{"krate":0,"index":6570}],"decl_id":null,"docs":" A DWARF expression evaluator.","sig":null,"attributes":[{"value":"/ A DWARF expression evaluator.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684678,"byte_end":684711,"line_start":982,"line_end":982,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684712,"byte_end":684715,"line_start":983,"line_end":983,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684716,"byte_end":684727,"line_start":984,"line_end":984,"column_start":1,"column_end":12}},{"value":"/ A DWARF expression may require additional data to produce a final result,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684728,"byte_end":684805,"line_start":985,"line_end":985,"column_start":1,"column_end":78}},{"value":"/ such as the value of a register or a memory location.  Once initial setup","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684806,"byte_end":684883,"line_start":986,"line_end":986,"column_start":1,"column_end":78}},{"value":"/ is complete (i.e. `set_initial_value()`, `set_object_address()`) the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684884,"byte_end":684956,"line_start":987,"line_end":987,"column_start":1,"column_end":73}},{"value":"/ consumer calls the `evaluate()` method.  That returns an `EvaluationResult`,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684957,"byte_end":685037,"line_start":988,"line_end":988,"column_start":1,"column_end":81}},{"value":"/ which is either `EvaluationResult::Complete` or a value indicating what","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685038,"byte_end":685113,"line_start":989,"line_end":989,"column_start":1,"column_end":76}},{"value":"/ data is needed to resume the `Evaluation`.  The consumer is responsible for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685114,"byte_end":685193,"line_start":990,"line_end":990,"column_start":1,"column_end":80}},{"value":"/ producing that data and resuming the computation with the correct method,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685194,"byte_end":685271,"line_start":991,"line_end":991,"column_start":1,"column_end":78}},{"value":"/ as documented for `EvaluationResult`.  Only once an `EvaluationResult::Complete`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685272,"byte_end":685356,"line_start":992,"line_end":992,"column_start":1,"column_end":85}},{"value":"/ is returned can the consumer call `result()`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685357,"byte_end":685406,"line_start":993,"line_end":993,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685407,"byte_end":685410,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ This design allows the consumer of `Evaluation` to decide how and when to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685411,"byte_end":685488,"line_start":995,"line_end":995,"column_start":1,"column_end":78}},{"value":"/ produce the required data and resume the computation.  The `Evaluation` can","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685489,"byte_end":685568,"line_start":996,"line_end":996,"column_start":1,"column_end":80}},{"value":"/ be driven synchronously (as shown below) or by some asynchronous mechanism","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685569,"byte_end":685647,"line_start":997,"line_end":997,"column_start":1,"column_end":79}},{"value":"/ such as futures.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685648,"byte_end":685668,"line_start":998,"line_end":998,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685669,"byte_end":685672,"line_start":999,"line_end":999,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685673,"byte_end":685687,"line_start":1000,"line_end":1000,"column_start":1,"column_end":15}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685688,"byte_end":685706,"line_start":1001,"line_end":1001,"column_start":1,"column_end":19}},{"value":"/ use gimli::{EndianSlice, Evaluation, EvaluationResult, Format, LittleEndian, Value};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685707,"byte_end":685795,"line_start":1002,"line_end":1002,"column_start":1,"column_end":89}},{"value":"/ # let bytecode = EndianSlice::new(&[], LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685796,"byte_end":685853,"line_start":1003,"line_end":1003,"column_start":1,"column_end":58}},{"value":"/ # let encoding = unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685854,"byte_end":685892,"line_start":1004,"line_end":1004,"column_start":1,"column_end":39}},{"value":"/ # let get_register_value = |_, _| Value::Generic(42);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685893,"byte_end":685950,"line_start":1005,"line_end":1005,"column_start":1,"column_end":58}},{"value":"/ # let get_frame_base = || 0xdeadbeef;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685951,"byte_end":685992,"line_start":1006,"line_end":1006,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685993,"byte_end":685996,"line_start":1007,"line_end":1007,"column_start":1,"column_end":4}},{"value":"/ let mut eval = Evaluation::new(bytecode, encoding);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":685997,"byte_end":686052,"line_start":1008,"line_end":1008,"column_start":1,"column_end":56}},{"value":"/ let mut result = eval.evaluate().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686053,"byte_end":686099,"line_start":1009,"line_end":1009,"column_start":1,"column_end":47}},{"value":"/ while result != EvaluationResult::Complete {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686100,"byte_end":686148,"line_start":1010,"line_end":1010,"column_start":1,"column_end":49}},{"value":"/   match result {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686149,"byte_end":686169,"line_start":1011,"line_end":1011,"column_start":1,"column_end":21}},{"value":"/     EvaluationResult::RequiresRegister { register, base_type } => {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686170,"byte_end":686241,"line_start":1012,"line_end":1012,"column_start":1,"column_end":72}},{"value":"/       let value = get_register_value(register, base_type);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686242,"byte_end":686304,"line_start":1013,"line_end":1013,"column_start":1,"column_end":63}},{"value":"/       result = eval.resume_with_register(value).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686305,"byte_end":686366,"line_start":1014,"line_end":1014,"column_start":1,"column_end":62}},{"value":"/     },","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686367,"byte_end":686377,"line_start":1015,"line_end":1015,"column_start":1,"column_end":11}},{"value":"/     EvaluationResult::RequiresFrameBase => {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686378,"byte_end":686426,"line_start":1016,"line_end":1016,"column_start":1,"column_end":49}},{"value":"/       let frame_base = get_frame_base();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686427,"byte_end":686471,"line_start":1017,"line_end":1017,"column_start":1,"column_end":45}},{"value":"/       result = eval.resume_with_frame_base(frame_base).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686472,"byte_end":686540,"line_start":1018,"line_end":1018,"column_start":1,"column_end":69}},{"value":"/     },","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686541,"byte_end":686551,"line_start":1019,"line_end":1019,"column_start":1,"column_end":11}},{"value":"/     _ => unimplemented!(),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686552,"byte_end":686582,"line_start":1020,"line_end":1020,"column_start":1,"column_end":31}},{"value":"/   };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686583,"byte_end":686591,"line_start":1021,"line_end":1021,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686592,"byte_end":686597,"line_start":1022,"line_end":1022,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686598,"byte_end":686601,"line_start":1023,"line_end":1023,"column_start":1,"column_end":4}},{"value":"/ let result = eval.result();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686602,"byte_end":686633,"line_start":1024,"line_end":1024,"column_start":1,"column_end":32}},{"value":"/ println!(\"{:?}\", result);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686634,"byte_end":686663,"line_start":1025,"line_end":1025,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":686664,"byte_end":686671,"line_start":1026,"line_end":1026,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":687605,"byte_end":687608,"line_start":1059,"line_end":1059,"column_start":12,"column_end":15},"name":"new","qualname":"<Evaluation<R>>::new","value":"pub fn new(R, Encoding) -> Evaluation<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DWARF expression evaluator.","sig":null,"attributes":[{"value":"/ Create a new DWARF expression evaluator.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":687399,"byte_end":687443,"line_start":1055,"line_end":1055,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":687448,"byte_end":687451,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ The new evaluator is created without an initial value, without","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":687456,"byte_end":687522,"line_start":1057,"line_end":1057,"column_start":5,"column_end":71}},{"value":"/ an object address, and without a maximum number of iterations.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":687527,"byte_end":687593,"line_start":1058,"line_end":1058,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688758,"byte_end":688775,"line_start":1090,"line_end":1090,"column_start":12,"column_end":29},"name":"set_initial_value","qualname":"<Evaluation<R>>::set_initial_value","value":"pub fn set_initial_value(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Set an initial value to be pushed on the DWARF expression\n evaluator's stack.  This can be used in cases like\n `DW_AT_vtable_elem_location`, which require a value on the\n stack before evaluation commences.  If no initial value is\n set, and the expression uses an opcode requiring the initial\n value, then evaluation will fail with an error.","sig":null,"attributes":[{"value":"/ Set an initial value to be pushed on the DWARF expression","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688225,"byte_end":688286,"line_start":1080,"line_end":1080,"column_start":5,"column_end":66}},{"value":"/ evaluator's stack.  This can be used in cases like","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688291,"byte_end":688345,"line_start":1081,"line_end":1081,"column_start":5,"column_end":59}},{"value":"/ `DW_AT_vtable_elem_location`, which require a value on the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688350,"byte_end":688412,"line_start":1082,"line_end":1082,"column_start":5,"column_end":67}},{"value":"/ stack before evaluation commences.  If no initial value is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688417,"byte_end":688479,"line_start":1083,"line_end":1083,"column_start":5,"column_end":67}},{"value":"/ set, and the expression uses an opcode requiring the initial","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688484,"byte_end":688548,"line_start":1084,"line_end":1084,"column_start":5,"column_end":69}},{"value":"/ value, then evaluation will fail with an error.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688553,"byte_end":688604,"line_start":1085,"line_end":1085,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688609,"byte_end":688612,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688617,"byte_end":688629,"line_start":1087,"line_end":1087,"column_start":5,"column_end":17}},{"value":"/ Panics if `set_initial_value()` has already been called, or if","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688634,"byte_end":688700,"line_start":1088,"line_end":1088,"column_start":5,"column_end":71}},{"value":"/ `evaluate()` has already been called.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":688705,"byte_end":688746,"line_start":1089,"line_end":1089,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689361,"byte_end":689379,"line_start":1105,"line_end":1105,"column_start":12,"column_end":30},"name":"set_object_address","qualname":"<Evaluation<R>>::set_object_address","value":"pub fn set_object_address(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Set the enclosing object's address, as used by\n `DW_OP_push_object_address`.  If no object address is set, and\n the expression uses an opcode requiring the object address,\n then evaluation will fail with an error.\n","sig":null,"attributes":[{"value":"/ Set the enclosing object's address, as used by","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689111,"byte_end":689161,"line_start":1101,"line_end":1101,"column_start":5,"column_end":55}},{"value":"/ `DW_OP_push_object_address`.  If no object address is set, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689166,"byte_end":689232,"line_start":1102,"line_end":1102,"column_start":5,"column_end":71}},{"value":"/ the expression uses an opcode requiring the object address,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689237,"byte_end":689300,"line_start":1103,"line_end":1103,"column_start":5,"column_end":68}},{"value":"/ then evaluation will fail with an error.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689305,"byte_end":689349,"line_start":1104,"line_end":1104,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689985,"byte_end":690003,"line_start":1118,"line_end":1118,"column_start":12,"column_end":30},"name":"set_max_iterations","qualname":"<Evaluation<R>>::set_max_iterations","value":"pub fn set_max_iterations(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Set the maximum number of iterations to be allowed by the\n expression evaluator.","sig":null,"attributes":[{"value":"/ Set the maximum number of iterations to be allowed by the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689459,"byte_end":689520,"line_start":1109,"line_end":1109,"column_start":5,"column_end":66}},{"value":"/ expression evaluator.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689525,"byte_end":689550,"line_start":1110,"line_end":1110,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689555,"byte_end":689558,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ An iteration corresponds approximately to the evaluation of a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689563,"byte_end":689628,"line_start":1112,"line_end":1112,"column_start":5,"column_end":70}},{"value":"/ single operation in an expression (\"approximately\" because the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689633,"byte_end":689699,"line_start":1113,"line_end":1113,"column_start":5,"column_end":71}},{"value":"/ implementation may allow two such operations in some cases).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689704,"byte_end":689768,"line_start":1114,"line_end":1114,"column_start":5,"column_end":69}},{"value":"/ The default is not to have a maximum; once set, it's not","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689773,"byte_end":689833,"line_start":1115,"line_end":1115,"column_start":5,"column_end":65}},{"value":"/ possible to go back to this default state.  This value can be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689838,"byte_end":689903,"line_start":1116,"line_end":1116,"column_start":5,"column_end":70}},{"value":"/ set to avoid denial of service attacks by bad DWARF bytecode.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":689908,"byte_end":689973,"line_start":1117,"line_end":1117,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":703703,"byte_end":703709,"line_start":1504,"line_end":1504,"column_start":12,"column_end":18},"name":"result","qualname":"<Evaluation<R>>::result","value":"pub fn result(Self) -> Vec<Piece<R>>","parent":null,"children":[],"decl_id":null,"docs":" Get the result of this `Evaluation`.","sig":null,"attributes":[{"value":"/ Get the result of this `Evaluation`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":703555,"byte_end":703595,"line_start":1500,"line_end":1500,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":703600,"byte_end":703603,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":703608,"byte_end":703620,"line_start":1502,"line_end":1502,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` has not been driven to completion.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":703625,"byte_end":703691,"line_start":1503,"line_end":1503,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":704300,"byte_end":704308,"line_start":1518,"line_end":1518,"column_start":12,"column_end":20},"name":"evaluate","qualname":"<Evaluation<R>>::evaluate","value":"pub fn evaluate(&mut Self) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate a DWARF expression.  This method should only ever be called\n once.  If the returned `EvaluationResult` is not\n `EvaluationResult::Complete`, the caller should provide the required\n value and resume the evaluation by calling the appropriate resume_with\n method on `Evaluation`.\n","sig":null,"attributes":[{"value":"/ Evaluate a DWARF expression.  This method should only ever be called","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":703971,"byte_end":704043,"line_start":1513,"line_end":1513,"column_start":5,"column_end":77}},{"value":"/ once.  If the returned `EvaluationResult` is not","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":704048,"byte_end":704100,"line_start":1514,"line_end":1514,"column_start":5,"column_end":57}},{"value":"/ `EvaluationResult::Complete`, the caller should provide the required","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":704105,"byte_end":704177,"line_start":1515,"line_end":1515,"column_start":5,"column_end":77}},{"value":"/ value and resume the evaluation by calling the appropriate resume_with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":704182,"byte_end":704256,"line_start":1516,"line_end":1516,"column_start":5,"column_end":79}},{"value":"/ method on `Evaluation`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":704261,"byte_end":704288,"line_start":1517,"line_end":1517,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":705482,"byte_end":705500,"line_start":1548,"line_end":1548,"column_start":12,"column_end":30},"name":"resume_with_memory","qualname":"<Evaluation<R>>::resume_with_memory","value":"pub fn resume_with_memory(&mut Self, Value) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided memory `value`.  This will apply\n the provided memory value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided memory `value`.  This will apply","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":705080,"byte_end":705158,"line_start":1541,"line_end":1541,"column_start":5,"column_end":83}},{"value":"/ the provided memory value to the evaluation and continue evaluating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":705163,"byte_end":705234,"line_start":1542,"line_end":1542,"column_start":5,"column_end":76}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":705239,"byte_end":705312,"line_start":1543,"line_end":1543,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":705317,"byte_end":705344,"line_start":1544,"line_end":1544,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":705349,"byte_end":705352,"line_start":1545,"line_end":1545,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":705357,"byte_end":705369,"line_start":1546,"line_end":1546,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresMemory`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":705374,"byte_end":705470,"line_start":1547,"line_end":1547,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":706380,"byte_end":706400,"line_start":1569,"line_end":1569,"column_start":12,"column_end":32},"name":"resume_with_register","qualname":"<Evaluation<R>>::resume_with_register","value":"pub fn resume_with_register(&mut Self, Value) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `register` value.  This will apply\n the provided register value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `register` value.  This will apply","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":705972,"byte_end":706052,"line_start":1562,"line_end":1562,"column_start":5,"column_end":85}},{"value":"/ the provided register value to the evaluation and continue evaluating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":706057,"byte_end":706130,"line_start":1563,"line_end":1563,"column_start":5,"column_end":78}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":706135,"byte_end":706208,"line_start":1564,"line_end":1564,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":706213,"byte_end":706240,"line_start":1565,"line_end":1565,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":706245,"byte_end":706248,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":706253,"byte_end":706265,"line_start":1567,"line_end":1567,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresRegister`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":706270,"byte_end":706368,"line_start":1568,"line_end":1568,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":707442,"byte_end":707464,"line_start":1592,"line_end":1592,"column_start":12,"column_end":34},"name":"resume_with_frame_base","qualname":"<Evaluation<R>>::resume_with_frame_base","value":"pub fn resume_with_frame_base(&mut Self, u64) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `frame_base`.  This will\n apply the provided frame base value to the evaluation and continue\n evaluating opcodes until the evaluation is completed, reaches an error,\n or needs more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `frame_base`.  This will","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":707035,"byte_end":707105,"line_start":1585,"line_end":1585,"column_start":5,"column_end":75}},{"value":"/ apply the provided frame base value to the evaluation and continue","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":707110,"byte_end":707180,"line_start":1586,"line_end":1586,"column_start":5,"column_end":75}},{"value":"/ evaluating opcodes until the evaluation is completed, reaches an error,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":707185,"byte_end":707260,"line_start":1587,"line_end":1587,"column_start":5,"column_end":80}},{"value":"/ or needs more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":707265,"byte_end":707301,"line_start":1588,"line_end":1588,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":707306,"byte_end":707309,"line_start":1589,"line_end":1589,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":707314,"byte_end":707326,"line_start":1590,"line_end":1590,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresFrameBase`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":707331,"byte_end":707430,"line_start":1591,"line_end":1591,"column_start":5,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708398,"byte_end":708413,"line_start":1613,"line_end":1613,"column_start":12,"column_end":27},"name":"resume_with_tls","qualname":"<Evaluation<R>>::resume_with_tls","value":"pub fn resume_with_tls(&mut Self, u64) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `value`.  This will apply\n the provided TLS value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `value`.  This will apply","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708009,"byte_end":708080,"line_start":1606,"line_end":1606,"column_start":5,"column_end":76}},{"value":"/ the provided TLS value to the evaluation and continue evaluating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708085,"byte_end":708153,"line_start":1607,"line_end":1607,"column_start":5,"column_end":73}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708158,"byte_end":708231,"line_start":1608,"line_end":1608,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708236,"byte_end":708263,"line_start":1609,"line_end":1609,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708268,"byte_end":708271,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708276,"byte_end":708288,"line_start":1611,"line_end":1611,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresTls`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708293,"byte_end":708386,"line_start":1612,"line_end":1612,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":709286,"byte_end":709312,"line_start":1634,"line_end":1634,"column_start":12,"column_end":38},"name":"resume_with_call_frame_cfa","qualname":"<Evaluation<R>>::resume_with_call_frame_cfa","value":"pub fn resume_with_call_frame_cfa(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `cfa`.  This will\n apply the provided CFA value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `cfa`.  This will","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708890,"byte_end":708953,"line_start":1627,"line_end":1627,"column_start":5,"column_end":68}},{"value":"/ apply the provided CFA value to the evaluation and continue evaluating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":708958,"byte_end":709032,"line_start":1628,"line_end":1628,"column_start":5,"column_end":79}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":709037,"byte_end":709110,"line_start":1629,"line_end":1629,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":709115,"byte_end":709142,"line_start":1630,"line_end":1630,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":709147,"byte_end":709150,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":709155,"byte_end":709167,"line_start":1632,"line_end":1632,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresCallFrameCfa`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":709172,"byte_end":709274,"line_start":1633,"line_end":1633,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":710190,"byte_end":710213,"line_start":1655,"line_end":1655,"column_start":12,"column_end":35},"name":"resume_with_at_location","qualname":"<Evaluation<R>>::resume_with_at_location","value":"pub fn resume_with_at_location(&mut Self, R) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `bytes`.  This will\n continue processing the evaluation with the new expression provided\n until the evaluation is completed, reaches an error, or needs more\n information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `bytes`.  This will","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":709805,"byte_end":709870,"line_start":1648,"line_end":1648,"column_start":5,"column_end":70}},{"value":"/ continue processing the evaluation with the new expression provided","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":709875,"byte_end":709946,"line_start":1649,"line_end":1649,"column_start":5,"column_end":76}},{"value":"/ until the evaluation is completed, reaches an error, or needs more","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":709951,"byte_end":710021,"line_start":1650,"line_end":1650,"column_start":5,"column_end":75}},{"value":"/ information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":710026,"byte_end":710048,"line_start":1651,"line_end":1651,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":710053,"byte_end":710056,"line_start":1652,"line_end":1652,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":710061,"byte_end":710073,"line_start":1653,"line_end":1653,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresAtLocation`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":710078,"byte_end":710178,"line_start":1654,"line_end":1654,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":711352,"byte_end":711375,"line_start":1681,"line_end":1681,"column_start":12,"column_end":35},"name":"resume_with_entry_value","qualname":"<Evaluation<R>>::resume_with_entry_value","value":"pub fn resume_with_entry_value(&mut Self, Value)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `entry_value`.  This will\n apply the provided entry value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `entry_value`.  This will","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":710948,"byte_end":711019,"line_start":1674,"line_end":1674,"column_start":5,"column_end":76}},{"value":"/ apply the provided entry value to the evaluation and continue evaluating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":711024,"byte_end":711100,"line_start":1675,"line_end":1675,"column_start":5,"column_end":81}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":711105,"byte_end":711178,"line_start":1676,"line_end":1676,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":711183,"byte_end":711210,"line_start":1677,"line_end":1677,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":711215,"byte_end":711218,"line_start":1678,"line_end":1678,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":711223,"byte_end":711235,"line_start":1679,"line_end":1679,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresEntryValue`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":711240,"byte_end":711340,"line_start":1680,"line_end":1680,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":712286,"byte_end":712311,"line_start":1702,"line_end":1702,"column_start":12,"column_end":37},"name":"resume_with_parameter_ref","qualname":"<Evaluation<R>>::resume_with_parameter_ref","value":"pub fn resume_with_parameter_ref(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `parameter_value`.  This will\n apply the provided parameter value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `parameter_value`.  This will","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":711872,"byte_end":711947,"line_start":1695,"line_end":1695,"column_start":5,"column_end":80}},{"value":"/ apply the provided parameter value to the evaluation and continue evaluating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":711952,"byte_end":712032,"line_start":1696,"line_end":1696,"column_start":5,"column_end":85}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":712037,"byte_end":712110,"line_start":1697,"line_end":1697,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":712115,"byte_end":712142,"line_start":1698,"line_end":1698,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":712147,"byte_end":712150,"line_start":1699,"line_end":1699,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":712155,"byte_end":712167,"line_start":1700,"line_end":1700,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresParameterRef`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":712172,"byte_end":712274,"line_start":1701,"line_end":1701,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":713305,"byte_end":713334,"line_start":1727,"line_end":1727,"column_start":12,"column_end":41},"name":"resume_with_relocated_address","qualname":"<Evaluation<R>>::resume_with_relocated_address","value":"pub fn resume_with_relocated_address(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided relocated `address`.  This will use the\n provided relocated address for the operation that required it, and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided relocated `address`.  This will use the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":712859,"byte_end":712944,"line_start":1719,"line_end":1719,"column_start":5,"column_end":90}},{"value":"/ provided relocated address for the operation that required it, and continue evaluating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":712949,"byte_end":713039,"line_start":1720,"line_end":1720,"column_start":5,"column_end":95}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":713044,"byte_end":713117,"line_start":1721,"line_end":1721,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":713122,"byte_end":713149,"line_start":1722,"line_end":1722,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":713154,"byte_end":713157,"line_start":1723,"line_end":1723,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":713162,"byte_end":713174,"line_start":1724,"line_end":1724,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":713179,"byte_end":713239,"line_start":1725,"line_end":1725,"column_start":5,"column_end":65}},{"value":"/ `EvaluationResult::RequiresRelocatedAddress`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":713244,"byte_end":713293,"line_start":1726,"line_end":1726,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":714295,"byte_end":714322,"line_start":1749,"line_end":1749,"column_start":12,"column_end":39},"name":"resume_with_indexed_address","qualname":"<Evaluation<R>>::resume_with_indexed_address","value":"pub fn resume_with_indexed_address(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided indexed `address`.  This will use the\n provided indexed address for the operation that required it, and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided indexed `address`.  This will use the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":713855,"byte_end":713938,"line_start":1741,"line_end":1741,"column_start":5,"column_end":88}},{"value":"/ provided indexed address for the operation that required it, and continue evaluating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":713943,"byte_end":714031,"line_start":1742,"line_end":1742,"column_start":5,"column_end":93}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":714036,"byte_end":714109,"line_start":1743,"line_end":1743,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":714114,"byte_end":714141,"line_start":1744,"line_end":1744,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":714146,"byte_end":714149,"line_start":1745,"line_end":1745,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":714154,"byte_end":714166,"line_start":1746,"line_end":1746,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":714171,"byte_end":714231,"line_start":1747,"line_end":1747,"column_start":5,"column_end":65}},{"value":"/ `EvaluationResult::RequiresIndexedAddress`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":714236,"byte_end":714283,"line_start":1748,"line_end":1748,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":715251,"byte_end":715272,"line_start":1770,"line_end":1770,"column_start":12,"column_end":33},"name":"resume_with_base_type","qualname":"<Evaluation<R>>::resume_with_base_type","value":"pub fn resume_with_base_type(&mut Self, ValueType)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `base_type`.  This will use the\n provided base type for the operation that required it, and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `base_type`.  This will use the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":714837,"byte_end":714914,"line_start":1763,"line_end":1763,"column_start":5,"column_end":82}},{"value":"/ provided base type for the operation that required it, and continue evaluating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":714919,"byte_end":715001,"line_start":1764,"line_end":1764,"column_start":5,"column_end":87}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":715006,"byte_end":715079,"line_start":1765,"line_end":1765,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":715084,"byte_end":715111,"line_start":1766,"line_end":1766,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":715116,"byte_end":715119,"line_start":1767,"line_end":1767,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":715124,"byte_end":715136,"line_start":1768,"line_end":1768,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresBaseType`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":715141,"byte_end":715239,"line_start":1769,"line_end":1769,"column_start":5,"column_end":103}}]},{"kind":"Struct","id":{"krate":0,"index":6574},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787041,"byte_end":787054,"line_start":8,"line_end":8,"column_start":12,"column_end":25},"name":"PubNamesEntry","qualname":"::read::pubnames::PubNamesEntry","value":"PubNamesEntry {  }","parent":null,"children":[{"krate":0,"index":6576},{"krate":0,"index":6577},{"krate":0,"index":6578}],"decl_id":null,"docs":" A single parsed pubname.\n","sig":null,"attributes":[{"value":"/ A single parsed pubname.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":786977,"byte_end":787005,"line_start":6,"line_end":6,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787268,"byte_end":787272,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"name","qualname":"<PubNamesEntry<R>>::name","value":"pub fn name(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the name this entry refers to.\n","sig":null,"attributes":[{"value":"/ Returns the name this entry refers to.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787214,"byte_end":787256,"line_start":15,"line_end":15,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1440},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787454,"byte_end":787472,"line_start":22,"line_end":22,"column_start":12,"column_end":30},"name":"unit_header_offset","qualname":"<PubNamesEntry<R>>::unit_header_offset","value":"pub fn unit_header_offset(&Self) -> DebugInfoOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the .debug_info section for the header of the compilation unit\n which contains this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the .debug_info section for the header of the compilation unit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787318,"byte_end":787408,"line_start":20,"line_end":20,"column_start":5,"column_end":95}},{"value":"/ which contains this name.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787413,"byte_end":787442,"line_start":21,"line_end":21,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787680,"byte_end":787690,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"die_offset","qualname":"<PubNamesEntry<R>>::die_offset","value":"pub fn die_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the compilation unit for the debugging information entry which\n has this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the compilation unit for the debugging information entry which","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787555,"byte_end":787645,"line_start":26,"line_end":26,"column_start":5,"column_end":95}},{"value":"/ has this name.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787650,"byte_end":787668,"line_start":27,"line_end":27,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6585},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788231,"byte_end":788244,"line_start":50,"line_end":50,"column_start":12,"column_end":25},"name":"DebugPubNames","qualname":"::read::pubnames::DebugPubNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `DebugPubNames` struct represents the DWARF public names information\n found in the `.debug_pubnames` section.\n","sig":null,"attributes":[{"value":"/ The `DebugPubNames` struct represents the DWARF public names information","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788075,"byte_end":788151,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ found in the `.debug_pubnames` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788152,"byte_end":788195,"line_start":48,"line_end":48,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789022,"byte_end":789025,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugPubNames<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugPubNames` instance from the data in the `.debug_pubnames`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugPubNames` instance from the data in the `.debug_pubnames`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788410,"byte_end":788493,"line_start":56,"line_end":56,"column_start":5,"column_end":88}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788498,"byte_end":788510,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788515,"byte_end":788518,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_pubnames` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788523,"byte_end":788602,"line_start":59,"line_end":59,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788607,"byte_end":788677,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788682,"byte_end":788721,"line_start":61,"line_end":61,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788726,"byte_end":788729,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788734,"byte_end":788741,"line_start":63,"line_end":63,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubNames, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788746,"byte_end":788791,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788796,"byte_end":788799,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788804,"byte_end":788823,"line_start":66,"line_end":66,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubnames_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788828,"byte_end":788884,"line_start":67,"line_end":67,"column_start":5,"column_end":61}},{"value":"/ let debug_pubnames =","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788889,"byte_end":788913,"line_start":68,"line_end":68,"column_start":5,"column_end":29}},{"value":"/     DebugPubNames::new(read_debug_pubnames_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788918,"byte_end":788998,"line_start":69,"line_end":69,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789003,"byte_end":789010,"line_start":70,"line_end":70,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789776,"byte_end":789781,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"items","qualname":"<DebugPubNames<R>>::items","value":"pub fn items(&Self) -> PubNamesEntryIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the pubnames in the `.debug_pubnames` section.","sig":null,"attributes":[{"value":"/ Iterate the pubnames in the `.debug_pubnames` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789207,"byte_end":789265,"line_start":77,"line_end":77,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789270,"byte_end":789273,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789278,"byte_end":789285,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubNames, EndianSlice, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789290,"byte_end":789348,"line_start":80,"line_end":80,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789353,"byte_end":789356,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789361,"byte_end":789380,"line_start":82,"line_end":82,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubnames_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789385,"byte_end":789441,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/ let debug_pubnames =","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789446,"byte_end":789470,"line_start":84,"line_end":84,"column_start":5,"column_end":29}},{"value":"/     DebugPubNames::new(read_debug_pubnames_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789475,"byte_end":789555,"line_start":85,"line_end":85,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789560,"byte_end":789563,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_pubnames.items();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789568,"byte_end":789610,"line_start":87,"line_end":87,"column_start":5,"column_end":47}},{"value":"/ while let Some(pubname) = iter.next().unwrap() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789615,"byte_end":789667,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/   println!(\"pubname {} found!\", pubname.name().to_string_lossy());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789672,"byte_end":789742,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789747,"byte_end":789752,"line_start":90,"line_end":90,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789757,"byte_end":789764,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6595},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790411,"byte_end":790428,"line_start":118,"line_end":118,"column_start":12,"column_end":29},"name":"PubNamesEntryIter","qualname":"::read::pubnames::PubNamesEntryIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the pubnames from a `.debug_pubnames` section.","sig":null,"attributes":[{"value":"/ An iterator over the pubnames from a `.debug_pubnames` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790215,"byte_end":790282,"line_start":113,"line_end":113,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790283,"byte_end":790286,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790287,"byte_end":790308,"line_start":115,"line_end":115,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790309,"byte_end":790375,"line_start":116,"line_end":116,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790949,"byte_end":790953,"line_start":128,"line_end":128,"column_start":12,"column_end":16},"name":"next","qualname":"<PubNamesEntryIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<PubNamesEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next pubname.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next pubname.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790542,"byte_end":790595,"line_start":121,"line_end":121,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790600,"byte_end":790603,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed pubname as `Ok(Some(pubname))`. Returns","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790608,"byte_end":790676,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` when iteration is complete and all pubnames have already been","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790681,"byte_end":790757,"line_start":124,"line_end":124,"column_start":5,"column_end":81}},{"value":"/ parsed and yielded. If an error occurs while parsing the next pubname,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790762,"byte_end":790836,"line_start":125,"line_end":125,"column_start":5,"column_end":79}},{"value":"/ then this error is returned as `Err(e)`, and all subsequent calls return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790841,"byte_end":790917,"line_start":126,"line_end":126,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790922,"byte_end":790937,"line_start":127,"line_end":127,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6605},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":791642,"byte_end":791655,"line_start":8,"line_end":8,"column_start":12,"column_end":25},"name":"PubTypesEntry","qualname":"::read::pubtypes::PubTypesEntry","value":"PubTypesEntry {  }","parent":null,"children":[{"krate":0,"index":6607},{"krate":0,"index":6608},{"krate":0,"index":6609}],"decl_id":null,"docs":" A single parsed pubtype.\n","sig":null,"attributes":[{"value":"/ A single parsed pubtype.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":791578,"byte_end":791606,"line_start":6,"line_end":6,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":791881,"byte_end":791885,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"name","qualname":"<PubTypesEntry<R>>::name","value":"pub fn name(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the type this entry refers to.\n","sig":null,"attributes":[{"value":"/ Returns the name of the type this entry refers to.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":791815,"byte_end":791869,"line_start":15,"line_end":15,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792081,"byte_end":792099,"line_start":22,"line_end":22,"column_start":12,"column_end":30},"name":"unit_header_offset","qualname":"<PubTypesEntry<R>>::unit_header_offset","value":"pub fn unit_header_offset(&Self) -> DebugInfoOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the .debug_info section for the header of the compilation unit\n which contains the type with this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the .debug_info section for the header of the compilation unit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":791931,"byte_end":792021,"line_start":20,"line_end":20,"column_start":5,"column_end":95}},{"value":"/ which contains the type with this name.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792026,"byte_end":792069,"line_start":21,"line_end":21,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792317,"byte_end":792327,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"die_offset","qualname":"<PubTypesEntry<R>>::die_offset","value":"pub fn die_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the compilation unit for the debugging information entry which\n the type with this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the compilation unit for the debugging information entry which","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792182,"byte_end":792272,"line_start":26,"line_end":26,"column_start":5,"column_end":95}},{"value":"/ the type with this name.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792277,"byte_end":792305,"line_start":27,"line_end":27,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":6616},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792864,"byte_end":792877,"line_start":50,"line_end":50,"column_start":12,"column_end":25},"name":"DebugPubTypes","qualname":"::read::pubtypes::DebugPubTypes","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `DebugPubTypes` struct represents the DWARF public types information\n found in the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `DebugPubTypes` struct represents the DWARF public types information","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792712,"byte_end":792788,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ found in the `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792789,"byte_end":792828,"line_start":48,"line_end":48,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793639,"byte_end":793642,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugPubTypes<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugPubTypes` instance from the data in the `.debug_pubtypes`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugPubTypes` instance from the data in the `.debug_pubtypes`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793043,"byte_end":793126,"line_start":56,"line_end":56,"column_start":5,"column_end":88}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793131,"byte_end":793143,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793148,"byte_end":793151,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_pubtypes` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793156,"byte_end":793235,"line_start":59,"line_end":59,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793240,"byte_end":793310,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793315,"byte_end":793354,"line_start":61,"line_end":61,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793359,"byte_end":793362,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793367,"byte_end":793374,"line_start":63,"line_end":63,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubTypes, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793379,"byte_end":793424,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793429,"byte_end":793432,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793437,"byte_end":793456,"line_start":66,"line_end":66,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubtypes_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793461,"byte_end":793509,"line_start":67,"line_end":67,"column_start":5,"column_end":53}},{"value":"/ let debug_pubtypes =","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793514,"byte_end":793538,"line_start":68,"line_end":68,"column_start":5,"column_end":29}},{"value":"/     DebugPubTypes::new(read_debug_pubtypes_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793543,"byte_end":793615,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793620,"byte_end":793627,"line_start":70,"line_end":70,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794393,"byte_end":794398,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"items","qualname":"<DebugPubTypes<R>>::items","value":"pub fn items(&Self) -> PubTypesEntryIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the pubtypes in the `.debug_pubtypes` section.","sig":null,"attributes":[{"value":"/ Iterate the pubtypes in the `.debug_pubtypes` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793824,"byte_end":793882,"line_start":77,"line_end":77,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793887,"byte_end":793890,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793895,"byte_end":793902,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubTypes, EndianSlice, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793907,"byte_end":793965,"line_start":80,"line_end":80,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793970,"byte_end":793973,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793978,"byte_end":793997,"line_start":82,"line_end":82,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubtypes_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794002,"byte_end":794058,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/ let debug_pubtypes =","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794063,"byte_end":794087,"line_start":84,"line_end":84,"column_start":5,"column_end":29}},{"value":"/     DebugPubTypes::new(read_debug_pubtypes_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794092,"byte_end":794172,"line_start":85,"line_end":85,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794177,"byte_end":794180,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_pubtypes.items();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794185,"byte_end":794227,"line_start":87,"line_end":87,"column_start":5,"column_end":47}},{"value":"/ while let Some(pubtype) = iter.next().unwrap() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794232,"byte_end":794284,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/   println!(\"pubtype {} found!\", pubtype.name().to_string_lossy());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794289,"byte_end":794359,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794364,"byte_end":794369,"line_start":90,"line_end":90,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794374,"byte_end":794381,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6626},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795028,"byte_end":795045,"line_start":118,"line_end":118,"column_start":12,"column_end":29},"name":"PubTypesEntryIter","qualname":"::read::pubtypes::PubTypesEntryIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the pubtypes from a `.debug_pubtypes` section.","sig":null,"attributes":[{"value":"/ An iterator over the pubtypes from a `.debug_pubtypes` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794832,"byte_end":794899,"line_start":113,"line_end":113,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794900,"byte_end":794903,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794904,"byte_end":794925,"line_start":115,"line_end":115,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794926,"byte_end":794992,"line_start":116,"line_end":116,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795566,"byte_end":795570,"line_start":128,"line_end":128,"column_start":12,"column_end":16},"name":"next","qualname":"<PubTypesEntryIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<PubTypesEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next pubtype.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next pubtype.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795159,"byte_end":795212,"line_start":121,"line_end":121,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795217,"byte_end":795220,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed pubtype as `Ok(Some(pubtype))`. Returns","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795225,"byte_end":795293,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` when iteration is complete and all pubtypes have already been","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795298,"byte_end":795374,"line_start":124,"line_end":124,"column_start":5,"column_end":81}},{"value":"/ parsed and yielded. If an error occurs while parsing the next pubtype,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795379,"byte_end":795453,"line_start":125,"line_end":125,"column_start":5,"column_end":79}},{"value":"/ then this error is returned as `Err(e)`, and all subsequent calls return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795458,"byte_end":795534,"line_start":126,"line_end":126,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795539,"byte_end":795554,"line_start":127,"line_end":127,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":6636},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796406,"byte_end":796417,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"DebugRanges","qualname":"::read::rnglists::DebugRanges","value":"DebugRanges {  }","parent":null,"children":[{"krate":0,"index":6638}],"decl_id":null,"docs":" The raw contents of the `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_ranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796303,"byte_end":796355,"line_start":12,"line_end":12,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797156,"byte_end":797159,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugRanges<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugRanges` instance from the data in the `.debug_ranges`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugRanges` instance from the data in the `.debug_ranges`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796550,"byte_end":796629,"line_start":22,"line_end":22,"column_start":5,"column_end":84}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796634,"byte_end":796646,"line_start":23,"line_end":23,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796651,"byte_end":796654,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_ranges` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796659,"byte_end":796736,"line_start":25,"line_end":25,"column_start":5,"column_end":82}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796741,"byte_end":796811,"line_start":26,"line_end":26,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796816,"byte_end":796855,"line_start":27,"line_end":27,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796860,"byte_end":796863,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796868,"byte_end":796875,"line_start":29,"line_end":29,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugRanges, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796880,"byte_end":796923,"line_start":30,"line_end":30,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796928,"byte_end":796931,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796936,"byte_end":796977,"line_start":32,"line_end":32,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_ranges_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796982,"byte_end":797036,"line_start":33,"line_end":33,"column_start":5,"column_end":59}},{"value":"/ let debug_ranges = DebugRanges::new(read_debug_ranges_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797041,"byte_end":797132,"line_start":34,"line_end":34,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797137,"byte_end":797144,"line_start":35,"line_end":35,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6650},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797692,"byte_end":797705,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"DebugRngLists","qualname":"::read::rnglists::DebugRngLists","value":"DebugRngLists {  }","parent":null,"children":[{"krate":0,"index":6652}],"decl_id":null,"docs":" The `DebugRngLists` struct represents the contents of the\n `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ The `DebugRngLists` struct represents the contents of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797549,"byte_end":797610,"line_start":57,"line_end":57,"column_start":1,"column_end":62}},{"value":"/ `.debug_rnglists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797611,"byte_end":797641,"line_start":58,"line_end":58,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798463,"byte_end":798466,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugRngLists<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugRngLists` instance from the data in the\n `.debug_rnglists` section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugRngLists` instance from the data in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797829,"byte_end":797894,"line_start":68,"line_end":68,"column_start":5,"column_end":70}},{"value":"/ `.debug_rnglists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797899,"byte_end":797929,"line_start":69,"line_end":69,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797934,"byte_end":797937,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_rnglists`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797942,"byte_end":798009,"line_start":71,"line_end":71,"column_start":5,"column_end":72}},{"value":"/ section and present it as a `&[u8]` slice. That means using some ELF","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798014,"byte_end":798086,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/ loader on Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798091,"byte_end":798140,"line_start":73,"line_end":73,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798145,"byte_end":798148,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798153,"byte_end":798160,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugRngLists, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798165,"byte_end":798210,"line_start":76,"line_end":76,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798215,"byte_end":798218,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798223,"byte_end":798264,"line_start":78,"line_end":78,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_rnglists_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798269,"byte_end":798325,"line_start":79,"line_end":79,"column_start":5,"column_end":61}},{"value":"/ let debug_rnglists =","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798330,"byte_end":798354,"line_start":80,"line_end":80,"column_start":5,"column_end":29}},{"value":"/     DebugRngLists::new(read_debug_rnglists_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798359,"byte_end":798439,"line_start":81,"line_end":81,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798444,"byte_end":798451,"line_start":82,"line_end":82,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":799150,"byte_end":799179,"line_start":113,"line_end":113,"column_start":12,"column_end":41},"name":"default_for_encoding_and_file","qualname":"<DebugRngListsBase<Offset>>::default_for_encoding_and_file","value":"pub fn default_for_encoding_and_file(Encoding, DwarfFileType)\n-> DebugRngListsBase<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DebugRngListsBase` with the default value of DW_AT_rnglists_base\n for the given `Encoding` and `DwarfFileType`.\n","sig":null,"attributes":[{"value":"/ Returns a `DebugRngListsBase` with the default value of DW_AT_rnglists_base","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":799005,"byte_end":799084,"line_start":111,"line_end":111,"column_start":5,"column_end":84}},{"value":"/ for the given `Encoding` and `DwarfFileType`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":799089,"byte_end":799138,"line_start":112,"line_end":112,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6664},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":799897,"byte_end":799907,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"RangeLists","qualname":"::read::rnglists::RangeLists","value":"RangeLists {  }","parent":null,"children":[{"krate":0,"index":6666},{"krate":0,"index":6667}],"decl_id":null,"docs":" The DWARF data found in `.debug_ranges` and `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ The DWARF data found in `.debug_ranges` and `.debug_rnglists` sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":799771,"byte_end":799846,"line_start":128,"line_end":128,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1555},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800146,"byte_end":800149,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"new","qualname":"<RangeLists<R>>::new","value":"pub fn new(DebugRanges<R>, DebugRngLists<R>) -> RangeLists<R>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `RangeLists` instance from the data in the `.debug_ranges` and\n `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ Construct a new `RangeLists` instance from the data in the `.debug_ranges` and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800016,"byte_end":800098,"line_start":136,"line_end":136,"column_start":5,"column_end":87}},{"value":"/ `.debug_rnglists` sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800103,"byte_end":800134,"line_start":137,"line_end":137,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800979,"byte_end":800985,"line_start":162,"line_end":162,"column_start":12,"column_end":18},"name":"borrow","qualname":"<RangeLists<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> RangeLists<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `RangeLists` that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `RangeLists` that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800355,"byte_end":800416,"line_start":147,"line_end":147,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800421,"byte_end":800424,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800429,"byte_end":800494,"line_start":149,"line_end":149,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800499,"byte_end":800502,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800507,"byte_end":800527,"line_start":151,"line_end":151,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800532,"byte_end":800535,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800540,"byte_end":800558,"line_start":153,"line_end":153,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800563,"byte_end":800608,"line_start":154,"line_end":154,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800613,"byte_end":800697,"line_start":155,"line_end":155,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::RangeLists<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800702,"byte_end":800769,"line_start":156,"line_end":156,"column_start":5,"column_end":72}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800774,"byte_end":800821,"line_start":157,"line_end":157,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800826,"byte_end":800876,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800881,"byte_end":800943,"line_start":159,"line_end":159,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800948,"byte_end":800955,"line_start":160,"line_end":160,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800960,"byte_end":800967,"line_start":161,"line_end":161,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801805,"byte_end":801811,"line_start":184,"line_end":184,"column_start":12,"column_end":18},"name":"ranges","qualname":"<RangeLists<R>>::ranges","value":"pub fn ranges(&Self, RangeListsOffset<R::Offset>, Encoding, u64,\n              &DebugAddr<R>, DebugAddrBase<R::Offset>)\n-> Result<RngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `Range` list entries starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the `Range` list entries starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801302,"byte_end":801373,"line_start":174,"line_end":174,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801378,"byte_end":801381,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The `unit_version` and `address_size` must match the compilation unit that the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801386,"byte_end":801468,"line_start":176,"line_end":176,"column_start":5,"column_end":87}},{"value":"/ offset was contained in.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801473,"byte_end":801501,"line_start":177,"line_end":177,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801506,"byte_end":801509,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ The `base_address` should be obtained from the `DW_AT_low_pc` attribute in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801514,"byte_end":801596,"line_start":179,"line_end":179,"column_start":5,"column_end":87}},{"value":"/ `DW_TAG_compile_unit` entry for the compilation unit that contains this range list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801601,"byte_end":801688,"line_start":180,"line_end":180,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801693,"byte_end":801696,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801701,"byte_end":801722,"line_start":182,"line_end":182,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801727,"byte_end":801793,"line_start":183,"line_end":183,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1565},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802667,"byte_end":802677,"line_start":210,"line_end":210,"column_start":12,"column_end":22},"name":"raw_ranges","qualname":"<RangeLists<R>>::raw_ranges","value":"pub fn raw_ranges(&Self, RangeListsOffset<R::Offset>, Encoding)\n-> Result<RawRngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `RawRngListEntry`ies starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the `RawRngListEntry`ies starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802244,"byte_end":802315,"line_start":200,"line_end":200,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802320,"byte_end":802323,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802328,"byte_end":802392,"line_start":202,"line_end":202,"column_start":5,"column_end":69}},{"value":"/ offset was contained in.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802397,"byte_end":802425,"line_start":203,"line_end":203,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802430,"byte_end":802433,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This iterator does not perform any processing of the range entries,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802438,"byte_end":802509,"line_start":205,"line_end":205,"column_start":5,"column_end":76}},{"value":"/ such as handling base addresses.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802514,"byte_end":802550,"line_start":206,"line_end":206,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802555,"byte_end":802558,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802563,"byte_end":802584,"line_start":208,"line_end":208,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":802589,"byte_end":802655,"line_start":209,"line_end":209,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803599,"byte_end":803609,"line_start":233,"line_end":233,"column_start":12,"column_end":22},"name":"get_offset","qualname":"<RangeLists<R>>::get_offset","value":"pub fn get_offset(&Self, Encoding, DebugRngListsBase<R::Offset>,\n                  DebugRngListsIndex<R::Offset>)\n-> Result<RangeListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `.debug_rnglists` offset at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the `.debug_rnglists` offset at the given `base` and `index`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803152,"byte_end":803225,"line_start":224,"line_end":224,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803230,"byte_end":803233,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_rnglists_base` value from the compilation unit DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803238,"byte_end":803323,"line_start":226,"line_end":226,"column_start":5,"column_end":90}},{"value":"/ This is an offset that points to the first entry following the header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803328,"byte_end":803402,"line_start":227,"line_end":227,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803407,"byte_end":803410,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_rnglistx` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803415,"byte_end":803478,"line_start":229,"line_end":229,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803483,"byte_end":803486,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803491,"byte_end":803555,"line_start":231,"line_end":231,"column_start":5,"column_end":69}},{"value":"/ index was contained in.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":803560,"byte_end":803587,"line_start":232,"line_end":232,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":804250,"byte_end":804266,"line_start":251,"line_end":251,"column_start":12,"column_end":28},"name":"lookup_offset_id","qualname":"<RangeLists<R>>::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(SectionId, R::Offset)>","parent":null,"children":[],"decl_id":null,"docs":" Call `Reader::lookup_offset_id` for each section, and return the first match.\n","sig":null,"attributes":[{"value":"/ Call `Reader::lookup_offset_id` for each section, and return the first match.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":804157,"byte_end":804238,"line_start":250,"line_end":250,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":6695},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":804862,"byte_end":804876,"line_start":271,"line_end":271,"column_start":12,"column_end":26},"name":"RawRngListIter","qualname":"::read::rnglists::RawRngListIter","value":"RawRngListIter {  }","parent":null,"children":[{"krate":0,"index":6697},{"krate":0,"index":6698},{"krate":0,"index":6699}],"decl_id":null,"docs":" A raw iterator over an address range list.","sig":null,"attributes":[{"value":"/ A raw iterator over an address range list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":804674,"byte_end":804720,"line_start":266,"line_end":266,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":804721,"byte_end":804724,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This iterator does not perform any processing of the range entries,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":804725,"byte_end":804796,"line_start":268,"line_end":268,"column_start":1,"column_end":72}},{"value":"/ such as handling base addresses.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":804797,"byte_end":804833,"line_start":269,"line_end":269,"column_start":1,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":6705},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805095,"byte_end":805114,"line_start":281,"line_end":281,"column_start":5,"column_end":24},"name":"AddressOrOffsetPair","qualname":"::read::rnglists::RawRngListEntry::AddressOrOffsetPair","value":"RawRngListEntry::AddressOrOffsetPair { begin, end }","parent":{"krate":0,"index":6703},"children":[],"decl_id":null,"docs":" A range from DWARF version <= 4.\n","sig":null,"attributes":[{"value":"/ A range from DWARF version <= 4.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805054,"byte_end":805090,"line_start":280,"line_end":280,"column_start":5,"column_end":41}}]},{"kind":"StructVariant","id":{"krate":0,"index":6708},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805312,"byte_end":805323,"line_start":288,"line_end":288,"column_start":5,"column_end":16},"name":"BaseAddress","qualname":"::read::rnglists::RawRngListEntry::BaseAddress","value":"RawRngListEntry::BaseAddress { addr }","parent":{"krate":0,"index":6703},"children":[],"decl_id":null,"docs":" DW_RLE_base_address\n","sig":null,"attributes":[{"value":"/ DW_RLE_base_address","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805284,"byte_end":805307,"line_start":287,"line_end":287,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":6710},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805410,"byte_end":805422,"line_start":293,"line_end":293,"column_start":5,"column_end":17},"name":"BaseAddressx","qualname":"::read::rnglists::RawRngListEntry::BaseAddressx","value":"RawRngListEntry::BaseAddressx { addr }","parent":{"krate":0,"index":6703},"children":[],"decl_id":null,"docs":" DW_RLE_base_addressx\n","sig":null,"attributes":[{"value":"/ DW_RLE_base_addressx","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805381,"byte_end":805405,"line_start":292,"line_end":292,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":6712},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805521,"byte_end":805531,"line_start":298,"line_end":298,"column_start":5,"column_end":15},"name":"StartxEndx","qualname":"::read::rnglists::RawRngListEntry::StartxEndx","value":"RawRngListEntry::StartxEndx { begin, end }","parent":{"krate":0,"index":6703},"children":[],"decl_id":null,"docs":" DW_RLE_startx_endx\n","sig":null,"attributes":[{"value":"/ DW_RLE_startx_endx","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805494,"byte_end":805516,"line_start":297,"line_end":297,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":6715},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805692,"byte_end":805704,"line_start":305,"line_end":305,"column_start":5,"column_end":17},"name":"StartxLength","qualname":"::read::rnglists::RawRngListEntry::StartxLength","value":"RawRngListEntry::StartxLength { begin, length }","parent":{"krate":0,"index":6703},"children":[],"decl_id":null,"docs":" DW_RLE_startx_length\n","sig":null,"attributes":[{"value":"/ DW_RLE_startx_length","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805663,"byte_end":805687,"line_start":304,"line_end":304,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":6718},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805855,"byte_end":805865,"line_start":312,"line_end":312,"column_start":5,"column_end":15},"name":"OffsetPair","qualname":"::read::rnglists::RawRngListEntry::OffsetPair","value":"RawRngListEntry::OffsetPair { begin, end }","parent":{"krate":0,"index":6703},"children":[],"decl_id":null,"docs":" DW_RLE_offset_pair\n","sig":null,"attributes":[{"value":"/ DW_RLE_offset_pair","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805828,"byte_end":805850,"line_start":311,"line_end":311,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":6721},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805994,"byte_end":806002,"line_start":319,"line_end":319,"column_start":5,"column_end":13},"name":"StartEnd","qualname":"::read::rnglists::RawRngListEntry::StartEnd","value":"RawRngListEntry::StartEnd { begin, end }","parent":{"krate":0,"index":6703},"children":[],"decl_id":null,"docs":" DW_RLE_start_end\n","sig":null,"attributes":[{"value":"/ DW_RLE_start_end","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805969,"byte_end":805989,"line_start":318,"line_end":318,"column_start":5,"column_end":25}}]},{"kind":"StructVariant","id":{"krate":0,"index":6724},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":806134,"byte_end":806145,"line_start":326,"line_end":326,"column_start":5,"column_end":16},"name":"StartLength","qualname":"::read::rnglists::RawRngListEntry::StartLength","value":"RawRngListEntry::StartLength { begin, length }","parent":{"krate":0,"index":6703},"children":[],"decl_id":null,"docs":" DW_RLE_start_length\n","sig":null,"attributes":[{"value":"/ DW_RLE_start_length","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":806106,"byte_end":806129,"line_start":325,"line_end":325,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":6703},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":805029,"byte_end":805044,"line_start":279,"line_end":279,"column_start":10,"column_end":25},"name":"RawRngListEntry","qualname":"::read::rnglists::RawRngListEntry","value":"pub enum RawRngListEntry<T> {\n\n    /// A range from DWARF version <= 4.\n    AddressOrOffsetPair {\n        /// Start of range. May be an address or an offset.\n        begin: u64,\n        /// End of range. May be an address or an offset.\n        end: u64,\n    },\n\n    /// DW_RLE_base_address\n    BaseAddress {\n        /// base address\n        addr: u64,\n    },\n\n    /// DW_RLE_base_addressx\n    BaseAddressx {\n        /// base address\n        addr: DebugAddrIndex<T>,\n    },\n\n    /// DW_RLE_startx_endx\n    StartxEndx {\n        /// start of range\n        begin: DebugAddrIndex<T>,\n        /// end of range\n        end: DebugAddrIndex<T>,\n    },\n\n    /// DW_RLE_startx_length\n    StartxLength {\n        /// start of range\n        begin: DebugAddrIndex<T>,\n        /// length of range\n        length: u64,\n    },\n\n    /// DW_RLE_offset_pair\n    OffsetPair {\n        /// start of range\n        begin: u64,\n        /// end of range\n        end: u64,\n    },\n\n    /// DW_RLE_start_end\n    StartEnd {\n        /// start of range\n        begin: u64,\n        /// end of range\n        end: u64,\n    },\n\n    /// DW_RLE_start_length\n    StartLength {\n        /// start of range\n        begin: u64,\n        /// length of range\n        length: u64,\n    },\n}","parent":null,"children":[{"krate":0,"index":6705},{"krate":0,"index":6708},{"krate":0,"index":6710},{"krate":0,"index":6712},{"krate":0,"index":6715},{"krate":0,"index":6718},{"krate":0,"index":6721},{"krate":0,"index":6724}],"decl_id":null,"docs":" A raw entry in .debug_rnglists\n","sig":null,"attributes":[{"value":"/ A raw entry in .debug_rnglists","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":804961,"byte_end":804995,"line_start":277,"line_end":277,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":809288,"byte_end":809292,"line_start":402,"line_end":402,"column_start":12,"column_end":16},"name":"next","qualname":"<RawRngListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<RawRngListEntry<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next range.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":809233,"byte_end":809276,"line_start":401,"line_end":401,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6733},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":810372,"byte_end":810383,"line_start":438,"line_end":438,"column_start":12,"column_end":23},"name":"RngListIter","qualname":"::read::rnglists::RngListIter","value":"RngListIter {  }","parent":null,"children":[{"krate":0,"index":6735},{"krate":0,"index":6736},{"krate":0,"index":6737},{"krate":0,"index":6738}],"decl_id":null,"docs":" An iterator over an address range list.","sig":null,"attributes":[{"value":"/ An iterator over an address range list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":810100,"byte_end":810143,"line_start":432,"line_end":432,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":810144,"byte_end":810147,"line_start":433,"line_end":433,"column_start":1,"column_end":4}},{"value":"/ This iterator internally handles processing of base addresses and different","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":810148,"byte_end":810227,"line_start":434,"line_end":434,"column_start":1,"column_end":80}},{"value":"/ entry types.  Thus, it only returns range entries that are valid","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":810228,"byte_end":810296,"line_start":435,"line_end":435,"column_start":1,"column_end":69}},{"value":"/ and already adjusted for the base address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":810297,"byte_end":810343,"line_start":436,"line_end":436,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1582},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":811180,"byte_end":811184,"line_start":468,"line_end":468,"column_start":12,"column_end":16},"name":"next","qualname":"<RngListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<Range>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next range.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":811125,"byte_end":811168,"line_start":467,"line_end":467,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6760},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":814675,"byte_end":814680,"line_start":568,"line_end":568,"column_start":12,"column_end":17},"name":"Range","qualname":"::read::rnglists::Range","value":"Range { begin, end }","parent":null,"children":[{"krate":0,"index":6761},{"krate":0,"index":6762}],"decl_id":null,"docs":" An address range from the `.debug_ranges`, `.debug_rnglists`, or `.debug_aranges` sections.\n","sig":null,"attributes":[{"value":"/ An address range from the `.debug_ranges`, `.debug_rnglists`, or `.debug_aranges` sections.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":814517,"byte_end":814612,"line_start":566,"line_end":566,"column_start":1,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":6761},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":814735,"byte_end":814740,"line_start":570,"line_end":570,"column_start":9,"column_end":14},"name":"begin","qualname":"::read::rnglists::Range::begin","value":"u64","parent":{"krate":0,"index":6760},"children":[],"decl_id":null,"docs":" The beginning address of the range.\n","sig":null,"attributes":[{"value":"/ The beginning address of the range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":814687,"byte_end":814726,"line_start":569,"line_end":569,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":6762},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":814809,"byte_end":814812,"line_start":573,"line_end":573,"column_start":9,"column_end":12},"name":"end","qualname":"::read::rnglists::Range::end","value":"u64","parent":{"krate":0,"index":6760},"children":[],"decl_id":null,"docs":" The first address past the end of the range.\n","sig":null,"attributes":[{"value":"/ The first address past the end of the range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":814752,"byte_end":814800,"line_start":572,"line_end":572,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6778},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838128,"byte_end":838136,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"DebugStr","qualname":"::read::str::DebugStr","value":"DebugStr {  }","parent":null,"children":[{"krate":0,"index":6780}],"decl_id":null,"docs":" The `DebugStr` struct represents the DWARF strings\n found in the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `DebugStr` struct represents the DWARF strings","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":837984,"byte_end":838038,"line_start":9,"line_end":9,"column_start":1,"column_end":55}},{"value":"/ found in the `.debug_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838039,"byte_end":838077,"line_start":10,"line_end":10,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838847,"byte_end":838850,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugStr<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugStr` instance from the data in the `.debug_str`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugStr` instance from the data in the `.debug_str`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838265,"byte_end":838338,"line_start":20,"line_end":20,"column_start":5,"column_end":78}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838343,"byte_end":838355,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838360,"byte_end":838363,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_str` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838368,"byte_end":838442,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838447,"byte_end":838517,"line_start":24,"line_end":24,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838522,"byte_end":838561,"line_start":25,"line_end":25,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838566,"byte_end":838569,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838574,"byte_end":838581,"line_start":27,"line_end":27,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugStr, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838586,"byte_end":838626,"line_start":28,"line_end":28,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838631,"byte_end":838634,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838639,"byte_end":838680,"line_start":30,"line_end":30,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_str_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838685,"byte_end":838736,"line_start":31,"line_end":31,"column_start":5,"column_end":56}},{"value":"/ let debug_str = DebugStr::new(read_debug_str_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838741,"byte_end":838823,"line_start":32,"line_end":32,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838828,"byte_end":838835,"line_start":33,"line_end":33,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839561,"byte_end":839568,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_str","qualname":"<DebugStr<R>>::get_str","value":"pub fn get_str(&Self, DebugStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Lookup a string from the `.debug_str` section by DebugStrOffset.","sig":null,"attributes":[{"value":"/ Lookup a string from the `.debug_str` section by DebugStrOffset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839017,"byte_end":839085,"line_start":40,"line_end":40,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839090,"byte_end":839093,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839098,"byte_end":839105,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugStr, DebugStrOffset, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839110,"byte_end":839166,"line_start":43,"line_end":43,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839171,"byte_end":839174,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x01, 0x02, 0x00];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839179,"byte_end":839214,"line_start":45,"line_end":45,"column_start":5,"column_end":40}},{"value":"/ # let offset = DebugStrOffset(0);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839219,"byte_end":839256,"line_start":46,"line_end":46,"column_start":5,"column_end":42}},{"value":"/ # let read_debug_str_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839261,"byte_end":839312,"line_start":47,"line_end":47,"column_start":5,"column_end":56}},{"value":"/ # let debug_str_offset_somehow = || offset;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839317,"byte_end":839364,"line_start":48,"line_end":48,"column_start":5,"column_end":52}},{"value":"/ let debug_str = DebugStr::new(read_debug_str_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839369,"byte_end":839451,"line_start":49,"line_end":49,"column_start":5,"column_end":87}},{"value":"/ println!(\"Found string {:?}\", debug_str.get_str(debug_str_offset_somehow()));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839456,"byte_end":839537,"line_start":50,"line_end":50,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839542,"byte_end":839549,"line_start":51,"line_end":51,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1617},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840420,"byte_end":840426,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugStr<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugStr<R> where F: FnMut(&'a T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugStr` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugStr` section that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839792,"byte_end":839859,"line_start":60,"line_end":60,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839864,"byte_end":839867,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839872,"byte_end":839937,"line_start":62,"line_end":62,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839942,"byte_end":839945,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839950,"byte_end":839970,"line_start":64,"line_end":64,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839975,"byte_end":839978,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839983,"byte_end":840001,"line_start":66,"line_end":66,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840006,"byte_end":840051,"line_start":67,"line_end":67,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840056,"byte_end":840140,"line_start":68,"line_end":68,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugStr<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840145,"byte_end":840210,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840215,"byte_end":840262,"line_start":70,"line_end":70,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840267,"byte_end":840317,"line_start":71,"line_end":71,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840322,"byte_end":840384,"line_start":72,"line_end":72,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840389,"byte_end":840396,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840401,"byte_end":840408,"line_start":74,"line_end":74,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6792},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840982,"byte_end":840997,"line_start":101,"line_end":101,"column_start":12,"column_end":27},"name":"DebugStrOffsets","qualname":"::read::str::DebugStrOffsets","value":"DebugStrOffsets {  }","parent":null,"children":[{"krate":0,"index":6794}],"decl_id":null,"docs":" The raw contents of the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_str_offsets` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840874,"byte_end":840931,"line_start":99,"line_end":99,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841950,"byte_end":841964,"line_start":122,"line_end":122,"column_start":12,"column_end":26},"name":"get_str_offset","qualname":"<DebugStrOffsets<R>>::get_str_offset","value":"pub fn get_str_offset(&Self, Format, DebugStrOffsetsBase<R::Offset>,\n                      DebugStrOffsetsIndex<R::Offset>)\n-> Result<DebugStrOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `.debug_str` offset at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the `.debug_str` offset at the given `base` and `index`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841200,"byte_end":841268,"line_start":109,"line_end":109,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841273,"byte_end":841276,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ A set of entries in the `.debug_str_offsets` section consists of a header","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841281,"byte_end":841358,"line_start":111,"line_end":111,"column_start":5,"column_end":82}},{"value":"/ followed by a series of string table offsets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841363,"byte_end":841412,"line_start":112,"line_end":112,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841417,"byte_end":841420,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_str_offsets_base` value from the compilation unit DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841425,"byte_end":841513,"line_start":114,"line_end":114,"column_start":5,"column_end":93}},{"value":"/ This is an offset that points to the first entry following the header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841518,"byte_end":841592,"line_start":115,"line_end":115,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841597,"byte_end":841600,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_strx` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841605,"byte_end":841664,"line_start":117,"line_end":117,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841669,"byte_end":841672,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ The `format` must be the DWARF format of the compilation unit. This format must","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841677,"byte_end":841760,"line_start":119,"line_end":119,"column_start":5,"column_end":88}},{"value":"/ match the header. However, note that we do not parse the header to validate this,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841765,"byte_end":841850,"line_start":120,"line_end":120,"column_start":5,"column_end":90}},{"value":"/ since locating the header is unreliable, and the GNU extensions do not emit it.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841855,"byte_end":841938,"line_start":121,"line_end":121,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1633},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843076,"byte_end":843082,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugStrOffsets<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugStrOffsets<R> where\nF: FnMut(&'a T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugStrOffsets` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugStrOffsets` section that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842434,"byte_end":842508,"line_start":138,"line_end":138,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842513,"byte_end":842516,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842521,"byte_end":842586,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842591,"byte_end":842594,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842599,"byte_end":842619,"line_start":142,"line_end":142,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842624,"byte_end":842627,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842632,"byte_end":842650,"line_start":144,"line_end":144,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842655,"byte_end":842700,"line_start":145,"line_end":145,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842705,"byte_end":842789,"line_start":146,"line_end":146,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugStrOffsets<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842794,"byte_end":842866,"line_start":147,"line_end":147,"column_start":5,"column_end":77}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842871,"byte_end":842918,"line_start":148,"line_end":148,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842923,"byte_end":842973,"line_start":149,"line_end":149,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842978,"byte_end":843040,"line_start":150,"line_end":150,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843045,"byte_end":843052,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843057,"byte_end":843064,"line_start":152,"line_end":152,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1646},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843754,"byte_end":843783,"line_start":183,"line_end":183,"column_start":12,"column_end":41},"name":"default_for_encoding_and_file","qualname":"<DebugStrOffsetsBase<Offset>>::default_for_encoding_and_file","value":"pub fn default_for_encoding_and_file(Encoding, DwarfFileType)\n-> DebugStrOffsetsBase<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DebugStrOffsetsBase` with the default value of DW_AT_str_offsets_base\n for the given `Encoding` and `DwarfFileType`.\n","sig":null,"attributes":[{"value":"/ Returns a `DebugStrOffsetsBase` with the default value of DW_AT_str_offsets_base","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843604,"byte_end":843688,"line_start":181,"line_end":181,"column_start":5,"column_end":89}},{"value":"/ for the given `Encoding` and `DwarfFileType`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843693,"byte_end":843742,"line_start":182,"line_end":182,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6806},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":844637,"byte_end":844649,"line_start":204,"line_end":204,"column_start":12,"column_end":24},"name":"DebugLineStr","qualname":"::read::str::DebugLineStr","value":"DebugLineStr {  }","parent":null,"children":[{"krate":0,"index":6808}],"decl_id":null,"docs":" The `DebugLineStr` struct represents the DWARF strings\n found in the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `DebugLineStr` struct represents the DWARF strings","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":844484,"byte_end":844542,"line_start":201,"line_end":201,"column_start":1,"column_end":59}},{"value":"/ found in the `.debug_line_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":844543,"byte_end":844586,"line_start":202,"line_end":202,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1649},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":844801,"byte_end":844808,"line_start":210,"line_end":210,"column_start":12,"column_end":19},"name":"get_str","qualname":"<DebugLineStr<R>>::get_str","value":"pub fn get_str(&Self, DebugLineStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Lookup a string from the `.debug_line_str` section by DebugLineStrOffset.\n","sig":null,"attributes":[{"value":"/ Lookup a string from the `.debug_line_str` section by DebugLineStrOffset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":844712,"byte_end":844789,"line_start":209,"line_end":209,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845666,"byte_end":845672,"line_start":233,"line_end":233,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugLineStr<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugLineStr<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugLineStr` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugLineStr` section that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845030,"byte_end":845101,"line_start":218,"line_end":218,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845106,"byte_end":845109,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845114,"byte_end":845179,"line_start":220,"line_end":220,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845184,"byte_end":845187,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845192,"byte_end":845212,"line_start":222,"line_end":222,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845217,"byte_end":845220,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845225,"byte_end":845243,"line_start":224,"line_end":224,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845248,"byte_end":845293,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845298,"byte_end":845382,"line_start":226,"line_end":226,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugLineStr<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845387,"byte_end":845456,"line_start":227,"line_end":227,"column_start":5,"column_end":74}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845461,"byte_end":845508,"line_start":228,"line_end":228,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845513,"byte_end":845563,"line_start":229,"line_end":229,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845568,"byte_end":845630,"line_start":230,"line_end":230,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845635,"byte_end":845642,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845647,"byte_end":845654,"line_start":232,"line_end":232,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1715},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":848727,"byte_end":848741,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"to_unit_offset","qualname":"<DebugTypesOffset<T>>::to_unit_offset","value":"pub fn to_unit_offset<R>(&Self, &UnitHeader<R>) -> Option<UnitOffset<T>> where\nR: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the given unit,\n instead of relative to the start of the .debug_types section.\n Returns `None` if the offset is not within the unit entries.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the given unit,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":848508,"byte_end":848576,"line_start":22,"line_end":22,"column_start":5,"column_end":73}},{"value":"/ instead of relative to the start of the .debug_types section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":848581,"byte_end":848646,"line_start":23,"line_end":23,"column_start":5,"column_end":70}},{"value":"/ Returns `None` if the offset is not within the unit entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":848651,"byte_end":848715,"line_start":24,"line_end":24,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1719},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849355,"byte_end":849369,"line_start":42,"line_end":42,"column_start":12,"column_end":26},"name":"to_unit_offset","qualname":"<DebugInfoOffset<T>>::to_unit_offset","value":"pub fn to_unit_offset<R>(&Self, &UnitHeader<R>) -> Option<UnitOffset<T>> where\nR: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the given unit,\n instead of relative to the start of the .debug_info section.\n Returns `None` if the offset is not within this unit entries.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the given unit,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849136,"byte_end":849204,"line_start":39,"line_end":39,"column_start":5,"column_end":73}},{"value":"/ instead of relative to the start of the .debug_info section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849209,"byte_end":849273,"line_start":40,"line_end":40,"column_start":5,"column_end":69}},{"value":"/ Returns `None` if the offset is not within this unit entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849278,"byte_end":849343,"line_start":41,"line_end":41,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":6820},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849852,"byte_end":849862,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"UnitOffset","qualname":"::read::unit::UnitOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the current compilation or type unit.\n","sig":null,"attributes":[{"value":"/ An offset into the current compilation or type unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849716,"byte_end":849772,"line_start":55,"line_end":55,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":6823},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849874,"byte_end":849879,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"name":"0","qualname":"::read::unit::UnitOffset::0","value":"T","parent":{"krate":0,"index":6820},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":850151,"byte_end":850171,"line_start":63,"line_end":63,"column_start":12,"column_end":32},"name":"to_debug_info_offset","qualname":"<UnitOffset<T>>::to_debug_info_offset","value":"pub fn to_debug_info_offset<R>(&Self, &UnitHeader<R>)\n-> Option<DebugInfoOffset<T>> where R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the .debug_info section,\n instead of relative to the start of the given unit. Returns None if the\n provided unit lives in the .debug_types section.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the .debug_info section,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849925,"byte_end":850002,"line_start":60,"line_end":60,"column_start":5,"column_end":82}},{"value":"/ instead of relative to the start of the given unit. Returns None if the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":850007,"byte_end":850082,"line_start":61,"line_end":61,"column_start":5,"column_end":80}},{"value":"/ provided unit lives in the .debug_types section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":850087,"byte_end":850139,"line_start":62,"line_end":62,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":850637,"byte_end":850658,"line_start":74,"line_end":74,"column_start":12,"column_end":33},"name":"to_debug_types_offset","qualname":"<UnitOffset<T>>::to_debug_types_offset","value":"pub fn to_debug_types_offset<R>(&Self, &UnitHeader<R>)\n-> Option<DebugTypesOffset<T>> where R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the .debug_types section,\n instead of relative to the start of the given unit. Returns None if the\n provided unit lives in the .debug_info section.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the .debug_types section,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":850411,"byte_end":850489,"line_start":71,"line_end":71,"column_start":5,"column_end":83}},{"value":"/ instead of relative to the start of the given unit. Returns None if the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":850494,"byte_end":850569,"line_start":72,"line_end":72,"column_start":5,"column_end":80}},{"value":"/ provided unit lives in the .debug_info section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":850574,"byte_end":850625,"line_start":73,"line_end":73,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":6857},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851059,"byte_end":851068,"line_start":86,"line_end":86,"column_start":12,"column_end":21},"name":"DebugInfo","qualname":"::read::unit::DebugInfo","value":"DebugInfo {  }","parent":null,"children":[{"krate":0,"index":6859}],"decl_id":null,"docs":" The `DebugInfo` struct represents the DWARF debugging information found in\n the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `DebugInfo` struct represents the DWARF debugging information found in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":850899,"byte_end":850977,"line_start":83,"line_end":83,"column_start":1,"column_end":79}},{"value":"/ the `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":850978,"byte_end":851008,"line_start":84,"line_end":84,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851789,"byte_end":851792,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugInfo<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugInfo` instance from the data in the `.debug_info`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugInfo` instance from the data in the `.debug_info`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851199,"byte_end":851274,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851279,"byte_end":851291,"line_start":95,"line_end":95,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851296,"byte_end":851299,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_info` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851304,"byte_end":851379,"line_start":97,"line_end":97,"column_start":5,"column_end":80}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851384,"byte_end":851454,"line_start":98,"line_end":98,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851459,"byte_end":851498,"line_start":99,"line_end":99,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851503,"byte_end":851506,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851511,"byte_end":851518,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugInfo, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851523,"byte_end":851564,"line_start":102,"line_end":102,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851569,"byte_end":851572,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851577,"byte_end":851618,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_info_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851623,"byte_end":851675,"line_start":105,"line_end":105,"column_start":5,"column_end":57}},{"value":"/ let debug_info = DebugInfo::new(read_debug_info_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851680,"byte_end":851765,"line_start":106,"line_end":106,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851770,"byte_end":851777,"line_start":107,"line_end":107,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1733},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852568,"byte_end":852573,"line_start":131,"line_end":131,"column_start":12,"column_end":17},"name":"units","qualname":"<DebugInfo<R>>::units","value":"pub fn units(&Self) -> DebugInfoUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the units in this `.debug_info` section.","sig":null,"attributes":[{"value":"/ Iterate the units in this `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851962,"byte_end":852014,"line_start":114,"line_end":114,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852019,"byte_end":852022,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852027,"byte_end":852034,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugInfo, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852039,"byte_end":852080,"line_start":117,"line_end":117,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852085,"byte_end":852088,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852093,"byte_end":852112,"line_start":119,"line_end":119,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_info_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852117,"byte_end":852169,"line_start":120,"line_end":120,"column_start":5,"column_end":57}},{"value":"/ let debug_info = DebugInfo::new(read_debug_info_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852174,"byte_end":852259,"line_start":121,"line_end":121,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852264,"byte_end":852267,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_info.units();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852272,"byte_end":852310,"line_start":123,"line_end":123,"column_start":5,"column_end":43}},{"value":"/ while let Some(unit) = iter.next().unwrap() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852315,"byte_end":852364,"line_start":124,"line_end":124,"column_start":5,"column_end":54}},{"value":"/     println!(\"unit's length is {}\", unit.unit_length());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852369,"byte_end":852429,"line_start":125,"line_end":125,"column_start":5,"column_end":65}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852434,"byte_end":852439,"line_start":126,"line_end":126,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852444,"byte_end":852451,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852456,"byte_end":852459,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852464,"byte_end":852485,"line_start":129,"line_end":129,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852490,"byte_end":852556,"line_start":130,"line_end":130,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852881,"byte_end":852899,"line_start":141,"line_end":141,"column_start":12,"column_end":30},"name":"header_from_offset","qualname":"<DebugInfo<R>>::header_from_offset","value":"pub fn header_from_offset(&Self, DebugInfoOffset<R::Offset>)\n-> Result<UnitHeader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Get the UnitHeader located at offset from this .debug_info section.","sig":null,"attributes":[{"value":"/ Get the UnitHeader located at offset from this .debug_info section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852782,"byte_end":852853,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852858,"byte_end":852861,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":852866,"byte_end":852869,"line_start":140,"line_end":140,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1737},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853773,"byte_end":853779,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugInfo<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugInfo<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugInfo` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugInfo` section that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853143,"byte_end":853211,"line_start":149,"line_end":149,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853216,"byte_end":853219,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853224,"byte_end":853289,"line_start":151,"line_end":151,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853294,"byte_end":853297,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853302,"byte_end":853322,"line_start":153,"line_end":153,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853327,"byte_end":853330,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853335,"byte_end":853353,"line_start":155,"line_end":155,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853358,"byte_end":853403,"line_start":156,"line_end":156,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853408,"byte_end":853492,"line_start":157,"line_end":157,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugInfo<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853497,"byte_end":853563,"line_start":158,"line_end":158,"column_start":5,"column_end":71}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853568,"byte_end":853615,"line_start":159,"line_end":159,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853620,"byte_end":853670,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853675,"byte_end":853737,"line_start":161,"line_end":161,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853742,"byte_end":853749,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853754,"byte_end":853761,"line_start":163,"line_end":163,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6871},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854441,"byte_end":854465,"line_start":193,"line_end":193,"column_start":12,"column_end":36},"name":"DebugInfoUnitHeadersIter","qualname":"::read::unit::DebugInfoUnitHeadersIter","value":"DebugInfoUnitHeadersIter {  }","parent":null,"children":[{"krate":0,"index":6873},{"krate":0,"index":6874}],"decl_id":null,"docs":" An iterator over the units of a .debug_info section.","sig":null,"attributes":[{"value":"/ An iterator over the units of a .debug_info section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854236,"byte_end":854292,"line_start":188,"line_end":188,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854293,"byte_end":854296,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ See the [documentation on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854297,"byte_end":854326,"line_start":190,"line_end":190,"column_start":1,"column_end":30}},{"value":"/ `DebugInfo::units`](./struct.DebugInfo.html#method.units) for more detail.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854327,"byte_end":854405,"line_start":191,"line_end":191,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1750},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854647,"byte_end":854651,"line_start":200,"line_end":200,"column_start":12,"column_end":16},"name":"next","qualname":"<DebugInfoUnitHeadersIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<UnitHeader<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next unit header.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next unit header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854586,"byte_end":854635,"line_start":199,"line_end":199,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6883},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856572,"byte_end":856583,"line_start":261,"line_end":261,"column_start":5,"column_end":16},"name":"Compilation","qualname":"::read::unit::UnitType::Compilation","value":"UnitType::Compilation","parent":{"krate":0,"index":6881},"children":[],"decl_id":null,"docs":" In DWARF5, a unit with type `DW_UT_compile`. In previous DWARF versions,\n any unit appearing in the .debug_info section.\n","sig":null,"attributes":[{"value":"/ In DWARF5, a unit with type `DW_UT_compile`. In previous DWARF versions,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856436,"byte_end":856512,"line_start":259,"line_end":259,"column_start":5,"column_end":81}},{"value":"/ any unit appearing in the .debug_info section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856517,"byte_end":856567,"line_start":260,"line_end":260,"column_start":5,"column_end":55}}]},{"kind":"StructVariant","id":{"krate":0,"index":6885},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856706,"byte_end":856710,"line_start":264,"line_end":264,"column_start":5,"column_end":9},"name":"Type","qualname":"::read::unit::UnitType::Type","value":"UnitType::Type { type_signature, type_offset }","parent":{"krate":0,"index":6881},"children":[],"decl_id":null,"docs":" In DWARF5, a unit with type `DW_UT_type`. In DWARF4, any unit appearing\n in the .debug_types section.\n","sig":null,"attributes":[{"value":"/ In DWARF5, a unit with type `DW_UT_type`. In DWARF4, any unit appearing","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856589,"byte_end":856664,"line_start":262,"line_end":262,"column_start":5,"column_end":80}},{"value":"/ in the .debug_types section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856669,"byte_end":856701,"line_start":263,"line_end":263,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6888},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857050,"byte_end":857057,"line_start":272,"line_end":272,"column_start":5,"column_end":12},"name":"Partial","qualname":"::read::unit::UnitType::Partial","value":"UnitType::Partial","parent":{"krate":0,"index":6881},"children":[],"decl_id":null,"docs":" A unit with type `DW_UT_partial`. The root DIE of this unit should be a\n `DW_TAG_partial_unit`.\n","sig":null,"attributes":[{"value":"/ A unit with type `DW_UT_partial`. The root DIE of this unit should be a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856939,"byte_end":857014,"line_start":270,"line_end":270,"column_start":5,"column_end":80}},{"value":"/ `DW_TAG_partial_unit`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857019,"byte_end":857045,"line_start":271,"line_end":271,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6890},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857397,"byte_end":857405,"line_start":278,"line_end":278,"column_start":5,"column_end":13},"name":"Skeleton","qualname":"::read::unit::UnitType::Skeleton","value":"UnitType::Skeleton(DwoId)","parent":{"krate":0,"index":6881},"children":[],"decl_id":null,"docs":" A unit with type `DW_UT_skeleton`. The enclosed dwo_id can be used to\n link this with the corresponding `SplitCompilation` unit in a dwo file.\n NB: The non-standard GNU split DWARF extension to DWARF 4 will instead\n be a `Compilation` unit with the dwo_id present as an attribute on the\n root DIE.\n","sig":null,"attributes":[{"value":"/ A unit with type `DW_UT_skeleton`. The enclosed dwo_id can be used to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857063,"byte_end":857136,"line_start":273,"line_end":273,"column_start":5,"column_end":78}},{"value":"/ link this with the corresponding `SplitCompilation` unit in a dwo file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857141,"byte_end":857216,"line_start":274,"line_end":274,"column_start":5,"column_end":80}},{"value":"/ NB: The non-standard GNU split DWARF extension to DWARF 4 will instead","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857221,"byte_end":857295,"line_start":275,"line_end":275,"column_start":5,"column_end":79}},{"value":"/ be a `Compilation` unit with the dwo_id present as an attribute on the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857300,"byte_end":857374,"line_start":276,"line_end":276,"column_start":5,"column_end":79}},{"value":"/ root DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857379,"byte_end":857392,"line_start":277,"line_end":277,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6893},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857758,"byte_end":857774,"line_start":284,"line_end":284,"column_start":5,"column_end":21},"name":"SplitCompilation","qualname":"::read::unit::UnitType::SplitCompilation","value":"UnitType::SplitCompilation(DwoId)","parent":{"krate":0,"index":6881},"children":[],"decl_id":null,"docs":" A unit with type `DW_UT_split_compile`. The enclosed dwo_id can be used to\n link this with the corresponding `Skeleton` unit in the original binary.\n NB: The non-standard GNU split DWARF extension to DWARF 4 will instead\n be a `Compilation` unit with the dwo_id present as an attribute on the\n root DIE.\n","sig":null,"attributes":[{"value":"/ A unit with type `DW_UT_split_compile`. The enclosed dwo_id can be used to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857418,"byte_end":857496,"line_start":279,"line_end":279,"column_start":5,"column_end":83}},{"value":"/ link this with the corresponding `Skeleton` unit in the original binary.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857501,"byte_end":857577,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"/ NB: The non-standard GNU split DWARF extension to DWARF 4 will instead","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857582,"byte_end":857656,"line_start":281,"line_end":281,"column_start":5,"column_end":79}},{"value":"/ be a `Compilation` unit with the dwo_id present as an attribute on the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857661,"byte_end":857735,"line_start":282,"line_end":282,"column_start":5,"column_end":79}},{"value":"/ root DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857740,"byte_end":857753,"line_start":283,"line_end":283,"column_start":5,"column_end":18}}]},{"kind":"StructVariant","id":{"krate":0,"index":6896},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857943,"byte_end":857952,"line_start":287,"line_end":287,"column_start":5,"column_end":14},"name":"SplitType","qualname":"::read::unit::UnitType::SplitType","value":"UnitType::SplitType { type_signature, type_offset }","parent":{"krate":0,"index":6881},"children":[],"decl_id":null,"docs":" A unit with type `DW_UT_split_type`. A split type unit is identical to a\n conventional type unit except for the section in which it appears.\n","sig":null,"attributes":[{"value":"/ A unit with type `DW_UT_split_type`. A split type unit is identical to a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857787,"byte_end":857863,"line_start":285,"line_end":285,"column_start":5,"column_end":81}},{"value":"/ conventional type unit except for the section in which it appears.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":857868,"byte_end":857938,"line_start":286,"line_end":286,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":6881},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856381,"byte_end":856389,"line_start":255,"line_end":255,"column_start":10,"column_end":18},"name":"UnitType","qualname":"::read::unit::UnitType","value":"pub enum UnitType<Offset> where Offset: ReaderOffset {\n\n    /// In DWARF5, a unit with type `DW_UT_compile`. In previous DWARF versions,\n    /// any unit appearing in the .debug_info section.\n    Compilation,\n\n    /// In DWARF5, a unit with type `DW_UT_type`. In DWARF4, any unit appearing\n    /// in the .debug_types section.\n    Type {\n        /// The unique type signature for this type unit.\n        type_signature: DebugTypeSignature,\n        /// The offset within this type unit where the type is defined.\n        type_offset: UnitOffset<Offset>,\n    },\n\n    /// A unit with type `DW_UT_partial`. The root DIE of this unit should be a\n    /// `DW_TAG_partial_unit`.\n    Partial,\n\n    /// A unit with type `DW_UT_skeleton`. The enclosed dwo_id can be used to\n    /// link this with the corresponding `SplitCompilation` unit in a dwo file.\n    /// NB: The non-standard GNU split DWARF extension to DWARF 4 will instead\n    /// be a `Compilation` unit with the dwo_id present as an attribute on the\n    /// root DIE.\n    Skeleton(DwoId),\n\n    /// A unit with type `DW_UT_split_compile`. The enclosed dwo_id can be used to\n    /// link this with the corresponding `Skeleton` unit in the original binary.\n    /// NB: The non-standard GNU split DWARF extension to DWARF 4 will instead\n    /// be a `Compilation` unit with the dwo_id present as an attribute on the\n    /// root DIE.\n    SplitCompilation(DwoId),\n\n    /// A unit with type `DW_UT_split_type`. A split type unit is identical to a\n    /// conventional type unit except for the section in which it appears.\n    SplitType {\n        /// The unique type signature for this type unit.\n        type_signature: DebugTypeSignature,\n        /// The offset within this type unit where the type is defined.\n        type_offset: UnitOffset<Offset>,\n    },\n}","parent":null,"children":[{"krate":0,"index":6883},{"krate":0,"index":6885},{"krate":0,"index":6888},{"krate":0,"index":6890},{"krate":0,"index":6893},{"krate":0,"index":6896}],"decl_id":null,"docs":" This enum specifies the type of the unit and any type\n specific data carried in the header (e.g. the type\n signature/type offset of a type unit).\n","sig":null,"attributes":[{"value":"/ This enum specifies the type of the unit and any type","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856171,"byte_end":856228,"line_start":251,"line_end":251,"column_start":1,"column_end":58}},{"value":"/ specific data carried in the header (e.g. the type","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856229,"byte_end":856283,"line_start":252,"line_end":252,"column_start":1,"column_end":55}},{"value":"/ signature/type offset of a type unit).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":856284,"byte_end":856326,"line_start":253,"line_end":253,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":6918},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":859015,"byte_end":859025,"line_start":317,"line_end":317,"column_start":12,"column_end":22},"name":"UnitHeader","qualname":"::read::unit::UnitHeader","value":"UnitHeader {  }","parent":null,"children":[{"krate":0,"index":6921},{"krate":0,"index":6922},{"krate":0,"index":6923},{"krate":0,"index":6924},{"krate":0,"index":6925},{"krate":0,"index":6926}],"decl_id":null,"docs":" The common fields for the headers of compilation units and\n type units.\n","sig":null,"attributes":[{"value":"/ The common fields for the headers of compilation units and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":858880,"byte_end":858942,"line_start":314,"line_end":314,"column_start":1,"column_end":63}},{"value":"/ type units.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":858943,"byte_end":858958,"line_start":315,"line_end":315,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":859501,"byte_end":859504,"line_start":337,"line_end":337,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitHeader<R, Offset>>::new","value":"pub fn new(Encoding, Offset, UnitType<Offset>, DebugAbbrevOffset<Offset>,\n           UnitSectionOffset<Offset>, R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitHeader`.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnitHeader`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":859456,"byte_end":859489,"line_start":336,"line_end":336,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":860130,"byte_end":860136,"line_start":363,"line_end":363,"column_start":12,"column_end":18},"name":"offset","qualname":"<UnitHeader<R, Offset>>::offset","value":"pub fn offset(&Self) -> UnitSectionOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this unit within its section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this unit within its section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":860067,"byte_end":860118,"line_start":362,"line_end":362,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1768},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":860315,"byte_end":860329,"line_start":369,"line_end":369,"column_start":12,"column_end":26},"name":"size_of_header","qualname":"<UnitHeader<R, Offset>>::size_of_header","value":"pub fn size_of_header(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the serialized size of the common unit header for the given\n DWARF format.\n","sig":null,"attributes":[{"value":"/ Return the serialized size of the common unit header for the given","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":860211,"byte_end":860281,"line_start":367,"line_end":367,"column_start":5,"column_end":75}},{"value":"/ DWARF format.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":860286,"byte_end":860303,"line_start":368,"line_end":368,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":861463,"byte_end":861474,"line_start":395,"line_end":395,"column_start":12,"column_end":23},"name":"unit_length","qualname":"<UnitHeader<R, Offset>>::unit_length","value":"pub fn unit_length(&Self) -> Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this compilation unit, not\n including the byte length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this compilation unit, not","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":861316,"byte_end":861387,"line_start":393,"line_end":393,"column_start":5,"column_end":76}},{"value":"/ including the byte length of the encoded length itself.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":861392,"byte_end":861451,"line_start":394,"line_end":394,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1770},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":861673,"byte_end":861694,"line_start":401,"line_end":401,"column_start":12,"column_end":33},"name":"length_including_self","qualname":"<UnitHeader<R, Offset>>::length_including_self","value":"pub fn length_including_self(&Self) -> Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this compilation unit,\n including the byte length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this compilation unit,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":861530,"byte_end":861597,"line_start":399,"line_end":399,"column_start":5,"column_end":72}},{"value":"/ including the byte length of the encoded length itself.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":861602,"byte_end":861661,"line_start":400,"line_end":400,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1771},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":861866,"byte_end":861874,"line_start":406,"line_end":406,"column_start":12,"column_end":20},"name":"encoding","qualname":"<UnitHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this unit.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":861805,"byte_end":861854,"line_start":405,"line_end":405,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862015,"byte_end":862022,"line_start":411,"line_end":411,"column_start":12,"column_end":19},"name":"version","qualname":"<UnitHeader<R, Offset>>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the DWARF version of the debugging info for this compilation unit.\n","sig":null,"attributes":[{"value":"/ Get the DWARF version of the debugging info for this compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":861929,"byte_end":862003,"line_start":410,"line_end":410,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862126,"byte_end":862131,"line_start":416,"line_end":416,"column_start":12,"column_end":17},"name":"type_","qualname":"<UnitHeader<R, Offset>>::type_","value":"pub fn type_(&Self) -> UnitType<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get the UnitType of this unit.\n","sig":null,"attributes":[{"value":"/ Get the UnitType of this unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862080,"byte_end":862114,"line_start":415,"line_end":415,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862336,"byte_end":862355,"line_start":422,"line_end":422,"column_start":12,"column_end":31},"name":"debug_abbrev_offset","qualname":"<UnitHeader<R, Offset>>::debug_abbrev_offset","value":"pub fn debug_abbrev_offset(&Self) -> DebugAbbrevOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" The offset into the `.debug_abbrev` section for this compilation unit's\n debugging information entries' abbreviations.\n","sig":null,"attributes":[{"value":"/ The offset into the `.debug_abbrev` section for this compilation unit's","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862195,"byte_end":862270,"line_start":420,"line_end":420,"column_start":5,"column_end":80}},{"value":"/ debugging information entries' abbreviations.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862275,"byte_end":862324,"line_start":421,"line_end":421,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862512,"byte_end":862524,"line_start":427,"line_end":427,"column_start":12,"column_end":24},"name":"address_size","qualname":"<UnitHeader<R, Offset>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The size of addresses (in bytes) in this compilation unit.\n","sig":null,"attributes":[{"value":"/ The size of addresses (in bytes) in this compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862438,"byte_end":862500,"line_start":426,"line_end":426,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862666,"byte_end":862672,"line_start":432,"line_end":432,"column_start":12,"column_end":18},"name":"format","qualname":"<UnitHeader<R, Offset>>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Whether this compilation unit is encoded in 64- or 32-bit DWARF.\n","sig":null,"attributes":[{"value":"/ Whether this compilation unit is encoded in 64- or 32-bit DWARF.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862586,"byte_end":862654,"line_start":431,"line_end":431,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862808,"byte_end":862819,"line_start":437,"line_end":437,"column_start":12,"column_end":23},"name":"header_size","qualname":"<UnitHeader<R, Offset>>::header_size","value":"pub fn header_size(&Self) -> Offset","parent":null,"children":[],"decl_id":null,"docs":" The serialized size of the header for this compilation unit.\n","sig":null,"attributes":[{"value":"/ The serialized size of the header for this compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":862732,"byte_end":862796,"line_start":436,"line_end":436,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":863309,"byte_end":863314,"line_start":452,"line_end":452,"column_start":12,"column_end":17},"name":"range","qualname":"<UnitHeader<R, Offset>>::range","value":"pub fn range(&Self, Range<UnitOffset<Offset>>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying bytes for the supplied range.\n","sig":null,"attributes":[{"value":"/ Get the underlying bytes for the supplied range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":863245,"byte_end":863297,"line_start":451,"line_end":451,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":863972,"byte_end":863982,"line_start":470,"line_end":470,"column_start":12,"column_end":22},"name":"range_from","qualname":"<UnitHeader<R, Offset>>::range_from","value":"pub fn range_from(&Self, RangeFrom<UnitOffset<Offset>>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying bytes for the supplied range.\n","sig":null,"attributes":[{"value":"/ Get the underlying bytes for the supplied range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":863908,"byte_end":863960,"line_start":469,"line_end":469,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":864372,"byte_end":864380,"line_start":481,"line_end":481,"column_start":12,"column_end":20},"name":"range_to","qualname":"<UnitHeader<R, Offset>>::range_to","value":"pub fn range_to(&Self, RangeTo<UnitOffset<Offset>>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying bytes for the supplied range.\n","sig":null,"attributes":[{"value":"/ Get the underlying bytes for the supplied range.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":864308,"byte_end":864360,"line_start":480,"line_end":480,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":864773,"byte_end":864778,"line_start":492,"line_end":492,"column_start":12,"column_end":17},"name":"entry","qualname":"<UnitHeader<R, Offset>>::entry","value":"pub fn entry<'me,\n             'abbrev>(&'me Self, &'abbrev Abbreviations, UnitOffset<Offset>)\n-> Result<DebuggingInformationEntry>","parent":null,"children":[],"decl_id":null,"docs":" Read the `DebuggingInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Read the `DebuggingInformationEntry` at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":864700,"byte_end":864761,"line_start":491,"line_end":491,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":865224,"byte_end":865231,"line_start":503,"line_end":503,"column_start":12,"column_end":19},"name":"entries","qualname":"<UnitHeader<R, Offset>>::entries","value":"pub fn entries<'me, 'abbrev>(&'me Self, &'abbrev Abbreviations)\n-> EntriesCursor","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":865158,"byte_end":865212,"line_start":502,"line_end":502,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":865673,"byte_end":865690,"line_start":518,"line_end":518,"column_start":12,"column_end":29},"name":"entries_at_offset","qualname":"<UnitHeader<R, Offset>>::entries_at_offset","value":"pub fn entries_at_offset<'me,\n                         'abbrev>(&'me Self, &'abbrev Abbreviations,\n                                  UnitOffset<Offset>) -> Result<EntriesCursor>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this compilation unit's `DebuggingInformationEntry`s\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this compilation unit's `DebuggingInformationEntry`s","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":865558,"byte_end":865623,"line_start":516,"line_end":516,"column_start":5,"column_end":70}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":865628,"byte_end":865661,"line_start":517,"line_end":517,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":866200,"byte_end":866212,"line_start":535,"line_end":535,"column_start":12,"column_end":24},"name":"entries_tree","qualname":"<UnitHeader<R, Offset>>::entries_tree","value":"pub fn entries_tree<'me,\n                    'abbrev>(&'me Self, &'abbrev Abbreviations,\n                             Option<UnitOffset<Offset>>)\n-> Result<EntriesTree>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s as a tree\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s as a tree","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":866087,"byte_end":866150,"line_start":533,"line_end":533,"column_start":5,"column_end":68}},{"value":"/ starting at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":866155,"byte_end":866188,"line_start":534,"line_end":534,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":866683,"byte_end":866694,"line_start":548,"line_end":548,"column_start":12,"column_end":23},"name":"entries_raw","qualname":"<UnitHeader<R, Offset>>::entries_raw","value":"pub fn entries_raw<'me,\n                   'abbrev>(&'me Self, &'abbrev Abbreviations,\n                            Option<UnitOffset<Offset>>) -> Result<EntriesRaw>","parent":null,"children":[],"decl_id":null,"docs":" Read the raw data that defines the Debugging Information Entries.\n","sig":null,"attributes":[{"value":"/ Read the raw data that defines the Debugging Information Entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":866602,"byte_end":866671,"line_start":547,"line_end":547,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":867201,"byte_end":867214,"line_start":566,"line_end":566,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<UnitHeader<R, Offset>>::abbreviations","value":"pub fn abbreviations(&Self, &DebugAbbrev<R>) -> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse this unit's abbreviations.\n","sig":null,"attributes":[{"value":"/ Parse this unit's abbreviations.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":867153,"byte_end":867189,"line_start":565,"line_end":565,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":6953},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":870319,"byte_end":870344,"line_start":661,"line_end":661,"column_start":12,"column_end":37},"name":"DebuggingInformationEntry","qualname":"::read::unit::DebuggingInformationEntry","value":"DebuggingInformationEntry {  }","parent":null,"children":[{"krate":0,"index":6958},{"krate":0,"index":6959},{"krate":0,"index":6960},{"krate":0,"index":6961},{"krate":0,"index":6962}],"decl_id":null,"docs":" A Debugging Information Entry (DIE).","sig":null,"attributes":[{"value":"/ A Debugging Information Entry (DIE).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":870162,"byte_end":870202,"line_start":657,"line_end":657,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":870203,"byte_end":870206,"line_start":658,"line_end":658,"column_start":1,"column_end":4}},{"value":"/ DIEs have a set of attributes and optionally have children DIEs as well.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":870207,"byte_end":870283,"line_start":659,"line_end":659,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":870844,"byte_end":870847,"line_start":679,"line_end":679,"column_start":12,"column_end":15},"name":"new","qualname":"<DebuggingInformationEntry>::new","value":"pub fn new(UnitOffset<Offset>, R, &'abbrev Abbreviation,\n           &'unit UnitHeader<R, Offset>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebuggingInformationEntry`.\n","sig":null,"attributes":[{"value":"/ Construct a new `DebuggingInformationEntry`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":870784,"byte_end":870832,"line_start":678,"line_end":678,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871226,"byte_end":871230,"line_start":695,"line_end":695,"column_start":12,"column_end":16},"name":"code","qualname":"<DebuggingInformationEntry>::code","value":"pub fn code(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get this entry's code.\n","sig":null,"attributes":[{"value":"/ Get this entry's code.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871188,"byte_end":871214,"line_start":694,"line_end":694,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871325,"byte_end":871331,"line_start":700,"line_end":700,"column_start":12,"column_end":18},"name":"offset","qualname":"<DebuggingInformationEntry>::offset","value":"pub fn offset(&Self) -> UnitOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get this entry's offset.\n","sig":null,"attributes":[{"value":"/ Get this entry's offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871285,"byte_end":871313,"line_start":699,"line_end":699,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873724,"byte_end":873727,"line_start":767,"line_end":767,"column_start":12,"column_end":15},"name":"tag","qualname":"<DebuggingInformationEntry>::tag","value":"pub fn tag(&Self) -> constants::DwTag","parent":null,"children":[],"decl_id":null,"docs":" Get this entry's `DW_TAG_whatever` tag.","sig":null,"attributes":[{"value":"/ Get this entry's `DW_TAG_whatever` tag.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871394,"byte_end":871437,"line_start":704,"line_end":704,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871442,"byte_end":871445,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871450,"byte_end":871457,"line_start":706,"line_end":706,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871462,"byte_end":871518,"line_start":707,"line_end":707,"column_start":5,"column_end":61}},{"value":"/ # let info_buf = [","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871523,"byte_end":871545,"line_start":708,"line_end":708,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871550,"byte_end":871585,"line_start":709,"line_end":709,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871590,"byte_end":871595,"line_start":710,"line_end":710,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 12","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871600,"byte_end":871636,"line_start":711,"line_end":711,"column_start":5,"column_end":41}},{"value":"/ #     0x0c, 0x00, 0x00, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871641,"byte_end":871674,"line_start":712,"line_end":712,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871679,"byte_end":871701,"line_start":713,"line_end":713,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871706,"byte_end":871727,"line_start":714,"line_end":714,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871732,"byte_end":871764,"line_start":715,"line_end":715,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871769,"byte_end":871802,"line_start":716,"line_end":716,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871807,"byte_end":871832,"line_start":717,"line_end":717,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871837,"byte_end":871852,"line_start":718,"line_end":718,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871857,"byte_end":871862,"line_start":719,"line_end":719,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871867,"byte_end":871884,"line_start":720,"line_end":720,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871889,"byte_end":871894,"line_start":721,"line_end":721,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871899,"byte_end":871929,"line_start":722,"line_end":722,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871934,"byte_end":871949,"line_start":723,"line_end":723,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":871954,"byte_end":872009,"line_start":724,"line_end":724,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872014,"byte_end":872047,"line_start":725,"line_end":725,"column_start":5,"column_end":38}},{"value":"/ # ];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872052,"byte_end":872060,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872065,"byte_end":872128,"line_start":727,"line_end":727,"column_start":5,"column_end":68}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872133,"byte_end":872157,"line_start":728,"line_end":728,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872162,"byte_end":872179,"line_start":729,"line_end":729,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872184,"byte_end":872199,"line_start":730,"line_end":730,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872204,"byte_end":872234,"line_start":731,"line_end":731,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872239,"byte_end":872254,"line_start":732,"line_end":732,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_no","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872259,"byte_end":872286,"line_start":733,"line_end":733,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872291,"byte_end":872306,"line_start":734,"line_end":734,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872311,"byte_end":872340,"line_start":735,"line_end":735,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872345,"byte_end":872387,"line_start":736,"line_end":736,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872392,"byte_end":872409,"line_start":737,"line_end":737,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872414,"byte_end":872460,"line_start":738,"line_end":738,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872465,"byte_end":872482,"line_start":739,"line_end":739,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872487,"byte_end":872514,"line_start":740,"line_end":740,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872519,"byte_end":872534,"line_start":741,"line_end":741,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872539,"byte_end":872554,"line_start":742,"line_end":742,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872559,"byte_end":872587,"line_start":743,"line_end":743,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872592,"byte_end":872606,"line_start":744,"line_end":744,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872611,"byte_end":872619,"line_start":745,"line_end":745,"column_start":5,"column_end":13}},{"value":"/ # let debug_abbrev = DebugAbbrev::new(&abbrev_buf, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872624,"byte_end":872693,"line_start":746,"line_end":746,"column_start":5,"column_end":74}},{"value":"/ # let unit = debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872698,"byte_end":872759,"line_start":747,"line_end":747,"column_start":5,"column_end":66}},{"value":"/ # let abbrevs = unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872764,"byte_end":872827,"line_start":748,"line_end":748,"column_start":5,"column_end":68}},{"value":"/ # let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872832,"byte_end":872878,"line_start":749,"line_end":749,"column_start":5,"column_end":51}},{"value":"/ # let (_, entry) = cursor.next_dfs().unwrap().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872883,"byte_end":872942,"line_start":750,"line_end":750,"column_start":5,"column_end":64}},{"value":"/ # let mut get_some_entry = || entry;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872947,"byte_end":872987,"line_start":751,"line_end":751,"column_start":5,"column_end":45}},{"value":"/ let entry = get_some_entry();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":872992,"byte_end":873025,"line_start":752,"line_end":752,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873030,"byte_end":873033,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ match entry.tag() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873038,"byte_end":873061,"line_start":754,"line_end":754,"column_start":5,"column_end":28}},{"value":"/     gimli::DW_TAG_subprogram =>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873066,"byte_end":873101,"line_start":755,"line_end":755,"column_start":5,"column_end":40}},{"value":"/         println!(\"this entry contains debug info about a function\"),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873106,"byte_end":873178,"line_start":756,"line_end":756,"column_start":5,"column_end":77}},{"value":"/     gimli::DW_TAG_inlined_subroutine =>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873183,"byte_end":873226,"line_start":757,"line_end":757,"column_start":5,"column_end":48}},{"value":"/         println!(\"this entry contains debug info about a particular instance of inlining\"),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873231,"byte_end":873326,"line_start":758,"line_end":758,"column_start":5,"column_end":100}},{"value":"/     gimli::DW_TAG_variable =>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873331,"byte_end":873364,"line_start":759,"line_end":759,"column_start":5,"column_end":38}},{"value":"/         println!(\"this entry contains debug info about a local variable\"),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873369,"byte_end":873447,"line_start":760,"line_end":760,"column_start":5,"column_end":83}},{"value":"/     gimli::DW_TAG_formal_parameter =>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873452,"byte_end":873493,"line_start":761,"line_end":761,"column_start":5,"column_end":46}},{"value":"/         println!(\"this entry contains debug info about a function parameter\"),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873498,"byte_end":873580,"line_start":762,"line_end":762,"column_start":5,"column_end":87}},{"value":"/     otherwise =>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873585,"byte_end":873605,"line_start":763,"line_end":763,"column_start":5,"column_end":25}},{"value":"/         println!(\"this entry is some other kind of data: {:?}\", otherwise),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873610,"byte_end":873689,"line_start":764,"line_end":764,"column_start":5,"column_end":84}},{"value":"/ };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873694,"byte_end":873700,"line_start":765,"line_end":765,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873705,"byte_end":873712,"line_start":766,"line_end":766,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873878,"byte_end":873890,"line_start":772,"line_end":772,"column_start":12,"column_end":24},"name":"has_children","qualname":"<DebuggingInformationEntry>::has_children","value":"pub fn has_children(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this entry's type can have children, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if this entry's type can have children, false otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873794,"byte_end":873866,"line_start":771,"line_end":771,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1813},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876630,"byte_end":876635,"line_start":854,"line_end":854,"column_start":12,"column_end":17},"name":"attrs","qualname":"<DebuggingInformationEntry>::attrs","value":"pub fn attrs<'me>(&'me Self) -> AttrsIter","parent":null,"children":[],"decl_id":null,"docs":" Iterate over this entry's set of attributes.","sig":null,"attributes":[{"value":"/ Iterate over this entry's set of attributes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":873954,"byte_end":874002,"line_start":776,"line_end":776,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874007,"byte_end":874010,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874015,"byte_end":874022,"line_start":778,"line_end":778,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874027,"byte_end":874081,"line_start":779,"line_end":779,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874086,"byte_end":874089,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ // Read the `.debug_info` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874094,"byte_end":874132,"line_start":781,"line_end":781,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874137,"byte_end":874140,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ # let info_buf = [","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874145,"byte_end":874167,"line_start":783,"line_end":783,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874172,"byte_end":874207,"line_start":784,"line_end":784,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874212,"byte_end":874217,"line_start":785,"line_end":785,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 12","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874222,"byte_end":874258,"line_start":786,"line_end":786,"column_start":5,"column_end":41}},{"value":"/ #     0x0c, 0x00, 0x00, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874263,"byte_end":874296,"line_start":787,"line_end":787,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874301,"byte_end":874323,"line_start":788,"line_end":788,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874328,"byte_end":874349,"line_start":789,"line_end":789,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874354,"byte_end":874386,"line_start":790,"line_end":790,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874391,"byte_end":874424,"line_start":791,"line_end":791,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874429,"byte_end":874454,"line_start":792,"line_end":792,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874459,"byte_end":874474,"line_start":793,"line_end":793,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874479,"byte_end":874484,"line_start":794,"line_end":794,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874489,"byte_end":874506,"line_start":795,"line_end":795,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874511,"byte_end":874516,"line_start":796,"line_end":796,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874521,"byte_end":874551,"line_start":797,"line_end":797,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874556,"byte_end":874571,"line_start":798,"line_end":798,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874576,"byte_end":874631,"line_start":799,"line_end":799,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874636,"byte_end":874669,"line_start":800,"line_end":800,"column_start":5,"column_end":38}},{"value":"/ # ];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874674,"byte_end":874682,"line_start":801,"line_end":801,"column_start":5,"column_end":13}},{"value":"/ # let read_debug_info_section_somehow = || &info_buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874687,"byte_end":874744,"line_start":802,"line_end":802,"column_start":5,"column_end":62}},{"value":"/ let debug_info = DebugInfo::new(read_debug_info_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874749,"byte_end":874834,"line_start":803,"line_end":803,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874839,"byte_end":874842,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ // Get the data about the first compilation unit out of the `.debug_info`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874847,"byte_end":874925,"line_start":805,"line_end":805,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874930,"byte_end":874933,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ let unit = debug_info.units().next()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874938,"byte_end":874978,"line_start":807,"line_end":807,"column_start":5,"column_end":45}},{"value":"/     .expect(\"Should have at least one compilation unit\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":874983,"byte_end":875043,"line_start":808,"line_end":808,"column_start":5,"column_end":65}},{"value":"/     .expect(\"and it should parse ok\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875048,"byte_end":875090,"line_start":809,"line_end":809,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875095,"byte_end":875098,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ // Read the `.debug_abbrev` section and parse the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875103,"byte_end":875156,"line_start":811,"line_end":811,"column_start":5,"column_end":58}},{"value":"/ // abbreviations for our compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875161,"byte_end":875207,"line_start":812,"line_end":812,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875212,"byte_end":875215,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875220,"byte_end":875244,"line_start":814,"line_end":814,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875249,"byte_end":875266,"line_start":815,"line_end":815,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875271,"byte_end":875286,"line_start":816,"line_end":816,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875291,"byte_end":875321,"line_start":817,"line_end":817,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875326,"byte_end":875341,"line_start":818,"line_end":818,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_no","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875346,"byte_end":875373,"line_start":819,"line_end":819,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875378,"byte_end":875393,"line_start":820,"line_end":820,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875398,"byte_end":875427,"line_start":821,"line_end":821,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875432,"byte_end":875474,"line_start":822,"line_end":822,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875479,"byte_end":875496,"line_start":823,"line_end":823,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875501,"byte_end":875547,"line_start":824,"line_end":824,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875552,"byte_end":875569,"line_start":825,"line_end":825,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875574,"byte_end":875601,"line_start":826,"line_end":826,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875606,"byte_end":875621,"line_start":827,"line_end":827,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875626,"byte_end":875641,"line_start":828,"line_end":828,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875646,"byte_end":875674,"line_start":829,"line_end":829,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875679,"byte_end":875693,"line_start":830,"line_end":830,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875698,"byte_end":875706,"line_start":831,"line_end":831,"column_start":5,"column_end":13}},{"value":"/ # let read_debug_abbrev_section_somehow = || &abbrev_buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875711,"byte_end":875772,"line_start":832,"line_end":832,"column_start":5,"column_end":66}},{"value":"/ let debug_abbrev = DebugAbbrev::new(read_debug_abbrev_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875777,"byte_end":875868,"line_start":833,"line_end":833,"column_start":5,"column_end":96}},{"value":"/ let abbrevs = unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875873,"byte_end":875934,"line_start":834,"line_end":834,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875939,"byte_end":875942,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ // Get the first entry from that compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":875947,"byte_end":876001,"line_start":836,"line_end":836,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876006,"byte_end":876009,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876014,"byte_end":876058,"line_start":838,"line_end":838,"column_start":5,"column_end":49}},{"value":"/ let (_, entry) = cursor.next_dfs()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876063,"byte_end":876101,"line_start":839,"line_end":839,"column_start":5,"column_end":43}},{"value":"/     .expect(\"Should parse next entry\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876106,"byte_end":876148,"line_start":840,"line_end":840,"column_start":5,"column_end":47}},{"value":"/     .expect(\"Should have at least one entry\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876153,"byte_end":876203,"line_start":841,"line_end":841,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876208,"byte_end":876211,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ // Finally, print the first entry's attributes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876216,"byte_end":876267,"line_start":843,"line_end":843,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876272,"byte_end":876275,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ let mut attrs = entry.attrs();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876280,"byte_end":876314,"line_start":845,"line_end":845,"column_start":5,"column_end":39}},{"value":"/ while let Some(attr) = attrs.next().unwrap() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876319,"byte_end":876369,"line_start":846,"line_end":846,"column_start":5,"column_end":55}},{"value":"/     println!(\"Attribute name = {:?}\", attr.name());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876374,"byte_end":876429,"line_start":847,"line_end":847,"column_start":5,"column_end":60}},{"value":"/     println!(\"Attribute value = {:?}\", attr.value());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876434,"byte_end":876491,"line_start":848,"line_end":848,"column_start":5,"column_end":62}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876496,"byte_end":876501,"line_start":849,"line_end":849,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876506,"byte_end":876513,"line_start":850,"line_end":850,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876518,"byte_end":876521,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876526,"byte_end":876547,"line_start":852,"line_end":852,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876552,"byte_end":876618,"line_start":853,"line_end":853,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":877000,"byte_end":877004,"line_start":864,"line_end":864,"column_start":12,"column_end":16},"name":"attr","qualname":"<DebuggingInformationEntry>::attr","value":"pub fn attr(&Self, constants::DwAt) -> Result<Option<Attribute<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the first attribute in this entry which has the given name,\n and return it. Returns `Ok(None)` if no attribute is found.\n","sig":null,"attributes":[{"value":"/ Find the first attribute in this entry which has the given name,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876852,"byte_end":876920,"line_start":862,"line_end":862,"column_start":5,"column_end":73}},{"value":"/ and return it. Returns `Ok(None)` if no attribute is found.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":876925,"byte_end":876988,"line_start":863,"line_end":863,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":877441,"byte_end":877455,"line_start":876,"line_end":876,"column_start":12,"column_end":26},"name":"attr_value_raw","qualname":"<DebuggingInformationEntry>::attr_value_raw","value":"pub fn attr_value_raw(&Self, constants::DwAt)\n-> Result<Option<AttributeValue<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the first attribute in this entry which has the given name,\n and return its raw value. Returns `Ok(None)` if no attribute is found.\n","sig":null,"attributes":[{"value":"/ Find the first attribute in this entry which has the given name,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":877282,"byte_end":877350,"line_start":874,"line_end":874,"column_start":5,"column_end":73}},{"value":"/ and return its raw value. Returns `Ok(None)` if no attribute is found.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":877355,"byte_end":877429,"line_start":875,"line_end":875,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":877794,"byte_end":877804,"line_start":884,"line_end":884,"column_start":12,"column_end":22},"name":"attr_value","qualname":"<DebuggingInformationEntry>::attr_value","value":"pub fn attr_value(&Self, constants::DwAt) -> Result<Option<AttributeValue<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the first attribute in this entry which has the given name,\n and return its normalized value.  Returns `Ok(None)` if no\n attribute is found.\n","sig":null,"attributes":[{"value":"/ Find the first attribute in this entry which has the given name,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":877619,"byte_end":877687,"line_start":881,"line_end":881,"column_start":5,"column_end":73}},{"value":"/ and return its normalized value.  Returns `Ok(None)` if no","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":877692,"byte_end":877754,"line_start":882,"line_end":882,"column_start":5,"column_end":67}},{"value":"/ attribute is found.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":877759,"byte_end":877782,"line_start":883,"line_end":883,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6978},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880198,"byte_end":880202,"line_start":953,"line_end":953,"column_start":5,"column_end":9},"name":"Addr","qualname":"::read::unit::AttributeValue::Addr","value":"AttributeValue::Addr(u64)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" \"Refers to some location in the address space of the described program.\"\n","sig":null,"attributes":[{"value":"/ \"Refers to some location in the address space of the described program.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880117,"byte_end":880193,"line_start":952,"line_end":952,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6981},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880263,"byte_end":880268,"line_start":956,"line_end":956,"column_start":5,"column_end":10},"name":"Block","qualname":"::read::unit::AttributeValue::Block","value":"AttributeValue::Block(R)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" A slice of an arbitrary number of bytes.\n","sig":null,"attributes":[{"value":"/ A slice of an arbitrary number of bytes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880214,"byte_end":880258,"line_start":955,"line_end":955,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6984},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880546,"byte_end":880551,"line_start":963,"line_end":963,"column_start":5,"column_end":10},"name":"Data1","qualname":"::read::unit::AttributeValue::Data1","value":"AttributeValue::Data1(u8)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" A one byte constant data value. How to interpret the byte depends on context.","sig":null,"attributes":[{"value":"/ A one byte constant data value. How to interpret the byte depends on context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880278,"byte_end":880359,"line_start":958,"line_end":958,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880364,"byte_end":880367,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880372,"byte_end":880442,"line_start":960,"line_end":960,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880447,"byte_end":880517,"line_start":961,"line_end":961,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880522,"byte_end":880541,"line_start":962,"line_end":962,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6987},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880960,"byte_end":880965,"line_start":973,"line_end":973,"column_start":5,"column_end":10},"name":"Data2","qualname":"::read::unit::AttributeValue::Data2","value":"AttributeValue::Data2(u16)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" A two byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ A two byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880562,"byte_end":880644,"line_start":965,"line_end":965,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880649,"byte_end":880652,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ These bytes have been converted from `R::Endian`. This may need to be reversed","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880657,"byte_end":880739,"line_start":967,"line_end":967,"column_start":5,"column_end":87}},{"value":"/ if this was not required.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880744,"byte_end":880773,"line_start":968,"line_end":968,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880778,"byte_end":880781,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880786,"byte_end":880856,"line_start":970,"line_end":970,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880861,"byte_end":880931,"line_start":971,"line_end":971,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880936,"byte_end":880955,"line_start":972,"line_end":972,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6990},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881376,"byte_end":881381,"line_start":983,"line_end":983,"column_start":5,"column_end":10},"name":"Data4","qualname":"::read::unit::AttributeValue::Data4","value":"AttributeValue::Data4(u32)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" A four byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ A four byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":880977,"byte_end":881060,"line_start":975,"line_end":975,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881065,"byte_end":881068,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ These bytes have been converted from `R::Endian`. This may need to be reversed","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881073,"byte_end":881155,"line_start":977,"line_end":977,"column_start":5,"column_end":87}},{"value":"/ if this was not required.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881160,"byte_end":881189,"line_start":978,"line_end":978,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881194,"byte_end":881197,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881202,"byte_end":881272,"line_start":980,"line_end":980,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881277,"byte_end":881347,"line_start":981,"line_end":981,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881352,"byte_end":881371,"line_start":982,"line_end":982,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6993},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881794,"byte_end":881799,"line_start":993,"line_end":993,"column_start":5,"column_end":10},"name":"Data8","qualname":"::read::unit::AttributeValue::Data8","value":"AttributeValue::Data8(u64)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An eight byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ An eight byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881393,"byte_end":881478,"line_start":985,"line_end":985,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881483,"byte_end":881486,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ These bytes have been converted from `R::Endian`. This may need to be reversed","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881491,"byte_end":881573,"line_start":987,"line_end":987,"column_start":5,"column_end":87}},{"value":"/ if this was not required.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881578,"byte_end":881607,"line_start":988,"line_end":988,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881612,"byte_end":881615,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881620,"byte_end":881690,"line_start":990,"line_end":990,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881695,"byte_end":881765,"line_start":991,"line_end":991,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881770,"byte_end":881789,"line_start":992,"line_end":992,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6996},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881846,"byte_end":881851,"line_start":996,"line_end":996,"column_start":5,"column_end":10},"name":"Sdata","qualname":"::read::unit::AttributeValue::Sdata","value":"AttributeValue::Sdata(i64)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" A signed integer constant.\n","sig":null,"attributes":[{"value":"/ A signed integer constant.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881811,"byte_end":881841,"line_start":995,"line_end":995,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6999},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881901,"byte_end":881906,"line_start":999,"line_end":999,"column_start":5,"column_end":10},"name":"Udata","qualname":"::read::unit::AttributeValue::Udata","value":"AttributeValue::Udata(u64)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An unsigned integer constant.\n","sig":null,"attributes":[{"value":"/ An unsigned integer constant.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881863,"byte_end":881896,"line_start":998,"line_end":998,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7002},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882046,"byte_end":882053,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12},"name":"Exprloc","qualname":"::read::unit::AttributeValue::Exprloc","value":"AttributeValue::Exprloc(Expression<R>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" \"The information bytes contain a DWARF expression (see Section 2.5) or\n location description (see Section 2.6).\"\n","sig":null,"attributes":[{"value":"/ \"The information bytes contain a DWARF expression (see Section 2.5) or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881918,"byte_end":881992,"line_start":1001,"line_end":1001,"column_start":5,"column_end":79}},{"value":"/ location description (see Section 2.6).\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":881997,"byte_end":882041,"line_start":1002,"line_end":1002,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7005},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882146,"byte_end":882150,"line_start":1006,"line_end":1006,"column_start":5,"column_end":9},"name":"Flag","qualname":"::read::unit::AttributeValue::Flag","value":"AttributeValue::Flag(bool)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" A boolean that indicates presence or absence of the attribute.\n","sig":null,"attributes":[{"value":"/ A boolean that indicates presence or absence of the attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882075,"byte_end":882141,"line_start":1005,"line_end":1005,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7008},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882268,"byte_end":882277,"line_start":1010,"line_end":1010,"column_start":5,"column_end":14},"name":"SecOffset","qualname":"::read::unit::AttributeValue::SecOffset","value":"AttributeValue::SecOffset(Offset)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into another section. Which section this is an offset into\n depends on context.\n","sig":null,"attributes":[{"value":"/ An offset into another section. Which section this is an offset into","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882163,"byte_end":882235,"line_start":1008,"line_end":1008,"column_start":5,"column_end":77}},{"value":"/ depends on context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882240,"byte_end":882263,"line_start":1009,"line_end":1009,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7011},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882362,"byte_end":882375,"line_start":1013,"line_end":1013,"column_start":5,"column_end":18},"name":"DebugAddrBase","qualname":"::read::unit::AttributeValue::DebugAddrBase","value":"AttributeValue::DebugAddrBase(DebugAddrBase<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset to a set of addresses in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of addresses in the `.debug_addr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882292,"byte_end":882357,"line_start":1012,"line_end":1012,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7014},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882476,"byte_end":882490,"line_start":1016,"line_end":1016,"column_start":5,"column_end":19},"name":"DebugAddrIndex","qualname":"::read::unit::AttributeValue::DebugAddrIndex","value":"AttributeValue::DebugAddrIndex(DebugAddrIndex<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An index into a set of addresses in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of addresses in the `.debug_addr` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882405,"byte_end":882471,"line_start":1015,"line_end":1015,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7017},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882574,"byte_end":882581,"line_start":1019,"line_end":1019,"column_start":5,"column_end":12},"name":"UnitRef","qualname":"::read::unit::AttributeValue::UnitRef","value":"AttributeValue::UnitRef(UnitOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the current compilation unit.\n","sig":null,"attributes":[{"value":"/ An offset into the current compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882521,"byte_end":882569,"line_start":1018,"line_end":1018,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7020},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882738,"byte_end":882750,"line_start":1023,"line_end":1023,"column_start":5,"column_end":17},"name":"DebugInfoRef","qualname":"::read::unit::AttributeValue::DebugInfoRef","value":"AttributeValue::DebugInfoRef(DebugInfoOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the current `.debug_info` section, but possibly a\n different compilation unit from the current one.\n","sig":null,"attributes":[{"value":"/ An offset into the current `.debug_info` section, but possibly a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882608,"byte_end":882676,"line_start":1021,"line_end":1021,"column_start":5,"column_end":73}},{"value":"/ different compilation unit from the current one.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882681,"byte_end":882733,"line_start":1022,"line_end":1022,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7023},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882865,"byte_end":882880,"line_start":1026,"line_end":1026,"column_start":5,"column_end":20},"name":"DebugInfoRefSup","qualname":"::read::unit::AttributeValue::DebugInfoRefSup","value":"AttributeValue::DebugInfoRefSup(DebugInfoOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section of the supplementary object file.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section of the supplementary object file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882782,"byte_end":882860,"line_start":1025,"line_end":1025,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7026},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882962,"byte_end":882974,"line_start":1029,"line_end":1029,"column_start":5,"column_end":17},"name":"DebugLineRef","qualname":"::read::unit::AttributeValue::DebugLineRef","value":"AttributeValue::DebugLineRef(DebugLineOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":882912,"byte_end":882957,"line_start":1028,"line_end":1028,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7029},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883095,"byte_end":883111,"line_start":1032,"line_end":1032,"column_start":5,"column_end":21},"name":"LocationListsRef","qualname":"::read::unit::AttributeValue::LocationListsRef","value":"AttributeValue::LocationListsRef(LocationListsOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into either the `.debug_loc` section or the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_loc` section or the `.debug_loclists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883006,"byte_end":883090,"line_start":1031,"line_end":1031,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7032},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883219,"byte_end":883236,"line_start":1035,"line_end":1035,"column_start":5,"column_end":22},"name":"DebugLocListsBase","qualname":"::read::unit::AttributeValue::DebugLocListsBase","value":"AttributeValue::DebugLocListsBase(DebugLocListsBase<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset to a set of offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of offsets in the `.debug_loclists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883147,"byte_end":883214,"line_start":1034,"line_end":1034,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7035},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883343,"byte_end":883361,"line_start":1038,"line_end":1038,"column_start":5,"column_end":23},"name":"DebugLocListsIndex","qualname":"::read::unit::AttributeValue::DebugLocListsIndex","value":"AttributeValue::DebugLocListsIndex(DebugLocListsIndex<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An index into a set of offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of offsets in the `.debug_loclists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883270,"byte_end":883338,"line_start":1037,"line_end":1037,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7038},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883449,"byte_end":883464,"line_start":1041,"line_end":1041,"column_start":5,"column_end":20},"name":"DebugMacinfoRef","qualname":"::read::unit::AttributeValue::DebugMacinfoRef","value":"AttributeValue::DebugMacinfoRef(DebugMacinfoOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the `.debug_macinfo` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macinfo` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883396,"byte_end":883444,"line_start":1040,"line_end":1040,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7041},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883550,"byte_end":883563,"line_start":1044,"line_end":1044,"column_start":5,"column_end":18},"name":"DebugMacroRef","qualname":"::read::unit::AttributeValue::DebugMacroRef","value":"AttributeValue::DebugMacroRef(DebugMacroOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the `.debug_macro` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macro` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883499,"byte_end":883545,"line_start":1043,"line_end":1043,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7044},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883648,"byte_end":883661,"line_start":1047,"line_end":1047,"column_start":5,"column_end":18},"name":"RangeListsRef","qualname":"::read::unit::AttributeValue::RangeListsRef","value":"AttributeValue::RangeListsRef(RangeListsOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_ranges` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883596,"byte_end":883643,"line_start":1046,"line_end":1046,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7047},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883766,"byte_end":883783,"line_start":1050,"line_end":1050,"column_start":5,"column_end":22},"name":"DebugRngListsBase","qualname":"::read::unit::AttributeValue::DebugRngListsBase","value":"AttributeValue::DebugRngListsBase(DebugRngListsBase<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset to a set of offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of offsets in the `.debug_rnglists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883694,"byte_end":883761,"line_start":1049,"line_end":1049,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7050},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883890,"byte_end":883908,"line_start":1053,"line_end":1053,"column_start":5,"column_end":23},"name":"DebugRngListsIndex","qualname":"::read::unit::AttributeValue::DebugRngListsIndex","value":"AttributeValue::DebugRngListsIndex(DebugRngListsIndex<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An index into a set of offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of offsets in the `.debug_rnglists` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883817,"byte_end":883885,"line_start":1052,"line_end":1052,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7053},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883969,"byte_end":883982,"line_start":1056,"line_end":1056,"column_start":5,"column_end":18},"name":"DebugTypesRef","qualname":"::read::unit::AttributeValue::DebugTypesRef","value":"AttributeValue::DebugTypesRef(DebugTypeSignature)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" A type signature.\n","sig":null,"attributes":[{"value":"/ A type signature.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":883943,"byte_end":883964,"line_start":1055,"line_end":1055,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7056},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884058,"byte_end":884069,"line_start":1059,"line_end":1059,"column_start":5,"column_end":16},"name":"DebugStrRef","qualname":"::read::unit::AttributeValue::DebugStrRef","value":"AttributeValue::DebugStrRef(DebugStrOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884009,"byte_end":884053,"line_start":1058,"line_end":1058,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7059},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884182,"byte_end":884196,"line_start":1062,"line_end":1062,"column_start":5,"column_end":19},"name":"DebugStrRefSup","qualname":"::read::unit::AttributeValue::DebugStrRefSup","value":"AttributeValue::DebugStrRefSup(DebugStrOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section of the supplementary object file.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section of the supplementary object file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884100,"byte_end":884177,"line_start":1061,"line_end":1061,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7062},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884302,"byte_end":884321,"line_start":1065,"line_end":1065,"column_start":5,"column_end":24},"name":"DebugStrOffsetsBase","qualname":"::read::unit::AttributeValue::DebugStrOffsetsBase","value":"AttributeValue::DebugStrOffsetsBase(DebugStrOffsetsBase<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset to a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884227,"byte_end":884297,"line_start":1064,"line_end":1064,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7065},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884433,"byte_end":884453,"line_start":1068,"line_end":1068,"column_start":5,"column_end":25},"name":"DebugStrOffsetsIndex","qualname":"::read::unit::AttributeValue::DebugStrOffsetsIndex","value":"AttributeValue::DebugStrOffsetsIndex(DebugStrOffsetsIndex<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An index into a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884357,"byte_end":884428,"line_start":1067,"line_end":1067,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7068},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884544,"byte_end":884559,"line_start":1071,"line_end":1071,"column_start":5,"column_end":20},"name":"DebugLineStrRef","qualname":"::read::unit::AttributeValue::DebugLineStrRef","value":"AttributeValue::DebugLineStrRef(DebugLineStrOffset<Offset>)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An offset into the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line_str` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884490,"byte_end":884539,"line_start":1070,"line_end":1070,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7071},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884736,"byte_end":884742,"line_start":1075,"line_end":1075,"column_start":5,"column_end":11},"name":"String","qualname":"::read::unit::AttributeValue::String","value":"AttributeValue::String(R)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" A slice of bytes representing a string. Does not include a final null byte.\n Not guaranteed to be UTF-8 or anything like that.\n","sig":null,"attributes":[{"value":"/ A slice of bytes representing a string. Does not include a final null byte.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884594,"byte_end":884673,"line_start":1073,"line_end":1073,"column_start":5,"column_end":84}},{"value":"/ Not guaranteed to be UTF-8 or anything like that.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884678,"byte_end":884731,"line_start":1074,"line_end":1074,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7074},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884803,"byte_end":884811,"line_start":1078,"line_end":1078,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::read::unit::AttributeValue::Encoding","value":"AttributeValue::Encoding(constants::DwAte)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_encoding` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_encoding` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884752,"byte_end":884798,"line_start":1077,"line_end":1077,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7077},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884891,"byte_end":884902,"line_start":1081,"line_end":1081,"column_start":5,"column_end":16},"name":"DecimalSign","qualname":"::read::unit::AttributeValue::DecimalSign","value":"AttributeValue::DecimalSign(constants::DwDs)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_decimal_sign` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_decimal_sign` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884836,"byte_end":884886,"line_start":1080,"line_end":1080,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7080},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884978,"byte_end":884987,"line_start":1084,"line_end":1084,"column_start":5,"column_end":14},"name":"Endianity","qualname":"::read::unit::AttributeValue::Endianity","value":"AttributeValue::Endianity(constants::DwEnd)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_endianity` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_endianity` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":884926,"byte_end":884973,"line_start":1083,"line_end":1083,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7083},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885068,"byte_end":885081,"line_start":1087,"line_end":1087,"column_start":5,"column_end":18},"name":"Accessibility","qualname":"::read::unit::AttributeValue::Accessibility","value":"AttributeValue::Accessibility(constants::DwAccess)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_accessibility` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_accessibility` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885012,"byte_end":885063,"line_start":1086,"line_end":1086,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7086},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885162,"byte_end":885172,"line_start":1090,"line_end":1090,"column_start":5,"column_end":15},"name":"Visibility","qualname":"::read::unit::AttributeValue::Visibility","value":"AttributeValue::Visibility(constants::DwVis)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_visibility` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_visibility` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885109,"byte_end":885157,"line_start":1089,"line_end":1089,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7089},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885250,"byte_end":885260,"line_start":1093,"line_end":1093,"column_start":5,"column_end":15},"name":"Virtuality","qualname":"::read::unit::AttributeValue::Virtuality","value":"AttributeValue::Virtuality(constants::DwVirtuality)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_virtuality` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_virtuality` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885197,"byte_end":885245,"line_start":1092,"line_end":1092,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7092},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885343,"byte_end":885351,"line_start":1096,"line_end":1096,"column_start":5,"column_end":13},"name":"Language","qualname":"::read::unit::AttributeValue::Language","value":"AttributeValue::Language(constants::DwLang)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_language` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_language` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885292,"byte_end":885338,"line_start":1095,"line_end":1095,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7095},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885433,"byte_end":885445,"line_start":1099,"line_end":1099,"column_start":5,"column_end":17},"name":"AddressClass","qualname":"::read::unit::AttributeValue::AddressClass","value":"AttributeValue::AddressClass(constants::DwAddr)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_address_class` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_address_class` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885377,"byte_end":885428,"line_start":1098,"line_end":1098,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7098},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885529,"byte_end":885543,"line_start":1102,"line_end":1102,"column_start":5,"column_end":19},"name":"IdentifierCase","qualname":"::read::unit::AttributeValue::IdentifierCase","value":"AttributeValue::IdentifierCase(constants::DwId)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_identifier_case` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_identifier_case` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885471,"byte_end":885524,"line_start":1101,"line_end":1101,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7101},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885628,"byte_end":885645,"line_start":1105,"line_end":1105,"column_start":5,"column_end":22},"name":"CallingConvention","qualname":"::read::unit::AttributeValue::CallingConvention","value":"AttributeValue::CallingConvention(constants::DwCc)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_calling_convention` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_calling_convention` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885567,"byte_end":885623,"line_start":1104,"line_end":1104,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7104},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885718,"byte_end":885724,"line_start":1108,"line_end":1108,"column_start":5,"column_end":11},"name":"Inline","qualname":"::read::unit::AttributeValue::Inline","value":"AttributeValue::Inline(constants::DwInl)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_inline` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_inline` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885669,"byte_end":885713,"line_start":1107,"line_end":1107,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7107},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885800,"byte_end":885808,"line_start":1111,"line_end":1111,"column_start":5,"column_end":13},"name":"Ordering","qualname":"::read::unit::AttributeValue::Ordering","value":"AttributeValue::Ordering(constants::DwOrd)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_ordering` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_ordering` attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885749,"byte_end":885795,"line_start":1110,"line_end":1110,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7110},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885971,"byte_end":885980,"line_start":1115,"line_end":1115,"column_start":5,"column_end":14},"name":"FileIndex","qualname":"::read::unit::AttributeValue::FileIndex","value":"AttributeValue::FileIndex(u64)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An index into the filename entries from the line number information\n table for the compilation unit containing this value.\n","sig":null,"attributes":[{"value":"/ An index into the filename entries from the line number information","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885833,"byte_end":885904,"line_start":1113,"line_end":1113,"column_start":5,"column_end":76}},{"value":"/ table for the compilation unit containing this value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885909,"byte_end":885966,"line_start":1114,"line_end":1114,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7113},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886086,"byte_end":886091,"line_start":1119,"line_end":1119,"column_start":5,"column_end":10},"name":"DwoId","qualname":"::read::unit::AttributeValue::DwoId","value":"AttributeValue::DwoId(DwoId)","parent":{"krate":0,"index":6975},"children":[],"decl_id":null,"docs":" An implementation-defined identifier uniquely identifying a compilation\n unit.\n","sig":null,"attributes":[{"value":"/ An implementation-defined identifier uniquely identifying a compilation","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":885992,"byte_end":886067,"line_start":1117,"line_end":1117,"column_start":5,"column_end":80}},{"value":"/ unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886072,"byte_end":886081,"line_start":1118,"line_end":1118,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6975},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":879997,"byte_end":880011,"line_start":947,"line_end":947,"column_start":10,"column_end":24},"name":"AttributeValue","qualname":"::read::unit::AttributeValue","value":"pub enum AttributeValue<R, Offset = <R as Reader>::Offset> where\n         R: Reader<Offset = Offset>, Offset: ReaderOffset {\n\n    /// \"Refers to some location in the address space of the described program.\"\n    Addr(u64),\n\n    /// A slice of an arbitrary number of bytes.\n    Block(R),\n\n    /// A one byte constant data value. How to interpret the byte depends on context.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data1(u8),\n\n    /// A two byte constant data value. How to interpret the bytes depends on context.\n    ///\n    /// These bytes have been converted from `R::Endian`. This may need to be reversed\n    /// if this was not required.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data2(u16),\n\n    /// A four byte constant data value. How to interpret the bytes depends on context.\n    ///\n    /// These bytes have been converted from `R::Endian`. This may need to be reversed\n    /// if this was not required.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data4(u32),\n\n    /// An eight byte constant data value. How to interpret the bytes depends on context.\n    ///\n    /// These bytes have been converted from `R::Endian`. This may need to be reversed\n    /// if this was not required.\n    ///\n    /// From section 7 of the standard: \"Depending on context, it may be a\n    /// signed integer, an unsigned integer, a floating-point constant, or\n    /// anything else.\"\n    Data8(u64),\n\n    /// A signed integer constant.\n    Sdata(i64),\n\n    /// An unsigned integer constant.\n    Udata(u64),\n\n    /// \"The information bytes contain a DWARF expression (see Section 2.5) or\n    /// location description (see Section 2.6).\"\n    Exprloc(Expression<R>),\n\n    /// A boolean that indicates presence or absence of the attribute.\n    Flag(bool),\n\n    /// An offset into another section. Which section this is an offset into\n    /// depends on context.\n    SecOffset(Offset),\n\n    /// An offset to a set of addresses in the `.debug_addr` section.\n    DebugAddrBase(DebugAddrBase<Offset>),\n\n    /// An index into a set of addresses in the `.debug_addr` section.\n    DebugAddrIndex(DebugAddrIndex<Offset>),\n\n    /// An offset into the current compilation unit.\n    UnitRef(UnitOffset<Offset>),\n\n    /// An offset into the current `.debug_info` section, but possibly a\n    /// different compilation unit from the current one.\n    DebugInfoRef(DebugInfoOffset<Offset>),\n\n    /// An offset into the `.debug_info` section of the supplementary object file.\n    DebugInfoRefSup(DebugInfoOffset<Offset>),\n\n    /// An offset into the `.debug_line` section.\n    DebugLineRef(DebugLineOffset<Offset>),\n\n    /// An offset into either the `.debug_loc` section or the `.debug_loclists` section.\n    LocationListsRef(LocationListsOffset<Offset>),\n\n    /// An offset to a set of offsets in the `.debug_loclists` section.\n    DebugLocListsBase(DebugLocListsBase<Offset>),\n\n    /// An index into a set of offsets in the `.debug_loclists` section.\n    DebugLocListsIndex(DebugLocListsIndex<Offset>),\n\n    /// An offset into the `.debug_macinfo` section.\n    DebugMacinfoRef(DebugMacinfoOffset<Offset>),\n\n    /// An offset into the `.debug_macro` section.\n    DebugMacroRef(DebugMacroOffset<Offset>),\n\n    /// An offset into the `.debug_ranges` section.\n    RangeListsRef(RangeListsOffset<Offset>),\n\n    /// An offset to a set of offsets in the `.debug_rnglists` section.\n    DebugRngListsBase(DebugRngListsBase<Offset>),\n\n    /// An index into a set of offsets in the `.debug_rnglists` section.\n    DebugRngListsIndex(DebugRngListsIndex<Offset>),\n\n    /// A type signature.\n    DebugTypesRef(DebugTypeSignature),\n\n    /// An offset into the `.debug_str` section.\n    DebugStrRef(DebugStrOffset<Offset>),\n\n    /// An offset into the `.debug_str` section of the supplementary object file.\n    DebugStrRefSup(DebugStrOffset<Offset>),\n\n    /// An offset to a set of entries in the `.debug_str_offsets` section.\n    DebugStrOffsetsBase(DebugStrOffsetsBase<Offset>),\n\n    /// An index into a set of entries in the `.debug_str_offsets` section.\n    DebugStrOffsetsIndex(DebugStrOffsetsIndex<Offset>),\n\n    /// An offset into the `.debug_line_str` section.\n    DebugLineStrRef(DebugLineStrOffset<Offset>),\n\n    /// A slice of bytes representing a string. Does not include a final null byte.\n    /// Not guaranteed to be UTF-8 or anything like that.\n    String(R),\n\n    /// The value of a `DW_AT_encoding` attribute.\n    Encoding(constants::DwAte),\n\n    /// The value of a `DW_AT_decimal_sign` attribute.\n    DecimalSign(constants::DwDs),\n\n    /// The value of a `DW_AT_endianity` attribute.\n    Endianity(constants::DwEnd),\n\n    /// The value of a `DW_AT_accessibility` attribute.\n    Accessibility(constants::DwAccess),\n\n    /// The value of a `DW_AT_visibility` attribute.\n    Visibility(constants::DwVis),\n\n    /// The value of a `DW_AT_virtuality` attribute.\n    Virtuality(constants::DwVirtuality),\n\n    /// The value of a `DW_AT_language` attribute.\n    Language(constants::DwLang),\n\n    /// The value of a `DW_AT_address_class` attribute.\n    AddressClass(constants::DwAddr),\n\n    /// The value of a `DW_AT_identifier_case` attribute.\n    IdentifierCase(constants::DwId),\n\n    /// The value of a `DW_AT_calling_convention` attribute.\n    CallingConvention(constants::DwCc),\n\n    /// The value of a `DW_AT_inline` attribute.\n    Inline(constants::DwInl),\n\n    /// The value of a `DW_AT_ordering` attribute.\n    Ordering(constants::DwOrd),\n\n    /// An index into the filename entries from the line number information\n    /// table for the compilation unit containing this value.\n    FileIndex(u64),\n\n    /// An implementation-defined identifier uniquely identifying a compilation\n    /// unit.\n    DwoId(DwoId),\n}","parent":null,"children":[{"krate":0,"index":6978},{"krate":0,"index":6981},{"krate":0,"index":6984},{"krate":0,"index":6987},{"krate":0,"index":6990},{"krate":0,"index":6993},{"krate":0,"index":6996},{"krate":0,"index":6999},{"krate":0,"index":7002},{"krate":0,"index":7005},{"krate":0,"index":7008},{"krate":0,"index":7011},{"krate":0,"index":7014},{"krate":0,"index":7017},{"krate":0,"index":7020},{"krate":0,"index":7023},{"krate":0,"index":7026},{"krate":0,"index":7029},{"krate":0,"index":7032},{"krate":0,"index":7035},{"krate":0,"index":7038},{"krate":0,"index":7041},{"krate":0,"index":7044},{"krate":0,"index":7047},{"krate":0,"index":7050},{"krate":0,"index":7053},{"krate":0,"index":7056},{"krate":0,"index":7059},{"krate":0,"index":7062},{"krate":0,"index":7065},{"krate":0,"index":7068},{"krate":0,"index":7071},{"krate":0,"index":7074},{"krate":0,"index":7077},{"krate":0,"index":7080},{"krate":0,"index":7083},{"krate":0,"index":7086},{"krate":0,"index":7089},{"krate":0,"index":7092},{"krate":0,"index":7095},{"krate":0,"index":7098},{"krate":0,"index":7101},{"krate":0,"index":7104},{"krate":0,"index":7107},{"krate":0,"index":7110},{"krate":0,"index":7113}],"decl_id":null,"docs":" The value of an attribute in a `DebuggingInformationEntry`.\n","sig":null,"attributes":[{"value":"/ The value of an attribute in a `DebuggingInformationEntry`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":879714,"byte_end":879777,"line_start":941,"line_end":941,"column_start":1,"column_end":64}},{"value":"repr(u64)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":879930,"byte_end":879942,"line_start":945,"line_end":945,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":7142},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886257,"byte_end":886266,"line_start":1125,"line_end":1125,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::read::unit::Attribute","value":"Attribute {  }","parent":null,"children":[{"krate":0,"index":7144},{"krate":0,"index":7145}],"decl_id":null,"docs":" An attribute in a `DebuggingInformationEntry`, consisting of a name and\n associated value.\n","sig":null,"attributes":[{"value":"/ An attribute in a `DebuggingInformationEntry`, consisting of a name and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886103,"byte_end":886178,"line_start":1122,"line_end":1122,"column_start":1,"column_end":76}},{"value":"/ associated value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886179,"byte_end":886200,"line_start":1123,"line_end":1123,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886417,"byte_end":886421,"line_start":1132,"line_end":1132,"column_start":12,"column_end":16},"name":"name","qualname":"<Attribute<R>>::name","value":"pub fn name(&Self) -> constants::DwAt","parent":null,"children":[],"decl_id":null,"docs":" Get this attribute's name.\n","sig":null,"attributes":[{"value":"/ Get this attribute's name.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886375,"byte_end":886405,"line_start":1131,"line_end":1131,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886526,"byte_end":886535,"line_start":1137,"line_end":1137,"column_start":12,"column_end":21},"name":"raw_value","qualname":"<Attribute<R>>::raw_value","value":"pub fn raw_value(&Self) -> AttributeValue<R>","parent":null,"children":[],"decl_id":null,"docs":" Get this attribute's raw value.\n","sig":null,"attributes":[{"value":"/ Get this attribute's raw value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886479,"byte_end":886514,"line_start":1136,"line_end":1136,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":887104,"byte_end":887109,"line_start":1151,"line_end":1151,"column_start":12,"column_end":17},"name":"value","qualname":"<Attribute<R>>::value","value":"pub fn value(&Self) -> AttributeValue<R>","parent":null,"children":[],"decl_id":null,"docs":" Get this attribute's normalized value.","sig":null,"attributes":[{"value":"/ Get this attribute's normalized value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886604,"byte_end":886646,"line_start":1141,"line_end":1141,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886651,"byte_end":886654,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ Attribute values can potentially be encoded in multiple equivalent forms,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886659,"byte_end":886736,"line_start":1143,"line_end":1143,"column_start":5,"column_end":82}},{"value":"/ and may have special meaning depending on the attribute name.  This method","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886741,"byte_end":886819,"line_start":1144,"line_end":1144,"column_start":5,"column_end":83}},{"value":"/ converts the attribute value to a normalized form based on the attribute","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886824,"byte_end":886900,"line_start":1145,"line_end":1145,"column_start":5,"column_end":81}},{"value":"/ name.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886905,"byte_end":886914,"line_start":1146,"line_end":1146,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886919,"byte_end":886922,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ See \"Table 7.5: Attribute encodings\" and \"Table 7.6: Attribute form encodings\".","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886927,"byte_end":887010,"line_start":1148,"line_end":1148,"column_start":5,"column_end":88}},{"value":"allow(clippy :: cyclomatic_complexity)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":887015,"byte_end":887054,"line_start":1149,"line_end":1149,"column_start":5,"column_end":44}},{"value":"allow(clippy :: match_same_arms)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":887059,"byte_end":887092,"line_start":1150,"line_end":1150,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906227,"byte_end":906235,"line_start":1742,"line_end":1742,"column_start":12,"column_end":20},"name":"u8_value","qualname":"<Attribute<R>>::u8_value","value":"pub fn u8_value(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u8.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u8.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906151,"byte_end":906201,"line_start":1740,"line_end":1740,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906206,"byte_end":906215,"line_start":1741,"line_end":1741,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906377,"byte_end":906386,"line_start":1748,"line_end":1748,"column_start":12,"column_end":21},"name":"u16_value","qualname":"<Attribute<R>>::u16_value","value":"pub fn u16_value(&Self) -> Option<u16>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u16.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u16.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906300,"byte_end":906351,"line_start":1746,"line_end":1746,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906356,"byte_end":906365,"line_start":1747,"line_end":1747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1849},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906544,"byte_end":906555,"line_start":1754,"line_end":1754,"column_start":12,"column_end":23},"name":"udata_value","qualname":"<Attribute<R>>::udata_value","value":"pub fn udata_value(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an unsigned integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an unsigned integer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906453,"byte_end":906518,"line_start":1752,"line_end":1752,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906523,"byte_end":906532,"line_start":1753,"line_end":1753,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906712,"byte_end":906723,"line_start":1760,"line_end":1760,"column_start":12,"column_end":23},"name":"sdata_value","qualname":"<Attribute<R>>::sdata_value","value":"pub fn sdata_value(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a signed integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a signed integer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906624,"byte_end":906686,"line_start":1758,"line_end":1758,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906691,"byte_end":906700,"line_start":1759,"line_end":1759,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906873,"byte_end":906885,"line_start":1766,"line_end":1766,"column_start":12,"column_end":24},"name":"offset_value","qualname":"<Attribute<R>>::offset_value","value":"pub fn offset_value(&Self) -> Option<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an offset.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906792,"byte_end":906847,"line_start":1764,"line_end":1764,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906852,"byte_end":906861,"line_start":1765,"line_end":1765,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907270,"byte_end":907283,"line_start":1776,"line_end":1776,"column_start":12,"column_end":25},"name":"exprloc_value","qualname":"<Attribute<R>>::exprloc_value","value":"pub fn exprloc_value(&Self) -> Option<Expression<R>>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an expression or location buffer.","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an expression or location buffer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":906961,"byte_end":907039,"line_start":1770,"line_end":1770,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907044,"byte_end":907047,"line_start":1771,"line_end":1771,"column_start":5,"column_end":8}},{"value":"/ Expressions and locations may be `DW_FORM_block*` or `DW_FORM_exprloc`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907052,"byte_end":907127,"line_start":1772,"line_end":1772,"column_start":5,"column_end":80}},{"value":"/ The standard doesn't mention `DW_FORM_block*` as a possible form, but","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907132,"byte_end":907205,"line_start":1773,"line_end":1773,"column_start":5,"column_end":78}},{"value":"/ it is encountered in practice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907210,"byte_end":907244,"line_start":1774,"line_end":1774,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907249,"byte_end":907258,"line_start":1775,"line_end":1775,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907857,"byte_end":907869,"line_start":1790,"line_end":1790,"column_start":12,"column_end":24},"name":"string_value","qualname":"<Attribute<R>>::string_value","value":"pub fn string_value(&Self, &DebugStr<R>) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907364,"byte_end":907423,"line_start":1780,"line_end":1780,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907428,"byte_end":907431,"line_start":1781,"line_end":1781,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907436,"byte_end":907510,"line_start":1782,"line_end":1782,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907515,"byte_end":907583,"line_start":1783,"line_end":1783,"column_start":5,"column_end":73}},{"value":"/ section, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907588,"byte_end":907663,"line_start":1784,"line_end":1784,"column_start":5,"column_end":80}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907668,"byte_end":907707,"line_start":1785,"line_end":1785,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907712,"byte_end":907715,"line_start":1786,"line_end":1786,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907720,"byte_end":907789,"line_start":1787,"line_end":1787,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907794,"byte_end":907831,"line_start":1788,"line_end":1788,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907836,"byte_end":907845,"line_start":1789,"line_end":1789,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908553,"byte_end":908569,"line_start":1805,"line_end":1805,"column_start":12,"column_end":28},"name":"string_value_sup","qualname":"<Attribute<R>>::string_value_sup","value":"pub fn string_value_sup(&Self, &DebugStr<R>, Option<&DebugStr<R>>)\n-> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":907971,"byte_end":908030,"line_start":1794,"line_end":1794,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908035,"byte_end":908038,"line_start":1795,"line_end":1795,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908043,"byte_end":908117,"line_start":1796,"line_end":1796,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908122,"byte_end":908190,"line_start":1797,"line_end":1797,"column_start":5,"column_end":73}},{"value":"/ section, or a `DW_FORM_strp_sup` reference to an offset into a supplementary","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908195,"byte_end":908275,"line_start":1798,"line_end":1798,"column_start":5,"column_end":85}},{"value":"/ object file, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908280,"byte_end":908359,"line_start":1799,"line_end":1799,"column_start":5,"column_end":84}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908364,"byte_end":908403,"line_start":1800,"line_end":1800,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908408,"byte_end":908411,"line_start":1801,"line_end":1801,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908416,"byte_end":908485,"line_start":1802,"line_end":1802,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908490,"byte_end":908527,"line_start":1803,"line_end":1803,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908532,"byte_end":908541,"line_start":1804,"line_end":1804,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908930,"byte_end":908938,"line_start":1820,"line_end":1820,"column_start":12,"column_end":20},"name":"u8_value","qualname":"<AttributeValue<R, Offset>>::u8_value","value":"pub fn u8_value(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u8.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u8.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908868,"byte_end":908918,"line_start":1819,"line_end":1819,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":909210,"byte_end":909219,"line_start":1830,"line_end":1830,"column_start":12,"column_end":21},"name":"u16_value","qualname":"<AttributeValue<R, Offset>>::u16_value","value":"pub fn u16_value(&Self) -> Option<u16>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u16.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u16.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":909147,"byte_end":909198,"line_start":1829,"line_end":1829,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":909508,"byte_end":909519,"line_start":1840,"line_end":1840,"column_start":12,"column_end":23},"name":"udata_value","qualname":"<AttributeValue<R, Offset>>::udata_value","value":"pub fn udata_value(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an unsigned integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an unsigned integer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":909431,"byte_end":909496,"line_start":1839,"line_end":1839,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":910202,"byte_end":910213,"line_start":1859,"line_end":1859,"column_start":12,"column_end":23},"name":"sdata_value","qualname":"<AttributeValue<R, Offset>>::sdata_value","value":"pub fn sdata_value(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a signed integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a signed integer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":910128,"byte_end":910190,"line_start":1858,"line_end":1858,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":910938,"byte_end":910950,"line_start":1878,"line_end":1878,"column_start":12,"column_end":24},"name":"offset_value","qualname":"<AttributeValue<R, Offset>>::offset_value","value":"pub fn offset_value(&Self) -> Option<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an offset.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":910871,"byte_end":910926,"line_start":1877,"line_end":1877,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911546,"byte_end":911559,"line_start":1893,"line_end":1893,"column_start":12,"column_end":25},"name":"exprloc_value","qualname":"<AttributeValue<R, Offset>>::exprloc_value","value":"pub fn exprloc_value(&Self) -> Option<Expression<R>>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an expression or location buffer.","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an expression or location buffer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911251,"byte_end":911329,"line_start":1888,"line_end":1888,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911334,"byte_end":911337,"line_start":1889,"line_end":1889,"column_start":5,"column_end":8}},{"value":"/ Expressions and locations may be `DW_FORM_block*` or `DW_FORM_exprloc`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911342,"byte_end":911417,"line_start":1890,"line_end":1890,"column_start":5,"column_end":80}},{"value":"/ The standard doesn't mention `DW_FORM_block*` as a possible form, but","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911422,"byte_end":911495,"line_start":1891,"line_end":1891,"column_start":5,"column_end":78}},{"value":"/ it is encountered in practice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911500,"byte_end":911534,"line_start":1892,"line_end":1892,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912288,"byte_end":912300,"line_start":1910,"line_end":1910,"column_start":12,"column_end":24},"name":"string_value","qualname":"<AttributeValue<R, Offset>>::string_value","value":"pub fn string_value(&Self, &DebugStr<R>) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911809,"byte_end":911868,"line_start":1901,"line_end":1901,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911873,"byte_end":911876,"line_start":1902,"line_end":1902,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911881,"byte_end":911955,"line_start":1903,"line_end":1903,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":911960,"byte_end":912028,"line_start":1904,"line_end":1904,"column_start":5,"column_end":73}},{"value":"/ section, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912033,"byte_end":912108,"line_start":1905,"line_end":1905,"column_start":5,"column_end":80}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912113,"byte_end":912152,"line_start":1906,"line_end":1906,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912157,"byte_end":912160,"line_start":1907,"line_end":1907,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912165,"byte_end":912234,"line_start":1908,"line_end":1908,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912239,"byte_end":912276,"line_start":1909,"line_end":1909,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":913137,"byte_end":913153,"line_start":1928,"line_end":1928,"column_start":12,"column_end":28},"name":"string_value_sup","qualname":"<AttributeValue<R, Offset>>::string_value_sup","value":"pub fn string_value_sup(&Self, &DebugStr<R>, Option<&DebugStr<R>>)\n-> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912569,"byte_end":912628,"line_start":1918,"line_end":1918,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912633,"byte_end":912636,"line_start":1919,"line_end":1919,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912641,"byte_end":912715,"line_start":1920,"line_end":1920,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912720,"byte_end":912788,"line_start":1921,"line_end":1921,"column_start":5,"column_end":73}},{"value":"/ section, or a `DW_FORM_strp_sup` reference to an offset into a supplementary","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912793,"byte_end":912873,"line_start":1922,"line_end":1922,"column_start":5,"column_end":85}},{"value":"/ object file, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912878,"byte_end":912957,"line_start":1923,"line_end":1923,"column_start":5,"column_end":84}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":912962,"byte_end":913001,"line_start":1924,"line_end":1924,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":913006,"byte_end":913009,"line_start":1925,"line_end":1925,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":913014,"byte_end":913083,"line_start":1926,"line_end":1926,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":913088,"byte_end":913125,"line_start":1927,"line_end":1927,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":7165},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925551,"byte_end":925560,"line_start":2220,"line_end":2220,"column_start":12,"column_end":21},"name":"AttrsIter","qualname":"::read::unit::AttrsIter","value":"AttrsIter {  }","parent":null,"children":[{"krate":0,"index":7170},{"krate":0,"index":7171},{"krate":0,"index":7172}],"decl_id":null,"docs":" An iterator over a particular entry's attributes.","sig":null,"attributes":[{"value":"/ An iterator over a particular entry's attributes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925215,"byte_end":925268,"line_start":2211,"line_end":2211,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925269,"byte_end":925272,"line_start":2212,"line_end":2212,"column_start":1,"column_end":4}},{"value":"/ See [the documentation for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925273,"byte_end":925303,"line_start":2213,"line_end":2213,"column_start":1,"column_end":31}},{"value":"/ `DebuggingInformationEntry::attrs()`](./struct.DebuggingInformationEntry.html#method.attrs)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925304,"byte_end":925399,"line_start":2214,"line_end":2214,"column_start":1,"column_end":96}},{"value":"/ for details.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925400,"byte_end":925416,"line_start":2215,"line_end":2215,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925417,"byte_end":925420,"line_start":2216,"line_end":2216,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925421,"byte_end":925442,"line_start":2217,"line_end":2217,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925443,"byte_end":925509,"line_start":2218,"line_end":2218,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":926136,"byte_end":926140,"line_start":2234,"line_end":2234,"column_start":12,"column_end":16},"name":"next","qualname":"<AttrsIter>::next","value":"pub fn next(&mut Self) -> Result<Option<Attribute<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next attribute.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925814,"byte_end":925869,"line_start":2227,"line_end":2227,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925874,"byte_end":925877,"line_start":2228,"line_end":2228,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when iteration is finished. If an error","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925882,"byte_end":925940,"line_start":2229,"line_end":2229,"column_start":5,"column_end":63}},{"value":"/ occurs while parsing the next attribute, then this error","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925945,"byte_end":926005,"line_start":2230,"line_end":2230,"column_start":5,"column_end":65}},{"value":"/ is returned, and all subsequent calls return `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":926010,"byte_end":926066,"line_start":2231,"line_end":2231,"column_start":5,"column_end":61}},{"value":"allow(clippy :: inline_always)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":926071,"byte_end":926102,"line_start":2232,"line_end":2232,"column_start":5,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":926107,"byte_end":926124,"line_start":2233,"line_end":2233,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":7190},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929891,"byte_end":929901,"line_start":2333,"line_end":2333,"column_start":12,"column_end":22},"name":"EntriesRaw","qualname":"::read::unit::EntriesRaw","value":"EntriesRaw {  }","parent":null,"children":[{"krate":0,"index":7194},{"krate":0,"index":7195},{"krate":0,"index":7196},{"krate":0,"index":7197}],"decl_id":null,"docs":" A raw reader of the data that defines the Debugging Information Entries.","sig":null,"attributes":[{"value":"/ A raw reader of the data that defines the Debugging Information Entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":927582,"byte_end":927658,"line_start":2278,"line_end":2278,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":927659,"byte_end":927662,"line_start":2279,"line_end":2279,"column_start":1,"column_end":4}},{"value":"/ `EntriesRaw` provides primitives to read the components of Debugging Information","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":927663,"byte_end":927747,"line_start":2280,"line_end":2280,"column_start":1,"column_end":85}},{"value":"/ Entries (DIEs). A DIE consists of an abbreviation code (read with `read_abbreviation`)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":927748,"byte_end":927838,"line_start":2281,"line_end":2281,"column_start":1,"column_end":91}},{"value":"/ followed by a number of attributes (read with `read_attribute`).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":927839,"byte_end":927907,"line_start":2282,"line_end":2282,"column_start":1,"column_end":69}},{"value":"/ The user must provide the control flow to read these correctly.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":927908,"byte_end":927975,"line_start":2283,"line_end":2283,"column_start":1,"column_end":68}},{"value":"/ In particular, all attributes must always be read before reading another","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":927976,"byte_end":928052,"line_start":2284,"line_end":2284,"column_start":1,"column_end":77}},{"value":"/ abbreviation code.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928053,"byte_end":928075,"line_start":2285,"line_end":2285,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928076,"byte_end":928079,"line_start":2286,"line_end":2286,"column_start":1,"column_end":4}},{"value":"/ `EntriesRaw` lacks some features of `EntriesCursor`, such as the ability to skip","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928080,"byte_end":928164,"line_start":2287,"line_end":2287,"column_start":1,"column_end":85}},{"value":"/ to the next sibling DIE. However, this also allows it to optimize better, since it","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928165,"byte_end":928251,"line_start":2288,"line_end":2288,"column_start":1,"column_end":87}},{"value":"/ does not need to perform the extra bookkeeping required to support these features,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928252,"byte_end":928338,"line_start":2289,"line_end":2289,"column_start":1,"column_end":87}},{"value":"/ and thus it is suitable for cases where performance is important.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928339,"byte_end":928408,"line_start":2290,"line_end":2290,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928409,"byte_end":928412,"line_start":2291,"line_end":2291,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928413,"byte_end":928433,"line_start":2292,"line_end":2292,"column_start":1,"column_end":21}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928434,"byte_end":928452,"line_start":2293,"line_end":2293,"column_start":1,"column_end":19}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928453,"byte_end":928501,"line_start":2294,"line_end":2294,"column_start":1,"column_end":49}},{"value":"/ # let debug_info = gimli::DebugInfo::new(&[], gimli::LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928502,"byte_end":928573,"line_start":2295,"line_end":2295,"column_start":1,"column_end":72}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928574,"byte_end":928647,"line_start":2296,"line_end":2296,"column_start":1,"column_end":74}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928648,"byte_end":928679,"line_start":2297,"line_end":2297,"column_start":1,"column_end":32}},{"value":"/ # let debug_abbrev = gimli::DebugAbbrev::new(&[], gimli::LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928680,"byte_end":928755,"line_start":2298,"line_end":2298,"column_start":1,"column_end":76}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928756,"byte_end":928836,"line_start":2299,"line_end":2299,"column_start":1,"column_end":81}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928837,"byte_end":928883,"line_start":2300,"line_end":2300,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928884,"byte_end":928887,"line_start":2301,"line_end":2301,"column_start":1,"column_end":4}},{"value":"/ let mut entries = unit.entries_raw(&abbrevs, None)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928888,"byte_end":928944,"line_start":2302,"line_end":2302,"column_start":1,"column_end":57}},{"value":"/ while !entries.is_empty() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928945,"byte_end":928976,"line_start":2303,"line_end":2303,"column_start":1,"column_end":32}},{"value":"/     let abbrev = if let Some(abbrev) = entries.read_abbreviation()? {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":928977,"byte_end":929050,"line_start":2304,"line_end":2304,"column_start":1,"column_end":74}},{"value":"/         abbrev","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929051,"byte_end":929069,"line_start":2305,"line_end":2305,"column_start":1,"column_end":19}},{"value":"/     } else {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929070,"byte_end":929086,"line_start":2306,"line_end":2306,"column_start":1,"column_end":17}},{"value":"/         // Null entry with no attributes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929087,"byte_end":929132,"line_start":2307,"line_end":2307,"column_start":1,"column_end":46}},{"value":"/         continue","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929133,"byte_end":929153,"line_start":2308,"line_end":2308,"column_start":1,"column_end":21}},{"value":"/     };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929154,"byte_end":929164,"line_start":2309,"line_end":2309,"column_start":1,"column_end":11}},{"value":"/     match abbrev.tag() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929165,"byte_end":929193,"line_start":2310,"line_end":2310,"column_start":1,"column_end":29}},{"value":"/         gimli::DW_TAG_subprogram => {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929194,"byte_end":929235,"line_start":2311,"line_end":2311,"column_start":1,"column_end":42}},{"value":"/             // Loop over attributes for DIEs we care about.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929236,"byte_end":929299,"line_start":2312,"line_end":2312,"column_start":1,"column_end":64}},{"value":"/             for spec in abbrev.attributes() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929300,"byte_end":929349,"line_start":2313,"line_end":2313,"column_start":1,"column_end":50}},{"value":"/                 let attr = entries.read_attribute(*spec)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929350,"byte_end":929412,"line_start":2314,"line_end":2314,"column_start":1,"column_end":63}},{"value":"/                 match attr.name() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929413,"byte_end":929452,"line_start":2315,"line_end":2315,"column_start":1,"column_end":40}},{"value":"/                     // Handle attributes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929453,"byte_end":929498,"line_start":2316,"line_end":2316,"column_start":1,"column_end":46}},{"value":"/                     _ => {}","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929499,"byte_end":929530,"line_start":2317,"line_end":2317,"column_start":1,"column_end":32}},{"value":"/                 }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929531,"byte_end":929552,"line_start":2318,"line_end":2318,"column_start":1,"column_end":22}},{"value":"/             }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929553,"byte_end":929570,"line_start":2319,"line_end":2319,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929571,"byte_end":929584,"line_start":2320,"line_end":2320,"column_start":1,"column_end":14}},{"value":"/         _ => {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929585,"byte_end":929603,"line_start":2321,"line_end":2321,"column_start":1,"column_end":19}},{"value":"/             // Skip attributes for DIEs we don't care about.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929604,"byte_end":929668,"line_start":2322,"line_end":2322,"column_start":1,"column_end":65}},{"value":"/             for spec in abbrev.attributes() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929669,"byte_end":929718,"line_start":2323,"line_end":2323,"column_start":1,"column_end":50}},{"value":"/                 entries.read_attribute(*spec)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929719,"byte_end":929770,"line_start":2324,"line_end":2324,"column_start":1,"column_end":52}},{"value":"/             }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929771,"byte_end":929788,"line_start":2325,"line_end":2325,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929789,"byte_end":929802,"line_start":2326,"line_end":2326,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929803,"byte_end":929812,"line_start":2327,"line_end":2327,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929813,"byte_end":929818,"line_start":2328,"line_end":2328,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929819,"byte_end":929839,"line_start":2329,"line_end":2329,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929840,"byte_end":929847,"line_start":2330,"line_end":2330,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":929848,"byte_end":929855,"line_start":2331,"line_end":2331,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930190,"byte_end":930198,"line_start":2346,"line_end":2346,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EntriesRaw>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if there is no more input.\n","sig":null,"attributes":[{"value":"/ Return true if there is no more input.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930122,"byte_end":930164,"line_start":2344,"line_end":2344,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930169,"byte_end":930178,"line_start":2345,"line_end":2345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930455,"byte_end":930466,"line_start":2354,"line_end":2354,"column_start":12,"column_end":23},"name":"next_offset","qualname":"<EntriesRaw>::next_offset","value":"pub fn next_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the unit offset at which the reader will read next.","sig":null,"attributes":[{"value":"/ Return the unit offset at which the reader will read next.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930257,"byte_end":930319,"line_start":2350,"line_end":2350,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930324,"byte_end":930327,"line_start":2351,"line_end":2351,"column_start":5,"column_end":8}},{"value":"/ If you want the offset of the next entry, then this must be called prior to reading","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930332,"byte_end":930419,"line_start":2352,"line_end":2352,"column_start":5,"column_end":92}},{"value":"/ the next entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930424,"byte_end":930443,"line_start":2353,"line_end":2353,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1891},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930839,"byte_end":930849,"line_start":2363,"line_end":2363,"column_start":12,"column_end":22},"name":"next_depth","qualname":"<EntriesRaw>::next_depth","value":"pub fn next_depth(&Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Return the depth of the next entry.","sig":null,"attributes":[{"value":"/ Return the depth of the next entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930605,"byte_end":930644,"line_start":2358,"line_end":2358,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930649,"byte_end":930652,"line_start":2359,"line_end":2359,"column_start":5,"column_end":8}},{"value":"/ This depth is updated when `read_abbreviation` is called, and is updated","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930657,"byte_end":930733,"line_start":2360,"line_end":2360,"column_start":5,"column_end":81}},{"value":"/ based on null entries and the `has_children` field in the abbreviation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930738,"byte_end":930813,"line_start":2361,"line_end":2361,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930818,"byte_end":930827,"line_start":2362,"line_end":2362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931051,"byte_end":931068,"line_start":2371,"line_end":2371,"column_start":12,"column_end":29},"name":"read_abbreviation","qualname":"<EntriesRaw>::read_abbreviation","value":"pub fn read_abbreviation(&mut Self) -> Result<Option<&'abbrev Abbreviation>>","parent":null,"children":[],"decl_id":null,"docs":" Read an abbreviation code and lookup the corresponding `Abbreviation`.","sig":null,"attributes":[{"value":"/ Read an abbreviation code and lookup the corresponding `Abbreviation`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930898,"byte_end":930972,"line_start":2367,"line_end":2367,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930977,"byte_end":930980,"line_start":2368,"line_end":2368,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(None)` for null entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930985,"byte_end":931025,"line_start":2369,"line_end":2369,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931030,"byte_end":931039,"line_start":2370,"line_end":2370,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931545,"byte_end":931559,"line_start":2389,"line_end":2389,"column_start":12,"column_end":26},"name":"read_attribute","qualname":"<EntriesRaw>::read_attribute","value":"pub fn read_attribute(&mut Self, AttributeSpecification)\n-> Result<Attribute<R>>","parent":null,"children":[],"decl_id":null,"docs":" Read an attribute.\n","sig":null,"attributes":[{"value":"/ Read an attribute.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931497,"byte_end":931519,"line_start":2387,"line_end":2387,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931524,"byte_end":931533,"line_start":2388,"line_end":2388,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":7208},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932544,"byte_end":932557,"line_start":2408,"line_end":2408,"column_start":12,"column_end":25},"name":"EntriesCursor","qualname":"::read::unit::EntriesCursor","value":"EntriesCursor {  }","parent":null,"children":[{"krate":0,"index":7212},{"krate":0,"index":7213},{"krate":0,"index":7214},{"krate":0,"index":7215},{"krate":0,"index":7216}],"decl_id":null,"docs":" A cursor into the Debugging Information Entries tree for a compilation unit.","sig":null,"attributes":[{"value":"/ A cursor into the Debugging Information Entries tree for a compilation unit.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931705,"byte_end":931785,"line_start":2394,"line_end":2394,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931786,"byte_end":931789,"line_start":2395,"line_end":2395,"column_start":1,"column_end":4}},{"value":"/ The `EntriesCursor` can traverse the DIE tree in DFS order using `next_dfs()`,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931790,"byte_end":931872,"line_start":2396,"line_end":2396,"column_start":1,"column_end":83}},{"value":"/ or skip to the next sibling of the entry the cursor is currently pointing to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931873,"byte_end":931953,"line_start":2397,"line_end":2397,"column_start":1,"column_end":81}},{"value":"/ using `next_sibling()`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931954,"byte_end":931981,"line_start":2398,"line_end":2398,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931982,"byte_end":931985,"line_start":2399,"line_end":2399,"column_start":1,"column_end":4}},{"value":"/ It is also possible to traverse the DIE tree at a lower abstraction level","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":931986,"byte_end":932063,"line_start":2400,"line_end":2400,"column_start":1,"column_end":78}},{"value":"/ using `next_entry()`. This method does not skip over null entries, or provide","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932064,"byte_end":932145,"line_start":2401,"line_end":2401,"column_start":1,"column_end":82}},{"value":"/ any indication of the current tree depth. In this case, you must use `current()`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932146,"byte_end":932230,"line_start":2402,"line_end":2402,"column_start":1,"column_end":85}},{"value":"/ to obtain the current entry, and `current().has_children()` to determine if","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932231,"byte_end":932310,"line_start":2403,"line_end":2403,"column_start":1,"column_end":80}},{"value":"/ the entry following the current entry will be a sibling or child. `current()`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932311,"byte_end":932392,"line_start":2404,"line_end":2404,"column_start":1,"column_end":82}},{"value":"/ will return `None` if the current entry is a null entry, which signifies the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932393,"byte_end":932473,"line_start":2405,"line_end":2405,"column_start":1,"column_end":81}},{"value":"/ end of the current tree depth.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932474,"byte_end":932508,"line_start":2406,"line_end":2406,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":933094,"byte_end":933101,"line_start":2425,"line_end":2425,"column_start":12,"column_end":19},"name":"current","qualname":"<EntriesCursor>::current","value":"pub fn current(&Self) -> Option<&DebuggingInformationEntry>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the entry that the cursor is currently pointing to.","sig":null,"attributes":[{"value":"/ Get a reference to the entry that the cursor is currently pointing to.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932861,"byte_end":932935,"line_start":2420,"line_end":2420,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932940,"byte_end":932943,"line_start":2421,"line_end":2421,"column_start":5,"column_end":8}},{"value":"/ If the cursor is not pointing at an entry, or if the current entry is a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932948,"byte_end":933023,"line_start":2422,"line_end":2422,"column_start":5,"column_end":80}},{"value":"/ null entry, then `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":933028,"byte_end":933068,"line_start":2423,"line_end":2423,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":933073,"byte_end":933082,"line_start":2424,"line_end":2424,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":933421,"byte_end":933431,"line_start":2433,"line_end":2433,"column_start":12,"column_end":22},"name":"next_entry","qualname":"<EntriesCursor>::next_entry","value":"pub fn next_entry(&mut Self) -> Result<Option<()>>","parent":null,"children":[],"decl_id":null,"docs":" Move the cursor to the next DIE in the tree.","sig":null,"attributes":[{"value":"/ Move the cursor to the next DIE in the tree.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":933216,"byte_end":933264,"line_start":2429,"line_end":2429,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":933269,"byte_end":933272,"line_start":2430,"line_end":2430,"column_start":5,"column_end":8}},{"value":"/ Returns `Some` if there is a next entry, even if this entry is null.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":933277,"byte_end":933349,"line_start":2431,"line_end":2431,"column_start":5,"column_end":77}},{"value":"/ If there is no next entry, then `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":933354,"byte_end":933409,"line_start":2432,"line_end":2432,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938430,"byte_end":938438,"line_start":2582,"line_end":2582,"column_start":12,"column_end":20},"name":"next_dfs","qualname":"<EntriesCursor>::next_dfs","value":"pub fn next_dfs(&mut Self)\n-> Result<Option<(isize, &DebuggingInformationEntry)>>","parent":null,"children":[],"decl_id":null,"docs":" Move the cursor to the next DIE in the tree in DFS order.","sig":null,"attributes":[{"value":"/ Move the cursor to the next DIE in the tree in DFS order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934375,"byte_end":934436,"line_start":2464,"line_end":2464,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934441,"byte_end":934444,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ Upon successful movement of the cursor, return the delta traversal","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934449,"byte_end":934519,"line_start":2466,"line_end":2466,"column_start":5,"column_end":75}},{"value":"/ depth and the entry:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934524,"byte_end":934548,"line_start":2467,"line_end":2467,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934553,"byte_end":934556,"line_start":2468,"line_end":2468,"column_start":5,"column_end":8}},{"value":"/   * If we moved down into the previous current entry's children, we get","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934561,"byte_end":934636,"line_start":2469,"line_end":2469,"column_start":5,"column_end":80}},{"value":"/     `Some((1, entry))`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934641,"byte_end":934668,"line_start":2470,"line_end":2470,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934673,"byte_end":934676,"line_start":2471,"line_end":2471,"column_start":5,"column_end":8}},{"value":"/   * If we moved to the previous current entry's sibling, we get","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934681,"byte_end":934748,"line_start":2472,"line_end":2472,"column_start":5,"column_end":72}},{"value":"/     `Some((0, entry))`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934753,"byte_end":934780,"line_start":2473,"line_end":2473,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934785,"byte_end":934788,"line_start":2474,"line_end":2474,"column_start":5,"column_end":8}},{"value":"/   * If the previous entry does not have any siblings and we move up to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934793,"byte_end":934867,"line_start":2475,"line_end":2475,"column_start":5,"column_end":79}},{"value":"/     its parent's next sibling, then we get `Some((-1, entry))`. Note that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934872,"byte_end":934949,"line_start":2476,"line_end":2476,"column_start":5,"column_end":82}},{"value":"/     if the parent doesn't have a next sibling, then it could go up to the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":934954,"byte_end":935031,"line_start":2477,"line_end":2477,"column_start":5,"column_end":82}},{"value":"/     parent's parent's next sibling and return `Some((-2, entry))`, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935036,"byte_end":935111,"line_start":2478,"line_end":2478,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935116,"byte_end":935119,"line_start":2479,"line_end":2479,"column_start":5,"column_end":8}},{"value":"/ If there is no next entry, then `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935124,"byte_end":935179,"line_start":2480,"line_end":2480,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935184,"byte_end":935187,"line_start":2481,"line_end":2481,"column_start":5,"column_end":8}},{"value":"/ Here is an example that finds the first entry in a compilation unit that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935192,"byte_end":935268,"line_start":2482,"line_end":2482,"column_start":5,"column_end":81}},{"value":"/ does not have any children.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935273,"byte_end":935304,"line_start":2483,"line_end":2483,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935309,"byte_end":935312,"line_start":2484,"line_end":2484,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935317,"byte_end":935324,"line_start":2485,"line_end":2485,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935329,"byte_end":935385,"line_start":2486,"line_end":2486,"column_start":5,"column_end":61}},{"value":"/ # let info_buf = [","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935390,"byte_end":935412,"line_start":2487,"line_end":2487,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935417,"byte_end":935452,"line_start":2488,"line_end":2488,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935457,"byte_end":935462,"line_start":2489,"line_end":2489,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 25","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935467,"byte_end":935503,"line_start":2490,"line_end":2490,"column_start":5,"column_end":41}},{"value":"/ #     0x19, 0x00, 0x00, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935508,"byte_end":935541,"line_start":2491,"line_end":2491,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935546,"byte_end":935568,"line_start":2492,"line_end":2492,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935573,"byte_end":935594,"line_start":2493,"line_end":2493,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935599,"byte_end":935631,"line_start":2494,"line_end":2494,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935636,"byte_end":935669,"line_start":2495,"line_end":2495,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935674,"byte_end":935699,"line_start":2496,"line_end":2496,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935704,"byte_end":935719,"line_start":2497,"line_end":2497,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935724,"byte_end":935729,"line_start":2498,"line_end":2498,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935734,"byte_end":935751,"line_start":2499,"line_end":2499,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935756,"byte_end":935761,"line_start":2500,"line_end":2500,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935766,"byte_end":935796,"line_start":2501,"line_end":2501,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935801,"byte_end":935816,"line_start":2502,"line_end":2502,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935821,"byte_end":935876,"line_start":2503,"line_end":2503,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935881,"byte_end":935914,"line_start":2504,"line_end":2504,"column_start":5,"column_end":38}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935919,"byte_end":935924,"line_start":2505,"line_end":2505,"column_start":5,"column_end":10}},{"value":"/ #       // Children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935929,"byte_end":935952,"line_start":2506,"line_end":2506,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935957,"byte_end":935962,"line_start":2507,"line_end":2507,"column_start":5,"column_end":10}},{"value":"/ #       // Abbreviation code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":935967,"byte_end":935999,"line_start":2508,"line_end":2508,"column_start":5,"column_end":37}},{"value":"/ #       0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936004,"byte_end":936021,"line_start":2509,"line_end":2509,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936026,"byte_end":936083,"line_start":2510,"line_end":2510,"column_start":5,"column_end":62}},{"value":"/ #       0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936088,"byte_end":936123,"line_start":2511,"line_end":2511,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936128,"byte_end":936133,"line_start":2512,"line_end":2512,"column_start":5,"column_end":10}},{"value":"/ #         // Children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936138,"byte_end":936163,"line_start":2513,"line_end":2513,"column_start":5,"column_end":30}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936168,"byte_end":936173,"line_start":2514,"line_end":2514,"column_start":5,"column_end":10}},{"value":"/ #         // Abbreviation code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936178,"byte_end":936212,"line_start":2515,"line_end":2515,"column_start":5,"column_end":39}},{"value":"/ #         0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936217,"byte_end":936236,"line_start":2516,"line_end":2516,"column_start":5,"column_end":24}},{"value":"/ #         // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936241,"byte_end":936300,"line_start":2517,"line_end":2517,"column_start":5,"column_end":64}},{"value":"/ #         0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936305,"byte_end":936342,"line_start":2518,"line_end":2518,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936347,"byte_end":936352,"line_start":2519,"line_end":2519,"column_start":5,"column_end":10}},{"value":"/ #           // Children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936357,"byte_end":936384,"line_start":2520,"line_end":2520,"column_start":5,"column_end":32}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936389,"byte_end":936394,"line_start":2521,"line_end":2521,"column_start":5,"column_end":10}},{"value":"/ #           // End of children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936399,"byte_end":936433,"line_start":2522,"line_end":2522,"column_start":5,"column_end":39}},{"value":"/ #           0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936438,"byte_end":936459,"line_start":2523,"line_end":2523,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936464,"byte_end":936469,"line_start":2524,"line_end":2524,"column_start":5,"column_end":10}},{"value":"/ #         // End of children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936474,"byte_end":936506,"line_start":2525,"line_end":2525,"column_start":5,"column_end":37}},{"value":"/ #         0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936511,"byte_end":936530,"line_start":2526,"line_end":2526,"column_start":5,"column_end":24}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936535,"byte_end":936540,"line_start":2527,"line_end":2527,"column_start":5,"column_end":10}},{"value":"/ #       // End of children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936545,"byte_end":936575,"line_start":2528,"line_end":2528,"column_start":5,"column_end":35}},{"value":"/ #       0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936580,"byte_end":936597,"line_start":2529,"line_end":2529,"column_start":5,"column_end":22}},{"value":"/ # ];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936602,"byte_end":936610,"line_start":2530,"line_end":2530,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936615,"byte_end":936678,"line_start":2531,"line_end":2531,"column_start":5,"column_end":68}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936683,"byte_end":936688,"line_start":2532,"line_end":2532,"column_start":5,"column_end":10}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936693,"byte_end":936717,"line_start":2533,"line_end":2533,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936722,"byte_end":936739,"line_start":2534,"line_end":2534,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936744,"byte_end":936759,"line_start":2535,"line_end":2535,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936764,"byte_end":936794,"line_start":2536,"line_end":2536,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936799,"byte_end":936814,"line_start":2537,"line_end":2537,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_yes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936819,"byte_end":936847,"line_start":2538,"line_end":2538,"column_start":5,"column_end":33}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936852,"byte_end":936867,"line_start":2539,"line_end":2539,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936872,"byte_end":936901,"line_start":2540,"line_end":2540,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936906,"byte_end":936948,"line_start":2541,"line_end":2541,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936953,"byte_end":936970,"line_start":2542,"line_end":2542,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":936975,"byte_end":937021,"line_start":2543,"line_end":2543,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937026,"byte_end":937043,"line_start":2544,"line_end":2544,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937048,"byte_end":937075,"line_start":2545,"line_end":2545,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937080,"byte_end":937095,"line_start":2546,"line_end":2546,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937100,"byte_end":937115,"line_start":2547,"line_end":2547,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937120,"byte_end":937148,"line_start":2548,"line_end":2548,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937153,"byte_end":937167,"line_start":2549,"line_end":2549,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937172,"byte_end":937180,"line_start":2550,"line_end":2550,"column_start":5,"column_end":13}},{"value":"/ # let debug_abbrev = DebugAbbrev::new(&abbrev_buf, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937185,"byte_end":937254,"line_start":2551,"line_end":2551,"column_start":5,"column_end":74}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937259,"byte_end":937264,"line_start":2552,"line_end":2552,"column_start":5,"column_end":10}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937269,"byte_end":937342,"line_start":2553,"line_end":2553,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937347,"byte_end":937350,"line_start":2554,"line_end":2554,"column_start":5,"column_end":8}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937355,"byte_end":937386,"line_start":2555,"line_end":2555,"column_start":5,"column_end":36}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937391,"byte_end":937471,"line_start":2556,"line_end":2556,"column_start":5,"column_end":85}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937476,"byte_end":937522,"line_start":2557,"line_end":2557,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937527,"byte_end":937530,"line_start":2558,"line_end":2558,"column_start":5,"column_end":8}},{"value":"/ let mut first_entry_with_no_children = None;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937535,"byte_end":937583,"line_start":2559,"line_end":2559,"column_start":5,"column_end":53}},{"value":"/ let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937588,"byte_end":937632,"line_start":2560,"line_end":2560,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937637,"byte_end":937640,"line_start":2561,"line_end":2561,"column_start":5,"column_end":8}},{"value":"/ // Move the cursor to the root.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937645,"byte_end":937680,"line_start":2562,"line_end":2562,"column_start":5,"column_end":40}},{"value":"/ assert!(cursor.next_dfs().unwrap().is_some());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937685,"byte_end":937735,"line_start":2563,"line_end":2563,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937740,"byte_end":937743,"line_start":2564,"line_end":2564,"column_start":5,"column_end":8}},{"value":"/ // Traverse the DIE tree in depth-first search order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937748,"byte_end":937805,"line_start":2565,"line_end":2565,"column_start":5,"column_end":62}},{"value":"/ let mut depth = 0;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937810,"byte_end":937832,"line_start":2566,"line_end":2566,"column_start":5,"column_end":27}},{"value":"/ while let Some((delta_depth, current)) = cursor.next_dfs().expect(\"Should parse next dfs\") {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937837,"byte_end":937933,"line_start":2567,"line_end":2567,"column_start":5,"column_end":101}},{"value":"/     // Update depth value, and break out of the loop when we","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":937938,"byte_end":938002,"line_start":2568,"line_end":2568,"column_start":5,"column_end":69}},{"value":"/     // return to the original starting position.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938007,"byte_end":938059,"line_start":2569,"line_end":2569,"column_start":5,"column_end":57}},{"value":"/     depth += delta_depth;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938064,"byte_end":938093,"line_start":2570,"line_end":2570,"column_start":5,"column_end":34}},{"value":"/     if depth <= 0 {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938098,"byte_end":938121,"line_start":2571,"line_end":2571,"column_start":5,"column_end":28}},{"value":"/         break;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938126,"byte_end":938144,"line_start":2572,"line_end":2572,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938149,"byte_end":938158,"line_start":2573,"line_end":2573,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938163,"byte_end":938166,"line_start":2574,"line_end":2574,"column_start":5,"column_end":8}},{"value":"/     first_entry_with_no_children = Some(current.clone());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938171,"byte_end":938232,"line_start":2575,"line_end":2575,"column_start":5,"column_end":66}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938237,"byte_end":938242,"line_start":2576,"line_end":2576,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938247,"byte_end":938250,"line_start":2577,"line_end":2577,"column_start":5,"column_end":8}},{"value":"/ println!(\"The first entry with no children is {:?}\",","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938255,"byte_end":938311,"line_start":2578,"line_end":2578,"column_start":5,"column_end":61}},{"value":"/          first_entry_with_no_children.unwrap());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938316,"byte_end":938368,"line_start":2579,"line_end":2579,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938373,"byte_end":938380,"line_start":2580,"line_end":2580,"column_start":5,"column_end":12}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":938385,"byte_end":938418,"line_start":2581,"line_end":2581,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942477,"byte_end":942489,"line_start":2707,"line_end":2707,"column_start":12,"column_end":24},"name":"next_sibling","qualname":"<EntriesCursor>::next_sibling","value":"pub fn next_sibling(&mut Self) -> Result<Option<&DebuggingInformationEntry>>","parent":null,"children":[],"decl_id":null,"docs":" Move the cursor to the next sibling DIE of the current one.","sig":null,"attributes":[{"value":"/ Move the cursor to the next sibling DIE of the current one.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939037,"byte_end":939100,"line_start":2601,"line_end":2601,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939105,"byte_end":939108,"line_start":2602,"line_end":2602,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(Some(entry))` when the cursor has been moved to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939113,"byte_end":939176,"line_start":2603,"line_end":2603,"column_start":5,"column_end":68}},{"value":"/ the next sibling, `Ok(None)` when there is no next sibling.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939181,"byte_end":939244,"line_start":2604,"line_end":2604,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939249,"byte_end":939252,"line_start":2605,"line_end":2605,"column_start":5,"column_end":8}},{"value":"/ The depth of the cursor is never changed if this method returns `Ok`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939257,"byte_end":939330,"line_start":2606,"line_end":2606,"column_start":5,"column_end":78}},{"value":"/ Once `Ok(None)` is returned, this method will continue to return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939335,"byte_end":939403,"line_start":2607,"line_end":2607,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` until either `next_entry` or `next_dfs` is called.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939408,"byte_end":939473,"line_start":2608,"line_end":2608,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939478,"byte_end":939481,"line_start":2609,"line_end":2609,"column_start":5,"column_end":8}},{"value":"/ Here is an example that iterates over all of the direct children of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939486,"byte_end":939561,"line_start":2610,"line_end":2610,"column_start":5,"column_end":80}},{"value":"/ root entry:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939566,"byte_end":939581,"line_start":2611,"line_end":2611,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939586,"byte_end":939589,"line_start":2612,"line_end":2612,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939594,"byte_end":939601,"line_start":2613,"line_end":2613,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939606,"byte_end":939662,"line_start":2614,"line_end":2614,"column_start":5,"column_end":61}},{"value":"/ # let info_buf = [","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939667,"byte_end":939689,"line_start":2615,"line_end":2615,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939694,"byte_end":939729,"line_start":2616,"line_end":2616,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939734,"byte_end":939739,"line_start":2617,"line_end":2617,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 25","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939744,"byte_end":939780,"line_start":2618,"line_end":2618,"column_start":5,"column_end":41}},{"value":"/ #     0x19, 0x00, 0x00, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939785,"byte_end":939818,"line_start":2619,"line_end":2619,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939823,"byte_end":939845,"line_start":2620,"line_end":2620,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939850,"byte_end":939871,"line_start":2621,"line_end":2621,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939876,"byte_end":939908,"line_start":2622,"line_end":2622,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939913,"byte_end":939946,"line_start":2623,"line_end":2623,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939951,"byte_end":939976,"line_start":2624,"line_end":2624,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":939981,"byte_end":939996,"line_start":2625,"line_end":2625,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940001,"byte_end":940006,"line_start":2626,"line_end":2626,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940011,"byte_end":940028,"line_start":2627,"line_end":2627,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940033,"byte_end":940038,"line_start":2628,"line_end":2628,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940043,"byte_end":940073,"line_start":2629,"line_end":2629,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940078,"byte_end":940093,"line_start":2630,"line_end":2630,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940098,"byte_end":940153,"line_start":2631,"line_end":2631,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940158,"byte_end":940191,"line_start":2632,"line_end":2632,"column_start":5,"column_end":38}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940196,"byte_end":940201,"line_start":2633,"line_end":2633,"column_start":5,"column_end":10}},{"value":"/ #       // Children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940206,"byte_end":940229,"line_start":2634,"line_end":2634,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940234,"byte_end":940239,"line_start":2635,"line_end":2635,"column_start":5,"column_end":10}},{"value":"/ #       // Abbreviation code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940244,"byte_end":940276,"line_start":2636,"line_end":2636,"column_start":5,"column_end":37}},{"value":"/ #       0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940281,"byte_end":940298,"line_start":2637,"line_end":2637,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940303,"byte_end":940360,"line_start":2638,"line_end":2638,"column_start":5,"column_end":62}},{"value":"/ #       0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940365,"byte_end":940400,"line_start":2639,"line_end":2639,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940405,"byte_end":940410,"line_start":2640,"line_end":2640,"column_start":5,"column_end":10}},{"value":"/ #         // Children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940415,"byte_end":940440,"line_start":2641,"line_end":2641,"column_start":5,"column_end":30}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940445,"byte_end":940450,"line_start":2642,"line_end":2642,"column_start":5,"column_end":10}},{"value":"/ #         // Abbreviation code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940455,"byte_end":940489,"line_start":2643,"line_end":2643,"column_start":5,"column_end":39}},{"value":"/ #         0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940494,"byte_end":940513,"line_start":2644,"line_end":2644,"column_start":5,"column_end":24}},{"value":"/ #         // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940518,"byte_end":940577,"line_start":2645,"line_end":2645,"column_start":5,"column_end":64}},{"value":"/ #         0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940582,"byte_end":940619,"line_start":2646,"line_end":2646,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940624,"byte_end":940629,"line_start":2647,"line_end":2647,"column_start":5,"column_end":10}},{"value":"/ #           // Children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940634,"byte_end":940661,"line_start":2648,"line_end":2648,"column_start":5,"column_end":32}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940666,"byte_end":940671,"line_start":2649,"line_end":2649,"column_start":5,"column_end":10}},{"value":"/ #           // End of children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940676,"byte_end":940710,"line_start":2650,"line_end":2650,"column_start":5,"column_end":39}},{"value":"/ #           0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940715,"byte_end":940736,"line_start":2651,"line_end":2651,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940741,"byte_end":940746,"line_start":2652,"line_end":2652,"column_start":5,"column_end":10}},{"value":"/ #         // End of children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940751,"byte_end":940783,"line_start":2653,"line_end":2653,"column_start":5,"column_end":37}},{"value":"/ #         0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940788,"byte_end":940807,"line_start":2654,"line_end":2654,"column_start":5,"column_end":24}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940812,"byte_end":940817,"line_start":2655,"line_end":2655,"column_start":5,"column_end":10}},{"value":"/ #       // End of children","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940822,"byte_end":940852,"line_start":2656,"line_end":2656,"column_start":5,"column_end":35}},{"value":"/ #       0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940857,"byte_end":940874,"line_start":2657,"line_end":2657,"column_start":5,"column_end":22}},{"value":"/ # ];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940879,"byte_end":940887,"line_start":2658,"line_end":2658,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940892,"byte_end":940955,"line_start":2659,"line_end":2659,"column_start":5,"column_end":68}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940960,"byte_end":940965,"line_start":2660,"line_end":2660,"column_start":5,"column_end":10}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":940970,"byte_end":941043,"line_start":2661,"line_end":2661,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941048,"byte_end":941051,"line_start":2662,"line_end":2662,"column_start":5,"column_end":8}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941056,"byte_end":941080,"line_start":2663,"line_end":2663,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941085,"byte_end":941102,"line_start":2664,"line_end":2664,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941107,"byte_end":941122,"line_start":2665,"line_end":2665,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941127,"byte_end":941157,"line_start":2666,"line_end":2666,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941162,"byte_end":941177,"line_start":2667,"line_end":2667,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_yes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941182,"byte_end":941210,"line_start":2668,"line_end":2668,"column_start":5,"column_end":33}},{"value":"/ #     0x01,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941215,"byte_end":941230,"line_start":2669,"line_end":2669,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941235,"byte_end":941264,"line_start":2670,"line_end":2670,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941269,"byte_end":941311,"line_start":2671,"line_end":2671,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941316,"byte_end":941333,"line_start":2672,"line_end":2672,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941338,"byte_end":941384,"line_start":2673,"line_end":2673,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941389,"byte_end":941406,"line_start":2674,"line_end":2674,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941411,"byte_end":941438,"line_start":2675,"line_end":2675,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941443,"byte_end":941458,"line_start":2676,"line_end":2676,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941463,"byte_end":941478,"line_start":2677,"line_end":2677,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941483,"byte_end":941511,"line_start":2678,"line_end":2678,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941516,"byte_end":941530,"line_start":2679,"line_end":2679,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941535,"byte_end":941543,"line_start":2680,"line_end":2680,"column_start":5,"column_end":13}},{"value":"/ # let debug_abbrev = DebugAbbrev::new(&abbrev_buf, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941548,"byte_end":941617,"line_start":2681,"line_end":2681,"column_start":5,"column_end":74}},{"value":"/ #","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941622,"byte_end":941627,"line_start":2682,"line_end":2682,"column_start":5,"column_end":10}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941632,"byte_end":941663,"line_start":2683,"line_end":2683,"column_start":5,"column_end":36}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941668,"byte_end":941748,"line_start":2684,"line_end":2684,"column_start":5,"column_end":85}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941753,"byte_end":941799,"line_start":2685,"line_end":2685,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941804,"byte_end":941807,"line_start":2686,"line_end":2686,"column_start":5,"column_end":8}},{"value":"/ let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941812,"byte_end":941856,"line_start":2687,"line_end":2687,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941861,"byte_end":941864,"line_start":2688,"line_end":2688,"column_start":5,"column_end":8}},{"value":"/ // Move the cursor to the root.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941869,"byte_end":941904,"line_start":2689,"line_end":2689,"column_start":5,"column_end":40}},{"value":"/ assert!(cursor.next_dfs().unwrap().is_some());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941909,"byte_end":941959,"line_start":2690,"line_end":2690,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941964,"byte_end":941967,"line_start":2691,"line_end":2691,"column_start":5,"column_end":8}},{"value":"/ // Move the cursor to the root's first child.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":941972,"byte_end":942021,"line_start":2692,"line_end":2692,"column_start":5,"column_end":54}},{"value":"/ assert!(cursor.next_dfs().unwrap().is_some());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942026,"byte_end":942076,"line_start":2693,"line_end":2693,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942081,"byte_end":942084,"line_start":2694,"line_end":2694,"column_start":5,"column_end":8}},{"value":"/ // Iterate the root's children.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942089,"byte_end":942124,"line_start":2695,"line_end":2695,"column_start":5,"column_end":40}},{"value":"/ loop {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942129,"byte_end":942139,"line_start":2696,"line_end":2696,"column_start":5,"column_end":15}},{"value":"/     {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942144,"byte_end":942153,"line_start":2697,"line_end":2697,"column_start":5,"column_end":14}},{"value":"/         let current = cursor.current().expect(\"Should be at an entry\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942158,"byte_end":942233,"line_start":2698,"line_end":2698,"column_start":5,"column_end":80}},{"value":"/         println!(\"{:?} is a child of the root\", current);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942238,"byte_end":942299,"line_start":2699,"line_end":2699,"column_start":5,"column_end":66}},{"value":"/     }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942304,"byte_end":942313,"line_start":2700,"line_end":2700,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942318,"byte_end":942321,"line_start":2701,"line_end":2701,"column_start":5,"column_end":8}},{"value":"/     if cursor.next_sibling().expect(\"Should parse next sibling\").is_none() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942326,"byte_end":942406,"line_start":2702,"line_end":2702,"column_start":5,"column_end":85}},{"value":"/         break;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942411,"byte_end":942429,"line_start":2703,"line_end":2703,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942434,"byte_end":942443,"line_start":2704,"line_end":2704,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942448,"byte_end":942453,"line_start":2705,"line_end":2705,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":942458,"byte_end":942465,"line_start":2706,"line_end":2706,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7227},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945558,"byte_end":945569,"line_start":2793,"line_end":2793,"column_start":12,"column_end":23},"name":"EntriesTree","qualname":"::read::unit::EntriesTree","value":"EntriesTree {  }","parent":null,"children":[{"krate":0,"index":7231},{"krate":0,"index":7232},{"krate":0,"index":7233},{"krate":0,"index":7234},{"krate":0,"index":7235},{"krate":0,"index":7236}],"decl_id":null,"docs":" The state information for a tree view of the Debugging Information Entries.","sig":null,"attributes":[{"value":"/ The state information for a tree view of the Debugging Information Entries.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944045,"byte_end":944124,"line_start":2752,"line_end":2752,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944125,"byte_end":944128,"line_start":2753,"line_end":2753,"column_start":1,"column_end":4}},{"value":"/ The `EntriesTree` can be used to recursively iterate through the DIE","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944129,"byte_end":944201,"line_start":2754,"line_end":2754,"column_start":1,"column_end":73}},{"value":"/ tree, following the parent/child relationships. The `EntriesTree` contains","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944202,"byte_end":944280,"line_start":2755,"line_end":2755,"column_start":1,"column_end":79}},{"value":"/ shared state for all nodes in the tree, avoiding any duplicate parsing of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944281,"byte_end":944358,"line_start":2756,"line_end":2756,"column_start":1,"column_end":78}},{"value":"/ entries during the traversal.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944359,"byte_end":944392,"line_start":2757,"line_end":2757,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944393,"byte_end":944396,"line_start":2758,"line_end":2758,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944397,"byte_end":944417,"line_start":2759,"line_end":2759,"column_start":1,"column_end":21}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944418,"byte_end":944436,"line_start":2760,"line_end":2760,"column_start":1,"column_end":19}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944437,"byte_end":944485,"line_start":2761,"line_end":2761,"column_start":1,"column_end":49}},{"value":"/ # let debug_info = gimli::DebugInfo::new(&[], gimli::LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944486,"byte_end":944557,"line_start":2762,"line_end":2762,"column_start":1,"column_end":72}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944558,"byte_end":944631,"line_start":2763,"line_end":2763,"column_start":1,"column_end":74}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944632,"byte_end":944663,"line_start":2764,"line_end":2764,"column_start":1,"column_end":32}},{"value":"/ # let debug_abbrev = gimli::DebugAbbrev::new(&[], gimli::LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944664,"byte_end":944739,"line_start":2765,"line_end":2765,"column_start":1,"column_end":76}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944740,"byte_end":944820,"line_start":2766,"line_end":2766,"column_start":1,"column_end":81}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944821,"byte_end":944867,"line_start":2767,"line_end":2767,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944868,"byte_end":944871,"line_start":2768,"line_end":2768,"column_start":1,"column_end":4}},{"value":"/ let mut tree = unit.entries_tree(&abbrevs, None)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944872,"byte_end":944926,"line_start":2769,"line_end":2769,"column_start":1,"column_end":55}},{"value":"/ let root = tree.root()?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944927,"byte_end":944955,"line_start":2770,"line_end":2770,"column_start":1,"column_end":29}},{"value":"/ process_tree(root)?;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944956,"byte_end":944980,"line_start":2771,"line_end":2771,"column_start":1,"column_end":25}},{"value":"/ # unreachable!()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":944981,"byte_end":945001,"line_start":2772,"line_end":2772,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945002,"byte_end":945009,"line_start":2773,"line_end":2773,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945010,"byte_end":945013,"line_start":2774,"line_end":2774,"column_start":1,"column_end":4}},{"value":"/ fn process_tree<R>(mut node: gimli::EntriesTreeNode<R>) -> gimli::Result<()>","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945014,"byte_end":945094,"line_start":2775,"line_end":2775,"column_start":1,"column_end":81}},{"value":"/     where R: gimli::Reader","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945095,"byte_end":945125,"line_start":2776,"line_end":2776,"column_start":1,"column_end":31}},{"value":"/ {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945126,"byte_end":945131,"line_start":2777,"line_end":2777,"column_start":1,"column_end":6}},{"value":"/     {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945132,"byte_end":945141,"line_start":2778,"line_end":2778,"column_start":1,"column_end":10}},{"value":"/         // Examine the entry attributes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945142,"byte_end":945186,"line_start":2779,"line_end":2779,"column_start":1,"column_end":45}},{"value":"/         let mut attrs = node.entry().attrs();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945187,"byte_end":945236,"line_start":2780,"line_end":2780,"column_start":1,"column_end":50}},{"value":"/         while let Some(attr) = attrs.next()? {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945237,"byte_end":945287,"line_start":2781,"line_end":2781,"column_start":1,"column_end":51}},{"value":"/         }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945288,"byte_end":945301,"line_start":2782,"line_end":2782,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945302,"byte_end":945311,"line_start":2783,"line_end":2783,"column_start":1,"column_end":10}},{"value":"/     let mut children = node.children();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945312,"byte_end":945355,"line_start":2784,"line_end":2784,"column_start":1,"column_end":44}},{"value":"/     while let Some(child) = children.next()? {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945356,"byte_end":945406,"line_start":2785,"line_end":2785,"column_start":1,"column_end":51}},{"value":"/         // Recursively process a child.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945407,"byte_end":945450,"line_start":2786,"line_end":2786,"column_start":1,"column_end":44}},{"value":"/         process_tree(child);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945451,"byte_end":945483,"line_start":2787,"line_end":2787,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945484,"byte_end":945493,"line_start":2788,"line_end":2788,"column_start":1,"column_end":10}},{"value":"/     Ok(())","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945494,"byte_end":945508,"line_start":2789,"line_end":2789,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945509,"byte_end":945514,"line_start":2790,"line_end":2790,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945515,"byte_end":945522,"line_start":2791,"line_end":2791,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":946218,"byte_end":946222,"line_start":2819,"line_end":2819,"column_start":12,"column_end":16},"name":"root","qualname":"<EntriesTree>::root","value":"pub fn root<'me>(&'me mut Self) -> Result<EntriesTreeNode>","parent":null,"children":[],"decl_id":null,"docs":" Returns the root node of the tree.\n","sig":null,"attributes":[{"value":"/ Returns the root node of the tree.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":946168,"byte_end":946206,"line_start":2818,"line_end":2818,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":7247},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":949855,"byte_end":949870,"line_start":2925,"line_end":2925,"column_start":12,"column_end":27},"name":"EntriesTreeNode","qualname":"::read::unit::EntriesTreeNode","value":"EntriesTreeNode {  }","parent":null,"children":[{"krate":0,"index":7252},{"krate":0,"index":7253}],"decl_id":null,"docs":" A node in the Debugging Information Entry tree.","sig":null,"attributes":[{"value":"/ A node in the Debugging Information Entry tree.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":949657,"byte_end":949708,"line_start":2920,"line_end":2920,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":949709,"byte_end":949712,"line_start":2921,"line_end":2921,"column_start":1,"column_end":4}},{"value":"/ The root node of a tree can be obtained","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":949713,"byte_end":949756,"line_start":2922,"line_end":2922,"column_start":1,"column_end":44}},{"value":"/ via [`EntriesTree::root`](./struct.EntriesTree.html#method.root).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":949757,"byte_end":949826,"line_start":2923,"line_end":2923,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1916},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950358,"byte_end":950363,"line_start":2940,"line_end":2940,"column_start":12,"column_end":17},"name":"entry","qualname":"<EntriesTreeNode>::entry","value":"pub fn entry(&Self) -> &DebuggingInformationEntry","parent":null,"children":[],"decl_id":null,"docs":" Returns the current entry in the tree.\n","sig":null,"attributes":[{"value":"/ Returns the current entry in the tree.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950304,"byte_end":950346,"line_start":2939,"line_end":2939,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1917},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950697,"byte_end":950705,"line_start":2949,"line_end":2949,"column_start":12,"column_end":20},"name":"children","qualname":"<EntriesTreeNode>::children","value":"pub fn children(Self) -> EntriesTreeIter","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator for the children of the current entry.","sig":null,"attributes":[{"value":"/ Create an iterator for the children of the current entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950527,"byte_end":950588,"line_start":2945,"line_end":2945,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950593,"byte_end":950596,"line_start":2946,"line_end":2946,"column_start":5,"column_end":8}},{"value":"/ The current entry can no longer be accessed after creating the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950601,"byte_end":950667,"line_start":2947,"line_end":2947,"column_start":5,"column_end":71}},{"value":"/ iterator.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950672,"byte_end":950685,"line_start":2948,"line_end":2948,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":7260},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":951063,"byte_end":951078,"line_start":2960,"line_end":2960,"column_start":12,"column_end":27},"name":"EntriesTreeIter","qualname":"::read::unit::EntriesTreeIter","value":"EntriesTreeIter {  }","parent":null,"children":[{"krate":0,"index":7265},{"krate":0,"index":7266},{"krate":0,"index":7267}],"decl_id":null,"docs":" An iterator that allows traversal of the children of an\n `EntriesTreeNode`.","sig":null,"attributes":[{"value":"/ An iterator that allows traversal of the children of an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950820,"byte_end":950879,"line_start":2954,"line_end":2954,"column_start":1,"column_end":60}},{"value":"/ `EntriesTreeNode`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950880,"byte_end":950902,"line_start":2955,"line_end":2955,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950903,"byte_end":950906,"line_start":2956,"line_end":2956,"column_start":1,"column_end":4}},{"value":"/ The items returned by this iterator are also `EntriesTreeNode`s,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950907,"byte_end":950975,"line_start":2957,"line_end":2957,"column_start":1,"column_end":69}},{"value":"/ which allow recursive traversal of grandchildren, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950976,"byte_end":951034,"line_start":2958,"line_end":2958,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":951675,"byte_end":951679,"line_start":2981,"line_end":2981,"column_start":12,"column_end":16},"name":"next","qualname":"<EntriesTreeIter>::next","value":"pub fn next<'me>(&'me mut Self) -> Result<Option<EntriesTreeNode>>","parent":null,"children":[],"decl_id":null,"docs":" Returns an `EntriesTreeNode` for the next child entry.","sig":null,"attributes":[{"value":"/ Returns an `EntriesTreeNode` for the next child entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":951543,"byte_end":951601,"line_start":2978,"line_end":2978,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":951606,"byte_end":951609,"line_start":2979,"line_end":2979,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there are no more children.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":951614,"byte_end":951663,"line_start":2980,"line_end":2980,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7274},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952592,"byte_end":952602,"line_start":3007,"line_end":3007,"column_start":12,"column_end":22},"name":"DebugTypes","qualname":"::read::unit::DebugTypes","value":"DebugTypes {  }","parent":null,"children":[{"krate":0,"index":7276}],"decl_id":null,"docs":" The `DebugTypes` struct represents the DWARF type information\n found in the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ The `DebugTypes` struct represents the DWARF type information","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952435,"byte_end":952500,"line_start":3004,"line_end":3004,"column_start":1,"column_end":66}},{"value":"/ found in the `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952501,"byte_end":952541,"line_start":3005,"line_end":3005,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1933},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953333,"byte_end":953336,"line_start":3029,"line_end":3029,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugTypes<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugTypes` instance from the data in the `.debug_types`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugTypes` instance from the data in the `.debug_types`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952735,"byte_end":952812,"line_start":3015,"line_end":3015,"column_start":5,"column_end":82}},{"value":"/ section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952817,"byte_end":952829,"line_start":3016,"line_end":3016,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952834,"byte_end":952837,"line_start":3017,"line_end":3017,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_types` section and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952842,"byte_end":952918,"line_start":3018,"line_end":3018,"column_start":5,"column_end":81}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952923,"byte_end":952993,"line_start":3019,"line_end":3019,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952998,"byte_end":953037,"line_start":3020,"line_end":3020,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953042,"byte_end":953045,"line_start":3021,"line_end":3021,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953050,"byte_end":953057,"line_start":3022,"line_end":3022,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugTypes, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953062,"byte_end":953104,"line_start":3023,"line_end":3023,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953109,"byte_end":953112,"line_start":3024,"line_end":3024,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953117,"byte_end":953158,"line_start":3025,"line_end":3025,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_types_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953163,"byte_end":953216,"line_start":3026,"line_end":3026,"column_start":5,"column_end":58}},{"value":"/ let debug_types = DebugTypes::new(read_debug_types_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953221,"byte_end":953309,"line_start":3027,"line_end":3027,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953314,"byte_end":953321,"line_start":3028,"line_end":3028,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954133,"byte_end":954139,"line_start":3050,"line_end":3050,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugTypes<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugTypes<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugTypes` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugTypes` section that references the data in `self`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953501,"byte_end":953570,"line_start":3035,"line_end":3035,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953575,"byte_end":953578,"line_start":3036,"line_end":3036,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953583,"byte_end":953648,"line_start":3037,"line_end":3037,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953653,"byte_end":953656,"line_start":3038,"line_end":3038,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953661,"byte_end":953681,"line_start":3039,"line_end":3039,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953686,"byte_end":953689,"line_start":3040,"line_end":3040,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953694,"byte_end":953712,"line_start":3041,"line_end":3041,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953717,"byte_end":953762,"line_start":3042,"line_end":3042,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953767,"byte_end":953851,"line_start":3043,"line_end":3043,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugTypes<Vec<u8>> = load_section();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953856,"byte_end":953923,"line_start":3044,"line_end":3044,"column_start":5,"column_end":72}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953928,"byte_end":953975,"line_start":3045,"line_end":3045,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953980,"byte_end":954030,"line_start":3046,"line_end":3046,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954035,"byte_end":954097,"line_start":3047,"line_end":3047,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954102,"byte_end":954109,"line_start":3048,"line_end":3048,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954114,"byte_end":954121,"line_start":3049,"line_end":3049,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1949},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955280,"byte_end":955285,"line_start":3094,"line_end":3094,"column_start":12,"column_end":17},"name":"units","qualname":"<DebugTypes<R>>::units","value":"pub fn units(&Self) -> DebugTypesUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the type-units in this `.debug_types` section.","sig":null,"attributes":[{"value":"/ Iterate the type-units in this `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954662,"byte_end":954720,"line_start":3077,"line_end":3077,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954725,"byte_end":954728,"line_start":3078,"line_end":3078,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954733,"byte_end":954740,"line_start":3079,"line_end":3079,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugTypes, LittleEndian};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954745,"byte_end":954787,"line_start":3080,"line_end":3080,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954792,"byte_end":954795,"line_start":3081,"line_end":3081,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954800,"byte_end":954819,"line_start":3082,"line_end":3082,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_types_section_somehow = || &buf;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954824,"byte_end":954877,"line_start":3083,"line_end":3083,"column_start":5,"column_end":58}},{"value":"/ let debug_types = DebugTypes::new(read_debug_types_section_somehow(), LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954882,"byte_end":954970,"line_start":3084,"line_end":3084,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954975,"byte_end":954978,"line_start":3085,"line_end":3085,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_types.units();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954983,"byte_end":955022,"line_start":3086,"line_end":3086,"column_start":5,"column_end":44}},{"value":"/ while let Some(unit) = iter.next().unwrap() {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955027,"byte_end":955076,"line_start":3087,"line_end":3087,"column_start":5,"column_end":54}},{"value":"/     println!(\"unit's length is {}\", unit.unit_length());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955081,"byte_end":955141,"line_start":3088,"line_end":3088,"column_start":5,"column_end":65}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955146,"byte_end":955151,"line_start":3089,"line_end":3089,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955156,"byte_end":955163,"line_start":3090,"line_end":3090,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955168,"byte_end":955171,"line_start":3091,"line_end":3091,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955176,"byte_end":955197,"line_start":3092,"line_end":3092,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955202,"byte_end":955268,"line_start":3093,"line_end":3093,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":7288},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955718,"byte_end":955743,"line_start":3108,"line_end":3108,"column_start":12,"column_end":37},"name":"DebugTypesUnitHeadersIter","qualname":"::read::unit::DebugTypesUnitHeadersIter","value":"DebugTypesUnitHeadersIter {  }","parent":null,"children":[{"krate":0,"index":7290},{"krate":0,"index":7291}],"decl_id":null,"docs":" An iterator over the type-units of this `.debug_types` section.","sig":null,"attributes":[{"value":"/ An iterator over the type-units of this `.debug_types` section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955496,"byte_end":955563,"line_start":3102,"line_end":3102,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955564,"byte_end":955567,"line_start":3103,"line_end":3103,"column_start":1,"column_end":4}},{"value":"/ See the [documentation on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955568,"byte_end":955597,"line_start":3104,"line_end":3104,"column_start":1,"column_end":30}},{"value":"/ `DebugTypes::units`](./struct.DebugTypes.html#method.units) for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955598,"byte_end":955665,"line_start":3105,"line_end":3105,"column_start":1,"column_end":68}},{"value":"/ more detail.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955666,"byte_end":955682,"line_start":3106,"line_end":3106,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955932,"byte_end":955936,"line_start":3115,"line_end":3115,"column_start":12,"column_end":16},"name":"next","qualname":"<DebugTypesUnitHeadersIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<UnitHeader<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next type unit header.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next type unit header.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955866,"byte_end":955920,"line_start":3114,"line_end":3114,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7299},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064728,"byte_end":1064735,"line_start":30,"line_end":30,"column_start":5,"column_end":12},"name":"Generic","qualname":"::read::value::ValueType::Generic","value":"ValueType::Generic","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" The generic type, which is address-sized and of unspecified sign,\n as specified in the DWARF 5 standard, section 2.5.1.\n This type is also used to represent address base types.\n","sig":null,"attributes":[{"value":"/ The generic type, which is address-sized and of unspecified sign,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064529,"byte_end":1064598,"line_start":27,"line_end":27,"column_start":5,"column_end":74}},{"value":"/ as specified in the DWARF 5 standard, section 2.5.1.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064603,"byte_end":1064659,"line_start":28,"line_end":28,"column_start":5,"column_end":61}},{"value":"/ This type is also used to represent address base types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064664,"byte_end":1064723,"line_start":29,"line_end":29,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7301},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064776,"byte_end":1064778,"line_start":32,"line_end":32,"column_start":5,"column_end":7},"name":"I8","qualname":"::read::value::ValueType::I8","value":"ValueType::I8","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" Signed 8-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 8-bit integer type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064741,"byte_end":1064771,"line_start":31,"line_end":31,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7303},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064821,"byte_end":1064823,"line_start":34,"line_end":34,"column_start":5,"column_end":7},"name":"U8","qualname":"::read::value::ValueType::U8","value":"ValueType::U8","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" Unsigned 8-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 8-bit integer type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064784,"byte_end":1064816,"line_start":33,"line_end":33,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7305},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064865,"byte_end":1064868,"line_start":36,"line_end":36,"column_start":5,"column_end":8},"name":"I16","qualname":"::read::value::ValueType::I16","value":"ValueType::I16","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" Signed 16-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 16-bit integer type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064829,"byte_end":1064860,"line_start":35,"line_end":35,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7307},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064912,"byte_end":1064915,"line_start":38,"line_end":38,"column_start":5,"column_end":8},"name":"U16","qualname":"::read::value::ValueType::U16","value":"ValueType::U16","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" Unsigned 16-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 16-bit integer type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064874,"byte_end":1064907,"line_start":37,"line_end":37,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7309},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064957,"byte_end":1064960,"line_start":40,"line_end":40,"column_start":5,"column_end":8},"name":"I32","qualname":"::read::value::ValueType::I32","value":"ValueType::I32","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" Signed 32-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 32-bit integer type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064921,"byte_end":1064952,"line_start":39,"line_end":39,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7311},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065004,"byte_end":1065007,"line_start":42,"line_end":42,"column_start":5,"column_end":8},"name":"U32","qualname":"::read::value::ValueType::U32","value":"ValueType::U32","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" Unsigned 32-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 32-bit integer type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064966,"byte_end":1064999,"line_start":41,"line_end":41,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7313},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065049,"byte_end":1065052,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"I64","qualname":"::read::value::ValueType::I64","value":"ValueType::I64","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" Signed 64-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 64-bit integer type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065013,"byte_end":1065044,"line_start":43,"line_end":43,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7315},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065096,"byte_end":1065099,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"U64","qualname":"::read::value::ValueType::U64","value":"ValueType::U64","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" Unsigned 64-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 64-bit integer type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065058,"byte_end":1065091,"line_start":45,"line_end":45,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7317},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065141,"byte_end":1065144,"line_start":48,"line_end":48,"column_start":5,"column_end":8},"name":"F32","qualname":"::read::value::ValueType::F32","value":"ValueType::F32","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" 32-bit floating point type.\n","sig":null,"attributes":[{"value":"/ 32-bit floating point type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065105,"byte_end":1065136,"line_start":47,"line_end":47,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7319},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065186,"byte_end":1065189,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"F64","qualname":"::read::value::ValueType::F64","value":"ValueType::F64","parent":{"krate":0,"index":7298},"children":[],"decl_id":null,"docs":" 64-bit floating point type.\n","sig":null,"attributes":[{"value":"/ 64-bit floating point type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065150,"byte_end":1065181,"line_start":49,"line_end":49,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":7298},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064513,"byte_end":1064522,"line_start":26,"line_end":26,"column_start":10,"column_end":19},"name":"ValueType","qualname":"::read::value::ValueType","value":"pub enum ValueType {\n\n    /// The generic type, which is address-sized and of unspecified sign,\n    /// as specified in the DWARF 5 standard, section 2.5.1.\n    /// This type is also used to represent address base types.\n    Generic,\n\n    /// Signed 8-bit integer type.\n    I8,\n\n    /// Unsigned 8-bit integer type.\n    U8,\n\n    /// Signed 16-bit integer type.\n    I16,\n\n    /// Unsigned 16-bit integer type.\n    U16,\n\n    /// Signed 32-bit integer type.\n    I32,\n\n    /// Unsigned 32-bit integer type.\n    U32,\n\n    /// Signed 64-bit integer type.\n    I64,\n\n    /// Unsigned 64-bit integer type.\n    U64,\n\n    /// 32-bit floating point type.\n    F32,\n\n    /// 64-bit floating point type.\n    F64,\n}","parent":null,"children":[{"krate":0,"index":7299},{"krate":0,"index":7301},{"krate":0,"index":7303},{"krate":0,"index":7305},{"krate":0,"index":7307},{"krate":0,"index":7309},{"krate":0,"index":7311},{"krate":0,"index":7313},{"krate":0,"index":7315},{"krate":0,"index":7317},{"krate":0,"index":7319}],"decl_id":null,"docs":" The type of an entry on the DWARF stack.\n","sig":null,"attributes":[{"value":"/ The type of an entry on the DWARF stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1064414,"byte_end":1064458,"line_start":24,"line_end":24,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7333},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065375,"byte_end":1065382,"line_start":57,"line_end":57,"column_start":5,"column_end":12},"name":"Generic","qualname":"::read::value::Value::Generic","value":"Value::Generic(u64)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" A generic value, which is address-sized and of unspecified sign.\n","sig":null,"attributes":[{"value":"/ A generic value, which is address-sized and of unspecified sign.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065302,"byte_end":1065370,"line_start":56,"line_end":56,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7336},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065431,"byte_end":1065433,"line_start":59,"line_end":59,"column_start":5,"column_end":7},"name":"I8","qualname":"::read::value::Value::I8","value":"Value::I8(i8)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" A signed 8-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 8-bit integer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065393,"byte_end":1065426,"line_start":58,"line_end":58,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7339},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065484,"byte_end":1065486,"line_start":61,"line_end":61,"column_start":5,"column_end":7},"name":"U8","qualname":"::read::value::Value::U8","value":"Value::U8(u8)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" An unsigned 8-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 8-bit integer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065443,"byte_end":1065479,"line_start":60,"line_end":60,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7342},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065535,"byte_end":1065538,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"I16","qualname":"::read::value::Value::I16","value":"Value::I16(i16)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" A signed 16-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 16-bit integer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065496,"byte_end":1065530,"line_start":62,"line_end":62,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7345},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065591,"byte_end":1065594,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"U16","qualname":"::read::value::Value::U16","value":"Value::U16(u16)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" An unsigned 16-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 16-bit integer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065549,"byte_end":1065586,"line_start":64,"line_end":64,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7348},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065644,"byte_end":1065647,"line_start":67,"line_end":67,"column_start":5,"column_end":8},"name":"I32","qualname":"::read::value::Value::I32","value":"Value::I32(i32)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" A signed 32-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 32-bit integer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065605,"byte_end":1065639,"line_start":66,"line_end":66,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7351},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065700,"byte_end":1065703,"line_start":69,"line_end":69,"column_start":5,"column_end":8},"name":"U32","qualname":"::read::value::Value::U32","value":"Value::U32(u32)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" An unsigned 32-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 32-bit integer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065658,"byte_end":1065695,"line_start":68,"line_end":68,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7354},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065753,"byte_end":1065756,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"I64","qualname":"::read::value::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" A signed 64-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 64-bit integer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065714,"byte_end":1065748,"line_start":70,"line_end":70,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7357},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065809,"byte_end":1065812,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"U64","qualname":"::read::value::Value::U64","value":"Value::U64(u64)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" An unsigned 64-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 64-bit integer value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065767,"byte_end":1065804,"line_start":72,"line_end":72,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7360},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065862,"byte_end":1065865,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"F32","qualname":"::read::value::Value::F32","value":"Value::F32(f32)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" A 32-bit floating point value.\n","sig":null,"attributes":[{"value":"/ A 32-bit floating point value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065823,"byte_end":1065857,"line_start":74,"line_end":74,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7363},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065915,"byte_end":1065918,"line_start":77,"line_end":77,"column_start":5,"column_end":8},"name":"F64","qualname":"::read::value::Value::F64","value":"Value::F64(f64)","parent":{"krate":0,"index":7332},"children":[],"decl_id":null,"docs":" A 64-bit floating point value.\n","sig":null,"attributes":[{"value":"/ A 64-bit floating point value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065876,"byte_end":1065910,"line_start":76,"line_end":76,"column_start":5,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":7332},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065290,"byte_end":1065295,"line_start":55,"line_end":55,"column_start":10,"column_end":15},"name":"Value","qualname":"::read::value::Value","value":"pub enum Value {\n\n    /// A generic value, which is address-sized and of unspecified sign.\n    Generic(u64),\n\n    /// A signed 8-bit integer value.\n    I8(i8),\n\n    /// An unsigned 8-bit integer value.\n    U8(u8),\n\n    /// A signed 16-bit integer value.\n    I16(i16),\n\n    /// An unsigned 16-bit integer value.\n    U16(u16),\n\n    /// A signed 32-bit integer value.\n    I32(i32),\n\n    /// An unsigned 32-bit integer value.\n    U32(u32),\n\n    /// A signed 64-bit integer value.\n    I64(i64),\n\n    /// An unsigned 64-bit integer value.\n    U64(u64),\n\n    /// A 32-bit floating point value.\n    F32(f32),\n\n    /// A 64-bit floating point value.\n    F64(f64),\n}","parent":null,"children":[{"krate":0,"index":7333},{"krate":0,"index":7336},{"krate":0,"index":7339},{"krate":0,"index":7342},{"krate":0,"index":7345},{"krate":0,"index":7348},{"krate":0,"index":7351},{"krate":0,"index":7354},{"krate":0,"index":7357},{"krate":0,"index":7360},{"krate":0,"index":7363}],"decl_id":null,"docs":" The value of an entry on the DWARF stack.\n","sig":null,"attributes":[{"value":"/ The value of an entry on the DWARF stack.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065194,"byte_end":1065239,"line_start":53,"line_end":53,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1066007,"byte_end":1066015,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"bit_size","qualname":"<ValueType>::bit_size","value":"pub fn bit_size(Self, u64) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The size in bits of a value for this type.\n","sig":null,"attributes":[{"value":"/ The size in bits of a value for this type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065949,"byte_end":1065995,"line_start":81,"line_end":81,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1066463,"byte_end":1066476,"line_start":93,"line_end":93,"column_start":12,"column_end":25},"name":"from_encoding","qualname":"<ValueType>::from_encoding","value":"pub fn from_encoding(constants::DwAte, u64) -> Option<ValueType>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ValueType` from the attributes of a base type DIE.\n","sig":null,"attributes":[{"value":"/ Construct a `ValueType` from the attributes of a base type DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1066384,"byte_end":1066451,"line_start":92,"line_end":92,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1067314,"byte_end":1067324,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"from_entry","qualname":"<ValueType>::from_entry","value":"pub fn from_entry<R: Reader>(&DebuggingInformationEntry<, , R>)\n-> Result<Option<ValueType>>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ValueType` from a base type DIE.\n","sig":null,"attributes":[{"value":"/ Construct a `ValueType` from a base type DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1067253,"byte_end":1067302,"line_start":109,"line_end":109,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1068799,"byte_end":1068809,"line_start":153,"line_end":153,"column_start":12,"column_end":22},"name":"value_type","qualname":"<Value>::value_type","value":"pub fn value_type(&Self) -> ValueType","parent":null,"children":[],"decl_id":null,"docs":" Return the `ValueType` corresponding to this `Value`.\n","sig":null,"attributes":[{"value":"/ Return the `ValueType` corresponding to this `Value`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1068730,"byte_end":1068787,"line_start":152,"line_end":152,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1069449,"byte_end":1069454,"line_start":170,"line_end":170,"column_start":12,"column_end":17},"name":"parse","qualname":"<Value>::parse","value":"pub fn parse<R: Reader>(ValueType, R) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Read a `Value` with the given `value_type` from a `Reader`.\n","sig":null,"attributes":[{"value":"/ Read a `Value` with the given `value_type` from a `Reader`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1069374,"byte_end":1069437,"line_start":169,"line_end":169,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1070436,"byte_end":1070442,"line_start":191,"line_end":191,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Value>::to_u64","value":"pub fn to_u64(Self, u64) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Value` to a `u64`.","sig":null,"attributes":[{"value":"/ Convert a `Value` to a `u64`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1070267,"byte_end":1070300,"line_start":187,"line_end":187,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1070305,"byte_end":1070308,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ The `ValueType` of `self` must be integral.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1070313,"byte_end":1070360,"line_start":189,"line_end":189,"column_start":5,"column_end":52}},{"value":"/ Values are sign extended if the source value is signed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1070365,"byte_end":1070424,"line_start":190,"line_end":190,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1071307,"byte_end":1071315,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"from_u64","qualname":"<Value>::from_u64","value":"pub fn from_u64(ValueType, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Value` with the given `value_type` from a `u64` value.","sig":null,"attributes":[{"value":"/ Create a `Value` with the given `value_type` from a `u64` value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1071055,"byte_end":1071123,"line_start":207,"line_end":207,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1071128,"byte_end":1071131,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ The `value_type` may be integral or floating point.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1071136,"byte_end":1071191,"line_start":209,"line_end":209,"column_start":5,"column_end":60}},{"value":"/ The result is truncated if the `u64` value does","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1071196,"byte_end":1071247,"line_start":210,"line_end":210,"column_start":5,"column_end":56}},{"value":"/ not fit the bounds of the `value_type`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1071252,"byte_end":1071295,"line_start":211,"line_end":211,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1978},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074499,"byte_end":1074506,"line_start":281,"line_end":281,"column_start":12,"column_end":19},"name":"convert","qualname":"<Value>::convert","value":"pub fn convert(Self, ValueType, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Value` to the given `value_type`.","sig":null,"attributes":[{"value":"/ Convert a `Value` to the given `value_type`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074063,"byte_end":1074111,"line_start":273,"line_end":273,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074116,"byte_end":1074119,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ When converting between integral types, the result is truncated","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074124,"byte_end":1074191,"line_start":275,"line_end":275,"column_start":5,"column_end":72}},{"value":"/ if the source value does not fit the bounds of the `value_type`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074196,"byte_end":1074264,"line_start":276,"line_end":276,"column_start":5,"column_end":73}},{"value":"/ When converting from floating point types, the result is not defined","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074269,"byte_end":1074341,"line_start":277,"line_end":277,"column_start":5,"column_end":77}},{"value":"/ if the source value does not fit the bounds of the `value_type`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074346,"byte_end":1074414,"line_start":278,"line_end":278,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074419,"byte_end":1074422,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_convert` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074427,"byte_end":1074487,"line_start":280,"line_end":280,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1075048,"byte_end":1075059,"line_start":294,"line_end":294,"column_start":12,"column_end":23},"name":"reinterpret","qualname":"<Value>::reinterpret","value":"pub fn reinterpret(Self, ValueType, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret the bits in a `Value` as the given `value_type`.","sig":null,"attributes":[{"value":"/ Reinterpret the bits in a `Value` as the given `value_type`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074822,"byte_end":1074886,"line_start":289,"line_end":289,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074891,"byte_end":1074894,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ The source and result value types must have equal sizes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074899,"byte_end":1074959,"line_start":291,"line_end":291,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074964,"byte_end":1074967,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_reinterpret` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1074972,"byte_end":1075036,"line_start":293,"line_end":293,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1076795,"byte_end":1076798,"line_start":332,"line_end":332,"column_start":12,"column_end":15},"name":"abs","qualname":"<Value>::abs","value":"pub fn abs(Self, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform an absolute value operation.","sig":null,"attributes":[{"value":"/ Perform an absolute value operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1076584,"byte_end":1076624,"line_start":327,"line_end":327,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1076629,"byte_end":1076632,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1076637,"byte_end":1076714,"line_start":329,"line_end":329,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1076719,"byte_end":1076722,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_abs` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1076727,"byte_end":1076783,"line_start":331,"line_end":331,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1981},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1077963,"byte_end":1077966,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"neg","qualname":"<Value>::neg","value":"pub fn neg(Self, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a negation operation.","sig":null,"attributes":[{"value":"/ Perform a negation operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1077759,"byte_end":1077792,"line_start":351,"line_end":351,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1077797,"byte_end":1077800,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1077805,"byte_end":1077882,"line_start":353,"line_end":353,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1077887,"byte_end":1077890,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_neg` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1077895,"byte_end":1077951,"line_start":355,"line_end":355,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1079174,"byte_end":1079177,"line_start":383,"line_end":383,"column_start":12,"column_end":15},"name":"add","qualname":"<Value>::add","value":"pub fn add(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform an addition operation.","sig":null,"attributes":[{"value":"/ Perform an addition operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1079002,"byte_end":1079036,"line_start":378,"line_end":378,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1079041,"byte_end":1079044,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1079049,"byte_end":1079092,"line_start":380,"line_end":380,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1079097,"byte_end":1079100,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_plus` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1079105,"byte_end":1079162,"line_start":382,"line_end":382,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1080452,"byte_end":1080455,"line_start":408,"line_end":408,"column_start":12,"column_end":15},"name":"sub","qualname":"<Value>::sub","value":"pub fn sub(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a subtraction operation.","sig":null,"attributes":[{"value":"/ Perform a subtraction operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1080277,"byte_end":1080313,"line_start":403,"line_end":403,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1080318,"byte_end":1080321,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1080326,"byte_end":1080369,"line_start":405,"line_end":405,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1080374,"byte_end":1080377,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_minus` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1080382,"byte_end":1080440,"line_start":407,"line_end":407,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1081731,"byte_end":1081734,"line_start":433,"line_end":433,"column_start":12,"column_end":15},"name":"mul","qualname":"<Value>::mul","value":"pub fn mul(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a multiplication operation.","sig":null,"attributes":[{"value":"/ Perform a multiplication operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1081555,"byte_end":1081594,"line_start":428,"line_end":428,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1081599,"byte_end":1081602,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1081607,"byte_end":1081650,"line_start":430,"line_end":430,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1081655,"byte_end":1081658,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_mul` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1081663,"byte_end":1081719,"line_start":432,"line_end":432,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1083086,"byte_end":1083089,"line_start":459,"line_end":459,"column_start":12,"column_end":15},"name":"div","qualname":"<Value>::div","value":"pub fn div(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a division operation.","sig":null,"attributes":[{"value":"/ Perform a division operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1082834,"byte_end":1082867,"line_start":453,"line_end":453,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1082872,"byte_end":1082875,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1082880,"byte_end":1082923,"line_start":455,"line_end":455,"column_start":5,"column_end":48}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1082928,"byte_end":1083005,"line_start":456,"line_end":456,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1083010,"byte_end":1083013,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_div` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1083018,"byte_end":1083074,"line_start":458,"line_end":458,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1986},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1085047,"byte_end":1085050,"line_start":504,"line_end":504,"column_start":12,"column_end":15},"name":"rem","qualname":"<Value>::rem","value":"pub fn rem(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a remainder operation.","sig":null,"attributes":[{"value":"/ Perform a remainder operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1084782,"byte_end":1084816,"line_start":498,"line_end":498,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1084821,"byte_end":1084824,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1084829,"byte_end":1084881,"line_start":500,"line_end":500,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as an unsigned value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1084886,"byte_end":1084966,"line_start":501,"line_end":501,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1084971,"byte_end":1084974,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_mod` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1084979,"byte_end":1085035,"line_start":503,"line_end":503,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1987},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1086886,"byte_end":1086889,"line_start":546,"line_end":546,"column_start":12,"column_end":15},"name":"not","qualname":"<Value>::not","value":"pub fn not(Self, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise not operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise not operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1086704,"byte_end":1086740,"line_start":541,"line_end":541,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1086745,"byte_end":1086748,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1086753,"byte_end":1086805,"line_start":543,"line_end":543,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1086810,"byte_end":1086813,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_not` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1086818,"byte_end":1086874,"line_start":545,"line_end":545,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087249,"byte_end":1087252,"line_start":557,"line_end":557,"column_start":12,"column_end":15},"name":"and","qualname":"<Value>::and","value":"pub fn and(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise and operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise and operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087067,"byte_end":1087103,"line_start":552,"line_end":552,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087108,"byte_end":1087111,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087116,"byte_end":1087168,"line_start":554,"line_end":554,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087173,"byte_end":1087176,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_and` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087181,"byte_end":1087237,"line_start":556,"line_end":556,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1989},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087768,"byte_end":1087770,"line_start":572,"line_end":572,"column_start":12,"column_end":14},"name":"or","qualname":"<Value>::or","value":"pub fn or(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise or operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise or operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087588,"byte_end":1087623,"line_start":567,"line_end":567,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087628,"byte_end":1087631,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087636,"byte_end":1087688,"line_start":569,"line_end":569,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087693,"byte_end":1087696,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_or` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1087701,"byte_end":1087756,"line_start":571,"line_end":571,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1990},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1088297,"byte_end":1088300,"line_start":587,"line_end":587,"column_start":12,"column_end":15},"name":"xor","qualname":"<Value>::xor","value":"pub fn xor(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise exclusive-or operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise exclusive-or operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1088106,"byte_end":1088151,"line_start":582,"line_end":582,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1088156,"byte_end":1088159,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1088164,"byte_end":1088216,"line_start":584,"line_end":584,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1088221,"byte_end":1088224,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_xor` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1088229,"byte_end":1088285,"line_start":586,"line_end":586,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1992},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1089733,"byte_end":1089736,"line_start":623,"line_end":623,"column_start":12,"column_end":15},"name":"shl","qualname":"<Value>::shl","value":"pub fn shl(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a shift left operation.","sig":null,"attributes":[{"value":"/ Perform a shift left operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1089423,"byte_end":1089458,"line_start":616,"line_end":616,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1089463,"byte_end":1089466,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ This operation requires integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1089471,"byte_end":1089514,"line_start":618,"line_end":618,"column_start":5,"column_end":48}},{"value":"/ If the shift length exceeds the type size, then 0 is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1089519,"byte_end":1089585,"line_start":619,"line_end":619,"column_start":5,"column_end":71}},{"value":"/ If the shift length is negative then an error is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1089590,"byte_end":1089652,"line_start":620,"line_end":620,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1089657,"byte_end":1089660,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_shl` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1089665,"byte_end":1089721,"line_start":622,"line_end":622,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1993},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1091283,"byte_end":1091286,"line_start":654,"line_end":654,"column_start":12,"column_end":15},"name":"shr","qualname":"<Value>::shr","value":"pub fn shr(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a logical shift right operation.","sig":null,"attributes":[{"value":"/ Perform a logical shift right operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1090775,"byte_end":1090819,"line_start":644,"line_end":644,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1090824,"byte_end":1090827,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ This operation requires an unsigned integral type for the value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1090832,"byte_end":1090900,"line_start":646,"line_end":646,"column_start":5,"column_end":73}},{"value":"/ If the value type is `Generic`, then it is interpreted as an unsigned value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1090905,"byte_end":1090985,"line_start":647,"line_end":647,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1090990,"byte_end":1090993,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ This operation requires an integral type for the shift length.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1090998,"byte_end":1091064,"line_start":649,"line_end":649,"column_start":5,"column_end":71}},{"value":"/ If the shift length exceeds the type size, then 0 is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1091069,"byte_end":1091135,"line_start":650,"line_end":650,"column_start":5,"column_end":71}},{"value":"/ If the shift length is negative then an error is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1091140,"byte_end":1091202,"line_start":651,"line_end":651,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1091207,"byte_end":1091210,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_shr` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1091215,"byte_end":1091271,"line_start":653,"line_end":653,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092879,"byte_end":1092883,"line_start":687,"line_end":687,"column_start":12,"column_end":16},"name":"shra","qualname":"<Value>::shra","value":"pub fn shra(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform an arithmetic shift right operation.","sig":null,"attributes":[{"value":"/ Perform an arithmetic shift right operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092304,"byte_end":1092352,"line_start":676,"line_end":676,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092357,"byte_end":1092360,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ This operation requires a signed integral type for the value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092365,"byte_end":1092430,"line_start":678,"line_end":678,"column_start":5,"column_end":70}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092435,"byte_end":1092512,"line_start":679,"line_end":679,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092517,"byte_end":1092520,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ This operation requires an integral type for the shift length.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092525,"byte_end":1092591,"line_start":681,"line_end":681,"column_start":5,"column_end":71}},{"value":"/ If the shift length exceeds the type size, then 0 is returned for positive values,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092596,"byte_end":1092682,"line_start":682,"line_end":682,"column_start":5,"column_end":91}},{"value":"/ and -1 is returned for negative values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092687,"byte_end":1092730,"line_start":683,"line_end":683,"column_start":5,"column_end":48}},{"value":"/ If the shift length is negative then an error is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092735,"byte_end":1092797,"line_start":684,"line_end":684,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092802,"byte_end":1092805,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_shra` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1092810,"byte_end":1092867,"line_start":686,"line_end":686,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1995},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1095029,"byte_end":1095031,"line_start":755,"line_end":755,"column_start":12,"column_end":14},"name":"eq","qualname":"<Value>::eq","value":"pub fn eq(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `==` relational operation.","sig":null,"attributes":[{"value":"/ Perform the `==` relational operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1094760,"byte_end":1094802,"line_start":749,"line_end":749,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1094807,"byte_end":1094810,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1094815,"byte_end":1094867,"line_start":751,"line_end":751,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1094872,"byte_end":1094949,"line_start":752,"line_end":752,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1094954,"byte_end":1094957,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_eq` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1094962,"byte_end":1095017,"line_start":754,"line_end":754,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1096228,"byte_end":1096230,"line_start":781,"line_end":781,"column_start":12,"column_end":14},"name":"ge","qualname":"<Value>::ge","value":"pub fn ge(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `>=` relational operation.","sig":null,"attributes":[{"value":"/ Perform the `>=` relational operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1095959,"byte_end":1096001,"line_start":775,"line_end":775,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1096006,"byte_end":1096009,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1096014,"byte_end":1096066,"line_start":777,"line_end":777,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1096071,"byte_end":1096148,"line_start":778,"line_end":778,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1096153,"byte_end":1096156,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_ge` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1096161,"byte_end":1096216,"line_start":780,"line_end":780,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1997},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1097426,"byte_end":1097428,"line_start":807,"line_end":807,"column_start":12,"column_end":14},"name":"gt","qualname":"<Value>::gt","value":"pub fn gt(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `>` relational operation.","sig":null,"attributes":[{"value":"/ Perform the `>` relational operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1097158,"byte_end":1097199,"line_start":801,"line_end":801,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1097204,"byte_end":1097207,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1097212,"byte_end":1097264,"line_start":803,"line_end":803,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1097269,"byte_end":1097346,"line_start":804,"line_end":804,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1097351,"byte_end":1097354,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_gt` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1097359,"byte_end":1097414,"line_start":806,"line_end":806,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1998},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1098613,"byte_end":1098615,"line_start":833,"line_end":833,"column_start":12,"column_end":14},"name":"le","qualname":"<Value>::le","value":"pub fn le(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `<= relational operation.","sig":null,"attributes":[{"value":"/ Perform the `<= relational operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1098345,"byte_end":1098386,"line_start":827,"line_end":827,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1098391,"byte_end":1098394,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1098399,"byte_end":1098451,"line_start":829,"line_end":829,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1098456,"byte_end":1098533,"line_start":830,"line_end":830,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1098538,"byte_end":1098541,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_le` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1098546,"byte_end":1098601,"line_start":832,"line_end":832,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1099810,"byte_end":1099812,"line_start":859,"line_end":859,"column_start":12,"column_end":14},"name":"lt","qualname":"<Value>::lt","value":"pub fn lt(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `< relational operation.","sig":null,"attributes":[{"value":"/ Perform the `< relational operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1099543,"byte_end":1099583,"line_start":853,"line_end":853,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1099588,"byte_end":1099591,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1099596,"byte_end":1099648,"line_start":855,"line_end":855,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1099653,"byte_end":1099730,"line_start":856,"line_end":856,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1099735,"byte_end":1099738,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_lt` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1099743,"byte_end":1099798,"line_start":858,"line_end":858,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1100997,"byte_end":1100999,"line_start":885,"line_end":885,"column_start":12,"column_end":14},"name":"ne","qualname":"<Value>::ne","value":"pub fn ne(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `!= relational operation.","sig":null,"attributes":[{"value":"/ Perform the `!= relational operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1100729,"byte_end":1100770,"line_start":879,"line_end":879,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1100775,"byte_end":1100778,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1100783,"byte_end":1100835,"line_start":881,"line_end":881,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1100840,"byte_end":1100917,"line_start":882,"line_end":882,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1100922,"byte_end":1100925,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_ne` operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1100930,"byte_end":1100985,"line_start":884,"line_end":884,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":2002},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90547,"byte_end":90556,"line_start":236,"line_end":236,"column_start":10,"column_end":19},"name":"EndianBuf","qualname":"::read::EndianBuf","value":"EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" `EndianBuf` has been renamed to `EndianSlice`. For ease of upgrading across\n `gimli` versions, we export this type alias.\n","sig":null,"attributes":[{"value":"/ `EndianBuf` has been renamed to `EndianSlice`. For ease of upgrading across","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90324,"byte_end":90403,"line_start":233,"line_end":233,"column_start":1,"column_end":80}},{"value":"/ `gimli` versions, we export this type alias.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90404,"byte_end":90452,"line_start":234,"line_end":234,"column_start":1,"column_end":49}},{"value":"deprecated(note =\n             \"EndianBuf has been renamed to EndianSlice, use that instead.\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90453,"byte_end":90537,"line_start":235,"line_end":235,"column_start":1,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7376},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90757,"byte_end":90759,"line_start":242,"line_end":242,"column_start":5,"column_end":7},"name":"Io","qualname":"::read::Error::Io","value":"Error::Io","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An I/O error occurred while reading.\n","sig":null,"attributes":[{"value":"/ An I/O error occurred while reading.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90712,"byte_end":90752,"line_start":241,"line_end":241,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7378},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90837,"byte_end":90879,"line_start":244,"line_end":244,"column_start":5,"column_end":47},"name":"PcRelativePointerButSectionBaseIsUndefined","qualname":"::read::Error::PcRelativePointerButSectionBaseIsUndefined","value":"Error::PcRelativePointerButSectionBaseIsUndefined","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found a PC relative pointer, but the section base is undefined.\n","sig":null,"attributes":[{"value":"/ Found a PC relative pointer, but the section base is undefined.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90765,"byte_end":90832,"line_start":243,"line_end":243,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7380},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90962,"byte_end":91003,"line_start":246,"line_end":246,"column_start":5,"column_end":46},"name":"TextRelativePointerButTextBaseIsUndefined","qualname":"::read::Error::TextRelativePointerButTextBaseIsUndefined","value":"Error::TextRelativePointerButTextBaseIsUndefined","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found a `.text` relative pointer, but the `.text` base is undefined.\n","sig":null,"attributes":[{"value":"/ Found a `.text` relative pointer, but the `.text` base is undefined.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90885,"byte_end":90957,"line_start":245,"line_end":245,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7382},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91080,"byte_end":91121,"line_start":248,"line_end":248,"column_start":5,"column_end":46},"name":"DataRelativePointerButDataBaseIsUndefined","qualname":"::read::Error::DataRelativePointerButDataBaseIsUndefined","value":"Error::DataRelativePointerButDataBaseIsUndefined","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found a data relative pointer, but the data base is undefined.\n","sig":null,"attributes":[{"value":"/ Found a data relative pointer, but the data base is undefined.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91009,"byte_end":91075,"line_start":247,"line_end":247,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7384},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91226,"byte_end":91257,"line_start":251,"line_end":251,"column_start":5,"column_end":36},"name":"FuncRelativePointerInBadContext","qualname":"::read::Error::FuncRelativePointerInBadContext","value":"Error::FuncRelativePointerInBadContext","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found a function relative pointer in a context that does not have a\n function base.\n","sig":null,"attributes":[{"value":"/ Found a function relative pointer in a context that does not have a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91127,"byte_end":91198,"line_start":249,"line_end":249,"column_start":5,"column_end":76}},{"value":"/ function base.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91203,"byte_end":91221,"line_start":250,"line_end":250,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7386},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91327,"byte_end":91357,"line_start":253,"line_end":253,"column_start":5,"column_end":35},"name":"CannotParseOmitPointerEncoding","qualname":"::read::Error::CannotParseOmitPointerEncoding","value":"Error::CannotParseOmitPointerEncoding","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Cannot parse a pointer with a `DW_EH_PE_omit` encoding.\n","sig":null,"attributes":[{"value":"/ Cannot parse a pointer with a `DW_EH_PE_omit` encoding.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91263,"byte_end":91322,"line_start":252,"line_end":252,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7388},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91414,"byte_end":91431,"line_start":255,"line_end":255,"column_start":5,"column_end":22},"name":"BadUnsignedLeb128","qualname":"::read::Error::BadUnsignedLeb128","value":"Error::BadUnsignedLeb128","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An error parsing an unsigned LEB128 value.\n","sig":null,"attributes":[{"value":"/ An error parsing an unsigned LEB128 value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91363,"byte_end":91409,"line_start":254,"line_end":254,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7390},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91485,"byte_end":91500,"line_start":257,"line_end":257,"column_start":5,"column_end":20},"name":"BadSignedLeb128","qualname":"::read::Error::BadSignedLeb128","value":"Error::BadSignedLeb128","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An error parsing a signed LEB128 value.\n","sig":null,"attributes":[{"value":"/ An error parsing a signed LEB128 value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91437,"byte_end":91480,"line_start":256,"line_end":256,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7392},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91608,"byte_end":91627,"line_start":260,"line_end":260,"column_start":5,"column_end":24},"name":"AbbreviationTagZero","qualname":"::read::Error::AbbreviationTagZero","value":"Error::AbbreviationTagZero","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An abbreviation declared that its tag is zero, but zero is reserved for\n null records.\n","sig":null,"attributes":[{"value":"/ An abbreviation declared that its tag is zero, but zero is reserved for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91506,"byte_end":91581,"line_start":258,"line_end":258,"column_start":5,"column_end":80}},{"value":"/ null records.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91586,"byte_end":91603,"line_start":259,"line_end":259,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7394},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91747,"byte_end":91764,"line_start":263,"line_end":263,"column_start":5,"column_end":22},"name":"AttributeFormZero","qualname":"::read::Error::AttributeFormZero","value":"Error::AttributeFormZero","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An attribute specification declared that its form is zero, but zero is\n reserved for null records.\n","sig":null,"attributes":[{"value":"/ An attribute specification declared that its form is zero, but zero is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91633,"byte_end":91707,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/ reserved for null records.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91712,"byte_end":91742,"line_start":262,"line_end":262,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7396},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91862,"byte_end":91876,"line_start":266,"line_end":266,"column_start":5,"column_end":19},"name":"BadHasChildren","qualname":"::read::Error::BadHasChildren","value":"Error::BadHasChildren","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The abbreviation's has-children byte was not one of\n `DW_CHILDREN_{yes,no}`.\n","sig":null,"attributes":[{"value":"/ The abbreviation's has-children byte was not one of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91770,"byte_end":91825,"line_start":264,"line_end":264,"column_start":5,"column_end":60}},{"value":"/ `DW_CHILDREN_{yes,no}`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91830,"byte_end":91857,"line_start":265,"line_end":265,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7398},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91926,"byte_end":91935,"line_start":268,"line_end":268,"column_start":5,"column_end":14},"name":"BadLength","qualname":"::read::Error::BadLength","value":"Error::BadLength","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The specified length is impossible.\n","sig":null,"attributes":[{"value":"/ The specified length is impossible.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91882,"byte_end":91921,"line_start":267,"line_end":267,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7400},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91984,"byte_end":91995,"line_start":270,"line_end":270,"column_start":5,"column_end":16},"name":"UnknownForm","qualname":"::read::Error::UnknownForm","value":"Error::UnknownForm","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found an unknown `DW_FORM_*` type.\n","sig":null,"attributes":[{"value":"/ Found an unknown `DW_FORM_*` type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":91941,"byte_end":91979,"line_start":269,"line_end":269,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7402},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92048,"byte_end":92060,"line_start":272,"line_end":272,"column_start":5,"column_end":17},"name":"ExpectedZero","qualname":"::read::Error::ExpectedZero","value":"Error::ExpectedZero","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Expected a zero, found something else.\n","sig":null,"attributes":[{"value":"/ Expected a zero, found something else.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92001,"byte_end":92043,"line_start":271,"line_end":271,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7404},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92129,"byte_end":92154,"line_start":274,"line_end":274,"column_start":5,"column_end":30},"name":"DuplicateAbbreviationCode","qualname":"::read::Error::DuplicateAbbreviationCode","value":"Error::DuplicateAbbreviationCode","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found an abbreviation code that has already been used.\n","sig":null,"attributes":[{"value":"/ Found an abbreviation code that has already been used.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92066,"byte_end":92124,"line_start":273,"line_end":273,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7406},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92194,"byte_end":92209,"line_start":276,"line_end":276,"column_start":5,"column_end":20},"name":"DuplicateArange","qualname":"::read::Error::DuplicateArange","value":"Error::DuplicateArange","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found a duplicate arange.\n","sig":null,"attributes":[{"value":"/ Found a duplicate arange.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92160,"byte_end":92189,"line_start":275,"line_end":275,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7408},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92263,"byte_end":92284,"line_start":278,"line_end":278,"column_start":5,"column_end":26},"name":"UnknownReservedLength","qualname":"::read::Error::UnknownReservedLength","value":"Error::UnknownReservedLength","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found an unknown reserved length value.\n","sig":null,"attributes":[{"value":"/ Found an unknown reserved length value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92215,"byte_end":92258,"line_start":277,"line_end":277,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7410},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92330,"byte_end":92344,"line_start":280,"line_end":280,"column_start":5,"column_end":19},"name":"UnknownVersion","qualname":"::read::Error::UnknownVersion","value":"Error::UnknownVersion(u64)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found an unknown DWARF version.\n","sig":null,"attributes":[{"value":"/ Found an unknown DWARF version.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92290,"byte_end":92325,"line_start":279,"line_end":279,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7413},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92413,"byte_end":92432,"line_start":282,"line_end":282,"column_start":5,"column_end":24},"name":"UnknownAbbreviation","qualname":"::read::Error::UnknownAbbreviation","value":"Error::UnknownAbbreviation","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found a record with an unknown abbreviation code.\n","sig":null,"attributes":[{"value":"/ Found a record with an unknown abbreviation code.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92355,"byte_end":92408,"line_start":281,"line_end":281,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7415},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92491,"byte_end":92504,"line_start":284,"line_end":284,"column_start":5,"column_end":18},"name":"UnexpectedEof","qualname":"::read::Error::UnexpectedEof","value":"Error::UnexpectedEof(ReaderOffsetId)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Hit the end of input before it was expected.\n","sig":null,"attributes":[{"value":"/ Hit the end of input before it was expected.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92438,"byte_end":92486,"line_start":283,"line_end":283,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7418},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92576,"byte_end":92590,"line_start":286,"line_end":286,"column_start":5,"column_end":19},"name":"UnexpectedNull","qualname":"::read::Error::UnexpectedNull","value":"Error::UnexpectedNull","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Read a null entry before it was expected.\n","sig":null,"attributes":[{"value":"/ Read a null entry before it was expected.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92526,"byte_end":92571,"line_start":285,"line_end":285,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7420},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92638,"byte_end":92659,"line_start":288,"line_end":288,"column_start":5,"column_end":26},"name":"UnknownStandardOpcode","qualname":"::read::Error::UnknownStandardOpcode","value":"Error::UnknownStandardOpcode(constants::DwLns)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found an unknown standard opcode.\n","sig":null,"attributes":[{"value":"/ Found an unknown standard opcode.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92596,"byte_end":92633,"line_start":287,"line_end":287,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7423},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92725,"byte_end":92746,"line_start":290,"line_end":290,"column_start":5,"column_end":26},"name":"UnknownExtendedOpcode","qualname":"::read::Error::UnknownExtendedOpcode","value":"Error::UnknownExtendedOpcode(constants::DwLne)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found an unknown extended opcode.\n","sig":null,"attributes":[{"value":"/ Found an unknown extended opcode.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92683,"byte_end":92720,"line_start":289,"line_end":289,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7426},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92823,"byte_end":92845,"line_start":292,"line_end":292,"column_start":5,"column_end":27},"name":"UnsupportedAddressSize","qualname":"::read::Error::UnsupportedAddressSize","value":"Error::UnsupportedAddressSize(u8)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The specified address size is not supported.\n","sig":null,"attributes":[{"value":"/ The specified address size is not supported.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92770,"byte_end":92818,"line_start":291,"line_end":291,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7429},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92907,"byte_end":92928,"line_start":294,"line_end":294,"column_start":5,"column_end":26},"name":"UnsupportedOffsetSize","qualname":"::read::Error::UnsupportedOffsetSize","value":"Error::UnsupportedOffsetSize(u8)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The specified offset size is not supported.\n","sig":null,"attributes":[{"value":"/ The specified offset size is not supported.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92855,"byte_end":92902,"line_start":293,"line_end":293,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7432},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92989,"byte_end":93009,"line_start":296,"line_end":296,"column_start":5,"column_end":25},"name":"UnsupportedFieldSize","qualname":"::read::Error::UnsupportedFieldSize","value":"Error::UnsupportedFieldSize(u8)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The specified field size is not supported.\n","sig":null,"attributes":[{"value":"/ The specified field size is not supported.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":92938,"byte_end":92984,"line_start":295,"line_end":295,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7435},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93076,"byte_end":93104,"line_start":298,"line_end":298,"column_start":5,"column_end":33},"name":"MinimumInstructionLengthZero","qualname":"::read::Error::MinimumInstructionLengthZero","value":"Error::MinimumInstructionLengthZero","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The minimum instruction length must not be zero.\n","sig":null,"attributes":[{"value":"/ The minimum instruction length must not be zero.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93019,"byte_end":93071,"line_start":297,"line_end":297,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7437},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93175,"byte_end":93210,"line_start":300,"line_end":300,"column_start":5,"column_end":40},"name":"MaximumOperationsPerInstructionZero","qualname":"::read::Error::MaximumOperationsPerInstructionZero","value":"Error::MaximumOperationsPerInstructionZero","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The maximum operations per instruction must not be zero.\n","sig":null,"attributes":[{"value":"/ The maximum operations per instruction must not be zero.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93110,"byte_end":93170,"line_start":299,"line_end":299,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7439},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93257,"byte_end":93270,"line_start":302,"line_end":302,"column_start":5,"column_end":18},"name":"LineRangeZero","qualname":"::read::Error::LineRangeZero","value":"Error::LineRangeZero","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The line range must not be zero.\n","sig":null,"attributes":[{"value":"/ The line range must not be zero.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93216,"byte_end":93252,"line_start":301,"line_end":301,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7441},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93318,"byte_end":93332,"line_start":304,"line_end":304,"column_start":5,"column_end":19},"name":"OpcodeBaseZero","qualname":"::read::Error::OpcodeBaseZero","value":"Error::OpcodeBaseZero","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The opcode base must not be zero.\n","sig":null,"attributes":[{"value":"/ The opcode base must not be zero.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93276,"byte_end":93313,"line_start":303,"line_end":303,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7443},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93377,"byte_end":93384,"line_start":306,"line_end":306,"column_start":5,"column_end":12},"name":"BadUtf8","qualname":"::read::Error::BadUtf8","value":"Error::BadUtf8","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found an invalid UTF-8 string.\n","sig":null,"attributes":[{"value":"/ Found an invalid UTF-8 string.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93338,"byte_end":93372,"line_start":305,"line_end":305,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7445},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93453,"byte_end":93461,"line_start":308,"line_end":308,"column_start":5,"column_end":13},"name":"NotCieId","qualname":"::read::Error::NotCieId","value":"Error::NotCieId","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Expected to find the CIE ID, but found something else.\n","sig":null,"attributes":[{"value":"/ Expected to find the CIE ID, but found something else.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93390,"byte_end":93448,"line_start":307,"line_end":307,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7447},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93542,"byte_end":93555,"line_start":310,"line_end":310,"column_start":5,"column_end":18},"name":"NotCiePointer","qualname":"::read::Error::NotCiePointer","value":"Error::NotCiePointer","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Expected to find a pointer to a CIE, but found the CIE ID instead.\n","sig":null,"attributes":[{"value":"/ Expected to find a pointer to a CIE, but found the CIE ID instead.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93467,"byte_end":93537,"line_start":309,"line_end":309,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7449},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93632,"byte_end":93645,"line_start":312,"line_end":312,"column_start":5,"column_end":18},"name":"NotFdePointer","qualname":"::read::Error::NotFdePointer","value":"Error::NotFdePointer","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Expected to find a pointer to an FDE, but found a CIE instead.\n","sig":null,"attributes":[{"value":"/ Expected to find a pointer to an FDE, but found a CIE instead.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93561,"byte_end":93627,"line_start":311,"line_end":311,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7451},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93712,"byte_end":93727,"line_start":314,"line_end":314,"column_start":5,"column_end":20},"name":"BadBranchTarget","qualname":"::read::Error::BadBranchTarget","value":"Error::BadBranchTarget(u64)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Invalid branch target for a DW_OP_bra or DW_OP_skip.\n","sig":null,"attributes":[{"value":"/ Invalid branch target for a DW_OP_bra or DW_OP_skip.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93651,"byte_end":93707,"line_start":313,"line_end":313,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7454},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93803,"byte_end":93827,"line_start":316,"line_end":316,"column_start":5,"column_end":29},"name":"InvalidPushObjectAddress","qualname":"::read::Error::InvalidPushObjectAddress","value":"Error::InvalidPushObjectAddress","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" DW_OP_push_object_address used but no address passed in.\n","sig":null,"attributes":[{"value":"/ DW_OP_push_object_address used but no address passed in.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93738,"byte_end":93798,"line_start":315,"line_end":315,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7456},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93902,"byte_end":93921,"line_start":318,"line_end":318,"column_start":5,"column_end":24},"name":"NotEnoughStackItems","qualname":"::read::Error::NotEnoughStackItems","value":"Error::NotEnoughStackItems","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Not enough items on the stack when evaluating an expression.\n","sig":null,"attributes":[{"value":"/ Not enough items on the stack when evaluating an expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93833,"byte_end":93897,"line_start":317,"line_end":317,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7458},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93982,"byte_end":93999,"line_start":320,"line_end":320,"column_start":5,"column_end":22},"name":"TooManyIterations","qualname":"::read::Error::TooManyIterations","value":"Error::TooManyIterations","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Too many iterations to compute the expression.\n","sig":null,"attributes":[{"value":"/ Too many iterations to compute the expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":93927,"byte_end":93977,"line_start":319,"line_end":319,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7460},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94091,"byte_end":94108,"line_start":323,"line_end":323,"column_start":5,"column_end":22},"name":"InvalidExpression","qualname":"::read::Error::InvalidExpression","value":"Error::InvalidExpression(constants::DwOp)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An unrecognized operation was found while parsing a DWARF\n expression.\n","sig":null,"attributes":[{"value":"/ An unrecognized operation was found while parsing a DWARF","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94005,"byte_end":94066,"line_start":321,"line_end":321,"column_start":5,"column_end":66}},{"value":"/ expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94071,"byte_end":94086,"line_start":322,"line_end":322,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7463},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94211,"byte_end":94232,"line_start":325,"line_end":325,"column_start":5,"column_end":26},"name":"UnsupportedEvaluation","qualname":"::read::Error::UnsupportedEvaluation","value":"Error::UnsupportedEvaluation","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An unsupported operation was found while evaluating a DWARF expression.\n","sig":null,"attributes":[{"value":"/ An unsupported operation was found while evaluating a DWARF expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94131,"byte_end":94206,"line_start":324,"line_end":324,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7465},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94335,"byte_end":94347,"line_start":328,"line_end":328,"column_start":5,"column_end":17},"name":"InvalidPiece","qualname":"::read::Error::InvalidPiece","value":"Error::InvalidPiece","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The expression had a piece followed by an expression\n terminator without a piece.\n","sig":null,"attributes":[{"value":"/ The expression had a piece followed by an expression","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94238,"byte_end":94294,"line_start":326,"line_end":326,"column_start":5,"column_end":61}},{"value":"/ terminator without a piece.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94299,"byte_end":94330,"line_start":327,"line_end":327,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7467},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94490,"byte_end":94517,"line_start":331,"line_end":331,"column_start":5,"column_end":32},"name":"InvalidExpressionTerminator","qualname":"::read::Error::InvalidExpressionTerminator","value":"Error::InvalidExpressionTerminator(u64)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An expression-terminating operation was followed by something\n other than the end of the expression or a piece operation.\n","sig":null,"attributes":[{"value":"/ An expression-terminating operation was followed by something","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94353,"byte_end":94418,"line_start":329,"line_end":329,"column_start":5,"column_end":70}},{"value":"/ other than the end of the expression or a piece operation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94423,"byte_end":94485,"line_start":330,"line_end":330,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7470},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94595,"byte_end":94609,"line_start":333,"line_end":333,"column_start":5,"column_end":19},"name":"DivisionByZero","qualname":"::read::Error::DivisionByZero","value":"Error::DivisionByZero","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Division or modulus by zero when evaluating an expression.\n","sig":null,"attributes":[{"value":"/ Division or modulus by zero when evaluating an expression.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94528,"byte_end":94590,"line_start":332,"line_end":332,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7472},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94671,"byte_end":94683,"line_start":335,"line_end":335,"column_start":5,"column_end":17},"name":"TypeMismatch","qualname":"::read::Error::TypeMismatch","value":"Error::TypeMismatch","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An expression operation used mismatching types.\n","sig":null,"attributes":[{"value":"/ An expression operation used mismatching types.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94615,"byte_end":94666,"line_start":334,"line_end":334,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7474},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94786,"byte_end":94806,"line_start":338,"line_end":338,"column_start":5,"column_end":25},"name":"IntegralTypeRequired","qualname":"::read::Error::IntegralTypeRequired","value":"Error::IntegralTypeRequired","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An expression operation required an integral type but saw a\n floating point type.\n","sig":null,"attributes":[{"value":"/ An expression operation required an integral type but saw a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94689,"byte_end":94752,"line_start":336,"line_end":336,"column_start":5,"column_end":68}},{"value":"/ floating point type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94757,"byte_end":94781,"line_start":337,"line_end":337,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7476},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94879,"byte_end":94903,"line_start":340,"line_end":340,"column_start":5,"column_end":29},"name":"UnsupportedTypeOperation","qualname":"::read::Error::UnsupportedTypeOperation","value":"Error::UnsupportedTypeOperation","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An expression operation used types that are not supported.\n","sig":null,"attributes":[{"value":"/ An expression operation used types that are not supported.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94812,"byte_end":94874,"line_start":339,"line_end":339,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7478},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94982,"byte_end":95004,"line_start":342,"line_end":342,"column_start":5,"column_end":27},"name":"InvalidShiftExpression","qualname":"::read::Error::InvalidShiftExpression","value":"Error::InvalidShiftExpression","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The shift value in an expression must be a non-negative integer.\n","sig":null,"attributes":[{"value":"/ The shift value in an expression must be a non-negative integer.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":94909,"byte_end":94977,"line_start":341,"line_end":341,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7480},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95051,"byte_end":95078,"line_start":344,"line_end":344,"column_start":5,"column_end":32},"name":"UnknownCallFrameInstruction","qualname":"::read::Error::UnknownCallFrameInstruction","value":"Error::UnknownCallFrameInstruction(constants::DwCfa)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An unknown DW_CFA_* instruction.\n","sig":null,"attributes":[{"value":"/ An unknown DW_CFA_* instruction.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95010,"byte_end":95046,"line_start":343,"line_end":343,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7483},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95164,"byte_end":95183,"line_start":346,"line_end":346,"column_start":5,"column_end":24},"name":"InvalidAddressRange","qualname":"::read::Error::InvalidAddressRange","value":"Error::InvalidAddressRange","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The end of an address range was before the beginning.\n","sig":null,"attributes":[{"value":"/ The end of an address range was before the beginning.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95102,"byte_end":95159,"line_start":345,"line_end":345,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7485},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95258,"byte_end":95285,"line_start":348,"line_end":348,"column_start":5,"column_end":32},"name":"InvalidLocationAddressRange","qualname":"::read::Error::InvalidLocationAddressRange","value":"Error::InvalidLocationAddressRange","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The end offset of a loc list entry was before the beginning.\n","sig":null,"attributes":[{"value":"/ The end offset of a loc list entry was before the beginning.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95189,"byte_end":95253,"line_start":347,"line_end":347,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7487},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95383,"byte_end":95413,"line_start":351,"line_end":351,"column_start":5,"column_end":35},"name":"CfiInstructionInInvalidContext","qualname":"::read::Error::CfiInstructionInInvalidContext","value":"Error::CfiInstructionInInvalidContext","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Encountered a call frame instruction in a context in which it is not\n valid.\n","sig":null,"attributes":[{"value":"/ Encountered a call frame instruction in a context in which it is not","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95291,"byte_end":95363,"line_start":349,"line_end":349,"column_start":5,"column_end":77}},{"value":"/ valid.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95368,"byte_end":95378,"line_start":350,"line_end":350,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7489},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95579,"byte_end":95596,"line_start":354,"line_end":354,"column_start":5,"column_end":22},"name":"PopWithEmptyStack","qualname":"::read::Error::PopWithEmptyStack","value":"Error::PopWithEmptyStack","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" When evaluating call frame instructions, found a `DW_CFA_restore_state`\n stack pop instruction, but the stack was empty, and had nothing to pop.\n","sig":null,"attributes":[{"value":"/ When evaluating call frame instructions, found a `DW_CFA_restore_state`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95419,"byte_end":95494,"line_start":352,"line_end":352,"column_start":5,"column_end":80}},{"value":"/ stack pop instruction, but the stack was empty, and had nothing to pop.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95499,"byte_end":95574,"line_start":353,"line_end":353,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7491},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95657,"byte_end":95679,"line_start":356,"line_end":356,"column_start":5,"column_end":27},"name":"NoUnwindInfoForAddress","qualname":"::read::Error::NoUnwindInfoForAddress","value":"Error::NoUnwindInfoForAddress","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Do not have unwind info for the given address.\n","sig":null,"attributes":[{"value":"/ Do not have unwind info for the given address.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95602,"byte_end":95652,"line_start":355,"line_end":355,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7493},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95754,"byte_end":95771,"line_start":358,"line_end":358,"column_start":5,"column_end":22},"name":"UnsupportedOffset","qualname":"::read::Error::UnsupportedOffset","value":"Error::UnsupportedOffset","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" An offset value was larger than the maximum supported value.\n","sig":null,"attributes":[{"value":"/ An offset value was larger than the maximum supported value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95685,"byte_end":95749,"line_start":357,"line_end":357,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7495},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95842,"byte_end":95864,"line_start":360,"line_end":360,"column_start":5,"column_end":27},"name":"UnknownPointerEncoding","qualname":"::read::Error::UnknownPointerEncoding","value":"Error::UnknownPointerEncoding","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The given pointer encoding is either unknown or invalid.\n","sig":null,"attributes":[{"value":"/ The given pointer encoding is either unknown or invalid.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95777,"byte_end":95837,"line_start":359,"line_end":359,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7497},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95921,"byte_end":95941,"line_start":362,"line_end":362,"column_start":5,"column_end":25},"name":"NoEntryAtGivenOffset","qualname":"::read::Error::NoEntryAtGivenOffset","value":"Error::NoEntryAtGivenOffset","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Did not find an entry at the given offset.\n","sig":null,"attributes":[{"value":"/ Did not find an entry at the given offset.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95870,"byte_end":95916,"line_start":361,"line_end":361,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7499},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95990,"byte_end":96007,"line_start":364,"line_end":364,"column_start":5,"column_end":22},"name":"OffsetOutOfBounds","qualname":"::read::Error::OffsetOutOfBounds","value":"Error::OffsetOutOfBounds","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The given offset is out of bounds.\n","sig":null,"attributes":[{"value":"/ The given offset is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":95947,"byte_end":95985,"line_start":363,"line_end":363,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7501},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96056,"byte_end":96075,"line_start":366,"line_end":366,"column_start":5,"column_end":24},"name":"UnknownAugmentation","qualname":"::read::Error::UnknownAugmentation","value":"Error::UnknownAugmentation","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Found an unknown CFI augmentation.\n","sig":null,"attributes":[{"value":"/ Found an unknown CFI augmentation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96013,"byte_end":96051,"line_start":365,"line_end":365,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7503},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96139,"byte_end":96165,"line_start":368,"line_end":368,"column_start":5,"column_end":31},"name":"UnsupportedPointerEncoding","qualname":"::read::Error::UnsupportedPointerEncoding","value":"Error::UnsupportedPointerEncoding","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" We do not support the given pointer encoding yet.\n","sig":null,"attributes":[{"value":"/ We do not support the given pointer encoding yet.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96081,"byte_end":96134,"line_start":367,"line_end":367,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7505},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96226,"byte_end":96245,"line_start":370,"line_end":370,"column_start":5,"column_end":24},"name":"UnsupportedRegister","qualname":"::read::Error::UnsupportedRegister","value":"Error::UnsupportedRegister(u64)","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Registers larger than `u16` are not supported.\n","sig":null,"attributes":[{"value":"/ Registers larger than `u16` are not supported.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96171,"byte_end":96221,"line_start":369,"line_end":369,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7508},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96334,"byte_end":96354,"line_start":372,"line_end":372,"column_start":5,"column_end":25},"name":"TooManyRegisterRules","qualname":"::read::Error::TooManyRegisterRules","value":"Error::TooManyRegisterRules","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The CFI program defined more register rules than we have storage for.\n","sig":null,"attributes":[{"value":"/ The CFI program defined more register rules than we have storage for.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96256,"byte_end":96329,"line_start":371,"line_end":371,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7510},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96451,"byte_end":96463,"line_start":375,"line_end":375,"column_start":5,"column_end":17},"name":"CfiStackFull","qualname":"::read::Error::CfiStackFull","value":"Error::CfiStackFull","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Attempted to push onto the CFI stack, but it was already at full\n capacity.\n","sig":null,"attributes":[{"value":"/ Attempted to push onto the CFI stack, but it was already at full","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96360,"byte_end":96428,"line_start":373,"line_end":373,"column_start":5,"column_end":73}},{"value":"/ capacity.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96433,"byte_end":96446,"line_start":374,"line_end":374,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7512},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96601,"byte_end":96626,"line_start":378,"line_end":378,"column_start":5,"column_end":30},"name":"VariableLengthSearchTable","qualname":"::read::Error::VariableLengthSearchTable","value":"Error::VariableLengthSearchTable","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The `.eh_frame_hdr` binary search table claims to be variable-length encoded,\n which makes binary search impossible.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame_hdr` binary search table claims to be variable-length encoded,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96469,"byte_end":96550,"line_start":376,"line_end":376,"column_start":5,"column_end":86}},{"value":"/ which makes binary search impossible.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96555,"byte_end":96596,"line_start":377,"line_end":377,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7514},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96696,"byte_end":96715,"line_start":380,"line_end":380,"column_start":5,"column_end":24},"name":"UnsupportedUnitType","qualname":"::read::Error::UnsupportedUnitType","value":"Error::UnsupportedUnitType","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" The `DW_UT_*` value for this unit is not supported yet.\n","sig":null,"attributes":[{"value":"/ The `DW_UT_*` value for this unit is not supported yet.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96632,"byte_end":96691,"line_start":379,"line_end":379,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7516},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96778,"byte_end":96801,"line_start":382,"line_end":382,"column_start":5,"column_end":28},"name":"UnsupportedAddressIndex","qualname":"::read::Error::UnsupportedAddressIndex","value":"Error::UnsupportedAddressIndex","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Ranges using AddressIndex are not supported yet.\n","sig":null,"attributes":[{"value":"/ Ranges using AddressIndex are not supported yet.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96721,"byte_end":96773,"line_start":381,"line_end":381,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7518},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96868,"byte_end":96890,"line_start":384,"line_end":384,"column_start":5,"column_end":27},"name":"UnsupportedSegmentSize","qualname":"::read::Error::UnsupportedSegmentSize","value":"Error::UnsupportedSegmentSize","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Nonzero segment selector sizes aren't supported yet.\n","sig":null,"attributes":[{"value":"/ Nonzero segment selector sizes aren't supported yet.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96807,"byte_end":96863,"line_start":383,"line_end":383,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7520},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96966,"byte_end":96980,"line_start":386,"line_end":386,"column_start":5,"column_end":19},"name":"MissingUnitDie","qualname":"::read::Error::MissingUnitDie","value":"Error::MissingUnitDie","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" A compilation unit or type unit is missing its top level DIE.\n","sig":null,"attributes":[{"value":"/ A compilation unit or type unit is missing its top level DIE.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96896,"byte_end":96961,"line_start":385,"line_end":385,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7522},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97036,"byte_end":97060,"line_start":388,"line_end":388,"column_start":5,"column_end":29},"name":"UnsupportedAttributeForm","qualname":"::read::Error::UnsupportedAttributeForm","value":"Error::UnsupportedAttributeForm","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" A DIE attribute used an unsupported form.\n","sig":null,"attributes":[{"value":"/ A DIE attribute used an unsupported form.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":96986,"byte_end":97031,"line_start":387,"line_end":387,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7524},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97117,"byte_end":97143,"line_start":390,"line_end":390,"column_start":5,"column_end":31},"name":"MissingFileEntryFormatPath","qualname":"::read::Error::MissingFileEntryFormatPath","value":"Error::MissingFileEntryFormatPath","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Missing DW_LNCT_path in file entry format.\n","sig":null,"attributes":[{"value":"/ Missing DW_LNCT_path in file entry format.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97066,"byte_end":97112,"line_start":389,"line_end":389,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7526},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97206,"byte_end":97234,"line_start":392,"line_end":392,"column_start":5,"column_end":33},"name":"ExpectedStringAttributeValue","qualname":"::read::Error::ExpectedStringAttributeValue","value":"Error::ExpectedStringAttributeValue","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" Expected an attribute value to be a string form.\n","sig":null,"attributes":[{"value":"/ Expected an attribute value to be a string form.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97149,"byte_end":97201,"line_start":391,"line_end":391,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7528},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97301,"byte_end":97321,"line_start":394,"line_end":394,"column_start":5,"column_end":25},"name":"InvalidImplicitConst","qualname":"::read::Error::InvalidImplicitConst","value":"Error::InvalidImplicitConst","parent":{"krate":0,"index":7375},"children":[],"decl_id":null,"docs":" `DW_FORM_implicit_const` used in an invalid context.\n","sig":null,"attributes":[{"value":"/ `DW_FORM_implicit_const` used in an invalid context.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97240,"byte_end":97296,"line_start":393,"line_end":393,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":7375},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90700,"byte_end":90705,"line_start":240,"line_end":240,"column_start":10,"column_end":15},"name":"Error","qualname":"::read::Error","value":"pub enum Error {\n\n    /// An I/O error occurred while reading.\n    Io,\n\n    /// Found a PC relative pointer, but the section base is undefined.\n    PcRelativePointerButSectionBaseIsUndefined,\n\n    /// Found a `.text` relative pointer, but the `.text` base is undefined.\n    TextRelativePointerButTextBaseIsUndefined,\n\n    /// Found a data relative pointer, but the data base is undefined.\n    DataRelativePointerButDataBaseIsUndefined,\n\n    /// Found a function relative pointer in a context that does not have a\n    /// function base.\n    FuncRelativePointerInBadContext,\n\n    /// Cannot parse a pointer with a `DW_EH_PE_omit` encoding.\n    CannotParseOmitPointerEncoding,\n\n    /// An error parsing an unsigned LEB128 value.\n    BadUnsignedLeb128,\n\n    /// An error parsing a signed LEB128 value.\n    BadSignedLeb128,\n\n    /// An abbreviation declared that its tag is zero, but zero is reserved for\n    /// null records.\n    AbbreviationTagZero,\n\n    /// An attribute specification declared that its form is zero, but zero is\n    /// reserved for null records.\n    AttributeFormZero,\n\n    /// The abbreviation's has-children byte was not one of\n    /// `DW_CHILDREN_{yes,no}`.\n    BadHasChildren,\n\n    /// The specified length is impossible.\n    BadLength,\n\n    /// Found an unknown `DW_FORM_*` type.\n    UnknownForm,\n\n    /// Expected a zero, found something else.\n    ExpectedZero,\n\n    /// Found an abbreviation code that has already been used.\n    DuplicateAbbreviationCode,\n\n    /// Found a duplicate arange.\n    DuplicateArange,\n\n    /// Found an unknown reserved length value.\n    UnknownReservedLength,\n\n    /// Found an unknown DWARF version.\n    UnknownVersion(u64),\n\n    /// Found a record with an unknown abbreviation code.\n    UnknownAbbreviation,\n\n    /// Hit the end of input before it was expected.\n    UnexpectedEof(ReaderOffsetId),\n\n    /// Read a null entry before it was expected.\n    UnexpectedNull,\n\n    /// Found an unknown standard opcode.\n    UnknownStandardOpcode(constants::DwLns),\n\n    /// Found an unknown extended opcode.\n    UnknownExtendedOpcode(constants::DwLne),\n\n    /// The specified address size is not supported.\n    UnsupportedAddressSize(u8),\n\n    /// The specified offset size is not supported.\n    UnsupportedOffsetSize(u8),\n\n    /// The specified field size is not supported.\n    UnsupportedFieldSize(u8),\n\n    /// The minimum instruction length must not be zero.\n    MinimumInstructionLengthZero,\n\n    /// The maximum operations per instruction must not be zero.\n    MaximumOperationsPerInstructionZero,\n\n    /// The line range must not be zero.\n    LineRangeZero,\n\n    /// The opcode base must not be zero.\n    OpcodeBaseZero,\n\n    /// Found an invalid UTF-8 string.\n    BadUtf8,\n\n    /// Expected to find the CIE ID, but found something else.\n    NotCieId,\n\n    /// Expected to find a pointer to a CIE, but found the CIE ID instead.\n    NotCiePointer,\n\n    /// Expected to find a pointer to an FDE, but found a CIE instead.\n    NotFdePointer,\n\n    /// Invalid branch target for a DW_OP_bra or DW_OP_skip.\n    BadBranchTarget(u64),\n\n    /// DW_OP_push_object_address used but no address passed in.\n    InvalidPushObjectAddress,\n\n    /// Not enough items on the stack when evaluating an expression.\n    NotEnoughStackItems,\n\n    /// Too many iterations to compute the expression.\n    TooManyIterations,\n\n    /// An unrecognized operation was found while parsing a DWARF\n    /// expression.\n    InvalidExpression(constants::DwOp),\n\n    /// An unsupported operation was found while evaluating a DWARF expression.\n    UnsupportedEvaluation,\n\n    /// The expression had a piece followed by an expression\n    /// terminator without a piece.\n    InvalidPiece,\n\n    /// An expression-terminating operation was followed by something\n    /// other than the end of the expression or a piece operation.\n    InvalidExpressionTerminator(u64),\n\n    /// Division or modulus by zero when evaluating an expression.\n    DivisionByZero,\n\n    /// An expression operation used mismatching types.\n    TypeMismatch,\n\n    /// An expression operation required an integral type but saw a\n    /// floating point type.\n    IntegralTypeRequired,\n\n    /// An expression operation used types that are not supported.\n    UnsupportedTypeOperation,\n\n    /// The shift value in an expression must be a non-negative integer.\n    InvalidShiftExpression,\n\n    /// An unknown DW_CFA_* instruction.\n    UnknownCallFrameInstruction(constants::DwCfa),\n\n    /// The end of an address range was before the beginning.\n    InvalidAddressRange,\n\n    /// The end offset of a loc list entry was before the beginning.\n    InvalidLocationAddressRange,\n\n    /// Encountered a call frame instruction in a context in which it is not\n    /// valid.\n    CfiInstructionInInvalidContext,\n\n    /// When evaluating call frame instructions, found a `DW_CFA_restore_state`\n    /// stack pop instruction, but the stack was empty, and had nothing to pop.\n    PopWithEmptyStack,\n\n    /// Do not have unwind info for the given address.\n    NoUnwindInfoForAddress,\n\n    /// An offset value was larger than the maximum supported value.\n    UnsupportedOffset,\n\n    /// The given pointer encoding is either unknown or invalid.\n    UnknownPointerEncoding,\n\n    /// Did not find an entry at the given offset.\n    NoEntryAtGivenOffset,\n\n    /// The given offset is out of bounds.\n    OffsetOutOfBounds,\n\n    /// Found an unknown CFI augmentation.\n    UnknownAugmentation,\n\n    /// We do not support the given pointer encoding yet.\n    UnsupportedPointerEncoding,\n\n    /// Registers larger than `u16` are not supported.\n    UnsupportedRegister(u64),\n\n    /// The CFI program defined more register rules than we have storage for.\n    TooManyRegisterRules,\n\n    /// Attempted to push onto the CFI stack, but it was already at full\n    /// capacity.\n    CfiStackFull,\n\n    /// The `.eh_frame_hdr` binary search table claims to be variable-length encoded,\n    /// which makes binary search impossible.\n    VariableLengthSearchTable,\n\n    /// The `DW_UT_*` value for this unit is not supported yet.\n    UnsupportedUnitType,\n\n    /// Ranges using AddressIndex are not supported yet.\n    UnsupportedAddressIndex,\n\n    /// Nonzero segment selector sizes aren't supported yet.\n    UnsupportedSegmentSize,\n\n    /// A compilation unit or type unit is missing its top level DIE.\n    MissingUnitDie,\n\n    /// A DIE attribute used an unsupported form.\n    UnsupportedAttributeForm,\n\n    /// Missing DW_LNCT_path in file entry format.\n    MissingFileEntryFormatPath,\n\n    /// Expected an attribute value to be a string form.\n    ExpectedStringAttributeValue,\n\n    /// `DW_FORM_implicit_const` used in an invalid context.\n    InvalidImplicitConst,\n}","parent":null,"children":[{"krate":0,"index":7376},{"krate":0,"index":7378},{"krate":0,"index":7380},{"krate":0,"index":7382},{"krate":0,"index":7384},{"krate":0,"index":7386},{"krate":0,"index":7388},{"krate":0,"index":7390},{"krate":0,"index":7392},{"krate":0,"index":7394},{"krate":0,"index":7396},{"krate":0,"index":7398},{"krate":0,"index":7400},{"krate":0,"index":7402},{"krate":0,"index":7404},{"krate":0,"index":7406},{"krate":0,"index":7408},{"krate":0,"index":7410},{"krate":0,"index":7413},{"krate":0,"index":7415},{"krate":0,"index":7418},{"krate":0,"index":7420},{"krate":0,"index":7423},{"krate":0,"index":7426},{"krate":0,"index":7429},{"krate":0,"index":7432},{"krate":0,"index":7435},{"krate":0,"index":7437},{"krate":0,"index":7439},{"krate":0,"index":7441},{"krate":0,"index":7443},{"krate":0,"index":7445},{"krate":0,"index":7447},{"krate":0,"index":7449},{"krate":0,"index":7451},{"krate":0,"index":7454},{"krate":0,"index":7456},{"krate":0,"index":7458},{"krate":0,"index":7460},{"krate":0,"index":7463},{"krate":0,"index":7465},{"krate":0,"index":7467},{"krate":0,"index":7470},{"krate":0,"index":7472},{"krate":0,"index":7474},{"krate":0,"index":7476},{"krate":0,"index":7478},{"krate":0,"index":7480},{"krate":0,"index":7483},{"krate":0,"index":7485},{"krate":0,"index":7487},{"krate":0,"index":7489},{"krate":0,"index":7491},{"krate":0,"index":7493},{"krate":0,"index":7495},{"krate":0,"index":7497},{"krate":0,"index":7499},{"krate":0,"index":7501},{"krate":0,"index":7503},{"krate":0,"index":7505},{"krate":0,"index":7508},{"krate":0,"index":7510},{"krate":0,"index":7512},{"krate":0,"index":7514},{"krate":0,"index":7516},{"krate":0,"index":7518},{"krate":0,"index":7520},{"krate":0,"index":7522},{"krate":0,"index":7524},{"krate":0,"index":7526},{"krate":0,"index":7528}],"decl_id":null,"docs":" An error that occurred when parsing.\n","sig":null,"attributes":[{"value":"/ An error that occurred when parsing.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":90605,"byte_end":90645,"line_start":238,"line_end":238,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97575,"byte_end":97586,"line_start":406,"line_end":406,"column_start":12,"column_end":23},"name":"description","qualname":"<Error>::description","value":"pub fn description(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" A short description of the error.\n","sig":null,"attributes":[{"value":"/ A short description of the error.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97526,"byte_end":97563,"line_start":405,"line_end":405,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2009},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":105877,"byte_end":105883,"line_start":555,"line_end":555,"column_start":10,"column_end":16},"name":"Result","qualname":"::read::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" The result of a parse.\n","sig":null,"attributes":[{"value":"/ The result of a parse.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":105841,"byte_end":105867,"line_start":554,"line_end":554,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":2011},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106337,"byte_end":106344,"line_start":569,"line_end":569,"column_start":11,"column_end":18},"name":"Section","qualname":"::read::Section","value":"Section<R>: From<R>","parent":null,"children":[{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2019},{"krate":0,"index":2020}],"decl_id":null,"docs":" A convenience trait for loading DWARF sections from object files.  To be\n used like:","sig":null,"attributes":[{"value":"/ A convenience trait for loading DWARF sections from object files.  To be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":105916,"byte_end":105992,"line_start":557,"line_end":557,"column_start":1,"column_end":77}},{"value":"/ used like:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":105993,"byte_end":106007,"line_start":558,"line_end":558,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106008,"byte_end":106011,"line_start":559,"line_end":559,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106012,"byte_end":106019,"line_start":560,"line_end":560,"column_start":1,"column_end":8}},{"value":"/ use gimli::{DebugInfo, EndianSlice, LittleEndian, Reader, Section};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106020,"byte_end":106091,"line_start":561,"line_end":561,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106092,"byte_end":106095,"line_start":562,"line_end":562,"column_start":1,"column_end":4}},{"value":"/ let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106096,"byte_end":106135,"line_start":563,"line_end":563,"column_start":1,"column_end":40}},{"value":"/ let reader = EndianSlice::new(&buf, LittleEndian);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106136,"byte_end":106190,"line_start":564,"line_end":564,"column_start":1,"column_end":55}},{"value":"/ let loader = |name| -> Result<_, ()> { Ok(reader) };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106191,"byte_end":106247,"line_start":565,"line_end":565,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106248,"byte_end":106251,"line_start":566,"line_end":566,"column_start":1,"column_end":4}},{"value":"/ let debug_info: DebugInfo<_> = Section::load(loader).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106252,"byte_end":106318,"line_start":567,"line_end":567,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106319,"byte_end":106326,"line_start":568,"line_end":568,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2013},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106412,"byte_end":106414,"line_start":571,"line_end":571,"column_start":8,"column_end":10},"name":"id","qualname":"::read::Section::id","value":"pub fn id() -> SectionId","parent":{"krate":0,"index":2011},"children":[],"decl_id":null,"docs":" Returns the section id for this type.\n","sig":null,"attributes":[{"value":"/ Returns the section id for this type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106363,"byte_end":106404,"line_start":570,"line_end":570,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106491,"byte_end":106503,"line_start":574,"line_end":574,"column_start":8,"column_end":20},"name":"section_name","qualname":"::read::Section::section_name","value":"pub fn section_name() -> &'static str","parent":{"krate":0,"index":2011},"children":[],"decl_id":null,"docs":" Returns the ELF section name for this type.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106436,"byte_end":106483,"line_start":573,"line_end":573,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106657,"byte_end":106673,"line_start":580,"line_end":580,"column_start":8,"column_end":24},"name":"dwo_section_name","qualname":"::read::Section::dwo_section_name","value":"pub fn dwo_section_name() -> Option<&'static str>","parent":{"krate":0,"index":2011},"children":[],"decl_id":null,"docs":" Returns the ELF section name (if any) for this type when used in a dwo\n file.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name (if any) for this type when used in a dwo","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106561,"byte_end":106635,"line_start":578,"line_end":578,"column_start":5,"column_end":79}},{"value":"/ file.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106640,"byte_end":106649,"line_start":579,"line_end":579,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106811,"byte_end":106815,"line_start":585,"line_end":585,"column_start":8,"column_end":12},"name":"load","qualname":"::read::Section::load","value":"pub fn load<F, E>(F) -> core::result::Result<Self, E> where\nF: FnOnce(SectionId) -> core::result::Result<R, E>","parent":{"krate":0,"index":2011},"children":[],"decl_id":null,"docs":" Try to load the section using the given loader function.\n","sig":null,"attributes":[{"value":"/ Try to load the section using the given loader function.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106743,"byte_end":106803,"line_start":584,"line_end":584,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2019},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":107036,"byte_end":107042,"line_start":593,"line_end":593,"column_start":8,"column_end":14},"name":"reader","qualname":"::read::Section::reader","value":"pub fn reader(&Self) -> &R where R: Reader","parent":{"krate":0,"index":2011},"children":[],"decl_id":null,"docs":" Returns the `Reader` for this section.\n","sig":null,"attributes":[{"value":"/ Returns the `Reader` for this section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106986,"byte_end":107028,"line_start":592,"line_end":592,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":107140,"byte_end":107156,"line_start":598,"line_end":598,"column_start":8,"column_end":24},"name":"lookup_offset_id","qualname":"::read::Section::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(SectionId, R::Offset)> where R: Reader","parent":{"krate":0,"index":2011},"children":[],"decl_id":null,"docs":" Returns the `Reader` for this section.\n","sig":null,"attributes":[{"value":"/ Returns the `Reader` for this section.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":107090,"byte_end":107132,"line_start":597,"line_end":597,"column_start":5,"column_end":47}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2352,"byte_end":2358,"line_start":10,"line_end":10,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4101,"byte_end":4113,"line_start":70,"line_end":70,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":10}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8185,"byte_end":8201,"line_start":176,"line_end":176,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8446,"byte_end":8459,"line_start":187,"line_end":187,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8939,"byte_end":8956,"line_start":203,"line_end":203,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":9110,"byte_end":9127,"line_start":209,"line_end":209,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":9253,"byte_end":9270,"line_start":215,"line_end":215,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":11141,"byte_end":11150,"line_start":280,"line_end":280,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13841,"byte_end":13854,"line_start":342,"line_end":342,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43624,"byte_end":43630,"line_start":836,"line_end":836,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55531,"byte_end":55537,"line_start":1292,"line_end":1292,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62679,"byte_end":62692,"line_start":183,"line_end":183,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62958,"byte_end":62971,"line_start":197,"line_end":197,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63196,"byte_end":63208,"line_start":208,"line_end":208,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63309,"byte_end":63321,"line_start":215,"line_end":215,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63516,"byte_end":63525,"line_start":226,"line_end":226,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63620,"byte_end":63629,"line_start":233,"line_end":233,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113096,"byte_end":113105,"line_start":10,"line_end":10,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114403,"byte_end":114412,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":115225,"byte_end":115234,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":115383,"byte_end":115392,"line_start":77,"line_end":77,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118502,"byte_end":118512,"line_start":35,"line_end":35,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119072,"byte_end":119082,"line_start":53,"line_end":53,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119912,"byte_end":119922,"line_start":77,"line_end":77,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120080,"byte_end":120090,"line_start":87,"line_end":87,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120963,"byte_end":120973,"line_start":117,"line_end":117,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":121270,"byte_end":121280,"line_start":127,"line_end":127,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123019,"byte_end":123029,"line_start":176,"line_end":176,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123181,"byte_end":123191,"line_start":186,"line_end":186,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123284,"byte_end":123300,"line_start":192,"line_end":192,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124613,"byte_end":124623,"line_start":223,"line_end":223,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130980,"byte_end":130987,"line_start":408,"line_end":408,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131229,"byte_end":131236,"line_start":417,"line_end":417,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132070,"byte_end":132077,"line_start":441,"line_end":441,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132232,"byte_end":132239,"line_start":451,"line_end":451,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133016,"byte_end":133032,"line_start":482,"line_end":482,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133156,"byte_end":133169,"line_start":492,"line_end":492,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140782,"byte_end":140792,"line_start":694,"line_end":694,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":141735,"byte_end":141745,"line_start":734,"line_end":734,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":141846,"byte_end":141853,"line_start":738,"line_end":738,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142662,"byte_end":142669,"line_start":774,"line_end":774,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144817,"byte_end":144830,"line_start":832,"line_end":832,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147525,"byte_end":147539,"line_start":914,"line_end":914,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":153218,"byte_end":153230,"line_start":1063,"line_end":1063,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":155763,"byte_end":155779,"line_start":1136,"line_end":1136,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":159294,"byte_end":159316,"line_start":1221,"line_end":1221,"column_start":17,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":161890,"byte_end":161912,"line_start":1305,"line_end":1305,"column_start":17,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":166499,"byte_end":166527,"line_start":1444,"line_end":1444,"column_start":26,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":169335,"byte_end":169356,"line_start":1526,"line_end":1526,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173389,"byte_end":173410,"line_start":1647,"line_end":1647,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177852,"byte_end":177878,"line_start":1769,"line_end":1769,"column_start":17,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":178094,"byte_end":178120,"line_start":1776,"line_end":1776,"column_start":29,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":178344,"byte_end":178370,"line_start":1786,"line_end":1786,"column_start":17,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":180035,"byte_end":180048,"line_start":1832,"line_end":1832,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183142,"byte_end":183155,"line_start":1945,"line_end":1945,"column_start":43,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":186537,"byte_end":186548,"line_start":2024,"line_end":2024,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":197930,"byte_end":197945,"line_start":2319,"line_end":2319,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":198158,"byte_end":198173,"line_start":2327,"line_end":2327,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":198361,"byte_end":198376,"line_start":2336,"line_end":2336,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":198636,"byte_end":198651,"line_start":2346,"line_end":2346,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":198875,"byte_end":198890,"line_start":2356,"line_end":2356,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":202312,"byte_end":202327,"line_start":2455,"line_end":2455,"column_start":63,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":202900,"byte_end":202915,"line_start":2475,"line_end":2475,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":203416,"byte_end":203431,"line_start":2498,"line_end":2498,"column_start":16,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":203683,"byte_end":203699,"line_start":2506,"line_end":2506,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204230,"byte_end":204244,"line_start":2525,"line_end":2525,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204507,"byte_end":204521,"line_start":2537,"line_end":2537,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210975,"byte_end":210982,"line_start":2663,"line_end":2663,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211145,"byte_end":211152,"line_start":2672,"line_end":2672,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212954,"byte_end":212966,"line_start":2724,"line_end":2724,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224830,"byte_end":224850,"line_start":3023,"line_end":3023,"column_start":17,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":232967,"byte_end":232991,"line_start":3235,"line_end":3235,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234647,"byte_end":234654,"line_start":3292,"line_end":3292,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234753,"byte_end":234760,"line_start":3299,"line_end":3299,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234909,"byte_end":234916,"line_start":3308,"line_end":3308,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375196,"byte_end":375201,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379770,"byte_end":379775,"line_start":167,"line_end":167,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394475,"byte_end":394479,"line_start":568,"line_end":568,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":400423,"byte_end":400440,"line_start":720,"line_end":720,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":401541,"byte_end":401551,"line_start":750,"line_end":750,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402584,"byte_end":402593,"line_start":782,"line_end":782,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402699,"byte_end":402708,"line_start":788,"line_end":788,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405661,"byte_end":405672,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408496,"byte_end":408507,"line_start":108,"line_end":108,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410414,"byte_end":410425,"line_start":167,"line_end":167,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410629,"byte_end":410640,"line_start":177,"line_end":177,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410839,"byte_end":410850,"line_start":187,"line_end":187,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":411033,"byte_end":411044,"line_start":197,"line_end":197,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":411188,"byte_end":411199,"line_start":206,"line_end":206,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429357,"byte_end":429368,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430197,"byte_end":430208,"line_start":46,"line_end":46,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430682,"byte_end":430693,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431525,"byte_end":431536,"line_start":85,"line_end":85,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431700,"byte_end":431711,"line_start":95,"line_end":95,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":432153,"byte_end":432166,"line_start":114,"line_end":114,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":434881,"byte_end":434893,"line_start":192,"line_end":192,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":437900,"byte_end":437910,"line_start":299,"line_end":299,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":438813,"byte_end":438823,"line_start":330,"line_end":330,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":438942,"byte_end":438952,"line_start":336,"line_end":336,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439051,"byte_end":439061,"line_start":342,"line_end":342,"column_start":13,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439081,"byte_end":439091,"line_start":344,"line_end":344,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":920},{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439380,"byte_end":439390,"line_start":354,"line_end":354,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439689,"byte_end":439699,"line_start":367,"line_end":367,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440076,"byte_end":440098,"line_start":382,"line_end":382,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461093,"byte_end":461105,"line_start":12,"line_end":12,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":957}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461925,"byte_end":461937,"line_start":38,"line_end":38,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462552,"byte_end":462564,"line_start":57,"line_end":57,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463386,"byte_end":463398,"line_start":81,"line_end":81,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463550,"byte_end":463562,"line_start":91,"line_end":91,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463849,"byte_end":463865,"line_start":104,"line_end":104,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":465183,"byte_end":465195,"line_start":152,"line_end":152,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468380,"byte_end":468395,"line_start":258,"line_end":258,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":469750,"byte_end":469761,"line_start":302,"line_end":302,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481190,"byte_end":481199,"line_start":21,"line_end":21,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482008,"byte_end":482017,"line_start":44,"line_end":44,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1032}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483656,"byte_end":483665,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484489,"byte_end":484498,"line_start":108,"line_end":108,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484658,"byte_end":484667,"line_start":118,"line_end":118,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485574,"byte_end":485595,"line_start":142,"line_end":142,"column_start":44,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":487290,"byte_end":487298,"line_start":195,"line_end":195,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":496009,"byte_end":496024,"line_start":405,"line_end":405,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1090}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":500674,"byte_end":500689,"line_start":523,"line_end":523,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1095}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503848,"byte_end":503864,"line_start":589,"line_end":589,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504162,"byte_end":504178,"line_start":598,"line_end":598,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505889,"byte_end":505896,"line_start":652,"line_end":652,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521098,"byte_end":521115,"line_start":1077,"line_end":1077,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533108,"byte_end":533129,"line_start":1439,"line_end":1439,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536420,"byte_end":536439,"line_start":1532,"line_end":1532,"column_start":17,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1190},{"krate":0,"index":1191}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":538014,"byte_end":538023,"line_start":1585,"line_end":1585,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1196},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":541308,"byte_end":541323,"line_start":1683,"line_end":1683,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1208}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lists.rs","byte_start":588499,"byte_end":588510,"line_start":10,"line_end":10,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lists.rs","byte_start":588771,"byte_end":588782,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1229},{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":590687,"byte_end":590695,"line_start":18,"line_end":18,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591481,"byte_end":591489,"line_start":41,"line_end":41,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1264},{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591637,"byte_end":591645,"line_start":51,"line_end":51,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591933,"byte_end":591946,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1272}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592772,"byte_end":592785,"line_start":87,"line_end":87,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592938,"byte_end":592951,"line_start":97,"line_end":97,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1279}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":593094,"byte_end":593111,"line_start":105,"line_end":105,"column_start":14,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594143,"byte_end":594156,"line_start":133,"line_end":133,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594482,"byte_end":594495,"line_start":144,"line_end":144,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1289}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595438,"byte_end":595451,"line_start":171,"line_end":171,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1301}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":602794,"byte_end":602809,"line_start":402,"line_end":402,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":606297,"byte_end":606311,"line_start":471,"line_end":471,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1310},{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":607856,"byte_end":607867,"line_start":525,"line_end":525,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":642947,"byte_end":642958,"line_start":41,"line_end":41,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1339}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":643178,"byte_end":643189,"line_start":54,"line_end":54,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":643755,"byte_end":643770,"line_start":81,"line_end":81,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":646064,"byte_end":646078,"line_start":155,"line_end":155,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658725,"byte_end":658733,"line_start":340,"line_end":340,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660697,"byte_end":660706,"line_start":398,"line_end":398,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1387}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682731,"byte_end":682741,"line_start":921,"line_end":921,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1390},{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684075,"byte_end":684088,"line_start":961,"line_end":961,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":687379,"byte_end":687389,"line_start":1054,"line_end":1054,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787191,"byte_end":787204,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787795,"byte_end":787808,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788332,"byte_end":788345,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789184,"byte_end":789197,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789897,"byte_end":789910,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1454},{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790073,"byte_end":790086,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1458}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790515,"byte_end":790532,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":791792,"byte_end":791805,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1483}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792432,"byte_end":792445,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792965,"byte_end":792978,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793801,"byte_end":793814,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794514,"byte_end":794527,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1496},{"krate":0,"index":1497}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794690,"byte_end":794703,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795132,"byte_end":795149,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796474,"byte_end":796485,"line_start":18,"line_end":18,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797295,"byte_end":797306,"line_start":41,"line_end":41,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1533},{"krate":0,"index":1534}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797457,"byte_end":797468,"line_start":51,"line_end":51,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797751,"byte_end":797764,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798602,"byte_end":798615,"line_start":88,"line_end":88,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1545}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798768,"byte_end":798781,"line_start":98,"line_end":98,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1548}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798941,"byte_end":798958,"line_start":107,"line_end":107,"column_start":14,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":799996,"byte_end":800006,"line_start":135,"line_end":135,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800335,"byte_end":800345,"line_start":146,"line_end":146,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801282,"byte_end":801292,"line_start":173,"line_end":173,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":806276,"byte_end":806291,"line_start":334,"line_end":334,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":808978,"byte_end":808992,"line_start":391,"line_end":391,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1576},{"krate":0,"index":1577}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":810544,"byte_end":810555,"line_start":445,"line_end":445,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":813584,"byte_end":813592,"line_start":537,"line_end":537,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":814827,"byte_end":814832,"line_start":576,"line_end":576,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1589}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838192,"byte_end":838200,"line_start":16,"line_end":16,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1611}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838999,"byte_end":839007,"line_start":39,"line_end":39,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839774,"byte_end":839782,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1617}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840602,"byte_end":840610,"line_start":83,"line_end":83,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840768,"byte_end":840776,"line_start":93,"line_end":93,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1627}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841038,"byte_end":841053,"line_start":105,"line_end":105,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842409,"byte_end":842424,"line_start":137,"line_end":137,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843255,"byte_end":843270,"line_start":161,"line_end":161,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1640}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843425,"byte_end":843440,"line_start":171,"line_end":171,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1643}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843538,"byte_end":843557,"line_start":177,"line_end":177,"column_start":14,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":844690,"byte_end":844702,"line_start":208,"line_end":208,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1649}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845008,"byte_end":845020,"line_start":217,"line_end":217,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845842,"byte_end":845854,"line_start":241,"line_end":241,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":846006,"byte_end":846018,"line_start":251,"line_end":251,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":848482,"byte_end":848498,"line_start":21,"line_end":21,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849111,"byte_end":849126,"line_start":38,"line_end":38,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1719}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849905,"byte_end":849915,"line_start":59,"line_end":59,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1723},{"krate":0,"index":1725}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851125,"byte_end":851134,"line_start":90,"line_end":90,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1730}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851943,"byte_end":851952,"line_start":113,"line_end":113,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1733},{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853124,"byte_end":853133,"line_start":148,"line_end":148,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1737}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853957,"byte_end":853966,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1743},{"krate":0,"index":1744}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854126,"byte_end":854135,"line_start":182,"line_end":182,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1747}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854552,"byte_end":854576,"line_start":198,"line_end":198,"column_start":17,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1750}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":858193,"byte_end":858201,"line_start":295,"line_end":295,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1759}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":859364,"byte_end":859374,"line_start":331,"line_end":331,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1763}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":859975,"byte_end":859985,"line_start":357,"line_end":357,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1791},{"krate":0,"index":1794},{"krate":0,"index":1797}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":870661,"byte_end":870686,"line_start":673,"line_end":673,"column_start":33,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1819},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886356,"byte_end":886365,"line_start":1130,"line_end":1130,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908772,"byte_end":908786,"line_start":1814,"line_end":1814,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925771,"byte_end":925780,"line_start":2226,"line_end":2226,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1884}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930086,"byte_end":930096,"line_start":2343,"line_end":2343,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932822,"byte_end":932835,"line_start":2419,"line_end":2419,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":1901}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945832,"byte_end":945843,"line_start":2805,"line_end":2805,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950020,"byte_end":950035,"line_start":2930,"line_end":2930,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":951245,"byte_end":951260,"line_start":2966,"line_end":2966,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1923},{"krate":0,"index":1924}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952660,"byte_end":952670,"line_start":3011,"line_end":3011,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1933}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953481,"byte_end":953491,"line_start":3034,"line_end":3034,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954319,"byte_end":954329,"line_start":3058,"line_end":3058,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1942},{"krate":0,"index":1943}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954491,"byte_end":954501,"line_start":3068,"line_end":3068,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1946}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954642,"byte_end":954652,"line_start":3076,"line_end":3076,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1949}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955831,"byte_end":955856,"line_start":3113,"line_end":3113,"column_start":17,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1952}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065933,"byte_end":1065942,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1068718,"byte_end":1068723,"line_start":151,"line_end":151,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2000}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97348,"byte_end":97353,"line_start":397,"line_end":397,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97514,"byte_end":97519,"line_start":404,"line_end":404,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2008}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":107371,"byte_end":107379,"line_start":608,"line_end":608,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2023}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1759,"byte_end":1768,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":37}},{"kind":"Mod","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1942,"byte_end":1948,"line_start":63,"line_end":63,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":93}},{"kind":"Mod","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/lib.rs","byte_start":1984,"byte_end":1988,"line_start":66,"line_end":66,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":113}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":2352,"byte_end":2358,"line_start":10,"line_end":10,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":4101,"byte_end":4113,"line_start":70,"line_end":70,"column_start":18,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2065},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8185,"byte_end":8201,"line_start":176,"line_end":176,"column_start":21,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8446,"byte_end":8459,"line_start":187,"line_end":187,"column_start":21,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2642},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":8939,"byte_end":8956,"line_start":203,"line_end":203,"column_start":38,"column_end":55},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":9110,"byte_end":9127,"line_start":209,"line_end":209,"column_start":39,"column_end":56},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":9253,"byte_end":9270,"line_start":215,"line_end":215,"column_start":9,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":11141,"byte_end":11150,"line_start":280,"line_end":280,"column_start":6,"column_end":15},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/common.rs","byte_start":13841,"byte_end":13854,"line_start":342,"line_end":342,"column_start":18,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2787},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":43624,"byte_end":43630,"line_start":836,"line_end":836,"column_start":6,"column_end":12},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3938},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/constants.rs","byte_start":55531,"byte_end":55537,"line_start":1292,"line_end":1292,"column_start":6,"column_end":12},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":4657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58360,"byte_end":58365,"line_start":7,"line_end":7,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":6953},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58368,"byte_end":58375,"line_start":7,"line_end":7,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2069},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58378,"byte_end":58383,"line_start":7,"line_end":7,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":1,"index":1770},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58386,"byte_end":58390,"line_start":7,"line_end":7,"column_start":48,"column_end":52},"kind":"SuperTrait","from":{"krate":1,"index":2091},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58393,"byte_end":58402,"line_start":7,"line_end":7,"column_start":55,"column_end":64},"kind":"SuperTrait","from":{"krate":1,"index":1798},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":58405,"byte_end":58407,"line_start":7,"line_end":7,"column_start":67,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":1803},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62679,"byte_end":62692,"line_start":183,"line_end":183,"column_start":18,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":4683},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":62958,"byte_end":62971,"line_start":197,"line_end":197,"column_start":20,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":4683},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63196,"byte_end":63208,"line_start":208,"line_end":208,"column_start":18,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":4702},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63309,"byte_end":63321,"line_start":215,"line_end":215,"column_start":20,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4702},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63516,"byte_end":63525,"line_start":226,"line_end":226,"column_start":18,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":4718},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/endianity.rs","byte_start":63620,"byte_end":63629,"line_start":233,"line_end":233,"column_start":20,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":4718},"to":{"krate":0,"index":54}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":113096,"byte_end":113105,"line_start":10,"line_end":10,"column_start":17,"column_end":26},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":4734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":114403,"byte_end":114412,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4734},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":115225,"byte_end":115234,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":4734},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/addr.rs","byte_start":115383,"byte_end":115392,"line_start":77,"line_end":77,"column_start":21,"column_end":30},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":4734},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":118502,"byte_end":118512,"line_start":35,"line_end":35,"column_start":17,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":4748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119072,"byte_end":119082,"line_start":53,"line_end":53,"column_start":22,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":4748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":119912,"byte_end":119922,"line_start":77,"line_end":77,"column_start":32,"column_end":42},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120080,"byte_end":120090,"line_start":87,"line_end":87,"column_start":29,"column_end":39},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":4748},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":120963,"byte_end":120973,"line_start":117,"line_end":117,"column_start":22,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":4772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":121270,"byte_end":121280,"line_start":127,"line_end":127,"column_start":17,"column_end":27},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":4772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123019,"byte_end":123029,"line_start":176,"line_end":176,"column_start":32,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":4772},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123181,"byte_end":123191,"line_start":186,"line_end":186,"column_start":29,"column_end":39},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":4772},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":123284,"byte_end":123300,"line_start":192,"line_end":192,"column_start":17,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":4795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":124613,"byte_end":124623,"line_start":223,"line_end":223,"column_start":26,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":4809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":130980,"byte_end":130987,"line_start":408,"line_end":408,"column_start":17,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":4821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":131229,"byte_end":131236,"line_start":417,"line_end":417,"column_start":22,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":4821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132070,"byte_end":132077,"line_start":441,"line_end":441,"column_start":32,"column_end":39},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":4821},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132232,"byte_end":132239,"line_start":451,"line_end":451,"column_start":29,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":4821},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132855,"byte_end":132859,"line_start":474,"line_end":474,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":2091},"to":{"krate":0,"index":240}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132862,"byte_end":132867,"line_start":474,"line_end":474,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":6953},"to":{"krate":0,"index":240}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132870,"byte_end":132872,"line_start":474,"line_end":474,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":1,"index":1803},"to":{"krate":0,"index":240}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":132875,"byte_end":132879,"line_start":474,"line_end":474,"column_start":56,"column_end":60},"kind":"SuperTrait","from":{"krate":1,"index":1997},"to":{"krate":0,"index":240}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133016,"byte_end":133032,"line_start":482,"line_end":482,"column_start":29,"column_end":45},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2615},"to":{"krate":0,"index":240}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":133156,"byte_end":133169,"line_start":492,"line_end":492,"column_start":29,"column_end":42},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2642},"to":{"krate":0,"index":240}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135116,"byte_end":135121,"line_start":542,"line_end":542,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":1770},"to":{"krate":0,"index":259}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135124,"byte_end":135129,"line_start":542,"line_end":542,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":6953},"to":{"krate":0,"index":259}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":135132,"byte_end":135153,"line_start":542,"line_end":542,"column_start":53,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":249},"to":{"krate":0,"index":259}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":140782,"byte_end":140792,"line_start":694,"line_end":694,"column_start":46,"column_end":56},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":141735,"byte_end":141745,"line_start":734,"line_end":734,"column_start":38,"column_end":48},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":4748},"to":{"krate":0,"index":259}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":141846,"byte_end":141853,"line_start":738,"line_end":738,"column_start":46,"column_end":53},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":4821},"to":{"krate":0,"index":249}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":142662,"byte_end":142669,"line_start":774,"line_end":774,"column_start":38,"column_end":45},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":4821},"to":{"krate":0,"index":259}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":144817,"byte_end":144830,"line_start":832,"line_end":832,"column_start":6,"column_end":19},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":4860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":147525,"byte_end":147539,"line_start":914,"line_end":914,"column_start":26,"column_end":40},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":4893},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":153218,"byte_end":153230,"line_start":1063,"line_end":1063,"column_start":6,"column_end":18},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":4949},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":155763,"byte_end":155779,"line_start":1136,"line_end":1136,"column_start":6,"column_end":22},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":4968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":159294,"byte_end":159316,"line_start":1221,"line_end":1221,"column_start":17,"column_end":39},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":4983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":161890,"byte_end":161912,"line_start":1305,"line_end":1305,"column_start":17,"column_end":39},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":4983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":166499,"byte_end":166527,"line_start":1444,"line_end":1444,"column_start":26,"column_end":54},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":5020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":169335,"byte_end":169356,"line_start":1526,"line_end":1526,"column_start":17,"column_end":38},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":5060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":173389,"byte_end":173410,"line_start":1647,"line_end":1647,"column_start":17,"column_end":38},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":5060},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":177852,"byte_end":177878,"line_start":1769,"line_end":1769,"column_start":17,"column_end":43},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":5095},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":178094,"byte_end":178120,"line_start":1776,"line_end":1776,"column_start":29,"column_end":55},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":5095},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":178344,"byte_end":178370,"line_start":1786,"line_end":1786,"column_start":17,"column_end":43},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":5095},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":180035,"byte_end":180048,"line_start":1832,"line_end":1832,"column_start":17,"column_end":30},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":5105},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":183142,"byte_end":183155,"line_start":1945,"line_end":1945,"column_start":43,"column_end":56},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":5105},"to":{"krate":1,"index":1798}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":186537,"byte_end":186548,"line_start":2024,"line_end":2024,"column_start":21,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":5124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":197930,"byte_end":197945,"line_start":2319,"line_end":2319,"column_start":35,"column_end":50},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":6953}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":198158,"byte_end":198173,"line_start":2327,"line_end":2327,"column_start":29,"column_end":44},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":198361,"byte_end":198376,"line_start":2336,"line_end":2336,"column_start":35,"column_end":50},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":1770}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":198636,"byte_end":198651,"line_start":2346,"line_end":2346,"column_start":26,"column_end":41},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":2305}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":198875,"byte_end":198890,"line_start":2356,"line_end":2356,"column_start":17,"column_end":32},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":202312,"byte_end":202327,"line_start":2455,"line_end":2455,"column_start":63,"column_end":78},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":5525}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":202900,"byte_end":202915,"line_start":2475,"line_end":2475,"column_start":23,"column_end":38},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":1798}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":203416,"byte_end":203431,"line_start":2498,"line_end":2498,"column_start":16,"column_end":31},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":433},"to":{"krate":1,"index":1803}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":203683,"byte_end":203699,"line_start":2506,"line_end":2506,"column_start":37,"column_end":53},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":5138},"to":{"krate":1,"index":5625}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204230,"byte_end":204244,"line_start":2525,"line_end":2525,"column_start":29,"column_end":43},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":5151},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":204507,"byte_end":204521,"line_start":2537,"line_end":2537,"column_start":17,"column_end":31},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":5151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":210975,"byte_end":210982,"line_start":2663,"line_end":2663,"column_start":29,"column_end":36},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":5175},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":211145,"byte_end":211152,"line_start":2672,"line_end":2672,"column_start":17,"column_end":24},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":5175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":212954,"byte_end":212966,"line_start":2724,"line_end":2724,"column_start":17,"column_end":29},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":5200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":224830,"byte_end":224850,"line_start":3023,"line_end":3023,"column_start":17,"column_end":37},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":5240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":232967,"byte_end":232991,"line_start":3235,"line_end":3235,"column_start":21,"column_end":45},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":5312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234647,"byte_end":234654,"line_start":3292,"line_end":3292,"column_start":18,"column_end":25},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":5326},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234753,"byte_end":234760,"line_start":3299,"line_end":3299,"column_start":20,"column_end":27},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":5326},"to":{"krate":1,"index":1994}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/cfi.rs","byte_start":234909,"byte_end":234916,"line_start":3308,"line_end":3308,"column_start":6,"column_end":13},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":5326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":375196,"byte_end":375201,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":5360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":379770,"byte_end":379775,"line_start":167,"line_end":167,"column_start":17,"column_end":22},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":5360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":394475,"byte_end":394479,"line_start":568,"line_end":568,"column_start":17,"column_end":21},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":5381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":400423,"byte_end":400440,"line_start":720,"line_end":720,"column_start":23,"column_end":40},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":401541,"byte_end":401551,"line_start":750,"line_end":750,"column_start":23,"column_end":33},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":6820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402584,"byte_end":402593,"line_start":782,"line_end":782,"column_start":29,"column_end":38},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":5398},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/dwarf.rs","byte_start":402699,"byte_end":402708,"line_start":788,"line_end":788,"column_start":17,"column_end":26},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":5398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":405661,"byte_end":405672,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":5416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":408496,"byte_end":408507,"line_start":108,"line_end":108,"column_start":22,"column_end":33},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":5416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410414,"byte_end":410425,"line_start":167,"line_end":167,"column_start":39,"column_end":50},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":5416},"to":{"krate":1,"index":2362}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410629,"byte_end":410640,"line_start":177,"line_end":177,"column_start":50,"column_end":61},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":5416},"to":{"krate":1,"index":2362}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":410839,"byte_end":410850,"line_start":187,"line_end":187,"column_start":32,"column_end":43},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":5416},"to":{"krate":1,"index":2281}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":411033,"byte_end":411044,"line_start":197,"line_end":197,"column_start":45,"column_end":56},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":5416},"to":{"krate":1,"index":1994}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/endian_slice.rs","byte_start":411188,"byte_end":411199,"line_start":206,"line_end":206,"column_start":33,"column_end":44},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":5416},"to":{"krate":0,"index":791}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415125,"byte_end":415130,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":6953},"to":{"krate":0,"index":755}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415133,"byte_end":415137,"line_start":24,"line_end":24,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2091},"to":{"krate":0,"index":755}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415140,"byte_end":415142,"line_start":24,"line_end":24,"column_start":20,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1803},"to":{"krate":0,"index":755}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415145,"byte_end":415148,"line_start":24,"line_end":24,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1830},"to":{"krate":0,"index":755}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415151,"byte_end":415155,"line_start":24,"line_end":24,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":7141},"to":{"krate":0,"index":755}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415158,"byte_end":415161,"line_start":24,"line_end":24,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2146},"to":{"krate":0,"index":755}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415179,"byte_end":415188,"line_start":24,"line_end":24,"column_start":59,"column_end":68},"kind":"SuperTrait","from":{"krate":1,"index":2177},"to":{"krate":0,"index":755}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":415191,"byte_end":415194,"line_start":24,"line_end":24,"column_start":71,"column_end":74},"kind":"SuperTrait","from":{"krate":1,"index":2151},"to":{"krate":0,"index":755}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420074,"byte_end":420079,"line_start":208,"line_end":208,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":6953},"to":{"krate":0,"index":791}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/reader.rs","byte_start":420082,"byte_end":420087,"line_start":208,"line_end":208,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":1770},"to":{"krate":0,"index":791}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":429357,"byte_end":429368,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":5471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430197,"byte_end":430208,"line_start":46,"line_end":46,"column_start":17,"column_end":28},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":5471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":430682,"byte_end":430693,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":5471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431525,"byte_end":431536,"line_start":85,"line_end":85,"column_start":24,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":5471},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":431700,"byte_end":431711,"line_start":95,"line_end":95,"column_start":21,"column_end":32},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":5471},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":432153,"byte_end":432166,"line_start":114,"line_end":114,"column_start":6,"column_end":19},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":5485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":434881,"byte_end":434893,"line_start":192,"line_end":192,"column_start":6,"column_end":18},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":5494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":437900,"byte_end":437910,"line_start":299,"line_end":299,"column_start":6,"column_end":16},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":5510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":438813,"byte_end":438823,"line_start":330,"line_end":330,"column_start":16,"column_end":26},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":5510},"to":{"krate":1,"index":6953}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":438942,"byte_end":438952,"line_start":336,"line_end":336,"column_start":20,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":5510},"to":{"krate":1,"index":1798}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439051,"byte_end":439061,"line_start":342,"line_end":342,"column_start":13,"column_end":23},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":5510},"to":{"krate":1,"index":1803}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439081,"byte_end":439091,"line_start":344,"line_end":344,"column_start":16,"column_end":26},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":5510},"to":{"krate":1,"index":2281}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439380,"byte_end":439390,"line_start":354,"line_end":354,"column_start":47,"column_end":57},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":5510},"to":{"krate":1,"index":5525}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":439689,"byte_end":439699,"line_start":367,"line_end":367,"column_start":44,"column_end":54},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":5510},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/abbrev.rs","byte_start":440076,"byte_end":440098,"line_start":382,"line_end":382,"column_start":6,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":5520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461093,"byte_end":461105,"line_start":12,"line_end":12,"column_start":22,"column_end":34},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":5536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":461925,"byte_end":461937,"line_start":38,"line_end":38,"column_start":17,"column_end":29},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":5536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":462552,"byte_end":462564,"line_start":57,"line_end":57,"column_start":9,"column_end":21},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":5536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463386,"byte_end":463398,"line_start":81,"line_end":81,"column_start":24,"column_end":36},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":5536},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463550,"byte_end":463562,"line_start":91,"line_end":91,"column_start":21,"column_end":33},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":5536},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":463849,"byte_end":463865,"line_start":104,"line_end":104,"column_start":17,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":5550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":465183,"byte_end":465195,"line_start":152,"line_end":152,"column_start":17,"column_end":29},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":5560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":468380,"byte_end":468395,"line_start":258,"line_end":258,"column_start":17,"column_end":32},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":5592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/aranges.rs","byte_start":469750,"byte_end":469761,"line_start":302,"line_end":302,"column_start":6,"column_end":17},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":5603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":481190,"byte_end":481199,"line_start":21,"line_end":21,"column_start":22,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":5634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":482008,"byte_end":482017,"line_start":44,"line_end":44,"column_start":17,"column_end":26},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":5634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":483656,"byte_end":483665,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":5634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484489,"byte_end":484498,"line_start":108,"line_end":108,"column_start":24,"column_end":33},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":5634},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":484658,"byte_end":484667,"line_start":118,"line_end":118,"column_start":21,"column_end":30},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":5634},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":485574,"byte_end":485595,"line_start":142,"line_end":142,"column_start":44,"column_end":65},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":5864},"to":{"krate":0,"index":1049}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":487290,"byte_end":487298,"line_start":195,"line_end":195,"column_start":26,"column_end":34},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":5648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":496009,"byte_end":496024,"line_start":405,"line_end":405,"column_start":17,"column_end":32},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":5665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":500674,"byte_end":500689,"line_start":523,"line_end":523,"column_start":34,"column_end":49},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":5665},"to":{"krate":1,"index":6958}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":503848,"byte_end":503864,"line_start":589,"line_end":589,"column_start":17,"column_end":33},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":5753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":504162,"byte_end":504178,"line_start":598,"line_end":598,"column_start":17,"column_end":33},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":5753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":505889,"byte_end":505896,"line_start":652,"line_end":652,"column_start":6,"column_end":13},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":5762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":521098,"byte_end":521115,"line_start":1077,"line_end":1077,"column_start":17,"column_end":34},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":5824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":533108,"byte_end":533129,"line_start":1439,"line_end":1439,"column_start":17,"column_end":38},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":5864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":536420,"byte_end":536439,"line_start":1532,"line_end":1532,"column_start":17,"column_end":36},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":5891},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":538014,"byte_end":538023,"line_start":1585,"line_end":1585,"column_start":17,"column_end":26},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":5918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/line.rs","byte_start":541308,"byte_end":541323,"line_start":1683,"line_end":1683,"column_start":6,"column_end":21},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":5954},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lists.rs","byte_start":588499,"byte_end":588510,"line_start":10,"line_end":10,"column_start":18,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":5969},"to":{"krate":1,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lists.rs","byte_start":588771,"byte_end":588782,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":5969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":590687,"byte_end":590695,"line_start":18,"line_end":18,"column_start":22,"column_end":30},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":5977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591481,"byte_end":591489,"line_start":41,"line_end":41,"column_start":24,"column_end":32},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":5977},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591637,"byte_end":591645,"line_start":51,"line_end":51,"column_start":21,"column_end":29},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":5977},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":591933,"byte_end":591946,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":5991},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592772,"byte_end":592785,"line_start":87,"line_end":87,"column_start":24,"column_end":37},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":5991},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":592938,"byte_end":592951,"line_start":97,"line_end":97,"column_start":21,"column_end":34},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":5991},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":593094,"byte_end":593111,"line_start":105,"line_end":105,"column_start":14,"column_end":31},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594143,"byte_end":594156,"line_start":133,"line_end":133,"column_start":9,"column_end":22},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":6005},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":594482,"byte_end":594495,"line_start":144,"line_end":144,"column_start":9,"column_end":22},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":6005},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":595438,"byte_end":595451,"line_start":171,"line_end":171,"column_start":17,"column_end":30},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":6005},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":602794,"byte_end":602809,"line_start":402,"line_end":402,"column_start":17,"column_end":32},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":6044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":606297,"byte_end":606311,"line_start":471,"line_end":471,"column_start":17,"column_end":31},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":6036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/loclists.rs","byte_start":607856,"byte_end":607867,"line_start":525,"line_end":525,"column_start":17,"column_end":28},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":6082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":642947,"byte_end":642958,"line_start":41,"line_end":41,"column_start":29,"column_end":40},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":6118},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":643178,"byte_end":643189,"line_start":54,"line_end":54,"column_start":17,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":6118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":643755,"byte_end":643770,"line_start":81,"line_end":81,"column_start":17,"column_end":32},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":6131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/lookup.rs","byte_start":646064,"byte_end":646078,"line_start":155,"line_end":155,"column_start":36,"column_end":50},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":6168},"to":{"krate":0,"index":1330}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":658725,"byte_end":658733,"line_start":340,"line_end":340,"column_start":17,"column_end":25},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":6364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":660697,"byte_end":660706,"line_start":398,"line_end":398,"column_start":17,"column_end":26},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":6207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":682731,"byte_end":682741,"line_start":921,"line_end":921,"column_start":17,"column_end":27},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":6519},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":684075,"byte_end":684088,"line_start":961,"line_end":961,"column_start":17,"column_end":30},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":6546},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/op.rs","byte_start":687379,"byte_end":687389,"line_start":1054,"line_end":1054,"column_start":17,"column_end":27},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":6558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787191,"byte_end":787204,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":6574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":787795,"byte_end":787808,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":6574},"to":{"krate":0,"index":1349}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":788332,"byte_end":788345,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":6585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789184,"byte_end":789197,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":6585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":789897,"byte_end":789910,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":6585},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790073,"byte_end":790086,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":6585},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubnames.rs","byte_start":790515,"byte_end":790532,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":6595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":791792,"byte_end":791805,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":6605},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792432,"byte_end":792445,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":6605},"to":{"krate":0,"index":1349}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":792965,"byte_end":792978,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":6616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":793801,"byte_end":793814,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":6616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794514,"byte_end":794527,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":6616},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":794690,"byte_end":794703,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":6616},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/pubtypes.rs","byte_start":795132,"byte_end":795149,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":6626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":796474,"byte_end":796485,"line_start":18,"line_end":18,"column_start":22,"column_end":33},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":6636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797295,"byte_end":797306,"line_start":41,"line_end":41,"column_start":24,"column_end":35},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":6636},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797457,"byte_end":797468,"line_start":51,"line_end":51,"column_start":21,"column_end":32},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":6636},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":797751,"byte_end":797764,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":6650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798602,"byte_end":798615,"line_start":88,"line_end":88,"column_start":24,"column_end":37},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":6650},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798768,"byte_end":798781,"line_start":98,"line_end":98,"column_start":21,"column_end":34},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":6650},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":798941,"byte_end":798958,"line_start":107,"line_end":107,"column_start":14,"column_end":31},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":799996,"byte_end":800006,"line_start":135,"line_end":135,"column_start":9,"column_end":19},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":6664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":800335,"byte_end":800345,"line_start":146,"line_end":146,"column_start":9,"column_end":19},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":6664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":801282,"byte_end":801292,"line_start":173,"line_end":173,"column_start":17,"column_end":27},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":6664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":806276,"byte_end":806291,"line_start":334,"line_end":334,"column_start":23,"column_end":38},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":6703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":808978,"byte_end":808992,"line_start":391,"line_end":391,"column_start":17,"column_end":31},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":6695},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":810544,"byte_end":810555,"line_start":445,"line_end":445,"column_start":17,"column_end":28},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":6733},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":813584,"byte_end":813592,"line_start":537,"line_end":537,"column_start":6,"column_end":14},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":6742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/rnglists.rs","byte_start":814827,"byte_end":814832,"line_start":576,"line_end":576,"column_start":6,"column_end":11},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":6760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838192,"byte_end":838200,"line_start":16,"line_end":16,"column_start":22,"column_end":30},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":6778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":838999,"byte_end":839007,"line_start":39,"line_end":39,"column_start":17,"column_end":25},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":6778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":839774,"byte_end":839782,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":6778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840602,"byte_end":840610,"line_start":83,"line_end":83,"column_start":24,"column_end":32},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":6778},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":840768,"byte_end":840776,"line_start":93,"line_end":93,"column_start":21,"column_end":29},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":6778},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":841038,"byte_end":841053,"line_start":105,"line_end":105,"column_start":17,"column_end":32},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":6792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":842409,"byte_end":842424,"line_start":137,"line_end":137,"column_start":9,"column_end":24},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":6792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843255,"byte_end":843270,"line_start":161,"line_end":161,"column_start":24,"column_end":39},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":6792},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843425,"byte_end":843440,"line_start":171,"line_end":171,"column_start":21,"column_end":36},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":6792},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":843538,"byte_end":843557,"line_start":177,"line_end":177,"column_start":14,"column_end":33},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":844690,"byte_end":844702,"line_start":208,"line_end":208,"column_start":17,"column_end":29},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":6806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845008,"byte_end":845020,"line_start":217,"line_end":217,"column_start":9,"column_end":21},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":6806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":845842,"byte_end":845854,"line_start":241,"line_end":241,"column_start":24,"column_end":36},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":6806},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/str.rs","byte_start":846006,"byte_end":846018,"line_start":251,"line_end":251,"column_start":21,"column_end":33},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":6806},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":848482,"byte_end":848498,"line_start":21,"line_end":21,"column_start":23,"column_end":39},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849111,"byte_end":849126,"line_start":38,"line_end":38,"column_start":23,"column_end":38},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":2208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":849905,"byte_end":849915,"line_start":59,"line_end":59,"column_start":23,"column_end":33},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":6820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851125,"byte_end":851134,"line_start":90,"line_end":90,"column_start":22,"column_end":31},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":6857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":851943,"byte_end":851952,"line_start":113,"line_end":113,"column_start":17,"column_end":26},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":6857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853124,"byte_end":853133,"line_start":148,"line_end":148,"column_start":9,"column_end":18},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":6857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":853957,"byte_end":853966,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":6857},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854126,"byte_end":854135,"line_start":182,"line_end":182,"column_start":21,"column_end":30},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":6857},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":854552,"byte_end":854576,"line_start":198,"line_end":198,"column_start":17,"column_end":41},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":6871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":858193,"byte_end":858201,"line_start":295,"line_end":295,"column_start":14,"column_end":22},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":6881},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":859364,"byte_end":859374,"line_start":331,"line_end":331,"column_start":17,"column_end":27},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":6918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":859975,"byte_end":859985,"line_start":357,"line_end":357,"column_start":17,"column_end":27},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":6918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":870661,"byte_end":870686,"line_start":673,"line_end":673,"column_start":33,"column_end":58},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":6953},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":886356,"byte_end":886365,"line_start":1130,"line_end":1130,"column_start":17,"column_end":26},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":7142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":908772,"byte_end":908786,"line_start":1814,"line_end":1814,"column_start":17,"column_end":31},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":6975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":925771,"byte_end":925780,"line_start":2226,"line_end":2226,"column_start":41,"column_end":50},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":7165},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":930086,"byte_end":930096,"line_start":2343,"line_end":2343,"column_start":33,"column_end":43},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":7190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":932822,"byte_end":932835,"line_start":2419,"line_end":2419,"column_start":33,"column_end":46},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":7208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":945832,"byte_end":945843,"line_start":2805,"line_end":2805,"column_start":33,"column_end":44},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":7227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":950020,"byte_end":950035,"line_start":2930,"line_end":2930,"column_start":40,"column_end":55},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":7247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":951245,"byte_end":951260,"line_start":2966,"line_end":2966,"column_start":40,"column_end":55},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":7260},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":952660,"byte_end":952670,"line_start":3011,"line_end":3011,"column_start":22,"column_end":32},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":7274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":953481,"byte_end":953491,"line_start":3034,"line_end":3034,"column_start":9,"column_end":19},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":7274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954319,"byte_end":954329,"line_start":3058,"line_end":3058,"column_start":24,"column_end":34},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":7274},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954491,"byte_end":954501,"line_start":3068,"line_end":3068,"column_start":21,"column_end":31},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":7274},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":954642,"byte_end":954652,"line_start":3076,"line_end":3076,"column_start":17,"column_end":27},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":7274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/unit.rs","byte_start":955831,"byte_end":955856,"line_start":3113,"line_end":3113,"column_start":17,"column_end":42},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":7288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1065933,"byte_end":1065942,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":7298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/value.rs","byte_start":1068718,"byte_end":1068723,"line_start":151,"line_end":151,"column_start":6,"column_end":11},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":7332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97348,"byte_end":97353,"line_start":397,"line_end":397,"column_start":23,"column_end":28},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":7375},"to":{"krate":1,"index":6958}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":97514,"byte_end":97519,"line_start":404,"line_end":404,"column_start":6,"column_end":11},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":7375},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":106349,"byte_end":106353,"line_start":569,"line_end":569,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1997},"to":{"krate":0,"index":2011}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.24.0/src/read/mod.rs","byte_start":107371,"byte_end":107379,"line_start":608,"line_end":608,"column_start":6,"column_end":14},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":2086},"to":{"krate":4294967295,"index":4294967295}}]}