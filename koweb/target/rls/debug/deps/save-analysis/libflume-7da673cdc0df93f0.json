{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4","program":"/home/kami/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","flume","--edition=2018","/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=7da673cdc0df93f0","-C","extra-filename=-7da673cdc0df93f0","--out-dir","/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps","-L","dependency=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps","--extern","spinning_top=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/libspinning_top-93cf2bb40469308a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/kami/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/libflume-7da673cdc0df93f0.rmeta"},"prelude":{"crate_id":{"name":"flume","disambiguator":[15370909412326905572,2916773584037375881]},"crate_root":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src","external_crates":[{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8363989277313806732,13723635736355452392]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5755871685339259462,14524450630327408145]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6095990061662150844,17257511342173735843]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13534664360101634333,15955848543282431589]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2576337310504802494,7533979301291365915]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5114841071718684731,1147767992231475921]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14891534813972024149,13771932312545804845]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[904103305253144465,12292134317329413205]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[16314738562439622889,10306027504818249940]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15843431334828571128,5286674190927770495]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17405625562201081622,10275716470817790619]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11445955052790897216,5818918092474945162]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[14649202847011715524,6782578055671422766]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[7180995537586922820,7051902941398327739]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[9612987991627917998,10712864082221106628]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[17826240478786457486,5527832178130695808]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6600453779972510942,5977101663316138555]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":18,"id":{"name":"spinning_top","disambiguator":[13324248366915768460,4940406001103221342]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":19,"id":{"name":"lock_api","disambiguator":[14208462983006805659,11831706871679252431]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","num":20,"id":{"name":"scopeguard","disambiguator":[6205199248654165238,6871896847252225167]}}],"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":0,"byte_end":27829,"line_start":1,"line_end":858,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":0,"byte_end":27829,"line_start":1,"line_end":858,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":428},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":274},{"krate":0,"index":295},{"krate":0,"index":292},{"krate":0,"index":289},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":297},{"krate":0,"index":322},{"krate":0,"index":319},{"krate":0,"index":316},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":305},{"krate":0,"index":307},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":324},{"krate":0,"index":349},{"krate":0,"index":346},{"krate":0,"index":343},{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":351},{"krate":0,"index":364},{"krate":0,"index":362},{"krate":0,"index":360},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":365},{"krate":0,"index":380},{"krate":0,"index":378},{"krate":0,"index":376},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":381},{"krate":0,"index":396},{"krate":0,"index":394},{"krate":0,"index":392},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":86},{"krate":0,"index":92},{"krate":0,"index":105},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":121},{"krate":0,"index":126},{"krate":0,"index":132},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":187},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":231},{"krate":0,"index":236},{"krate":0,"index":240},{"krate":0,"index":245},{"krate":0,"index":249},{"krate":0,"index":397},{"krate":0,"index":402},{"krate":0,"index":254},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":270},{"krate":0,"index":272}],"decl_id":null,"docs":" # Flume","sig":null,"attributes":[{"value":"/ # Flume","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":0,"byte_end":11,"line_start":1,"line_end":1,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":12,"byte_end":15,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A blazingly fast multi-producer, multi-consumer channel.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":16,"byte_end":76,"line_start":3,"line_end":3,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":77,"byte_end":80,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ *\"Do not communicate by sharing memory; instead, share memory by communicating.\"*","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":81,"byte_end":166,"line_start":5,"line_end":5,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":167,"byte_end":170,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":171,"byte_end":185,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":186,"byte_end":189,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":190,"byte_end":197,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ let (tx, rx) = flume::unbounded();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":198,"byte_end":236,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":237,"byte_end":240,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ tx.send(42).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":241,"byte_end":266,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(rx.recv().unwrap(), 42);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":267,"byte_end":306,"line_start":13,"line_end":13,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":307,"byte_end":314,"line_start":14,"line_end":14,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":900,"byte_end":909,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"SendError","qualname":"::SendError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that may be emitted when attempting to send a value into a channel on a sender.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to send a value into a channel on a sender.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":751,"byte_end":843,"line_start":39,"line_end":39,"column_start":1,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":277},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":913,"byte_end":918,"line_start":41,"line_end":41,"column_start":25,"column_end":30},"name":"0","qualname":"::SendError::0","value":"T","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":299},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1315,"byte_end":1319,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"Full","qualname":"::TrySendError::Full","value":"TrySendError::Full(T)","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":302},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1328,"byte_end":1340,"line_start":55,"line_end":55,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::TrySendError::Disconnected","value":"TrySendError::Disconnected(T)","parent":{"krate":0,"index":297},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":297},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1293,"byte_end":1305,"line_start":53,"line_end":53,"column_start":10,"column_end":22},"name":"TrySendError","qualname":"::TrySendError","value":"pub enum TrySendError<T> { Full(T), Disconnected(T), }","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":302}],"decl_id":null,"docs":" An error that may be emitted when attempting to send a value into a channel on a sender.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to send a value into a channel on a sender.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1146,"byte_end":1238,"line_start":51,"line_end":51,"column_start":1,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":326},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1782,"byte_end":1789,"line_start":71,"line_end":71,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::SendTimeoutError::Timeout","value":"SendTimeoutError::Timeout(T)","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":329},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1798,"byte_end":1810,"line_start":72,"line_end":72,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::SendTimeoutError::Disconnected","value":"SendTimeoutError::Disconnected(T)","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":324},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1756,"byte_end":1772,"line_start":70,"line_end":70,"column_start":10,"column_end":26},"name":"SendTimeoutError","qualname":"::SendTimeoutError","value":"pub enum SendTimeoutError<T> { Timeout(T), Disconnected(T), }","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":329}],"decl_id":null,"docs":" An error that may be emitted when sending a value into a channel on a sender with a timeout.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when sending a value into a channel on a sender with a timeout.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1605,"byte_end":1701,"line_start":68,"line_end":68,"column_start":1,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":352},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2458,"byte_end":2470,"line_start":95,"line_end":95,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::RecvError::Disconnected","value":"RecvError::Disconnected","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":351},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2442,"byte_end":2451,"line_start":94,"line_end":94,"column_start":10,"column_end":19},"name":"RecvError","qualname":"::RecvError","value":"pub enum RecvError { Disconnected, }","parent":null,"children":[{"krate":0,"index":352}],"decl_id":null,"docs":" An error that may be emitted when attempting to wait for a value on a receiver.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to wait for a value on a receiver.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2304,"byte_end":2387,"line_start":92,"line_end":92,"column_start":1,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":366},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3003,"byte_end":3008,"line_start":112,"line_end":112,"column_start":5,"column_end":10},"name":"Empty","qualname":"::TryRecvError::Empty","value":"TryRecvError::Empty","parent":{"krate":0,"index":365},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":368},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3014,"byte_end":3026,"line_start":113,"line_end":113,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::TryRecvError::Disconnected","value":"TryRecvError::Disconnected","parent":{"krate":0,"index":365},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":365},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2984,"byte_end":2996,"line_start":111,"line_end":111,"column_start":10,"column_end":22},"name":"TryRecvError","qualname":"::TryRecvError","value":"pub enum TryRecvError { Empty, Disconnected, }","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":368}],"decl_id":null,"docs":" An error that may be emitted when attempting to fetch a value on a receiver.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to fetch a value on a receiver.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2849,"byte_end":2929,"line_start":109,"line_end":109,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":382},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3546,"byte_end":3553,"line_start":130,"line_end":130,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::RecvTimeoutError::Timeout","value":"RecvTimeoutError::Timeout","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":384},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3559,"byte_end":3571,"line_start":131,"line_end":131,"column_start":5,"column_end":17},"name":"Disconnected","qualname":"::RecvTimeoutError::Disconnected","value":"RecvTimeoutError::Disconnected","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":381},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3523,"byte_end":3539,"line_start":129,"line_end":129,"column_start":10,"column_end":26},"name":"RecvTimeoutError","qualname":"::RecvTimeoutError","value":"pub enum RecvTimeoutError { Timeout, Disconnected, }","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":384}],"decl_id":null,"docs":" An error that may be emitted when attempting to wait for a value on a receiver with a timeout.\n","sig":null,"attributes":[{"value":"/ An error that may be emitted when attempting to wait for a value on a receiver with a timeout.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3370,"byte_end":3468,"line_start":127,"line_end":127,"column_start":1,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":170},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":15653,"byte_end":15659,"line_start":509,"line_end":509,"column_start":12,"column_end":18},"name":"Sender","qualname":"::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":172}],"decl_id":null,"docs":" A transmitting end of a channel.\n","sig":null,"attributes":[{"value":"/ A transmitting end of a channel.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":15605,"byte_end":15641,"line_start":508,"line_end":508,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":15998,"byte_end":16006,"line_start":517,"line_end":517,"column_start":12,"column_end":20},"name":"try_send","qualname":"<Sender<T>>::try_send","value":"pub fn try_send(&Self, T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to send a value into the channel. If the channel is bounded and full, or the\n receiver has been dropped, an error is returned. If the channel associated with this\n sender is unbounded, this method has the same behaviour as [`Sender::send`].\n","sig":null,"attributes":[{"value":"/ Attempt to send a value into the channel. If the channel is bounded and full, or the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":15720,"byte_end":15808,"line_start":514,"line_end":514,"column_start":5,"column_end":93}},{"value":"/ receiver has been dropped, an error is returned. If the channel associated with this","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":15813,"byte_end":15901,"line_start":515,"line_end":515,"column_start":5,"column_end":93}},{"value":"/ sender is unbounded, this method has the same behaviour as [`Sender::send`].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":15906,"byte_end":15986,"line_start":516,"line_end":516,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":16513,"byte_end":16517,"line_start":527,"line_end":527,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"pub fn send(&Self, T) -> Result<(), SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Send a value into the channel, returning an error if the channel receiver has\n been dropped. If the channel is bounded and is full, this method will block.\n","sig":null,"attributes":[{"value":"/ Send a value into the channel, returning an error if the channel receiver has","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":16335,"byte_end":16416,"line_start":525,"line_end":525,"column_start":5,"column_end":86}},{"value":"/ been dropped. If the channel is bounded and is full, this method will block.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":16421,"byte_end":16501,"line_start":526,"line_end":526,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":16974,"byte_end":16987,"line_start":537,"line_end":537,"column_start":12,"column_end":25},"name":"send_deadline","qualname":"<Sender<T>>::send_deadline","value":"pub fn send_deadline(&Self, T, Instant) -> Result<(), SendTimeoutError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Send a value into the channel, returning an error if the channel receiver has\n been dropped or the deadline has passed. If the channel is bounded and is full, this method\n will block.\n","sig":null,"attributes":[{"value":"/ Send a value into the channel, returning an error if the channel receiver has","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":16761,"byte_end":16842,"line_start":534,"line_end":534,"column_start":5,"column_end":86}},{"value":"/ been dropped or the deadline has passed. If the channel is bounded and is full, this method","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":16847,"byte_end":16942,"line_start":535,"line_end":535,"column_start":5,"column_end":100}},{"value":"/ will block.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":16947,"byte_end":16962,"line_start":536,"line_end":536,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":17582,"byte_end":17594,"line_start":548,"line_end":548,"column_start":12,"column_end":24},"name":"send_timeout","qualname":"<Sender<T>>::send_timeout","value":"pub fn send_timeout(&Self, T, Duration) -> Result<(), SendTimeoutError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Send a value into the channel, returning an error if the channel receiver has\n been dropped or the timeout has expired. If the channel is bounded and is full, this method\n will block.\n","sig":null,"attributes":[{"value":"/ Send a value into the channel, returning an error if the channel receiver has","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":17369,"byte_end":17450,"line_start":545,"line_end":545,"column_start":5,"column_end":86}},{"value":"/ been dropped or the timeout has expired. If the channel is bounded and is full, this method","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":17455,"byte_end":17550,"line_start":546,"line_end":546,"column_start":5,"column_end":100}},{"value":"/ will block.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":17555,"byte_end":17570,"line_start":547,"line_end":547,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":17828,"byte_end":17843,"line_start":553,"line_end":553,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<Sender<T>>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all receivers for this channel have been dropped.\n","sig":null,"attributes":[{"value":"/ Returns true if all receivers for this channel have been dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":17747,"byte_end":17816,"line_start":552,"line_end":552,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18018,"byte_end":18026,"line_start":559,"line_end":559,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Sender<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the channel is empty.\n Note: Zero-capacity channels are always empty.\n","sig":null,"attributes":[{"value":"/ Returns true if the channel is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":17910,"byte_end":17951,"line_start":557,"line_end":557,"column_start":5,"column_end":46}},{"value":"/ Note: Zero-capacity channels are always empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":17956,"byte_end":18006,"line_start":558,"line_end":558,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18192,"byte_end":18199,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"name":"is_full","qualname":"<Sender<T>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the channel is full.\n Note: Zero-capacity channels are always full.\n","sig":null,"attributes":[{"value":"/ Returns true if the channel is full.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18086,"byte_end":18126,"line_start":563,"line_end":563,"column_start":5,"column_end":45}},{"value":"/ Note: Zero-capacity channels are always full.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18131,"byte_end":18180,"line_start":564,"line_end":564,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18319,"byte_end":18322,"line_start":570,"line_end":570,"column_start":12,"column_end":15},"name":"len","qualname":"<Sender<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of messages in the channel\n","sig":null,"attributes":[{"value":"/ Returns the number of messages in the channel","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18258,"byte_end":18307,"line_start":569,"line_end":569,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18442,"byte_end":18450,"line_start":575,"line_end":575,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Sender<T>>::capacity","value":"pub fn capacity(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" If the channel is bounded, returns its capacity.\n","sig":null,"attributes":[{"value":"/ If the channel is bounded, returns its capacity.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18378,"byte_end":18430,"line_start":574,"line_end":574,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":196},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19371,"byte_end":19379,"line_start":605,"line_end":605,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":198}],"decl_id":null,"docs":" The receiving end of a channel.\n","sig":null,"attributes":[{"value":"/ The receiving end of a channel.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19324,"byte_end":19359,"line_start":604,"line_end":604,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19633,"byte_end":19641,"line_start":612,"line_end":612,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<Receiver<T>>::try_recv","value":"pub fn try_recv(&Self) -> Result<T, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to fetch an incoming value from the channel associated with this receiver,\n returning an error if the channel is empty or all channel senders have been dropped.\n","sig":null,"attributes":[{"value":"/ Attempt to fetch an incoming value from the channel associated with this receiver,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19442,"byte_end":19528,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ returning an error if the channel is empty or all channel senders have been dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19533,"byte_end":19621,"line_start":611,"line_end":611,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":20094,"byte_end":20098,"line_start":622,"line_end":622,"column_start":12,"column_end":16},"name":"recv","qualname":"<Receiver<T>>::recv","value":"pub fn recv(&Self) -> Result<T, RecvError>","parent":null,"children":[],"decl_id":null,"docs":" Wait for an incoming value from the channel associated with this receiver, returning an\n error if all channel senders have been dropped.\n","sig":null,"attributes":[{"value":"/ Wait for an incoming value from the channel associated with this receiver, returning an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19935,"byte_end":20026,"line_start":620,"line_end":620,"column_start":5,"column_end":96}},{"value":"/ error if all channel senders have been dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":20031,"byte_end":20082,"line_start":621,"line_end":621,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":20515,"byte_end":20528,"line_start":631,"line_end":631,"column_start":12,"column_end":25},"name":"recv_deadline","qualname":"<Receiver<T>>::recv_deadline","value":"pub fn recv_deadline(&Self, Instant) -> Result<T, RecvTimeoutError>","parent":null,"children":[],"decl_id":null,"docs":" Wait for an incoming value from the channel associated with this receiver, returning an\n error if all channel senders have been dropped or the deadline has passed.\n","sig":null,"attributes":[{"value":"/ Wait for an incoming value from the channel associated with this receiver, returning an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":20329,"byte_end":20420,"line_start":629,"line_end":629,"column_start":5,"column_end":96}},{"value":"/ error if all channel senders have been dropped or the deadline has passed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":20425,"byte_end":20503,"line_start":630,"line_end":630,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21059,"byte_end":21071,"line_start":641,"line_end":641,"column_start":12,"column_end":24},"name":"recv_timeout","qualname":"<Receiver<T>>::recv_timeout","value":"pub fn recv_timeout(&Self, Duration) -> Result<T, RecvTimeoutError>","parent":null,"children":[],"decl_id":null,"docs":" Wait for an incoming value from the channel associated with this receiver, returning an\n error if all channel senders have been dropped or the timeout has expired.\n","sig":null,"attributes":[{"value":"/ Wait for an incoming value from the channel associated with this receiver, returning an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":20873,"byte_end":20964,"line_start":639,"line_end":639,"column_start":5,"column_end":96}},{"value":"/ error if all channel senders have been dropped or the timeout has expired.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":20969,"byte_end":21047,"line_start":640,"line_end":640,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21367,"byte_end":21371,"line_start":647,"line_end":647,"column_start":12,"column_end":16},"name":"iter","qualname":"<Receiver<T>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" A blocking iterator over the values received on the channel that finishes iteration when\n all receivers of the channel have been dropped.\n","sig":null,"attributes":[{"value":"/ A blocking iterator over the values received on the channel that finishes iteration when","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21207,"byte_end":21299,"line_start":645,"line_end":645,"column_start":5,"column_end":97}},{"value":"/ all receivers of the channel have been dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21304,"byte_end":21355,"line_start":646,"line_end":646,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21624,"byte_end":21632,"line_start":653,"line_end":653,"column_start":12,"column_end":20},"name":"try_iter","qualname":"<Receiver<T>>::try_iter","value":"pub fn try_iter(&Self) -> TryIter<, T>","parent":null,"children":[],"decl_id":null,"docs":" A non-blocking iterator over the values received on the channel that finishes iteration\n when all receivers of the channel have been dropped or the channel is empty.\n","sig":null,"attributes":[{"value":"/ A non-blocking iterator over the values received on the channel that finishes iteration","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21436,"byte_end":21527,"line_start":651,"line_end":651,"column_start":5,"column_end":96}},{"value":"/ when all receivers of the channel have been dropped or the channel is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21532,"byte_end":21612,"line_start":652,"line_end":652,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21942,"byte_end":21947,"line_start":660,"line_end":660,"column_start":12,"column_end":17},"name":"drain","qualname":"<Receiver<T>>::drain","value":"pub fn drain(&Self) -> Drain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Take all msgs currently sitting in the channel and produce an iterator over them. Unlike\n `try_iter`, the iterator will not attempt to fetch any more values from the channel once\n the function has been called.\n","sig":null,"attributes":[{"value":"/ Take all msgs currently sitting in the channel and produce an iterator over them. Unlike","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21703,"byte_end":21795,"line_start":657,"line_end":657,"column_start":5,"column_end":97}},{"value":"/ `try_iter`, the iterator will not attempt to fetch any more values from the channel once","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21800,"byte_end":21892,"line_start":658,"line_end":658,"column_start":5,"column_end":97}},{"value":"/ the function has been called.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":21897,"byte_end":21930,"line_start":659,"line_end":659,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22247,"byte_end":22262,"line_start":669,"line_end":669,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<Receiver<T>>::is_disconnected","value":"pub fn is_disconnected(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all senders for this channel have been dropped.\n","sig":null,"attributes":[{"value":"/ Returns true if all senders for this channel have been dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22168,"byte_end":22235,"line_start":668,"line_end":668,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22437,"byte_end":22445,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Receiver<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the channel is empty.\n Note: Zero-capacity channels are always empty.\n","sig":null,"attributes":[{"value":"/ Returns true if the channel is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22329,"byte_end":22370,"line_start":673,"line_end":673,"column_start":5,"column_end":46}},{"value":"/ Note: Zero-capacity channels are always empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22375,"byte_end":22425,"line_start":674,"line_end":674,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22611,"byte_end":22618,"line_start":681,"line_end":681,"column_start":12,"column_end":19},"name":"is_full","qualname":"<Receiver<T>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the channel is full.\n Note: Zero-capacity channels are always full.\n","sig":null,"attributes":[{"value":"/ Returns true if the channel is full.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22505,"byte_end":22545,"line_start":679,"line_end":679,"column_start":5,"column_end":45}},{"value":"/ Note: Zero-capacity channels are always full.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22550,"byte_end":22599,"line_start":680,"line_end":680,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22739,"byte_end":22742,"line_start":686,"line_end":686,"column_start":12,"column_end":15},"name":"len","qualname":"<Receiver<T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of messages in the channel.\n","sig":null,"attributes":[{"value":"/ Returns the number of messages in the channel.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22677,"byte_end":22727,"line_start":685,"line_end":685,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22862,"byte_end":22870,"line_start":691,"line_end":691,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Receiver<T>>::capacity","value":"pub fn capacity(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" If the channel is bounded, returns its capacity.\n","sig":null,"attributes":[{"value":"/ If the channel is bounded, returns its capacity.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22798,"byte_end":22850,"line_start":690,"line_end":690,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":236},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24211,"byte_end":24215,"line_start":741,"line_end":741,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":239}],"decl_id":null,"docs":" An iterator over the msgs received from a channel.\n","sig":null,"attributes":[{"value":"/ An iterator over the msgs received from a channel.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24145,"byte_end":24199,"line_start":740,"line_end":740,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":245},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24487,"byte_end":24494,"line_start":754,"line_end":754,"column_start":12,"column_end":19},"name":"TryIter","qualname":"::TryIter","value":"TryIter {  }","parent":null,"children":[{"krate":0,"index":248}],"decl_id":null,"docs":" An non-blocking iterator over the msgs received from a channel.\n","sig":null,"attributes":[{"value":"/ An non-blocking iterator over the msgs received from a channel.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24408,"byte_end":24475,"line_start":753,"line_end":753,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":397},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24788,"byte_end":24793,"line_start":768,"line_end":768,"column_start":12,"column_end":17},"name":"Drain","qualname":"::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401}],"decl_id":null,"docs":" An fixed-sized iterator over the msgs drained from a channel.\n","sig":null,"attributes":[{"value":"/ An fixed-sized iterator over the msgs drained from a channel.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24694,"byte_end":24759,"line_start":766,"line_end":766,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":263},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25432,"byte_end":25440,"line_start":791,"line_end":791,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":265}],"decl_id":null,"docs":" An owned iterator over the msgs received from a channel.\n","sig":null,"attributes":[{"value":"/ An owned iterator over the msgs received from a channel.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25360,"byte_end":25420,"line_start":790,"line_end":790,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":270},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26192,"byte_end":26201,"line_start":817,"line_end":817,"column_start":8,"column_end":17},"name":"unbounded","qualname":"::unbounded","value":"pub fn unbounded<T>() -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Create a channel with no maximum capacity.","sig":null,"attributes":[{"value":"/ Create a channel with no maximum capacity.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25621,"byte_end":25667,"line_start":803,"line_end":803,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25668,"byte_end":25671,"line_start":804,"line_end":804,"column_start":1,"column_end":4}},{"value":"/ Create an unbounded channel with a [`Sender`] and [`Receiver`] connected to each end respectively. Values sent in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25672,"byte_end":25789,"line_start":805,"line_end":805,"column_start":1,"column_end":118}},{"value":"/ one end of the channel will be received on the other end. The channel is thread-safe, and both [`Sender`] and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25790,"byte_end":25903,"line_start":806,"line_end":806,"column_start":1,"column_end":114}},{"value":"/ [`Receiver`] may be sent to or shared between threads as necessary. In addition, both [`Sender`] and [`Receiver`]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25904,"byte_end":26021,"line_start":807,"line_end":807,"column_start":1,"column_end":118}},{"value":"/ may be cloned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26022,"byte_end":26040,"line_start":808,"line_end":808,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26041,"byte_end":26044,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26045,"byte_end":26059,"line_start":810,"line_end":810,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26060,"byte_end":26067,"line_start":811,"line_end":811,"column_start":1,"column_end":8}},{"value":"/ let (tx, rx) = flume::unbounded();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26068,"byte_end":26106,"line_start":812,"line_end":812,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26107,"byte_end":26110,"line_start":813,"line_end":813,"column_start":1,"column_end":4}},{"value":"/ tx.send(42).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26111,"byte_end":26136,"line_start":814,"line_end":814,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(rx.recv().unwrap(), 42);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26137,"byte_end":26176,"line_start":815,"line_end":815,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26177,"byte_end":26184,"line_start":816,"line_end":816,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":272},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27640,"byte_end":27647,"line_start":852,"line_end":852,"column_start":8,"column_end":15},"name":"bounded","qualname":"::bounded","value":"pub fn bounded<T>(usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Create a channel with a maximum capacity.","sig":null,"attributes":[{"value":"/ Create a channel with a maximum capacity.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26370,"byte_end":26415,"line_start":825,"line_end":825,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26416,"byte_end":26419,"line_start":826,"line_end":826,"column_start":1,"column_end":4}},{"value":"/ Create a bounded channel with a [`Sender`] and [`Receiver`] connected to each end respectively. Values sent in one","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26420,"byte_end":26538,"line_start":827,"line_end":827,"column_start":1,"column_end":119}},{"value":"/ end of the channel will be received on the other end. The channel is thread-safe, and both [`Sender`] and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26539,"byte_end":26648,"line_start":828,"line_end":828,"column_start":1,"column_end":110}},{"value":"/ [`Receiver`] may be sent to or shared between threads as necessary. In addition, both [`Sender`] and [`Receiver`]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26649,"byte_end":26766,"line_start":829,"line_end":829,"column_start":1,"column_end":118}},{"value":"/ may be cloned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26767,"byte_end":26785,"line_start":830,"line_end":830,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26786,"byte_end":26789,"line_start":831,"line_end":831,"column_start":1,"column_end":4}},{"value":"/ Unlike an [`unbounded`] channel, if there is no space left for new messages, calls to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26790,"byte_end":26879,"line_start":832,"line_end":832,"column_start":1,"column_end":90}},{"value":"/ [`Sender::send`] will block (unblocking once a receiver has made space). If blocking behaviour","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26880,"byte_end":26978,"line_start":833,"line_end":833,"column_start":1,"column_end":99}},{"value":"/ is not desired, [`Sender::try_send`] may be used.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":26979,"byte_end":27032,"line_start":834,"line_end":834,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27033,"byte_end":27036,"line_start":835,"line_end":835,"column_start":1,"column_end":4}},{"value":"/ Like `std::sync::mpsc`, `flume` supports 'rendezvous' channels. A bounded queue with a maximum capacity of zero","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27037,"byte_end":27152,"line_start":836,"line_end":836,"column_start":1,"column_end":116}},{"value":"/ will block senders until a receiver is available to take the value. You can imagine a rendezvous channel as a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27153,"byte_end":27266,"line_start":837,"line_end":837,"column_start":1,"column_end":114}},{"value":"/ 'Checkpoint Charlie'-style location at which senders and receivers perform a handshake and transfer ownership of a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27267,"byte_end":27385,"line_start":838,"line_end":838,"column_start":1,"column_end":119}},{"value":"/ value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27386,"byte_end":27396,"line_start":839,"line_end":839,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27397,"byte_end":27400,"line_start":840,"line_end":840,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27401,"byte_end":27415,"line_start":841,"line_end":841,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27416,"byte_end":27423,"line_start":842,"line_end":842,"column_start":1,"column_end":8}},{"value":"/ let (tx, rx) = flume::bounded(32);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27424,"byte_end":27462,"line_start":843,"line_end":843,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27463,"byte_end":27466,"line_start":844,"line_end":844,"column_start":1,"column_end":4}},{"value":"/ for i in 1..33 {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27467,"byte_end":27487,"line_start":845,"line_end":845,"column_start":1,"column_end":21}},{"value":"/     tx.send(i).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27488,"byte_end":27516,"line_start":846,"line_end":846,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27517,"byte_end":27522,"line_start":847,"line_end":847,"column_start":1,"column_end":6}},{"value":"/ assert!(tx.try_send(33).is_err());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27523,"byte_end":27561,"line_start":848,"line_end":848,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27562,"byte_end":27565,"line_start":849,"line_end":849,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(rx.try_iter().sum::<u32>(), (1..33).sum());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27566,"byte_end":27624,"line_start":850,"line_end":850,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":27625,"byte_end":27632,"line_start":851,"line_end":851,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/signal.rs","byte_start":28053,"byte_end":28063,"line_start":10,"line_end":10,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/signal.rs","byte_start":28150,"byte_end":28160,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/signal.rs","byte_start":28265,"byte_end":28275,"line_start":21,"line_end":21,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":947,"byte_end":956,"line_start":43,"line_end":43,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1109,"byte_end":1118,"line_start":49,"line_end":49,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1370,"byte_end":1379,"line_start":58,"line_end":58,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1591,"byte_end":1600,"line_start":66,"line_end":66,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1843,"byte_end":1859,"line_start":75,"line_end":75,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2177,"byte_end":2193,"line_start":84,"line_end":84,"column_start":31,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2500,"byte_end":2512,"line_start":98,"line_end":98,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2809,"byte_end":2821,"line_start":107,"line_end":107,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3053,"byte_end":3065,"line_start":116,"line_end":116,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3353,"byte_end":3365,"line_start":125,"line_end":125,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3598,"byte_end":3614,"line_start":134,"line_end":134,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3913,"byte_end":3929,"line_start":143,"line_end":143,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":4159,"byte_end":4163,"line_start":154,"line_end":154,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":5197,"byte_end":5201,"line_start":198,"line_end":198,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":8143,"byte_end":8147,"line_start":296,"line_end":296,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":8942,"byte_end":8948,"line_start":327,"line_end":327,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":142},{"krate":0,"index":148},{"krate":0,"index":153},{"krate":0,"index":159},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":15704,"byte_end":15710,"line_start":513,"line_end":513,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18535,"byte_end":18541,"line_start":580,"line_end":580,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18912,"byte_end":18918,"line_start":589,"line_end":589,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19051,"byte_end":19057,"line_start":595,"line_end":595,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19424,"byte_end":19432,"line_start":609,"line_end":609,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22955,"byte_end":22963,"line_start":696,"line_end":696,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":23348,"byte_end":23356,"line_start":706,"line_end":706,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":23491,"byte_end":23499,"line_start":712,"line_end":712,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":23990,"byte_end":23998,"line_start":731,"line_end":731,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24284,"byte_end":24288,"line_start":745,"line_end":745,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24563,"byte_end":24570,"line_start":758,"line_end":758,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25126,"byte_end":25131,"line_start":776,"line_end":776,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25282,"byte_end":25287,"line_start":784,"line_end":784,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25497,"byte_end":25505,"line_start":795,"line_end":795,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/signal.rs","byte_start":27911,"byte_end":27915,"line_start":3,"line_end":3,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":2081},"to":{"krate":0,"index":10}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/signal.rs","byte_start":27918,"byte_end":27922,"line_start":3,"line_end":3,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2093},"to":{"krate":0,"index":10}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/signal.rs","byte_start":28053,"byte_end":28063,"line_start":10,"line_end":10,"column_start":18,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":13},"to":{"krate":2,"index":2069}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/signal.rs","byte_start":28150,"byte_end":28160,"line_start":16,"line_end":16,"column_start":17,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":13},"to":{"krate":0,"index":10}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/signal.rs","byte_start":28265,"byte_end":28275,"line_start":21,"line_end":21,"column_start":6,"column_end":16},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":13},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":947,"byte_end":956,"line_start":43,"line_end":43,"column_start":26,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":274},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1109,"byte_end":1118,"line_start":49,"line_end":49,"column_start":31,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":1750}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1370,"byte_end":1379,"line_start":58,"line_end":58,"column_start":23,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":351},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1591,"byte_end":1600,"line_start":66,"line_end":66,"column_start":28,"column_end":37},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":351},"to":{"krate":1,"index":1750}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":1843,"byte_end":1859,"line_start":75,"line_end":75,"column_start":26,"column_end":42},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":324},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2177,"byte_end":2193,"line_start":84,"line_end":84,"column_start":31,"column_end":47},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":324},"to":{"krate":1,"index":1750}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2500,"byte_end":2512,"line_start":98,"line_end":98,"column_start":26,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":297},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":2809,"byte_end":2821,"line_start":107,"line_end":107,"column_start":31,"column_end":43},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":297},"to":{"krate":1,"index":1750}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3053,"byte_end":3065,"line_start":116,"line_end":116,"column_start":23,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":365},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3353,"byte_end":3365,"line_start":125,"line_end":125,"column_start":28,"column_end":40},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":365},"to":{"krate":1,"index":1750}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3598,"byte_end":3614,"line_start":134,"line_end":134,"column_start":23,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":381},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":3913,"byte_end":3929,"line_start":143,"line_end":143,"column_start":28,"column_end":44},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":381},"to":{"krate":1,"index":1750}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":4159,"byte_end":4163,"line_start":154,"line_end":154,"column_start":29,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":5197,"byte_end":5201,"line_start":198,"line_end":198,"column_start":9,"column_end":13},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":8143,"byte_end":8147,"line_start":296,"line_end":296,"column_start":9,"column_end":13},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":8942,"byte_end":8948,"line_start":327,"line_end":327,"column_start":9,"column_end":15},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":15704,"byte_end":15710,"line_start":513,"line_end":513,"column_start":9,"column_end":15},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18535,"byte_end":18541,"line_start":580,"line_end":580,"column_start":19,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":170},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":18912,"byte_end":18918,"line_start":589,"line_end":589,"column_start":24,"column_end":30},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":170},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19051,"byte_end":19057,"line_start":595,"line_end":595,"column_start":18,"column_end":24},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":170},"to":{"krate":2,"index":2305}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":19424,"byte_end":19432,"line_start":609,"line_end":609,"column_start":9,"column_end":17},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":22955,"byte_end":22963,"line_start":696,"line_end":696,"column_start":19,"column_end":27},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":23348,"byte_end":23356,"line_start":706,"line_end":706,"column_start":24,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":23491,"byte_end":23499,"line_start":712,"line_end":712,"column_start":18,"column_end":26},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":2305}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":23990,"byte_end":23998,"line_start":731,"line_end":731,"column_start":26,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":5529}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24284,"byte_end":24288,"line_start":745,"line_end":745,"column_start":26,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":236},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":24563,"byte_end":24570,"line_start":758,"line_end":758,"column_start":26,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":245},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25126,"byte_end":25131,"line_start":776,"line_end":776,"column_start":26,"column_end":31},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":397},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25282,"byte_end":25287,"line_start":784,"line_end":784,"column_start":35,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":397},"to":{"krate":2,"index":5577}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/flume-0.8.4/src/lib.rs","byte_start":25497,"byte_end":25505,"line_start":795,"line_end":795,"column_start":22,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":263},"to":{"krate":2,"index":5625}}]}