{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0","program":"/home/kami/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","im","--edition=2018","/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=a8ff757954d532e5","-C","extra-filename=-a8ff757954d532e5","--out-dir","/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps","-L","dependency=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps","--extern","bitmaps=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/libbitmaps-047349068da4ac12.rmeta","--extern","rand_core=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/librand_core-b599a89e8ba6014c.rmeta","--extern","rand_xoshiro=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/librand_xoshiro-8cc8ce677fbfb856.rmeta","--extern","sized_chunks=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/libsized_chunks-fb1850e3f50eaf64.rmeta","--extern","typenum=/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/libtypenum-4206e4c73100529e.rmeta","--cap-lints","allow","--cfg","threadsafe","--error-format=json","--sysroot","/home/kami/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/kami/Programing/wasm/bachelorproject/koweb/target/rls/debug/deps/libim-a8ff757954d532e5.rmeta"},"prelude":{"crate_id":{"name":"im","disambiguator":[15239633216810543761,10029646912790667477]},"crate_root":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src","external_crates":[{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/config.rs","num":18,"id":{"name":"typenum","disambiguator":[8726524992263171078,2989859816024006970]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","num":19,"id":{"name":"sized_chunks","disambiguator":[17339250761744030016,2487989828554040903]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","num":20,"id":{"name":"bitmaps","disambiguator":[3180749979309533147,11427421604294283209]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/sort.rs","num":21,"id":{"name":"rand_core","disambiguator":[4354750639922366546,5042749448940505049]}},{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/sort.rs","num":22,"id":{"name":"rand_xoshiro","disambiguator":[392645246044097240,4900507552731883425]}}],"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":203,"byte_end":24040,"line_start":5,"line_end":502,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":204},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":145375,"byte_end":145388,"line_start":35,"line_end":35,"column_start":31,"column_end":44},"alias_span":null,"name":"ConsumingIter","value":"","parent":{"krate":0,"index":618}},{"kind":"Use","ref_id":{"krate":0,"index":2768},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":145390,"byte_end":145398,"line_start":35,"line_end":35,"column_start":46,"column_end":54},"alias_span":null,"name":"DiffItem","value":"","parent":{"krate":0,"index":618}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":145400,"byte_end":145408,"line_start":35,"line_end":35,"column_start":56,"column_end":64},"alias_span":null,"name":"DiffIter","value":"","parent":{"krate":0,"index":618}},{"kind":"Use","ref_id":{"krate":0,"index":171},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":145410,"byte_end":145414,"line_start":35,"line_end":35,"column_start":66,"column_end":70},"alias_span":null,"name":"RangedIter","value":"","parent":{"krate":0,"index":618}},{"kind":"Use","ref_id":{"krate":0,"index":2768},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":218842,"byte_end":218850,"line_start":37,"line_end":37,"column_start":30,"column_end":38},"alias_span":null,"name":"DiffItem","value":"","parent":{"krate":0,"index":1100}},{"kind":"Use","ref_id":{"krate":0,"index":618},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19894,"byte_end":19897,"line_start":357,"line_end":357,"column_start":21,"column_end":24},"alias_span":null,"name":"ordmap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1100},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19929,"byte_end":19932,"line_start":358,"line_end":358,"column_start":21,"column_end":24},"alias_span":null,"name":"ordset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1371},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19989,"byte_end":19992,"line_start":362,"line_end":362,"column_start":22,"column_end":25},"alias_span":null,"name":"hashmap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1866},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":20026,"byte_end":20029,"line_start":363,"line_end":363,"column_start":22,"column_end":25},"alias_span":null,"name":"hashset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2221},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":349856,"byte_end":349861,"line_start":66,"line_end":66,"column_start":23,"column_end":28},"alias_span":null,"name":"Focus","value":"","parent":{"krate":0,"index":2149}},{"kind":"Use","ref_id":{"krate":0,"index":2280},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":349863,"byte_end":349871,"line_start":66,"line_end":66,"column_start":30,"column_end":38},"alias_span":null,"name":"FocusMut","value":"","parent":{"krate":0,"index":2149}},{"kind":"Use","ref_id":{"krate":0,"index":2355},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":349905,"byte_end":349912,"line_start":69,"line_end":69,"column_start":21,"column_end":28},"alias_span":null,"name":"RRBPool","value":"","parent":{"krate":0,"index":2149}},{"kind":"Use","ref_id":{"krate":0,"index":1406},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":20431,"byte_end":20438,"line_start":388,"line_end":388,"column_start":25,"column_end":32},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1903},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":20464,"byte_end":20471,"line_start":389,"line_end":389,"column_start":25,"column_end":32},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":668},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":20496,"byte_end":20502,"line_start":390,"line_end":390,"column_start":24,"column_end":30},"alias_span":null,"name":"OrdMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1151},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":20527,"byte_end":20533,"line_start":391,"line_end":391,"column_start":24,"column_end":30},"alias_span":null,"name":"OrdSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2376},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":20573,"byte_end":20579,"line_start":393,"line_end":393,"column_start":24,"column_end":30},"alias_span":null,"name":"Vector","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":203,"byte_end":24040,"line_start":5,"line_end":502,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":9},{"krate":0,"index":553},{"krate":0,"index":572},{"krate":0,"index":589},{"krate":0,"index":617},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2679},{"krate":0,"index":2687},{"krate":0,"index":2761},{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2764},{"krate":0,"index":2765}],"decl_id":null,"docs":" # Immutable Data Structures for Rust","sig":null,"attributes":[{"value":"/ # Immutable Data Structures for Rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":203,"byte_end":243,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":244,"byte_end":247,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This library implements several of the more commonly useful immutable data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":248,"byte_end":326,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ structures for Rust.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":327,"byte_end":351,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":352,"byte_end":355,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## What are immutable data structures?","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":356,"byte_end":398,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":399,"byte_end":402,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Immutable data structures are data structures which can be copied and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":403,"byte_end":476,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/ modified efficiently without altering the original. The most uncomplicated","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":477,"byte_end":555,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ example of this is the venerable [cons list][cons-list]. This crate offers a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":556,"byte_end":636,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ selection of more modern and flexible data structures with similar","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":637,"byte_end":707,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ properties, tuned for the needs of Rust developers.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":708,"byte_end":763,"line_start":16,"line_end":16,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":764,"byte_end":767,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Briefly, the following data structures are provided:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":768,"byte_end":824,"line_start":18,"line_end":18,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":825,"byte_end":828,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ * [Vectors][vector::Vector] based on [RRB trees][rrb-tree]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":829,"byte_end":891,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/ * [Hash maps][hashmap::HashMap]/[sets][hashset::HashSet] based on [hash","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":892,"byte_end":967,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/   array mapped tries][hamt]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":968,"byte_end":999,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ * [Ordered maps][ordmap::OrdMap]/[sets][ordset::OrdSet] based on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1000,"byte_end":1068,"line_start":23,"line_end":23,"column_start":1,"column_end":69}},{"value":"/   [B-trees][b-tree]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1069,"byte_end":1092,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1093,"byte_end":1096,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ## Why Would I Want This?","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1097,"byte_end":1126,"line_start":26,"line_end":26,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ While immutable data structures can be a game changer for other","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1131,"byte_end":1198,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/ programming languages, the most obvious benefit - avoiding the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1199,"byte_end":1265,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"/ accidental mutation of data - is already handled so well by Rust's","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1266,"byte_end":1336,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ type system that it's just not something a Rust programmer needs","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1337,"byte_end":1405,"line_start":31,"line_end":31,"column_start":1,"column_end":69}},{"value":"/ to worry about even when using data structures that would send a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1406,"byte_end":1474,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ conscientious Clojure programmer into a panic.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1475,"byte_end":1525,"line_start":33,"line_end":33,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1526,"byte_end":1529,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Immutable data structures offer other benefits, though, some of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1530,"byte_end":1597,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ which are useful even in a language like Rust. The most prominent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1598,"byte_end":1667,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/ is *structural sharing*, which means that if two data structures","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1668,"byte_end":1736,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"/ are mostly copies of each other, most of the memory they take up","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1737,"byte_end":1805,"line_start":38,"line_end":38,"column_start":1,"column_end":69}},{"value":"/ will be shared between them. This implies that making copies of an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1806,"byte_end":1876,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/ immutable data structure is cheap: it's really only a matter of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1877,"byte_end":1944,"line_start":40,"line_end":40,"column_start":1,"column_end":68}},{"value":"/ copying a pointer and increasing a reference counter, where in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":1945,"byte_end":2015,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/ case of [`Vec`][std::vec::Vec] you have to allocate the same","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2016,"byte_end":2080,"line_start":42,"line_end":42,"column_start":1,"column_end":65}},{"value":"/ amount of memory all over again and make a copy of every element","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2081,"byte_end":2149,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ it contains. For immutable data structures, extra memory isn't","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2150,"byte_end":2216,"line_start":44,"line_end":44,"column_start":1,"column_end":67}},{"value":"/ allocated until you modify either the copy or the original, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2217,"byte_end":2284,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/ then only the memory needed to record the difference.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2285,"byte_end":2342,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2343,"byte_end":2346,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Another goal of this library has been the idea that you shouldn't","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2347,"byte_end":2416,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ even have to think about what data structure to use in any given","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2417,"byte_end":2485,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ situation, until the point where you need to start worrying about","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2486,"byte_end":2555,"line_start":50,"line_end":50,"column_start":1,"column_end":70}},{"value":"/ optimisation - which, in practice, often never comes. Beyond the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2556,"byte_end":2624,"line_start":51,"line_end":51,"column_start":1,"column_end":69}},{"value":"/ shape of your data (ie. whether to use a list or a map), it should","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2625,"byte_end":2695,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/ be fine not to think too carefully about data structures - you can","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2696,"byte_end":2766,"line_start":53,"line_end":53,"column_start":1,"column_end":71}},{"value":"/ just pick the one that has the right shape and it should have","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2767,"byte_end":2832,"line_start":54,"line_end":54,"column_start":1,"column_end":66}},{"value":"/ acceptable performance characteristics for every operation you","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2833,"byte_end":2899,"line_start":55,"line_end":55,"column_start":1,"column_end":67}},{"value":"/ might need. Specialised data structures will always be faster at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2900,"byte_end":2968,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/ what they've been specialised for, but `im` aims to provide the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":2969,"byte_end":3036,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/ data structures which deliver the least chance of accidentally","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3037,"byte_end":3103,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ using them for the wrong thing.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3104,"byte_end":3139,"line_start":59,"line_end":59,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3140,"byte_end":3143,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ For instance, [`Vec`][std::vec::Vec] beats everything at memory","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3144,"byte_end":3211,"line_start":61,"line_end":61,"column_start":1,"column_end":68}},{"value":"/ usage, indexing and operations that happen at the back of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3212,"byte_end":3277,"line_start":62,"line_end":62,"column_start":1,"column_end":66}},{"value":"/ list, but is terrible at insertion and removal, and gets worse the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3278,"byte_end":3348,"line_start":63,"line_end":63,"column_start":1,"column_end":71}},{"value":"/ closer to the front of the list you get.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3349,"byte_end":3393,"line_start":64,"line_end":64,"column_start":1,"column_end":45}},{"value":"/ [`VecDeque`][std::collections::VecDeque] adds a little bit of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3394,"byte_end":3459,"line_start":65,"line_end":65,"column_start":1,"column_end":66}},{"value":"/ complexity in order to make operations at the front as efficient","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3460,"byte_end":3528,"line_start":66,"line_end":66,"column_start":1,"column_end":69}},{"value":"/ as operations at the back, but is still bad at insertion and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3529,"byte_end":3593,"line_start":67,"line_end":67,"column_start":1,"column_end":65}},{"value":"/ especially concatenation. [`Vector`][vector::Vector] adds another","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3594,"byte_end":3663,"line_start":68,"line_end":68,"column_start":1,"column_end":70}},{"value":"/ bit of complexity, and could never match [`Vec`][std::vec::Vec] at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3664,"byte_end":3734,"line_start":69,"line_end":69,"column_start":1,"column_end":71}},{"value":"/ what it's best at, but in return every operation you can throw at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3735,"byte_end":3804,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/ it can be completed in a reasonable amount of time - even normally","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3805,"byte_end":3875,"line_start":71,"line_end":71,"column_start":1,"column_end":71}},{"value":"/ expensive operations like copying and especially concatenation are","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3876,"byte_end":3946,"line_start":72,"line_end":72,"column_start":1,"column_end":71}},{"value":"/ reasonably cheap when using a [`Vector`][vector::Vector].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":3947,"byte_end":4008,"line_start":73,"line_end":73,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4009,"byte_end":4012,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ It should be noted, however, that because of its simplicity,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4013,"byte_end":4077,"line_start":75,"line_end":75,"column_start":1,"column_end":65}},{"value":"/ [`Vec`][std::vec::Vec] actually beats [`Vector`][vector::Vector] even at its","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4078,"byte_end":4158,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/ strongest operations at small sizes, just because modern CPUs are","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4159,"byte_end":4228,"line_start":77,"line_end":77,"column_start":1,"column_end":70}},{"value":"/ hyperoptimised for things like copying small chunks of contiguous memory -","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4229,"byte_end":4307,"line_start":78,"line_end":78,"column_start":1,"column_end":79}},{"value":"/ you actually need to go past a certain size (usually in the vicinity of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4308,"byte_end":4383,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ several hundred elements) before you get to the point where","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4384,"byte_end":4447,"line_start":80,"line_end":80,"column_start":1,"column_end":64}},{"value":"/ [`Vec`][std::vec::Vec] isn't always going to be the fastest choice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4448,"byte_end":4519,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"/ [`Vector`][vector::Vector] attempts to overcome this by actually just being","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4520,"byte_end":4599,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/ an array at very small sizes, and being able to switch efficiently to the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4600,"byte_end":4677,"line_start":83,"line_end":83,"column_start":1,"column_end":78}},{"value":"/ full data structure when it grows large enough. Thus,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4678,"byte_end":4735,"line_start":84,"line_end":84,"column_start":1,"column_end":58}},{"value":"/ [`Vector`][vector::Vector] will actually be equivalent to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4736,"byte_end":4797,"line_start":85,"line_end":85,"column_start":1,"column_end":62}},{"value":"/ [Vec][std::vec::Vec] until it grows past the size of a single chunk.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4798,"byte_end":4870,"line_start":86,"line_end":86,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4871,"byte_end":4874,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ The maps - [`HashMap`][hashmap::HashMap] and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4875,"byte_end":4923,"line_start":88,"line_end":88,"column_start":1,"column_end":49}},{"value":"/ [`OrdMap`][ordmap::OrdMap] - generally perform similarly to their","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4924,"byte_end":4993,"line_start":89,"line_end":89,"column_start":1,"column_end":70}},{"value":"/ equivalents in the standard library, but tend to run a bit slower","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":4994,"byte_end":5063,"line_start":90,"line_end":90,"column_start":1,"column_end":70}},{"value":"/ on the basic operations ([`HashMap`][hashmap::HashMap] is almost","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5064,"byte_end":5132,"line_start":91,"line_end":91,"column_start":1,"column_end":69}},{"value":"/ neck and neck with its counterpart, while","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5133,"byte_end":5178,"line_start":92,"line_end":92,"column_start":1,"column_end":46}},{"value":"/ [`OrdMap`][ordmap::OrdMap] currently tends to run 2-3x slower). On","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5179,"byte_end":5249,"line_start":93,"line_end":93,"column_start":1,"column_end":71}},{"value":"/ the other hand, they offer the cheap copy and structural sharing","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5250,"byte_end":5318,"line_start":94,"line_end":94,"column_start":1,"column_end":69}},{"value":"/ between copies that you'd expect from immutable data structures.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5319,"byte_end":5387,"line_start":95,"line_end":95,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5388,"byte_end":5391,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ In conclusion, the aim of this library is to provide a safe","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5392,"byte_end":5455,"line_start":97,"line_end":97,"column_start":1,"column_end":64}},{"value":"/ default choice for the most common kinds of data structures,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5456,"byte_end":5520,"line_start":98,"line_end":98,"column_start":1,"column_end":65}},{"value":"/ allowing you to defer careful thinking about the right data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5521,"byte_end":5584,"line_start":99,"line_end":99,"column_start":1,"column_end":64}},{"value":"/ structure for the job until you need to start looking for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5585,"byte_end":5646,"line_start":100,"line_end":100,"column_start":1,"column_end":62}},{"value":"/ optimisations - and you may find, especially for larger data sets,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5647,"byte_end":5717,"line_start":101,"line_end":101,"column_start":1,"column_end":71}},{"value":"/ that immutable data structures are still the right choice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5718,"byte_end":5780,"line_start":102,"line_end":102,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5781,"byte_end":5784,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ ## Values","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5785,"byte_end":5798,"line_start":104,"line_end":104,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5799,"byte_end":5802,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ Because we need to make copies of shared nodes in these data structures","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5803,"byte_end":5878,"line_start":106,"line_end":106,"column_start":1,"column_end":76}},{"value":"/ before updating them, the values you store in them must implement","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5879,"byte_end":5948,"line_start":107,"line_end":107,"column_start":1,"column_end":70}},{"value":"/ [`Clone`][std::clone::Clone].  For primitive values that implement","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":5949,"byte_end":6019,"line_start":108,"line_end":108,"column_start":1,"column_end":71}},{"value":"/ [`Copy`][std::marker::Copy], such as numbers, everything is fine: this is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6020,"byte_end":6097,"line_start":109,"line_end":109,"column_start":1,"column_end":78}},{"value":"/ the case for which the data structures are optimised, and performance is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6098,"byte_end":6174,"line_start":110,"line_end":110,"column_start":1,"column_end":77}},{"value":"/ going to be great.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6175,"byte_end":6197,"line_start":111,"line_end":111,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6198,"byte_end":6201,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ On the other hand, if you want to store values for which cloning is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6202,"byte_end":6273,"line_start":113,"line_end":113,"column_start":1,"column_end":72}},{"value":"/ expensive, or values that don't implement [`Clone`][std::clone::Clone], you","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6274,"byte_end":6353,"line_start":114,"line_end":114,"column_start":1,"column_end":80}},{"value":"/ need to wrap them in [`Rc`][std::rc::Rc] or [`Arc`][std::sync::Arc]. Thus,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6354,"byte_end":6432,"line_start":115,"line_end":115,"column_start":1,"column_end":79}},{"value":"/ if you have a complex structure `BigBlobOfData` and you want to store a list","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6433,"byte_end":6513,"line_start":116,"line_end":116,"column_start":1,"column_end":81}},{"value":"/ of them as a `Vector<BigBlobOfData>`, you should instead use a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6514,"byte_end":6580,"line_start":117,"line_end":117,"column_start":1,"column_end":67}},{"value":"/ `Vector<Rc<BigBlobOfData>>`, which is going to save you not only the time","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6581,"byte_end":6658,"line_start":118,"line_end":118,"column_start":1,"column_end":78}},{"value":"/ spent cloning the big blobs of data, but also the memory spent keeping","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6659,"byte_end":6733,"line_start":119,"line_end":119,"column_start":1,"column_end":75}},{"value":"/ multiple copies of it around, as [`Rc`][std::rc::Rc] keeps a single","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6734,"byte_end":6805,"line_start":120,"line_end":120,"column_start":1,"column_end":72}},{"value":"/ reference counted copy around instead.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6806,"byte_end":6848,"line_start":121,"line_end":121,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6849,"byte_end":6852,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ If you're storing smaller values that aren't","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6853,"byte_end":6901,"line_start":123,"line_end":123,"column_start":1,"column_end":49}},{"value":"/ [`Copy`][std::marker::Copy]able, you'll need to exercise judgement: if your","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6902,"byte_end":6981,"line_start":124,"line_end":124,"column_start":1,"column_end":80}},{"value":"/ values are going to be very cheap to clone, as would be the case for short","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":6982,"byte_end":7060,"line_start":125,"line_end":125,"column_start":1,"column_end":79}},{"value":"/ [`String`][std::string::String]s or small [`Vec`][std::vec::Vec]s, you're","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7061,"byte_end":7138,"line_start":126,"line_end":126,"column_start":1,"column_end":78}},{"value":"/ probably better off storing them directly without wrapping them in an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7139,"byte_end":7212,"line_start":127,"line_end":127,"column_start":1,"column_end":74}},{"value":"/ [`Rc`][std::rc::Rc], because, like the [`Rc`][std::rc::Rc], they're just","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7213,"byte_end":7289,"line_start":128,"line_end":128,"column_start":1,"column_end":77}},{"value":"/ pointers to some data on the heap, and that data isn't expensive to clone -","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7290,"byte_end":7369,"line_start":129,"line_end":129,"column_start":1,"column_end":80}},{"value":"/ you might actually lose more performance from the extra redirection of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7370,"byte_end":7444,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/ wrapping them in an [`Rc`][std::rc::Rc] than you would from occasionally","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7445,"byte_end":7521,"line_start":131,"line_end":131,"column_start":1,"column_end":77}},{"value":"/ cloning them.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7522,"byte_end":7539,"line_start":132,"line_end":132,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7540,"byte_end":7543,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ ### When does cloning happen?","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7544,"byte_end":7577,"line_start":134,"line_end":134,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7578,"byte_end":7581,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ So when will your values actually be cloned? The easy answer is only if you","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7582,"byte_end":7661,"line_start":136,"line_end":136,"column_start":1,"column_end":80}},{"value":"/ [`clone`][std::clone::Clone::clone] the data structure itself, and then only","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7662,"byte_end":7742,"line_start":137,"line_end":137,"column_start":1,"column_end":81}},{"value":"/ lazily as you change it. Values are stored in tree nodes inside the data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7743,"byte_end":7819,"line_start":138,"line_end":138,"column_start":1,"column_end":77}},{"value":"/ structure, each node of which contains up to 64 values. When you","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7820,"byte_end":7888,"line_start":139,"line_end":139,"column_start":1,"column_end":69}},{"value":"/ [`clone`][std::clone::Clone::clone] a data structure, nothing is actually","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7889,"byte_end":7966,"line_start":140,"line_end":140,"column_start":1,"column_end":78}},{"value":"/ copied - it's just the reference count on the root node that's incremented,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":7967,"byte_end":8046,"line_start":141,"line_end":141,"column_start":1,"column_end":80}},{"value":"/ to indicate that it's shared between two data structures. It's only when you","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8047,"byte_end":8127,"line_start":142,"line_end":142,"column_start":1,"column_end":81}},{"value":"/ actually modify one of the shared data structures that nodes are cloned:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8128,"byte_end":8204,"line_start":143,"line_end":143,"column_start":1,"column_end":77}},{"value":"/ when you make a change somewhere in the tree, the node containing the change","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8205,"byte_end":8285,"line_start":144,"line_end":144,"column_start":1,"column_end":81}},{"value":"/ needs to be cloned, and then its parent nodes need to be updated to contain","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8286,"byte_end":8365,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/ the new child node instead of the old version, and so they're cloned as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8366,"byte_end":8441,"line_start":146,"line_end":146,"column_start":1,"column_end":76}},{"value":"/ well.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8442,"byte_end":8451,"line_start":147,"line_end":147,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8452,"byte_end":8455,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ We can call this \"lazy\" cloning - if you make two copies of a data structure","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8456,"byte_end":8536,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/ and you never change either of them, there's never any need to clone the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8537,"byte_end":8613,"line_start":150,"line_end":150,"column_start":1,"column_end":77}},{"value":"/ data they contain. It's only when you start making changes that cloning","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8614,"byte_end":8689,"line_start":151,"line_end":151,"column_start":1,"column_end":76}},{"value":"/ starts to happen, and then only on the specific tree nodes that are part of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8690,"byte_end":8769,"line_start":152,"line_end":152,"column_start":1,"column_end":80}},{"value":"/ the change. Note that the implications of lazily cloning the data structure","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8770,"byte_end":8849,"line_start":153,"line_end":153,"column_start":1,"column_end":80}},{"value":"/ extend to memory usage as well as the CPU workload of copying the data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8850,"byte_end":8924,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/ around - cloning an immutable data structure means both copies share the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":8925,"byte_end":9001,"line_start":155,"line_end":155,"column_start":1,"column_end":77}},{"value":"/ same allocated memory, until you start making changes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9002,"byte_end":9060,"line_start":156,"line_end":156,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9061,"byte_end":9064,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ Most crucially, if you never clone the data structure, the data inside it is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9065,"byte_end":9145,"line_start":158,"line_end":158,"column_start":1,"column_end":81}},{"value":"/ also never cloned, and in this case it acts just like a mutable data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9146,"byte_end":9218,"line_start":159,"line_end":159,"column_start":1,"column_end":73}},{"value":"/ structure, with minimal performance differences (but still non-zero, as we","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9219,"byte_end":9297,"line_start":160,"line_end":160,"column_start":1,"column_end":79}},{"value":"/ still have to check for shared nodes).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9298,"byte_end":9340,"line_start":161,"line_end":161,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9341,"byte_end":9344,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ## Data Structures","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9345,"byte_end":9367,"line_start":163,"line_end":163,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9368,"byte_end":9371,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ We'll attempt to provide a comprehensive guide to the available","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9372,"byte_end":9439,"line_start":165,"line_end":165,"column_start":1,"column_end":68}},{"value":"/ data structures below.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9440,"byte_end":9466,"line_start":166,"line_end":166,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9467,"byte_end":9470,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ### Performance Notes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9471,"byte_end":9496,"line_start":168,"line_end":168,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9497,"byte_end":9500,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ \"Big O notation\" is the standard way of talking about the time","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9501,"byte_end":9567,"line_start":170,"line_end":170,"column_start":1,"column_end":67}},{"value":"/ complexity of data structure operations. If you're not familiar","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9568,"byte_end":9635,"line_start":171,"line_end":171,"column_start":1,"column_end":68}},{"value":"/ with big O notation, here's a quick cheat sheet:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9636,"byte_end":9688,"line_start":172,"line_end":172,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9689,"byte_end":9692,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ *O(1)* means an operation runs in constant time: it will take the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9693,"byte_end":9762,"line_start":174,"line_end":174,"column_start":1,"column_end":70}},{"value":"/ same time to complete regardless of the size of the data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9763,"byte_end":9823,"line_start":175,"line_end":175,"column_start":1,"column_end":61}},{"value":"/ structure.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9824,"byte_end":9838,"line_start":176,"line_end":176,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9839,"byte_end":9842,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ *O(n)* means an operation runs in linear time: if you double the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9843,"byte_end":9911,"line_start":178,"line_end":178,"column_start":1,"column_end":69}},{"value":"/ size of your data structure, the operation will take twice as long","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9912,"byte_end":9982,"line_start":179,"line_end":179,"column_start":1,"column_end":71}},{"value":"/ to complete; if you quadruple the size, it will take four times as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":9983,"byte_end":10053,"line_start":180,"line_end":180,"column_start":1,"column_end":71}},{"value":"/ long, etc.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10054,"byte_end":10068,"line_start":181,"line_end":181,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10069,"byte_end":10072,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ *O(log n)* means an operation runs in logarithmic time: for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10073,"byte_end":10136,"line_start":183,"line_end":183,"column_start":1,"column_end":64}},{"value":"/ *log<sub>2</sub>*, if you double the size of your data structure,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10137,"byte_end":10206,"line_start":184,"line_end":184,"column_start":1,"column_end":70}},{"value":"/ the operation will take one step longer to complete; if you","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10207,"byte_end":10270,"line_start":185,"line_end":185,"column_start":1,"column_end":64}},{"value":"/ quadruple the size, it will need two steps more; and so on.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10271,"byte_end":10334,"line_start":186,"line_end":186,"column_start":1,"column_end":64}},{"value":"/ However, the data structures in this library generally run in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10335,"byte_end":10400,"line_start":187,"line_end":187,"column_start":1,"column_end":66}},{"value":"/ *log<sub>64</sub>* time, meaning you have to make your data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10401,"byte_end":10464,"line_start":188,"line_end":188,"column_start":1,"column_end":64}},{"value":"/ structure 64 times bigger to need one extra step, and 4096 times","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10465,"byte_end":10533,"line_start":189,"line_end":189,"column_start":1,"column_end":69}},{"value":"/ bigger to need two steps. This means that, while they still count","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10534,"byte_end":10603,"line_start":190,"line_end":190,"column_start":1,"column_end":70}},{"value":"/ as O(log n), operations on all but really large data sets will run","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10604,"byte_end":10674,"line_start":191,"line_end":191,"column_start":1,"column_end":71}},{"value":"/ at near enough to O(1) that you won't usually notice.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10675,"byte_end":10732,"line_start":192,"line_end":192,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10733,"byte_end":10736,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ *O(n log n)* is the most expensive operation you'll see in this","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10737,"byte_end":10804,"line_start":194,"line_end":194,"column_start":1,"column_end":68}},{"value":"/ library: it means that for every one of the *n* elements in your","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10805,"byte_end":10873,"line_start":195,"line_end":195,"column_start":1,"column_end":69}},{"value":"/ data structure, you have to perform *log n* operations. In our","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10874,"byte_end":10940,"line_start":196,"line_end":196,"column_start":1,"column_end":67}},{"value":"/ case, as noted above, this is often close enough to O(n) that it's","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":10941,"byte_end":11011,"line_start":197,"line_end":197,"column_start":1,"column_end":71}},{"value":"/ not usually as bad as it sounds, but even O(n) isn't cheap and the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11012,"byte_end":11082,"line_start":198,"line_end":198,"column_start":1,"column_end":71}},{"value":"/ cost still increases logarithmically, if slowly, as the size of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11083,"byte_end":11150,"line_start":199,"line_end":199,"column_start":1,"column_end":68}},{"value":"/ your data increases. O(n log n) basically means \"are you sure you","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11151,"byte_end":11220,"line_start":200,"line_end":200,"column_start":1,"column_end":70}},{"value":"/ need to do this?\"","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11221,"byte_end":11242,"line_start":201,"line_end":201,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11243,"byte_end":11246,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ *O(1)** means 'amortised O(1),' which means that an operation","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11247,"byte_end":11312,"line_start":203,"line_end":203,"column_start":1,"column_end":66}},{"value":"/ usually runs in constant time but will occasionally be more","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11313,"byte_end":11376,"line_start":204,"line_end":204,"column_start":1,"column_end":64}},{"value":"/ expensive: for instance,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11377,"byte_end":11405,"line_start":205,"line_end":205,"column_start":1,"column_end":29}},{"value":"/ [`Vector::push_back`][vector::Vector::push_back], if called in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11406,"byte_end":11472,"line_start":206,"line_end":206,"column_start":1,"column_end":67}},{"value":"/ sequence, will be O(1) most of the time but every 64th time it","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11473,"byte_end":11539,"line_start":207,"line_end":207,"column_start":1,"column_end":67}},{"value":"/ will be O(log n), as it fills up its tail chunk and needs to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11540,"byte_end":11604,"line_start":208,"line_end":208,"column_start":1,"column_end":65}},{"value":"/ insert it into the tree. Please note that the O(1) with the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11605,"byte_end":11668,"line_start":209,"line_end":209,"column_start":1,"column_end":64}},{"value":"/ asterisk attached is not a common notation; it's just a convention","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11669,"byte_end":11739,"line_start":210,"line_end":210,"column_start":1,"column_end":71}},{"value":"/ I've used in these docs to save myself from having to type","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11740,"byte_end":11802,"line_start":211,"line_end":211,"column_start":1,"column_end":63}},{"value":"/ 'amortised' everywhere.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11803,"byte_end":11830,"line_start":212,"line_end":212,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11831,"byte_end":11834,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ ### Lists","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11835,"byte_end":11848,"line_start":214,"line_end":214,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11849,"byte_end":11852,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ Lists are sequences of single elements which maintain the order in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11853,"byte_end":11923,"line_start":216,"line_end":216,"column_start":1,"column_end":71}},{"value":"/ which you inserted them. The only list in this library is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11924,"byte_end":11985,"line_start":217,"line_end":217,"column_start":1,"column_end":62}},{"value":"/ [`Vector`][vector::Vector], which offers the best all round","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":11986,"byte_end":12049,"line_start":218,"line_end":218,"column_start":1,"column_end":64}},{"value":"/ performance characteristics: it's pretty good at everything, even","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12050,"byte_end":12119,"line_start":219,"line_end":219,"column_start":1,"column_end":70}},{"value":"/ if there's always another kind of list that's better at something.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12120,"byte_end":12190,"line_start":220,"line_end":220,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12191,"byte_end":12194,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ | Type | Algorithm | Constraints | Order | Push | Pop | Split | Append | Lookup |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12195,"byte_end":12280,"line_start":222,"line_end":222,"column_start":1,"column_end":86}},{"value":"/ | --- | --- | --- | --- | --- | --- | --- | --- | --- |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12281,"byte_end":12340,"line_start":223,"line_end":223,"column_start":1,"column_end":60}},{"value":"/ | [`Vector<A>`][vector::Vector] | [RRB tree][rrb-tree] | [`Clone`][std::clone::Clone] | insertion | O(1)\\* | O(1)\\* | O(log n) | O(log n) | O(log n) |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12341,"byte_end":12495,"line_start":224,"line_end":224,"column_start":1,"column_end":155}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12496,"byte_end":12499,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ ### Maps","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12500,"byte_end":12512,"line_start":226,"line_end":226,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12513,"byte_end":12516,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ Maps are mappings of keys to values, where the most common read","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12517,"byte_end":12584,"line_start":228,"line_end":228,"column_start":1,"column_end":68}},{"value":"/ operation is to find the value associated with a given key. Maps","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12585,"byte_end":12653,"line_start":229,"line_end":229,"column_start":1,"column_end":69}},{"value":"/ may or may not have a defined order. Any given key can only occur","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12654,"byte_end":12723,"line_start":230,"line_end":230,"column_start":1,"column_end":70}},{"value":"/ once inside a map, and setting a key to a different value will","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12724,"byte_end":12790,"line_start":231,"line_end":231,"column_start":1,"column_end":67}},{"value":"/ overwrite the previous value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12791,"byte_end":12824,"line_start":232,"line_end":232,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12825,"byte_end":12828,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ | Type | Algorithm | Key Constraints | Order | Insert | Remove | Lookup |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12829,"byte_end":12906,"line_start":234,"line_end":234,"column_start":1,"column_end":78}},{"value":"/ | --- | --- | --- | --- | --- | --- | --- |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12907,"byte_end":12954,"line_start":235,"line_end":235,"column_start":1,"column_end":48}},{"value":"/ | [`HashMap<K, V>`][hashmap::HashMap] | [HAMT][hamt] | [`Clone`][std::clone::Clone] + [`Hash`][std::hash::Hash] + [`Eq`][std::cmp::Eq] | undefined | O(log n) | O(log n) | O(log n) |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":12955,"byte_end":13140,"line_start":236,"line_end":236,"column_start":1,"column_end":186}},{"value":"/ | [`OrdMap<K, V>`][ordmap::OrdMap] | [B-tree][b-tree] | [`Clone`][std::clone::Clone] + [`Ord`][std::cmp::Ord] | sorted | O(log n) | O(log n) | O(log n) |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13141,"byte_end":13298,"line_start":237,"line_end":237,"column_start":1,"column_end":158}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13299,"byte_end":13302,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ ### Sets","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13303,"byte_end":13315,"line_start":239,"line_end":239,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13316,"byte_end":13319,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ Sets are collections of unique values, and may or may not have a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13320,"byte_end":13388,"line_start":241,"line_end":241,"column_start":1,"column_end":69}},{"value":"/ defined order. Their crucial property is that any given value can","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13389,"byte_end":13458,"line_start":242,"line_end":242,"column_start":1,"column_end":70}},{"value":"/ only exist once in a given set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13459,"byte_end":13494,"line_start":243,"line_end":243,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13495,"byte_end":13498,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ | Type | Algorithm | Constraints | Order | Insert | Remove | Lookup |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13499,"byte_end":13572,"line_start":245,"line_end":245,"column_start":1,"column_end":74}},{"value":"/ | --- | --- | --- | --- | --- | --- | --- |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13573,"byte_end":13620,"line_start":246,"line_end":246,"column_start":1,"column_end":48}},{"value":"/ | [`HashSet<A>`][hashset::HashSet] | [HAMT][hamt] | [`Clone`][std::clone::Clone] + [`Hash`][std::hash::Hash] + [`Eq`][std::cmp::Eq] | undefined | O(log n) | O(log n) | O(log n) |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13621,"byte_end":13803,"line_start":247,"line_end":247,"column_start":1,"column_end":183}},{"value":"/ | [`OrdSet<A>`][ordset::OrdSet] | [B-tree][b-tree] | [`Clone`][std::clone::Clone] + [`Ord`][std::cmp::Ord] | sorted | O(log n) | O(log n) | O(log n) |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13804,"byte_end":13958,"line_start":248,"line_end":248,"column_start":1,"column_end":155}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13959,"byte_end":13962,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ ## In-place Mutation","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13963,"byte_end":13987,"line_start":250,"line_end":250,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13988,"byte_end":13991,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ All of these data structures support in-place copy-on-write","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":13992,"byte_end":14055,"line_start":252,"line_end":252,"column_start":1,"column_end":64}},{"value":"/ mutation, which means that if you're the sole user of a data","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14056,"byte_end":14120,"line_start":253,"line_end":253,"column_start":1,"column_end":65}},{"value":"/ structure, you can update it in place without taking the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14121,"byte_end":14181,"line_start":254,"line_end":254,"column_start":1,"column_end":61}},{"value":"/ performance hit of making a copy of the data structure before","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14182,"byte_end":14247,"line_start":255,"line_end":255,"column_start":1,"column_end":66}},{"value":"/ modifying it (this is about an order of magnitude faster than","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14248,"byte_end":14313,"line_start":256,"line_end":256,"column_start":1,"column_end":66}},{"value":"/ immutable operations, almost as fast as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14314,"byte_end":14357,"line_start":257,"line_end":257,"column_start":1,"column_end":44}},{"value":"/ [`std::collections`][std::collections]'s mutable data structures).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14358,"byte_end":14428,"line_start":258,"line_end":258,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14429,"byte_end":14432,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ Thanks to [`Rc`][std::rc::Rc]'s reference counting, we are able to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14433,"byte_end":14503,"line_start":260,"line_end":260,"column_start":1,"column_end":71}},{"value":"/ determine whether a node in a data structure is being shared with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14504,"byte_end":14573,"line_start":261,"line_end":261,"column_start":1,"column_end":70}},{"value":"/ other data structures, or whether it's safe to mutate it in place.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14574,"byte_end":14644,"line_start":262,"line_end":262,"column_start":1,"column_end":71}},{"value":"/ When it's shared, we'll automatically make a copy of the node","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14645,"byte_end":14710,"line_start":263,"line_end":263,"column_start":1,"column_end":66}},{"value":"/ before modifying it. The consequence of this is that cloning a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14711,"byte_end":14777,"line_start":264,"line_end":264,"column_start":1,"column_end":67}},{"value":"/ data structure becomes a lazy operation: the initial clone is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14778,"byte_end":14843,"line_start":265,"line_end":265,"column_start":1,"column_end":66}},{"value":"/ instant, and as you modify the cloned data structure it will clone","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14844,"byte_end":14914,"line_start":266,"line_end":266,"column_start":1,"column_end":71}},{"value":"/ chunks only where you change them, so that if you change the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14915,"byte_end":14979,"line_start":267,"line_end":267,"column_start":1,"column_end":65}},{"value":"/ entire thing you will eventually have performed a full clone.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":14980,"byte_end":15045,"line_start":268,"line_end":268,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15046,"byte_end":15049,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ This also gives us a couple of other optimisations for free:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15050,"byte_end":15114,"line_start":270,"line_end":270,"column_start":1,"column_end":65}},{"value":"/ implementations of immutable data structures in other languages","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15115,"byte_end":15182,"line_start":271,"line_end":271,"column_start":1,"column_end":68}},{"value":"/ often have the idea of local mutation, like Clojure's transients","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15183,"byte_end":15251,"line_start":272,"line_end":272,"column_start":1,"column_end":69}},{"value":"/ or Haskell's `ST` monad - a managed scope where you can treat an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15252,"byte_end":15320,"line_start":273,"line_end":273,"column_start":1,"column_end":69}},{"value":"/ immutable data structure like a mutable one, gaining a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15321,"byte_end":15379,"line_start":274,"line_end":274,"column_start":1,"column_end":59}},{"value":"/ considerable amount of performance because you no longer need to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15380,"byte_end":15448,"line_start":275,"line_end":275,"column_start":1,"column_end":69}},{"value":"/ copy your changed nodes for every operation, just the first time","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15449,"byte_end":15517,"line_start":276,"line_end":276,"column_start":1,"column_end":69}},{"value":"/ you hit a node that's sharing structure. In Rust, we don't need to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15518,"byte_end":15588,"line_start":277,"line_end":277,"column_start":1,"column_end":71}},{"value":"/ think about this kind of managed scope, it's all taken care of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15589,"byte_end":15655,"line_start":278,"line_end":278,"column_start":1,"column_end":67}},{"value":"/ behind the scenes because of our low level access to the garbage","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15656,"byte_end":15724,"line_start":279,"line_end":279,"column_start":1,"column_end":69}},{"value":"/ collector (which, in our case, is just a simple","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15725,"byte_end":15776,"line_start":280,"line_end":280,"column_start":1,"column_end":52}},{"value":"/ [`Rc`][std::rc::Rc]).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15777,"byte_end":15802,"line_start":281,"line_end":281,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15803,"byte_end":15806,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ ## Thread Safety","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15807,"byte_end":15827,"line_start":283,"line_end":283,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15828,"byte_end":15831,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ The data structures in the `im` crate are thread safe, through","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15832,"byte_end":15898,"line_start":285,"line_end":285,"column_start":1,"column_end":67}},{"value":"/ [`Arc`][std::sync::Arc]. This comes with a slight performance impact, so","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15899,"byte_end":15975,"line_start":286,"line_end":286,"column_start":1,"column_end":77}},{"value":"/ that if you prioritise speed over thread safety, you may want to use the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":15976,"byte_end":16052,"line_start":287,"line_end":287,"column_start":1,"column_end":77}},{"value":"/ `im-rc` crate instead, which is identical to `im` except that it uses","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16053,"byte_end":16126,"line_start":288,"line_end":288,"column_start":1,"column_end":74}},{"value":"/ [`Rc`][std::rc::Rc] instead of [`Arc`][std::sync::Arc], implying that the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16127,"byte_end":16204,"line_start":289,"line_end":289,"column_start":1,"column_end":78}},{"value":"/ data structures in `im-rc` do not implement [`Send`][std::marker::Send] and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16205,"byte_end":16284,"line_start":290,"line_end":290,"column_start":1,"column_end":80}},{"value":"/ [`Sync`][std::marker::Sync]. This yields approximately a 20-25% increase in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16285,"byte_end":16364,"line_start":291,"line_end":291,"column_start":1,"column_end":80}},{"value":"/ general performance.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16365,"byte_end":16389,"line_start":292,"line_end":292,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16390,"byte_end":16393,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ ## Feature Flags","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16394,"byte_end":16414,"line_start":294,"line_end":294,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16415,"byte_end":16418,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ `im` comes with optional support for the following crates through Cargo","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16419,"byte_end":16494,"line_start":296,"line_end":296,"column_start":1,"column_end":76}},{"value":"/ feature flags. You can enable them in your `Cargo.toml` file like this:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16495,"byte_end":16570,"line_start":297,"line_end":297,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16571,"byte_end":16574,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ ```no_compile","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16575,"byte_end":16592,"line_start":299,"line_end":299,"column_start":1,"column_end":18}},{"value":"/ [dependencies]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16593,"byte_end":16611,"line_start":300,"line_end":300,"column_start":1,"column_end":19}},{"value":"/ im = { version = \"*\", features = [\"proptest\", \"serde\"] }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16612,"byte_end":16672,"line_start":301,"line_end":301,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16673,"byte_end":16680,"line_start":302,"line_end":302,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16681,"byte_end":16684,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ | Feature | Description |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16685,"byte_end":16714,"line_start":304,"line_end":304,"column_start":1,"column_end":30}},{"value":"/ | ------- | ----------- |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16715,"byte_end":16744,"line_start":305,"line_end":305,"column_start":1,"column_end":30}},{"value":"/ | [`pool`](https://crates.io/crates/refpool) | Constructors and pool types for [`refpool`](https://crates.io/crates/refpool) memory pools (recommended only for `im-rc`) |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16745,"byte_end":16919,"line_start":306,"line_end":306,"column_start":1,"column_end":175}},{"value":"/ | [`proptest`](https://crates.io/crates/proptest) | Strategies for all `im` datatypes under a `proptest` namespace, eg. `im::vector::proptest::vector()` |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":16920,"byte_end":17078,"line_start":307,"line_end":307,"column_start":1,"column_end":159}},{"value":"/ | [`quickcheck`](https://crates.io/crates/quickcheck) | [`quickcheck::Arbitrary`](https://docs.rs/quickcheck/latest/quickcheck/trait.Arbitrary.html) implementations for all `im` datatypes (not available in `im-rc`) |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":17079,"byte_end":17299,"line_start":308,"line_end":308,"column_start":1,"column_end":221}},{"value":"/ | [`rayon`](https://crates.io/crates/rayon) | parallel iterator implementations for [`Vector`][vector::Vector] (not available in `im-rc`) |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":17300,"byte_end":17443,"line_start":309,"line_end":309,"column_start":1,"column_end":144}},{"value":"/ | [`serde`](https://crates.io/crates/serde) | [`Serialize`](https://docs.rs/serde/latest/serde/trait.Serialize.html) and [`Deserialize`](https://docs.rs/serde/latest/serde/trait.Deserialize.html) implementations for all `im` datatypes |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":17444,"byte_end":17684,"line_start":310,"line_end":310,"column_start":1,"column_end":241}},{"value":"/ | [`arbitrary`](https://crates.io/crates/arbitrary/) | [`arbitrary::Arbitrary`](https://docs.rs/arbitrary/latest/arbitrary/trait.Arbitrary.html) implementations for all `im` datatypes |","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":17685,"byte_end":17874,"line_start":311,"line_end":311,"column_start":1,"column_end":190}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":17875,"byte_end":17878,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ [std::collections]: https://doc.rust-lang.org/std/collections/index.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":17879,"byte_end":17955,"line_start":313,"line_end":313,"column_start":1,"column_end":77}},{"value":"/ [std::collections::VecDeque]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":17956,"byte_end":18052,"line_start":314,"line_end":314,"column_start":1,"column_end":97}},{"value":"/ [std::vec::Vec]: https://doc.rust-lang.org/std/vec/struct.Vec.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18053,"byte_end":18123,"line_start":315,"line_end":315,"column_start":1,"column_end":71}},{"value":"/ [std::string::String]: https://doc.rust-lang.org/std/string/struct.String.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18124,"byte_end":18206,"line_start":316,"line_end":316,"column_start":1,"column_end":83}},{"value":"/ [std::rc::Rc]: https://doc.rust-lang.org/std/rc/struct.Rc.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18207,"byte_end":18273,"line_start":317,"line_end":317,"column_start":1,"column_end":67}},{"value":"/ [std::sync::Arc]: https://doc.rust-lang.org/std/sync/struct.Arc.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18274,"byte_end":18346,"line_start":318,"line_end":318,"column_start":1,"column_end":73}},{"value":"/ [std::cmp::Eq]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18347,"byte_end":18414,"line_start":319,"line_end":319,"column_start":1,"column_end":68}},{"value":"/ [std::cmp::Ord]: https://doc.rust-lang.org/std/cmp/trait.Ord.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18415,"byte_end":18484,"line_start":320,"line_end":320,"column_start":1,"column_end":70}},{"value":"/ [std::clone::Clone]: https://doc.rust-lang.org/std/clone/trait.Clone.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18485,"byte_end":18562,"line_start":321,"line_end":321,"column_start":1,"column_end":78}},{"value":"/ [std::clone::Clone::clone]: https://doc.rust-lang.org/std/clone/trait.Clone.html#tymethod.clone","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18563,"byte_end":18662,"line_start":322,"line_end":322,"column_start":1,"column_end":100}},{"value":"/ [std::marker::Copy]: https://doc.rust-lang.org/std/marker/trait.Copy.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18663,"byte_end":18740,"line_start":323,"line_end":323,"column_start":1,"column_end":78}},{"value":"/ [std::hash::Hash]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18741,"byte_end":18814,"line_start":324,"line_end":324,"column_start":1,"column_end":74}},{"value":"/ [std::marker::Send]: https://doc.rust-lang.org/std/marker/trait.Send.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18815,"byte_end":18892,"line_start":325,"line_end":325,"column_start":1,"column_end":78}},{"value":"/ [std::marker::Sync]: https://doc.rust-lang.org/std/marker/trait.Sync.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18893,"byte_end":18970,"line_start":326,"line_end":326,"column_start":1,"column_end":78}},{"value":"/ [hashmap::HashMap]: ./hashmap/struct.HashMap.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":18971,"byte_end":19024,"line_start":327,"line_end":327,"column_start":1,"column_end":54}},{"value":"/ [hashset::HashSet]: ./hashset/struct.HashSet.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19025,"byte_end":19078,"line_start":328,"line_end":328,"column_start":1,"column_end":54}},{"value":"/ [ordmap::OrdMap]: ./ordmap/struct.OrdMap.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19079,"byte_end":19128,"line_start":329,"line_end":329,"column_start":1,"column_end":50}},{"value":"/ [ordset::OrdSet]: ./ordset/struct.OrdSet.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19129,"byte_end":19178,"line_start":330,"line_end":330,"column_start":1,"column_end":50}},{"value":"/ [vector::Vector]: ./vector/enum.Vector.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19179,"byte_end":19226,"line_start":331,"line_end":331,"column_start":1,"column_end":48}},{"value":"/ [vector::Vector::push_back]: ./vector/enum.Vector.html#method.push_back","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19227,"byte_end":19302,"line_start":332,"line_end":332,"column_start":1,"column_end":76}},{"value":"/ [rrb-tree]: https://infoscience.epfl.ch/record/213452/files/rrbvector.pdf","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19303,"byte_end":19380,"line_start":333,"line_end":333,"column_start":1,"column_end":78}},{"value":"/ [hamt]: https://en.wikipedia.org/wiki/Hash_array_mapped_trie","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19381,"byte_end":19445,"line_start":334,"line_end":334,"column_start":1,"column_end":65}},{"value":"/ [b-tree]: https://en.wikipedia.org/wiki/B-tree","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19446,"byte_end":19496,"line_start":335,"line_end":335,"column_start":1,"column_end":51}},{"value":"/ [cons-list]: https://en.wikipedia.org/wiki/Cons#Lists","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19497,"byte_end":19554,"line_start":336,"line_end":336,"column_start":1,"column_end":58}},{"value":"forbid(rust_2018_idioms)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19556,"byte_end":19584,"line_start":338,"line_end":338,"column_start":1,"column_end":29}},{"value":"deny(unsafe_code, nonstandard_style)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19585,"byte_end":19625,"line_start":339,"line_end":339,"column_start":1,"column_end":41}},{"value":"warn(unreachable_pub, missing_docs)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":19626,"byte_end":19665,"line_start":340,"line_end":340,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":31},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":25971,"byte_end":25981,"line_start":22,"line_end":22,"column_start":11,"column_end":21},"name":"BTreeValue","qualname":"::nodes::btree::BTreeValue","value":"BTreeValue","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":32},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":25993,"byte_end":25996,"line_start":23,"line_end":23,"column_start":10,"column_end":13},"name":"Key","qualname":"::nodes::btree::BTreeValue::Key","value":"type Key;","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":26005,"byte_end":26011,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"ptr_eq","qualname":"::nodes::btree::BTreeValue::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":26049,"byte_end":26059,"line_start":25,"line_end":25,"column_start":8,"column_end":18},"name":"search_key","qualname":"::nodes::btree::BTreeValue::search_key","value":"pub fn search_key<BK: ?Sized>(&[Self], &BK) -> Result<usize, usize> where\nBK: Ord, Self: Sized, Self::Key: Borrow<BK>","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":26209,"byte_end":26221,"line_start":30,"line_end":30,"column_start":8,"column_end":20},"name":"search_value","qualname":"::nodes::btree::BTreeValue::search_value","value":"pub fn search_value(&[Self], &Self) -> Result<usize, usize> where Self: Sized","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":26314,"byte_end":26322,"line_start":33,"line_end":33,"column_start":8,"column_end":16},"name":"cmp_keys","qualname":"::nodes::btree::BTreeValue::cmp_keys","value":"pub fn cmp_keys<BK: ?Sized>(&Self, &BK) -> Ordering where BK: Ord,\nSelf::Key: Borrow<BK>","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":26432,"byte_end":26442,"line_start":37,"line_end":37,"column_start":8,"column_end":18},"name":"cmp_values","qualname":"::nodes::btree::BTreeValue::cmp_values","value":"pub fn cmp_values(&Self, &Self) -> Ordering","parent":{"krate":0,"index":31},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":171},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":57436,"byte_end":57440,"line_start":911,"line_end":911,"column_start":12,"column_end":16},"name":"Iter","qualname":"::nodes::btree::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"decl_id":null,"docs":" An iterator over an ordered set.\n","sig":null,"attributes":[{"value":"/ An iterator over an ordered set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":57388,"byte_end":57424,"line_start":910,"line_end":910,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":204},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":64078,"byte_end":64091,"line_start":1099,"line_end":1099,"column_start":12,"column_end":25},"name":"ConsumingIter","qualname":"::nodes::btree::ConsumingIter","value":"ConsumingIter {  }","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210}],"decl_id":null,"docs":" A consuming iterator over an ordered set.\n","sig":null,"attributes":[{"value":"/ A consuming iterator over an ordered set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":64021,"byte_end":64066,"line_start":1098,"line_end":1098,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":229},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68166,"byte_end":68174,"line_start":1224,"line_end":1224,"column_start":12,"column_end":20},"name":"DiffIter","qualname":"::nodes::btree::DiffIter","value":"DiffIter {  }","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"decl_id":null,"docs":" An iterator over the differences between two ordered sets.\n","sig":null,"attributes":[{"value":"/ An iterator over the differences between two ordered sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68092,"byte_end":68154,"line_start":1223,"line_end":1223,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2771},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68427,"byte_end":68430,"line_start":1233,"line_end":1233,"column_start":5,"column_end":8},"name":"Add","qualname":"::nodes::btree::DiffItem::Add","value":"DiffItem::Add(&'a A)","parent":{"krate":0,"index":2768},"children":[],"decl_id":null,"docs":" This value has been added to the new set.\n","sig":null,"attributes":[{"value":"/ This value has been added to the new set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68377,"byte_end":68422,"line_start":1232,"line_end":1232,"column_start":5,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":2774},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68501,"byte_end":68507,"line_start":1235,"line_end":1235,"column_start":5,"column_end":11},"name":"Update","qualname":"::nodes::btree::DiffItem::Update","value":"DiffItem::Update { old, new }","parent":{"krate":0,"index":2768},"children":[],"decl_id":null,"docs":" This value has been changed between the two sets.\n","sig":null,"attributes":[{"value":"/ This value has been changed between the two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68443,"byte_end":68496,"line_start":1234,"line_end":1234,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2777},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68669,"byte_end":68675,"line_start":1242,"line_end":1242,"column_start":5,"column_end":11},"name":"Remove","qualname":"::nodes::btree::DiffItem::Remove","value":"DiffItem::Remove(&'a A)","parent":{"krate":0,"index":2768},"children":[],"decl_id":null,"docs":" This value has been removed from the new set.\n","sig":null,"attributes":[{"value":"/ This value has been removed from the new set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68615,"byte_end":68664,"line_start":1241,"line_end":1241,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":2768},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68355,"byte_end":68363,"line_start":1231,"line_end":1231,"column_start":10,"column_end":18},"name":"DiffItem","qualname":"::nodes::btree::DiffItem","value":"pub enum DiffItem<'a, A> {\n\n    /// This value has been added to the new set.\n    Add(&'a A),\n\n    /// This value has been changed between the two sets.\n    Update {\n        /// The old value.\n        old: &'a A,\n        /// The new value.\n        new: &'a A,\n    },\n\n    /// This value has been removed from the new set.\n    Remove(&'a A),\n}","parent":null,"children":[{"krate":0,"index":2771},{"krate":0,"index":2774},{"krate":0,"index":2777}],"decl_id":null,"docs":" A description of a difference between two ordered sets.\n","sig":null,"attributes":[{"value":"/ A description of a difference between two ordered sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68261,"byte_end":68320,"line_start":1229,"line_end":1229,"column_start":1,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":294},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":74105,"byte_end":74114,"line_start":36,"line_end":36,"column_start":11,"column_end":20},"name":"HashValue","qualname":"::nodes::hamt::HashValue","value":"HashValue","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":295},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":74126,"byte_end":74129,"line_start":37,"line_end":37,"column_start":10,"column_end":13},"name":"Key","qualname":"::nodes::hamt::HashValue::Key","value":"type Key: Eq;","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":74143,"byte_end":74154,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"extract_key","qualname":"::nodes::hamt::HashValue::extract_key","value":"pub fn extract_key(&Self) -> &Self::Key","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":74184,"byte_end":74190,"line_start":40,"line_end":40,"column_start":8,"column_end":14},"name":"ptr_eq","qualname":"::nodes::hamt::HashValue::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":{"krate":0,"index":294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":618},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::ord::map","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":3123},{"krate":0,"index":624},{"krate":0,"index":3125},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":3131},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":655},{"krate":0,"index":2833},{"krate":0,"index":2838},{"krate":0,"index":2844},{"krate":0,"index":2848},{"krate":0,"index":668},{"krate":0,"index":674},{"krate":0,"index":683},{"krate":0,"index":724},{"krate":0,"index":817},{"krate":0,"index":827},{"krate":0,"index":839},{"krate":0,"index":845},{"krate":0,"index":856},{"krate":0,"index":862},{"krate":0,"index":869},{"krate":0,"index":873},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":884},{"krate":0,"index":888},{"krate":0,"index":893},{"krate":0,"index":897},{"krate":0,"index":903},{"krate":0,"index":908},{"krate":0,"index":914},{"krate":0,"index":921},{"krate":0,"index":928},{"krate":0,"index":934},{"krate":0,"index":938},{"krate":0,"index":942},{"krate":0,"index":948},{"krate":0,"index":952},{"krate":0,"index":955},{"krate":0,"index":960},{"krate":0,"index":967},{"krate":0,"index":972},{"krate":0,"index":976},{"krate":0,"index":981},{"krate":0,"index":988},{"krate":0,"index":993},{"krate":0,"index":997},{"krate":0,"index":1004},{"krate":0,"index":1011},{"krate":0,"index":1017},{"krate":0,"index":1021},{"krate":0,"index":1031},{"krate":0,"index":1041},{"krate":0,"index":1047},{"krate":0,"index":1057},{"krate":0,"index":1063},{"krate":0,"index":1073},{"krate":0,"index":1079},{"krate":0,"index":1089},{"krate":0,"index":1094}],"decl_id":null,"docs":" An ordered map.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/mod.rs","byte_start":143977,"byte_end":143989,"line_start":5,"line_end":5,"column_start":1,"column_end":13}},{"value":"/ An ordered map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144233,"byte_end":144252,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144253,"byte_end":144256,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ An immutable ordered map implemented as a [B-tree] [1].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144257,"byte_end":144316,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144317,"byte_end":144320,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Most operations on this type of map are O(log n). A","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144321,"byte_end":144376,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`][hashmap::HashMap] is usually a better choice for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144377,"byte_end":144441,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"/ performance, but the `OrdMap` has the advantage of only requiring","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144442,"byte_end":144511,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ an [`Ord`][std::cmp::Ord] constraint on the key, and of being","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144512,"byte_end":144577,"line_start":12,"line_end":12,"column_start":1,"column_end":66}},{"value":"/ ordered, so that keys always come out from lowest to highest,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144578,"byte_end":144643,"line_start":13,"line_end":13,"column_start":1,"column_end":66}},{"value":"/ where a [`HashMap`][hashmap::HashMap] has no guaranteed ordering.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144644,"byte_end":144713,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144714,"byte_end":144717,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/B-tree","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144718,"byte_end":144763,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/ [hashmap::HashMap]: ../hashmap/struct.HashMap.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144764,"byte_end":144818,"line_start":17,"line_end":17,"column_start":1,"column_end":55}},{"value":"/ [std::cmp::Ord]: https://doc.rust-lang.org/std/cmp/trait.Ord.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":144819,"byte_end":144888,"line_start":18,"line_end":18,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":2833},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148098,"byte_end":148108,"line_start":149,"line_end":149,"column_start":11,"column_end":21},"name":"OrdMapPool","qualname":"::ord::map::OrdMapPool","value":"","parent":null,"children":[],"decl_id":null,"docs":" A memory pool for the appropriate node type.\n","sig":null,"attributes":[{"value":"/ A memory pool for the appropriate node type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/util.rs","byte_start":142848,"byte_end":142896,"line_start":116,"line_end":116,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":668},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148747,"byte_end":148753,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"OrdMap","qualname":"::ord::map::OrdMap","value":"OrdMap {  }","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673}],"decl_id":null,"docs":" An ordered map.","sig":null,"attributes":[{"value":"/ An ordered map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148132,"byte_end":148151,"line_start":151,"line_end":151,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148152,"byte_end":148155,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ An immutable ordered map implemented as a B-tree.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148156,"byte_end":148209,"line_start":153,"line_end":153,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148210,"byte_end":148213,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ Most operations on this type of map are O(log n). A","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148214,"byte_end":148269,"line_start":155,"line_end":155,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`][hashmap::HashMap] is usually a better choice for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148270,"byte_end":148334,"line_start":156,"line_end":156,"column_start":1,"column_end":65}},{"value":"/ performance, but the `OrdMap` has the advantage of only requiring","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148335,"byte_end":148404,"line_start":157,"line_end":157,"column_start":1,"column_end":70}},{"value":"/ an [`Ord`][std::cmp::Ord] constraint on the key, and of being","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148405,"byte_end":148470,"line_start":158,"line_end":158,"column_start":1,"column_end":66}},{"value":"/ ordered, so that keys always come out from lowest to highest,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148471,"byte_end":148536,"line_start":159,"line_end":159,"column_start":1,"column_end":66}},{"value":"/ where a [`HashMap`][hashmap::HashMap] has no guaranteed ordering.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148537,"byte_end":148606,"line_start":160,"line_end":160,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148607,"byte_end":148610,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ [hashmap::HashMap]: ../hashmap/struct.HashMap.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148611,"byte_end":148665,"line_start":162,"line_end":162,"column_start":1,"column_end":55}},{"value":"/ [std::cmp::Ord]: https://doc.rust-lang.org/std/cmp/trait.Ord.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148666,"byte_end":148735,"line_start":163,"line_end":163,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148928,"byte_end":148931,"line_start":173,"line_end":173,"column_start":12,"column_end":15},"name":"new","qualname":"<OrdMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty map.\n","sig":null,"attributes":[{"value":"/ Construct an empty map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148873,"byte_end":148900,"line_start":171,"line_end":171,"column_start":5,"column_end":32}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148905,"byte_end":148916,"line_start":172,"line_end":172,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149796,"byte_end":149800,"line_start":210,"line_end":210,"column_start":12,"column_end":16},"name":"unit","qualname":"<OrdMap<K, V>>::unit","value":"pub fn unit(K, V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a map with a single mapping.","sig":null,"attributes":[{"value":"/ Construct a map with a single mapping.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149440,"byte_end":149482,"line_start":195,"line_end":195,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149487,"byte_end":149490,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149495,"byte_end":149509,"line_start":197,"line_end":197,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149514,"byte_end":149517,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149522,"byte_end":149529,"line_start":199,"line_end":199,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149534,"byte_end":149569,"line_start":200,"line_end":200,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149574,"byte_end":149603,"line_start":201,"line_end":201,"column_start":5,"column_end":34}},{"value":"/ let map = OrdMap::unit(123, \"onetwothree\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149608,"byte_end":149655,"line_start":202,"line_end":202,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149660,"byte_end":149675,"line_start":203,"line_end":203,"column_start":5,"column_end":20}},{"value":"/   map.get(&123),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149680,"byte_end":149700,"line_start":204,"line_end":204,"column_start":5,"column_end":25}},{"value":"/   Some(&\"onetwothree\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149705,"byte_end":149731,"line_start":205,"line_end":205,"column_start":5,"column_end":31}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149736,"byte_end":149742,"line_start":206,"line_end":206,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149747,"byte_end":149754,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149759,"byte_end":149768,"line_start":208,"line_end":208,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":149773,"byte_end":149784,"line_start":209,"line_end":209,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150409,"byte_end":150417,"line_start":238,"line_end":238,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<OrdMap<K, V>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether a map is empty.","sig":null,"attributes":[{"value":"/ Test whether a map is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150034,"byte_end":150066,"line_start":220,"line_end":220,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150071,"byte_end":150074,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150079,"byte_end":150093,"line_start":222,"line_end":222,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150098,"byte_end":150101,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150106,"byte_end":150120,"line_start":224,"line_end":224,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150125,"byte_end":150128,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150133,"byte_end":150140,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150145,"byte_end":150180,"line_start":227,"line_end":227,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150185,"byte_end":150214,"line_start":228,"line_end":228,"column_start":5,"column_end":34}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150219,"byte_end":150231,"line_start":229,"line_end":229,"column_start":5,"column_end":17}},{"value":"/   !ordmap!{1 => 2}.is_empty()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150236,"byte_end":150269,"line_start":230,"line_end":230,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150274,"byte_end":150280,"line_start":231,"line_end":231,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150285,"byte_end":150297,"line_start":232,"line_end":232,"column_start":5,"column_end":17}},{"value":"/   OrdMap::<i32, i32>::new().is_empty()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150302,"byte_end":150344,"line_start":233,"line_end":233,"column_start":5,"column_end":47}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150349,"byte_end":150355,"line_start":234,"line_end":234,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150360,"byte_end":150367,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150372,"byte_end":150381,"line_start":236,"line_end":236,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150386,"byte_end":150397,"line_start":237,"line_end":237,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150846,"byte_end":150852,"line_start":251,"line_end":251,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<OrdMap<K, V>>::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether two maps refer to the same content in memory.","sig":null,"attributes":[{"value":"/ Test whether two maps refer to the same content in memory.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150470,"byte_end":150532,"line_start":242,"line_end":242,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150537,"byte_end":150540,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This is true if the two sides are references to the same map,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150545,"byte_end":150610,"line_start":244,"line_end":244,"column_start":5,"column_end":70}},{"value":"/ or if the two maps refer to the same root node.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150615,"byte_end":150666,"line_start":245,"line_end":245,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150671,"byte_end":150674,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This would return true if you're comparing a map to itself, or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150679,"byte_end":150745,"line_start":247,"line_end":247,"column_start":5,"column_end":71}},{"value":"/ if you're comparing a map to a fresh clone of itself.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150750,"byte_end":150807,"line_start":248,"line_end":248,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150812,"byte_end":150815,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150820,"byte_end":150834,"line_start":250,"line_end":250,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151306,"byte_end":151309,"line_start":272,"line_end":272,"column_start":12,"column_end":15},"name":"len","qualname":"<OrdMap<K, V>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the size of a map.","sig":null,"attributes":[{"value":"/ Get the size of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":150973,"byte_end":150999,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151004,"byte_end":151007,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151012,"byte_end":151026,"line_start":257,"line_end":257,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151031,"byte_end":151034,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151039,"byte_end":151053,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151058,"byte_end":151061,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151066,"byte_end":151073,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151078,"byte_end":151113,"line_start":262,"line_end":262,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151118,"byte_end":151147,"line_start":263,"line_end":263,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(3, ordmap!{","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151152,"byte_end":151178,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/   1 => 11,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151183,"byte_end":151197,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/   2 => 22,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151202,"byte_end":151216,"line_start":266,"line_end":266,"column_start":5,"column_end":19}},{"value":"/   3 => 33","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151221,"byte_end":151234,"line_start":267,"line_end":267,"column_start":5,"column_end":18}},{"value":"/ }.len());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151239,"byte_end":151252,"line_start":268,"line_end":268,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151257,"byte_end":151264,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151269,"byte_end":151278,"line_start":270,"line_end":270,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151283,"byte_end":151294,"line_start":271,"line_end":271,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152080,"byte_end":152085,"line_start":301,"line_end":301,"column_start":12,"column_end":17},"name":"clear","qualname":"<OrdMap<K, V>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Discard all elements from the map.","sig":null,"attributes":[{"value":"/ Discard all elements from the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151655,"byte_end":151693,"line_start":285,"line_end":285,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151698,"byte_end":151701,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This leaves you with an empty map, and all elements that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151706,"byte_end":151766,"line_start":287,"line_end":287,"column_start":5,"column_end":65}},{"value":"/ were previously inside it are dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151771,"byte_end":151813,"line_start":288,"line_end":288,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151818,"byte_end":151821,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151826,"byte_end":151840,"line_start":290,"line_end":290,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151845,"byte_end":151848,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151853,"byte_end":151867,"line_start":292,"line_end":292,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151872,"byte_end":151875,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151880,"byte_end":151887,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151892,"byte_end":151927,"line_start":295,"line_end":295,"column_start":5,"column_end":40}},{"value":"/ # use im::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151932,"byte_end":151953,"line_start":296,"line_end":296,"column_start":5,"column_end":26}},{"value":"/ let mut map = ordmap![1=>1, 2=>2, 3=>3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":151958,"byte_end":152002,"line_start":297,"line_end":297,"column_start":5,"column_end":49}},{"value":"/ map.clear();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152007,"byte_end":152023,"line_start":298,"line_end":298,"column_start":5,"column_end":21}},{"value":"/ assert!(map.is_empty());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152028,"byte_end":152056,"line_start":299,"line_end":299,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152061,"byte_end":152068,"line_start":300,"line_end":300,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152692,"byte_end":152699,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"name":"get_max","qualname":"<OrdMap<K, V>>::get_max","value":"pub fn get_max(&Self) -> Option<&(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the largest key in a map, along with its value. If the map\n is empty, return `None`.","sig":null,"attributes":[{"value":"/ Get the largest key in a map, along with its value. If the map","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152279,"byte_end":152345,"line_start":313,"line_end":313,"column_start":5,"column_end":71}},{"value":"/ is empty, return `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152350,"byte_end":152378,"line_start":314,"line_end":314,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152383,"byte_end":152386,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152391,"byte_end":152409,"line_start":316,"line_end":316,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152414,"byte_end":152417,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152422,"byte_end":152436,"line_start":318,"line_end":318,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152441,"byte_end":152444,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152449,"byte_end":152456,"line_start":320,"line_end":320,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152461,"byte_end":152496,"line_start":321,"line_end":321,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152501,"byte_end":152530,"line_start":322,"line_end":322,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(Some(&(3, 33)), ordmap!{","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152535,"byte_end":152574,"line_start":323,"line_end":323,"column_start":5,"column_end":44}},{"value":"/   1 => 11,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152579,"byte_end":152593,"line_start":324,"line_end":324,"column_start":5,"column_end":19}},{"value":"/   2 => 22,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152598,"byte_end":152612,"line_start":325,"line_end":325,"column_start":5,"column_end":19}},{"value":"/   3 => 33","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152617,"byte_end":152630,"line_start":326,"line_end":326,"column_start":5,"column_end":18}},{"value":"/ }.get_max());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152635,"byte_end":152652,"line_start":327,"line_end":327,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152657,"byte_end":152664,"line_start":328,"line_end":328,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152669,"byte_end":152680,"line_start":329,"line_end":329,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153177,"byte_end":153184,"line_start":351,"line_end":351,"column_start":12,"column_end":19},"name":"get_min","qualname":"<OrdMap<K, V>>::get_min","value":"pub fn get_min(&Self) -> Option<&(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the smallest key in a map, along with its value. If the\n map is empty, return `None`.","sig":null,"attributes":[{"value":"/ Get the smallest key in a map, along with its value. If the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152763,"byte_end":152826,"line_start":334,"line_end":334,"column_start":5,"column_end":68}},{"value":"/ map is empty, return `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152831,"byte_end":152863,"line_start":335,"line_end":335,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152868,"byte_end":152871,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152876,"byte_end":152894,"line_start":337,"line_end":337,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152899,"byte_end":152902,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152907,"byte_end":152921,"line_start":339,"line_end":339,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152926,"byte_end":152929,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152934,"byte_end":152941,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152946,"byte_end":152981,"line_start":342,"line_end":342,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152986,"byte_end":153015,"line_start":343,"line_end":343,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(Some(&(1, 11)), ordmap!{","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153020,"byte_end":153059,"line_start":344,"line_end":344,"column_start":5,"column_end":44}},{"value":"/   1 => 11,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153064,"byte_end":153078,"line_start":345,"line_end":345,"column_start":5,"column_end":19}},{"value":"/   2 => 22,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153083,"byte_end":153097,"line_start":346,"line_end":346,"column_start":5,"column_end":19}},{"value":"/   3 => 33","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153102,"byte_end":153115,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/ }.get_min());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153120,"byte_end":153137,"line_start":348,"line_end":348,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153142,"byte_end":153149,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153154,"byte_end":153165,"line_start":350,"line_end":350,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153330,"byte_end":153334,"line_start":357,"line_end":357,"column_start":12,"column_end":16},"name":"iter","qualname":"<OrdMap<K, V>>::iter","value":"pub fn iter(&Self) -> Iter<, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the key/value pairs of a map.\n","sig":null,"attributes":[{"value":"/ Get an iterator over the key/value pairs of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153248,"byte_end":153302,"line_start":355,"line_end":355,"column_start":5,"column_end":59}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153307,"byte_end":153318,"line_start":356,"line_end":356,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153543,"byte_end":153548,"line_start":365,"line_end":365,"column_start":12,"column_end":17},"name":"range","qualname":"<OrdMap<K, V>>::range","value":"pub fn range<R, BK: ?Sized>(&Self, R) -> RangedIter<, (K, V)> where\nR: RangeBounds<BK>, K: Borrow<BK>, BK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over a range of key/value pairs.\n","sig":null,"attributes":[{"value":"/ Create an iterator over a range of key/value pairs.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153460,"byte_end":153515,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153520,"byte_end":153531,"line_start":364,"line_end":364,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153823,"byte_end":153827,"line_start":376,"line_end":376,"column_start":12,"column_end":16},"name":"keys","qualname":"<OrdMap<K, V>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over a map's keys.\n","sig":null,"attributes":[{"value":"/ Get an iterator over a map's keys.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153757,"byte_end":153795,"line_start":374,"line_end":374,"column_start":5,"column_end":43}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153800,"byte_end":153811,"line_start":375,"line_end":375,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153967,"byte_end":153973,"line_start":382,"line_end":382,"column_start":12,"column_end":18},"name":"values","qualname":"<OrdMap<K, V>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over a map's values.\n","sig":null,"attributes":[{"value":"/ Get an iterator over a map's values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153899,"byte_end":153939,"line_start":380,"line_end":380,"column_start":5,"column_end":45}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":153944,"byte_end":153955,"line_start":381,"line_end":381,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154651,"byte_end":154655,"line_start":398,"line_end":398,"column_start":12,"column_end":16},"name":"diff","qualname":"<OrdMap<K, V>>::diff","value":"pub fn diff<'a>(&'a Self, &'a Self) -> DiffIter","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the differences between this map and\n another, i.e. the set of entries to add, update, or remove to\n this map in order to make it equal to the other map.","sig":null,"attributes":[{"value":"/ Get an iterator over the differences between this map and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154049,"byte_end":154110,"line_start":386,"line_end":386,"column_start":5,"column_end":66}},{"value":"/ another, i.e. the set of entries to add, update, or remove to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154115,"byte_end":154180,"line_start":387,"line_end":387,"column_start":5,"column_end":70}},{"value":"/ this map in order to make it equal to the other map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154185,"byte_end":154241,"line_start":388,"line_end":388,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154246,"byte_end":154249,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ This function will avoid visiting nodes which are shared","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154254,"byte_end":154314,"line_start":390,"line_end":390,"column_start":5,"column_end":65}},{"value":"/ between the two maps, meaning that even very large maps can be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154319,"byte_end":154385,"line_start":391,"line_end":391,"column_start":5,"column_end":71}},{"value":"/ compared quickly if most of their structure is shared.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154390,"byte_end":154448,"line_start":392,"line_end":392,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154453,"byte_end":154456,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ Time: O(n) (where n is the number of unique elements across","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154461,"byte_end":154524,"line_start":394,"line_end":394,"column_start":5,"column_end":68}},{"value":"/ the two maps, minus the number of elements belonging to nodes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154529,"byte_end":154594,"line_start":395,"line_end":395,"column_start":5,"column_end":70}},{"value":"/ shared between them)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154599,"byte_end":154623,"line_start":396,"line_end":396,"column_start":5,"column_end":29}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154628,"byte_end":154639,"line_start":397,"line_end":397,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155122,"byte_end":155125,"line_start":418,"line_end":418,"column_start":12,"column_end":15},"name":"get","qualname":"<OrdMap<K, V>>::get","value":"pub fn get<BK: ?Sized>(&Self, &BK) -> Option<&V> where BK: Ord, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get the value for a key from a map.","sig":null,"attributes":[{"value":"/ Get the value for a key from a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154771,"byte_end":154810,"line_start":402,"line_end":402,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154815,"byte_end":154818,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154823,"byte_end":154841,"line_start":404,"line_end":404,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154846,"byte_end":154849,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154854,"byte_end":154868,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154873,"byte_end":154876,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154881,"byte_end":154888,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154893,"byte_end":154928,"line_start":409,"line_end":409,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154933,"byte_end":154962,"line_start":410,"line_end":410,"column_start":5,"column_end":34}},{"value":"/ let map = ordmap!{123 => \"lol\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":154967,"byte_end":155003,"line_start":411,"line_end":411,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155008,"byte_end":155023,"line_start":412,"line_end":412,"column_start":5,"column_end":20}},{"value":"/   map.get(&123),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155028,"byte_end":155048,"line_start":413,"line_end":413,"column_start":5,"column_end":25}},{"value":"/   Some(&\"lol\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155053,"byte_end":155071,"line_start":414,"line_end":414,"column_start":5,"column_end":23}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155076,"byte_end":155082,"line_start":415,"line_end":415,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155087,"byte_end":155094,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155099,"byte_end":155110,"line_start":417,"line_end":417,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155661,"byte_end":155674,"line_start":442,"line_end":442,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<OrdMap<K, V>>::get_key_value","value":"pub fn get_key_value<BK: ?Sized>(&Self, &BK) -> Option<(&K, &V)> where\nBK: Ord, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get the key/value pair for a key from a map.","sig":null,"attributes":[{"value":"/ Get the key/value pair for a key from a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155283,"byte_end":155331,"line_start":426,"line_end":426,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155336,"byte_end":155339,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155344,"byte_end":155362,"line_start":428,"line_end":428,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155367,"byte_end":155370,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155375,"byte_end":155389,"line_start":430,"line_end":430,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155394,"byte_end":155397,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155402,"byte_end":155409,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155414,"byte_end":155449,"line_start":433,"line_end":433,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155454,"byte_end":155483,"line_start":434,"line_end":434,"column_start":5,"column_end":34}},{"value":"/ let map = ordmap!{123 => \"lol\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155488,"byte_end":155524,"line_start":435,"line_end":435,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155529,"byte_end":155544,"line_start":436,"line_end":436,"column_start":5,"column_end":20}},{"value":"/   map.get_key_value(&123),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155549,"byte_end":155579,"line_start":437,"line_end":437,"column_start":5,"column_end":35}},{"value":"/   Some((&123, &\"lol\"))","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155584,"byte_end":155610,"line_start":438,"line_end":438,"column_start":5,"column_end":31}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155615,"byte_end":155621,"line_start":439,"line_end":439,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155626,"byte_end":155633,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155638,"byte_end":155649,"line_start":441,"line_end":441,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156457,"byte_end":156465,"line_start":467,"line_end":467,"column_start":12,"column_end":20},"name":"get_prev","qualname":"<OrdMap<K, V>>::get_prev","value":"pub fn get_prev<BK: ?Sized>(&Self, &BK) -> Option<(&K, &V)> where BK: Ord,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get the closest smaller entry in a map to a given key\n as a mutable reference.","sig":null,"attributes":[{"value":"/ Get the closest smaller entry in a map to a given key","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155852,"byte_end":155909,"line_start":450,"line_end":450,"column_start":5,"column_end":62}},{"value":"/ as a mutable reference.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155914,"byte_end":155941,"line_start":451,"line_end":451,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155946,"byte_end":155949,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ If the map contains the given key, this is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":155954,"byte_end":156010,"line_start":453,"line_end":453,"column_start":5,"column_end":61}},{"value":"/ Otherwise, the closest key in the map smaller than the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156015,"byte_end":156073,"line_start":454,"line_end":454,"column_start":5,"column_end":63}},{"value":"/ given value is returned. If the smallest key in the map","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156078,"byte_end":156137,"line_start":455,"line_end":455,"column_start":5,"column_end":64}},{"value":"/ is larger than the given key, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156142,"byte_end":156195,"line_start":456,"line_end":456,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156200,"byte_end":156203,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156208,"byte_end":156222,"line_start":458,"line_end":458,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156227,"byte_end":156230,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156235,"byte_end":156246,"line_start":460,"line_end":460,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156251,"byte_end":156286,"line_start":461,"line_end":461,"column_start":5,"column_end":40}},{"value":"/ # use im::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156291,"byte_end":156312,"line_start":462,"line_end":462,"column_start":5,"column_end":26}},{"value":"/ let map = ordmap![1 => 1, 3 => 3, 5 => 5];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156317,"byte_end":156363,"line_start":463,"line_end":463,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(Some((&3, &3)), map.get_prev(&4));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156368,"byte_end":156417,"line_start":464,"line_end":464,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156422,"byte_end":156429,"line_start":465,"line_end":465,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156434,"byte_end":156445,"line_start":466,"line_end":466,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157250,"byte_end":157258,"line_start":492,"line_end":492,"column_start":12,"column_end":20},"name":"get_next","qualname":"<OrdMap<K, V>>::get_next","value":"pub fn get_next<BK: ?Sized>(&Self, &BK) -> Option<(&K, &V)> where BK: Ord,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get the closest larger entry in a map to a given key\n as a mutable reference.","sig":null,"attributes":[{"value":"/ Get the closest larger entry in a map to a given key","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156639,"byte_end":156695,"line_start":475,"line_end":475,"column_start":5,"column_end":61}},{"value":"/ as a mutable reference.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156700,"byte_end":156727,"line_start":476,"line_end":476,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156732,"byte_end":156735,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ If the set contains the given value, this is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156740,"byte_end":156798,"line_start":478,"line_end":478,"column_start":5,"column_end":63}},{"value":"/ Otherwise, the closest value in the set larger than the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156803,"byte_end":156862,"line_start":479,"line_end":479,"column_start":5,"column_end":64}},{"value":"/ given value is returned. If the largest value in the set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156867,"byte_end":156927,"line_start":480,"line_end":480,"column_start":5,"column_end":65}},{"value":"/ is smaller than the given value, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156932,"byte_end":156988,"line_start":481,"line_end":481,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":156993,"byte_end":156996,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157001,"byte_end":157015,"line_start":483,"line_end":483,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157020,"byte_end":157023,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157028,"byte_end":157039,"line_start":485,"line_end":485,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157044,"byte_end":157079,"line_start":486,"line_end":486,"column_start":5,"column_end":40}},{"value":"/ # use im::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157084,"byte_end":157105,"line_start":487,"line_end":487,"column_start":5,"column_end":26}},{"value":"/ let map = ordmap![1 => 1, 3 => 3, 5 => 5];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157110,"byte_end":157156,"line_start":488,"line_end":488,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(Some((&5, &5)), map.get_next(&4));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157161,"byte_end":157210,"line_start":489,"line_end":489,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157215,"byte_end":157222,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157227,"byte_end":157238,"line_start":491,"line_end":491,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157832,"byte_end":157844,"line_start":518,"line_end":518,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<OrdMap<K, V>>::contains_key","value":"pub fn contains_key<BK: ?Sized>(&Self, &BK) -> bool where BK: Ord,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Test for the presence of a key in a map.","sig":null,"attributes":[{"value":"/ Test for the presence of a key in a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157432,"byte_end":157476,"line_start":500,"line_end":500,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157481,"byte_end":157484,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157489,"byte_end":157507,"line_start":502,"line_end":502,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157512,"byte_end":157515,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157520,"byte_end":157534,"line_start":504,"line_end":504,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157539,"byte_end":157542,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157547,"byte_end":157554,"line_start":506,"line_end":506,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157559,"byte_end":157594,"line_start":507,"line_end":507,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157599,"byte_end":157628,"line_start":508,"line_end":508,"column_start":5,"column_end":34}},{"value":"/ let map = ordmap!{123 => \"lol\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157633,"byte_end":157669,"line_start":509,"line_end":509,"column_start":5,"column_end":41}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157674,"byte_end":157686,"line_start":510,"line_end":510,"column_start":5,"column_end":17}},{"value":"/   map.contains_key(&123)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157691,"byte_end":157719,"line_start":511,"line_end":511,"column_start":5,"column_end":33}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157724,"byte_end":157730,"line_start":512,"line_end":512,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157735,"byte_end":157747,"line_start":513,"line_end":513,"column_start":5,"column_end":17}},{"value":"/   !map.contains_key(&321)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157752,"byte_end":157781,"line_start":514,"line_end":514,"column_start":5,"column_end":34}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157786,"byte_end":157792,"line_start":515,"line_end":515,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157797,"byte_end":157804,"line_start":516,"line_end":516,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157809,"byte_end":157820,"line_start":517,"line_end":517,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158269,"byte_end":158281,"line_start":534,"line_end":534,"column_start":12,"column_end":24},"name":"is_submap_by","qualname":"<OrdMap<K, V>>::is_submap_by","value":"pub fn is_submap_by<B, RM, F>(&Self, RM, F) -> bool where F: FnMut(&V, &B) ->\nbool, RM: Borrow<OrdMap<K, B>>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a map is a submap of another map, meaning that\n all keys in our map must also be in the other map, with the\n same values.","sig":null,"attributes":[{"value":"/ Test whether a map is a submap of another map, meaning that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":157978,"byte_end":158041,"line_start":526,"line_end":526,"column_start":5,"column_end":68}},{"value":"/ all keys in our map must also be in the other map, with the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158046,"byte_end":158109,"line_start":527,"line_end":527,"column_start":5,"column_end":68}},{"value":"/ same values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158114,"byte_end":158130,"line_start":528,"line_end":528,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158135,"byte_end":158138,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ Use the provided function to decide whether values are equal.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158143,"byte_end":158208,"line_start":530,"line_end":530,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158213,"byte_end":158216,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158221,"byte_end":158241,"line_start":532,"line_end":532,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158246,"byte_end":158257,"line_start":533,"line_end":533,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158915,"byte_end":158934,"line_start":552,"line_end":552,"column_start":12,"column_end":31},"name":"is_proper_submap_by","qualname":"<OrdMap<K, V>>::is_proper_submap_by","value":"pub fn is_proper_submap_by<B, RM, F>(&Self, RM, F) -> bool where\nF: FnMut(&V, &B) -> bool, RM: Borrow<OrdMap<K, B>>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a map is a proper submap of another map, meaning\n that all keys in our map must also be in the other map, with\n the same values. To be a proper submap, ours must also contain\n fewer keys than the other map.","sig":null,"attributes":[{"value":"/ Test whether a map is a proper submap of another map, meaning","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158532,"byte_end":158597,"line_start":543,"line_end":543,"column_start":5,"column_end":70}},{"value":"/ that all keys in our map must also be in the other map, with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158602,"byte_end":158666,"line_start":544,"line_end":544,"column_start":5,"column_end":69}},{"value":"/ the same values. To be a proper submap, ours must also contain","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158671,"byte_end":158737,"line_start":545,"line_end":545,"column_start":5,"column_end":71}},{"value":"/ fewer keys than the other map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158742,"byte_end":158776,"line_start":546,"line_end":546,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158781,"byte_end":158784,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ Use the provided function to decide whether values are equal.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158789,"byte_end":158854,"line_start":548,"line_end":548,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158859,"byte_end":158862,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158867,"byte_end":158887,"line_start":550,"line_end":550,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":158892,"byte_end":158903,"line_start":551,"line_end":551,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159631,"byte_end":159640,"line_start":576,"line_end":576,"column_start":12,"column_end":21},"name":"is_submap","qualname":"<OrdMap<K, V>>::is_submap","value":"pub fn is_submap<RM>(&Self, RM) -> bool where V: PartialEq, RM: Borrow<Self>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a map is a submap of another map, meaning that\n all keys in our map must also be in the other map, with the\n same values.","sig":null,"attributes":[{"value":"/ Test whether a map is a submap of another map, meaning that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159150,"byte_end":159213,"line_start":560,"line_end":560,"column_start":5,"column_end":68}},{"value":"/ all keys in our map must also be in the other map, with the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159218,"byte_end":159281,"line_start":561,"line_end":561,"column_start":5,"column_end":68}},{"value":"/ same values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159286,"byte_end":159302,"line_start":562,"line_end":562,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159307,"byte_end":159310,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159315,"byte_end":159335,"line_start":564,"line_end":564,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159340,"byte_end":159343,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159348,"byte_end":159362,"line_start":566,"line_end":566,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159367,"byte_end":159370,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159375,"byte_end":159382,"line_start":568,"line_end":568,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159387,"byte_end":159422,"line_start":569,"line_end":569,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159427,"byte_end":159456,"line_start":570,"line_end":570,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159461,"byte_end":159500,"line_start":571,"line_end":571,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{1 => 1, 2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159505,"byte_end":159552,"line_start":572,"line_end":572,"column_start":5,"column_end":52}},{"value":"/ assert!(map1.is_submap(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159557,"byte_end":159591,"line_start":573,"line_end":573,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159596,"byte_end":159603,"line_start":574,"line_end":574,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159608,"byte_end":159619,"line_start":575,"line_end":575,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160526,"byte_end":160542,"line_start":605,"line_end":605,"column_start":12,"column_end":28},"name":"is_proper_submap","qualname":"<OrdMap<K, V>>::is_proper_submap","value":"pub fn is_proper_submap<RM>(&Self, RM) -> bool where V: PartialEq,\nRM: Borrow<Self>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a map is a proper submap of another map, meaning\n that all keys in our map must also be in the other map, with\n the same values. To be a proper submap, ours must also contain\n fewer keys than the other map.","sig":null,"attributes":[{"value":"/ Test whether a map is a proper submap of another map, meaning","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159803,"byte_end":159868,"line_start":584,"line_end":584,"column_start":5,"column_end":70}},{"value":"/ that all keys in our map must also be in the other map, with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159873,"byte_end":159937,"line_start":585,"line_end":585,"column_start":5,"column_end":69}},{"value":"/ the same values. To be a proper submap, ours must also contain","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":159942,"byte_end":160008,"line_start":586,"line_end":586,"column_start":5,"column_end":71}},{"value":"/ fewer keys than the other map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160013,"byte_end":160047,"line_start":587,"line_end":587,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160052,"byte_end":160055,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160060,"byte_end":160080,"line_start":589,"line_end":589,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160085,"byte_end":160088,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160093,"byte_end":160107,"line_start":591,"line_end":591,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160112,"byte_end":160115,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160120,"byte_end":160127,"line_start":593,"line_end":593,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160132,"byte_end":160167,"line_start":594,"line_end":594,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160172,"byte_end":160201,"line_start":595,"line_end":595,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160206,"byte_end":160245,"line_start":596,"line_end":596,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{1 => 1, 2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160250,"byte_end":160297,"line_start":597,"line_end":597,"column_start":5,"column_end":52}},{"value":"/ assert!(map1.is_proper_submap(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160302,"byte_end":160343,"line_start":598,"line_end":598,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160348,"byte_end":160351,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ let map3 = ordmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160356,"byte_end":160395,"line_start":600,"line_end":600,"column_start":5,"column_end":44}},{"value":"/ let map4 = ordmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160400,"byte_end":160439,"line_start":601,"line_end":601,"column_start":5,"column_end":44}},{"value":"/ assert!(!map3.is_proper_submap(map4));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160444,"byte_end":160486,"line_start":602,"line_end":602,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160491,"byte_end":160498,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160503,"byte_end":160514,"line_start":604,"line_end":604,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161245,"byte_end":161252,"line_start":638,"line_end":638,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OrdMap<K, V>>::get_mut","value":"pub fn get_mut<BK: ?Sized>(&mut Self, &BK) -> Option<&mut V> where BK: Ord,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the value for a key from a map.","sig":null,"attributes":[{"value":"/ Get a mutable reference to the value for a key from a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160780,"byte_end":160842,"line_start":619,"line_end":619,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160847,"byte_end":160850,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160855,"byte_end":160873,"line_start":621,"line_end":621,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160878,"byte_end":160881,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160886,"byte_end":160900,"line_start":623,"line_end":623,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160905,"byte_end":160908,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160913,"byte_end":160920,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160925,"byte_end":160960,"line_start":626,"line_end":626,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160965,"byte_end":160994,"line_start":627,"line_end":627,"column_start":5,"column_end":34}},{"value":"/ let mut map = ordmap!{123 => \"lol\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160999,"byte_end":161039,"line_start":628,"line_end":628,"column_start":5,"column_end":45}},{"value":"/ if let Some(value) = map.get_mut(&123) {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161044,"byte_end":161088,"line_start":629,"line_end":629,"column_start":5,"column_end":49}},{"value":"/     *value = \"omg\";","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161093,"byte_end":161116,"line_start":630,"line_end":630,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161121,"byte_end":161126,"line_start":631,"line_end":631,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161131,"byte_end":161146,"line_start":632,"line_end":632,"column_start":5,"column_end":20}},{"value":"/   map.get(&123),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161151,"byte_end":161171,"line_start":633,"line_end":633,"column_start":5,"column_end":25}},{"value":"/   Some(&\"omg\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161176,"byte_end":161194,"line_start":634,"line_end":634,"column_start":5,"column_end":23}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161199,"byte_end":161205,"line_start":635,"line_end":635,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161210,"byte_end":161217,"line_start":636,"line_end":636,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161222,"byte_end":161233,"line_start":637,"line_end":637,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162205,"byte_end":162217,"line_start":667,"line_end":667,"column_start":12,"column_end":24},"name":"get_prev_mut","qualname":"<OrdMap<K, V>>::get_prev_mut","value":"pub fn get_prev_mut<BK: ?Sized>(&mut Self, &BK) -> Option<(&K, &mut V)> where\nBK: Ord, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get the closest smaller entry in a map to a given key\n as a mutable reference.","sig":null,"attributes":[{"value":"/ Get the closest smaller entry in a map to a given key","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161499,"byte_end":161556,"line_start":647,"line_end":647,"column_start":5,"column_end":62}},{"value":"/ as a mutable reference.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161561,"byte_end":161588,"line_start":648,"line_end":648,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161593,"byte_end":161596,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ If the map contains the given key, this is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161601,"byte_end":161657,"line_start":650,"line_end":650,"column_start":5,"column_end":61}},{"value":"/ Otherwise, the closest key in the map smaller than the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161662,"byte_end":161720,"line_start":651,"line_end":651,"column_start":5,"column_end":63}},{"value":"/ given value is returned. If the smallest key in the map","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161725,"byte_end":161784,"line_start":652,"line_end":652,"column_start":5,"column_end":64}},{"value":"/ is larger than the given key, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161789,"byte_end":161842,"line_start":653,"line_end":653,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161847,"byte_end":161850,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161855,"byte_end":161869,"line_start":655,"line_end":655,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161874,"byte_end":161877,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161882,"byte_end":161893,"line_start":657,"line_end":657,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161898,"byte_end":161933,"line_start":658,"line_end":658,"column_start":5,"column_end":40}},{"value":"/ # use im::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161938,"byte_end":161959,"line_start":659,"line_end":659,"column_start":5,"column_end":26}},{"value":"/ let mut map = ordmap![1 => 1, 3 => 3, 5 => 5];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":161964,"byte_end":162014,"line_start":660,"line_end":660,"column_start":5,"column_end":55}},{"value":"/ if let Some((key, value)) = map.get_prev_mut(&4) {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162019,"byte_end":162073,"line_start":661,"line_end":661,"column_start":5,"column_end":59}},{"value":"/     *value = 4;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162078,"byte_end":162097,"line_start":662,"line_end":662,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162102,"byte_end":162107,"line_start":663,"line_end":663,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(ordmap![1 => 1, 3 => 4, 5 => 5], map);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162112,"byte_end":162165,"line_start":664,"line_end":664,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162170,"byte_end":162177,"line_start":665,"line_end":665,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162182,"byte_end":162193,"line_start":666,"line_end":666,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163222,"byte_end":163234,"line_start":698,"line_end":698,"column_start":12,"column_end":24},"name":"get_next_mut","qualname":"<OrdMap<K, V>>::get_next_mut","value":"pub fn get_next_mut<BK: ?Sized>(&mut Self, &BK) -> Option<(&K, &mut V)> where\nBK: Ord, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get the closest larger entry in a map to a given key\n as a mutable reference.","sig":null,"attributes":[{"value":"/ Get the closest larger entry in a map to a given key","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162510,"byte_end":162566,"line_start":678,"line_end":678,"column_start":5,"column_end":61}},{"value":"/ as a mutable reference.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162571,"byte_end":162598,"line_start":679,"line_end":679,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162603,"byte_end":162606,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ If the set contains the given value, this is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162611,"byte_end":162669,"line_start":681,"line_end":681,"column_start":5,"column_end":63}},{"value":"/ Otherwise, the closest value in the set larger than the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162674,"byte_end":162733,"line_start":682,"line_end":682,"column_start":5,"column_end":64}},{"value":"/ given value is returned. If the largest value in the set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162738,"byte_end":162798,"line_start":683,"line_end":683,"column_start":5,"column_end":65}},{"value":"/ is smaller than the given value, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162803,"byte_end":162859,"line_start":684,"line_end":684,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162864,"byte_end":162867,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162872,"byte_end":162886,"line_start":686,"line_end":686,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162891,"byte_end":162894,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162899,"byte_end":162910,"line_start":688,"line_end":688,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162915,"byte_end":162950,"line_start":689,"line_end":689,"column_start":5,"column_end":40}},{"value":"/ # use im::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162955,"byte_end":162976,"line_start":690,"line_end":690,"column_start":5,"column_end":26}},{"value":"/ let mut map = ordmap![1 => 1, 3 => 3, 5 => 5];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":162981,"byte_end":163031,"line_start":691,"line_end":691,"column_start":5,"column_end":55}},{"value":"/ if let Some((key, value)) = map.get_next_mut(&4) {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163036,"byte_end":163090,"line_start":692,"line_end":692,"column_start":5,"column_end":59}},{"value":"/     *value = 4;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163095,"byte_end":163114,"line_start":693,"line_end":693,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163119,"byte_end":163124,"line_start":694,"line_end":694,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(ordmap![1 => 1, 3 => 3, 5 => 4], map);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163129,"byte_end":163182,"line_start":695,"line_end":695,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163187,"byte_end":163194,"line_start":696,"line_end":696,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163199,"byte_end":163210,"line_start":697,"line_end":697,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164280,"byte_end":164286,"line_start":736,"line_end":736,"column_start":12,"column_end":18},"name":"insert","qualname":"<OrdMap<K, V>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key/value mapping into a map.","sig":null,"attributes":[{"value":"/ Insert a key/value mapping into a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163527,"byte_end":163569,"line_start":709,"line_end":709,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163574,"byte_end":163577,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ This is a copy-on-write operation, so that the parts of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163582,"byte_end":163645,"line_start":711,"line_end":711,"column_start":5,"column_end":68}},{"value":"/ map's structure which are shared with other maps will be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163650,"byte_end":163710,"line_start":712,"line_end":712,"column_start":5,"column_end":65}},{"value":"/ safely copied before mutating.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163715,"byte_end":163749,"line_start":713,"line_end":713,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163754,"byte_end":163757,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163762,"byte_end":163821,"line_start":715,"line_end":715,"column_start":5,"column_end":64}},{"value":"/ previous value is overwritten.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163826,"byte_end":163860,"line_start":716,"line_end":716,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163865,"byte_end":163868,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163873,"byte_end":163891,"line_start":718,"line_end":718,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163896,"byte_end":163899,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163904,"byte_end":163918,"line_start":720,"line_end":720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163923,"byte_end":163926,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163931,"byte_end":163938,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163943,"byte_end":163978,"line_start":723,"line_end":723,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":163983,"byte_end":164012,"line_start":724,"line_end":724,"column_start":5,"column_end":34}},{"value":"/ let mut map = ordmap!{};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164017,"byte_end":164045,"line_start":725,"line_end":725,"column_start":5,"column_end":33}},{"value":"/ map.insert(123, \"123\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164050,"byte_end":164077,"line_start":726,"line_end":726,"column_start":5,"column_end":32}},{"value":"/ map.insert(456, \"456\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164082,"byte_end":164109,"line_start":727,"line_end":727,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164114,"byte_end":164129,"line_start":728,"line_end":728,"column_start":5,"column_end":20}},{"value":"/   map,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164134,"byte_end":164144,"line_start":729,"line_end":729,"column_start":5,"column_end":15}},{"value":"/   ordmap!{123 => \"123\", 456 => \"456\"}","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164149,"byte_end":164190,"line_start":730,"line_end":730,"column_start":5,"column_end":46}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164195,"byte_end":164201,"line_start":731,"line_end":731,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164206,"byte_end":164213,"line_start":732,"line_end":732,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164218,"byte_end":164221,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ [insert]: #method.insert","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164226,"byte_end":164254,"line_start":734,"line_end":734,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164259,"byte_end":164268,"line_start":735,"line_end":735,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165417,"byte_end":165423,"line_start":773,"line_end":773,"column_start":12,"column_end":18},"name":"remove","qualname":"<OrdMap<K, V>>::remove","value":"pub fn remove<BK: ?Sized>(&mut Self, &BK) -> Option<V> where BK: Ord,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Remove a key/value mapping from a map if it exists.","sig":null,"attributes":[{"value":"/ Remove a key/value mapping from a map if it exists.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":164987,"byte_end":165042,"line_start":756,"line_end":756,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165047,"byte_end":165050,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165055,"byte_end":165073,"line_start":758,"line_end":758,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165078,"byte_end":165081,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165086,"byte_end":165100,"line_start":760,"line_end":760,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165105,"byte_end":165108,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165113,"byte_end":165120,"line_start":762,"line_end":762,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165125,"byte_end":165160,"line_start":763,"line_end":763,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165165,"byte_end":165194,"line_start":764,"line_end":764,"column_start":5,"column_end":34}},{"value":"/ let mut map = ordmap!{123 => \"123\", 456 => \"456\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165199,"byte_end":165253,"line_start":765,"line_end":765,"column_start":5,"column_end":59}},{"value":"/ map.remove(&123);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165258,"byte_end":165279,"line_start":766,"line_end":766,"column_start":5,"column_end":26}},{"value":"/ map.remove(&456);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165284,"byte_end":165305,"line_start":767,"line_end":767,"column_start":5,"column_end":26}},{"value":"/ assert!(map.is_empty());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165310,"byte_end":165338,"line_start":768,"line_end":768,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165343,"byte_end":165350,"line_start":769,"line_end":769,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165355,"byte_end":165358,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ [remove]: #method.remove","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165363,"byte_end":165391,"line_start":771,"line_end":771,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165396,"byte_end":165405,"line_start":772,"line_end":772,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165726,"byte_end":165741,"line_start":785,"line_end":785,"column_start":12,"column_end":27},"name":"remove_with_key","qualname":"<OrdMap<K, V>>::remove_with_key","value":"pub fn remove_with_key<BK: ?Sized>(&mut Self, &BK) -> Option<(K, V)> where\nBK: Ord, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Remove a key/value pair from a map, if it exists, and return\n the removed key and value.","sig":null,"attributes":[{"value":"/ Remove a key/value pair from a map, if it exists, and return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165584,"byte_end":165648,"line_start":781,"line_end":781,"column_start":5,"column_end":69}},{"value":"/ the removed key and value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165653,"byte_end":165683,"line_start":782,"line_end":782,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165688,"byte_end":165691,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":165696,"byte_end":165714,"line_start":784,"line_end":784,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166907,"byte_end":166913,"line_start":826,"line_end":826,"column_start":12,"column_end":18},"name":"update","qualname":"<OrdMap<K, V>>::update","value":"pub fn update(&Self, K, V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new map by inserting a key/value mapping into a\n map.","sig":null,"attributes":[{"value":"/ Construct a new map by inserting a key/value mapping into a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166402,"byte_end":166465,"line_start":806,"line_end":806,"column_start":5,"column_end":68}},{"value":"/ map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166470,"byte_end":166478,"line_start":807,"line_end":807,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166483,"byte_end":166486,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166491,"byte_end":166550,"line_start":809,"line_end":809,"column_start":5,"column_end":64}},{"value":"/ previous value is overwritten.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166555,"byte_end":166589,"line_start":810,"line_end":810,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166594,"byte_end":166597,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166602,"byte_end":166620,"line_start":812,"line_end":812,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166625,"byte_end":166628,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166633,"byte_end":166647,"line_start":814,"line_end":814,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166652,"byte_end":166655,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166660,"byte_end":166667,"line_start":816,"line_end":816,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166672,"byte_end":166707,"line_start":817,"line_end":817,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166712,"byte_end":166741,"line_start":818,"line_end":818,"column_start":5,"column_end":34}},{"value":"/ let map = ordmap!{};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166746,"byte_end":166770,"line_start":819,"line_end":819,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166775,"byte_end":166790,"line_start":820,"line_end":820,"column_start":5,"column_end":20}},{"value":"/   map.update(123, \"123\"),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166795,"byte_end":166824,"line_start":821,"line_end":821,"column_start":5,"column_end":34}},{"value":"/   ordmap!{123 => \"123\"}","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166829,"byte_end":166856,"line_start":822,"line_end":822,"column_start":5,"column_end":32}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166861,"byte_end":166867,"line_start":823,"line_end":823,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166872,"byte_end":166879,"line_start":824,"line_end":824,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":166884,"byte_end":166895,"line_start":825,"line_end":825,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167367,"byte_end":167378,"line_start":841,"line_end":841,"column_start":12,"column_end":23},"name":"update_with","qualname":"<OrdMap<K, V>>::update_with","value":"pub fn update_with<F>(Self, K, V, F) -> Self where F: FnOnce(V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct a new map by inserting a key/value mapping into a\n map.","sig":null,"attributes":[{"value":"/ Construct a new map by inserting a key/value mapping into a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167040,"byte_end":167103,"line_start":832,"line_end":832,"column_start":5,"column_end":68}},{"value":"/ map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167108,"byte_end":167116,"line_start":833,"line_end":833,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167121,"byte_end":167124,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, we call","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167129,"byte_end":167192,"line_start":835,"line_end":835,"column_start":5,"column_end":68}},{"value":"/ the provided function with the old value and the new value,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167197,"byte_end":167260,"line_start":836,"line_end":836,"column_start":5,"column_end":68}},{"value":"/ and insert the result as the new value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167265,"byte_end":167308,"line_start":837,"line_end":837,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167313,"byte_end":167316,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167321,"byte_end":167339,"line_start":839,"line_end":839,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167344,"byte_end":167355,"line_start":840,"line_end":840,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167865,"byte_end":167880,"line_start":857,"line_end":857,"column_start":12,"column_end":27},"name":"update_with_key","qualname":"<OrdMap<K, V>>::update_with_key","value":"pub fn update_with_key<F>(Self, K, V, F) -> Self where F: FnOnce(&K, V, V) ->\nV","parent":null,"children":[],"decl_id":null,"docs":" Construct a new map by inserting a key/value mapping into a\n map.","sig":null,"attributes":[{"value":"/ Construct a new map by inserting a key/value mapping into a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167529,"byte_end":167592,"line_start":848,"line_end":848,"column_start":5,"column_end":68}},{"value":"/ map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167597,"byte_end":167605,"line_start":849,"line_end":849,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167610,"byte_end":167613,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, we call","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167618,"byte_end":167681,"line_start":851,"line_end":851,"column_start":5,"column_end":68}},{"value":"/ the provided function with the key, the old value and the new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167686,"byte_end":167751,"line_start":852,"line_end":852,"column_start":5,"column_end":70}},{"value":"/ value, and insert the result as the new value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167756,"byte_end":167806,"line_start":853,"line_end":853,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167811,"byte_end":167814,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167819,"byte_end":167837,"line_start":855,"line_end":855,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":167842,"byte_end":167853,"line_start":856,"line_end":856,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168597,"byte_end":168619,"line_start":880,"line_end":880,"column_start":12,"column_end":34},"name":"update_lookup_with_key","qualname":"<OrdMap<K, V>>::update_lookup_with_key","value":"pub fn update_lookup_with_key<F>(Self, K, V, F) -> (Option<V>, Self) where\nF: FnOnce(&K, &V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct a new map by inserting a key/value mapping into a\n map, returning the old value for the key as well as the new\n map.","sig":null,"attributes":[{"value":"/ Construct a new map by inserting a key/value mapping into a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168193,"byte_end":168256,"line_start":870,"line_end":870,"column_start":5,"column_end":68}},{"value":"/ map, returning the old value for the key as well as the new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168261,"byte_end":168324,"line_start":871,"line_end":871,"column_start":5,"column_end":68}},{"value":"/ map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168329,"byte_end":168337,"line_start":872,"line_end":872,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168342,"byte_end":168345,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, we call","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168350,"byte_end":168413,"line_start":874,"line_end":874,"column_start":5,"column_end":68}},{"value":"/ the provided function with the key, the old value and the new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168418,"byte_end":168483,"line_start":875,"line_end":875,"column_start":5,"column_end":70}},{"value":"/ value, and insert the result as the new value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168488,"byte_end":168538,"line_start":876,"line_end":876,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168543,"byte_end":168546,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168551,"byte_end":168569,"line_start":878,"line_end":878,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168574,"byte_end":168585,"line_start":879,"line_end":879,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169511,"byte_end":169516,"line_start":906,"line_end":906,"column_start":12,"column_end":17},"name":"alter","qualname":"<OrdMap<K, V>>::alter","value":"pub fn alter<F>(&Self, F, K) -> Self where F: FnOnce(Option<V>) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Update the value for a given key by calling a function with\n the current value and overwriting it with the function's\n return value.","sig":null,"attributes":[{"value":"/ Update the value for a given key by calling a function with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":168967,"byte_end":169030,"line_start":893,"line_end":893,"column_start":5,"column_end":68}},{"value":"/ the current value and overwriting it with the function's","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169035,"byte_end":169095,"line_start":894,"line_end":894,"column_start":5,"column_end":65}},{"value":"/ return value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169100,"byte_end":169117,"line_start":895,"line_end":895,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169122,"byte_end":169125,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ The function gets an [`Option<V>`][std::option::Option] and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169130,"byte_end":169193,"line_start":897,"line_end":897,"column_start":5,"column_end":68}},{"value":"/ returns the same, so that it can decide to delete a mapping","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169198,"byte_end":169261,"line_start":898,"line_end":898,"column_start":5,"column_end":68}},{"value":"/ instead of updating the value, and decide what to do if the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169266,"byte_end":169329,"line_start":899,"line_end":899,"column_start":5,"column_end":68}},{"value":"/ key isn't in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169334,"byte_end":169359,"line_start":900,"line_end":900,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169364,"byte_end":169367,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169372,"byte_end":169390,"line_start":902,"line_end":902,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169395,"byte_end":169398,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ [std::option::Option]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169403,"byte_end":169483,"line_start":904,"line_end":904,"column_start":5,"column_end":85}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169488,"byte_end":169499,"line_start":905,"line_end":905,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170047,"byte_end":170054,"line_start":923,"line_end":923,"column_start":12,"column_end":19},"name":"without","qualname":"<OrdMap<K, V>>::without","value":"pub fn without<BK: ?Sized>(&Self, &BK) -> Self where BK: Ord, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Remove a key/value pair from a map, if it exists.","sig":null,"attributes":[{"value":"/ Remove a key/value pair from a map, if it exists.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169935,"byte_end":169988,"line_start":919,"line_end":919,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":169993,"byte_end":169996,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170001,"byte_end":170019,"line_start":921,"line_end":921,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170024,"byte_end":170035,"line_start":922,"line_end":922,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170434,"byte_end":170441,"line_start":938,"line_end":938,"column_start":12,"column_end":19},"name":"extract","qualname":"<OrdMap<K, V>>::extract","value":"pub fn extract<BK: ?Sized>(&Self, &BK) -> Option<(V, Self)> where BK: Ord,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Remove a key/value pair from a map, if it exists, and return\n the removed value as well as the updated list.","sig":null,"attributes":[{"value":"/ Remove a key/value pair from a map, if it exists, and return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170256,"byte_end":170320,"line_start":933,"line_end":933,"column_start":5,"column_end":69}},{"value":"/ the removed value as well as the updated list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170325,"byte_end":170375,"line_start":934,"line_end":934,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170380,"byte_end":170383,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170388,"byte_end":170406,"line_start":936,"line_end":936,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170411,"byte_end":170422,"line_start":937,"line_end":937,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170801,"byte_end":170817,"line_start":951,"line_end":951,"column_start":12,"column_end":28},"name":"extract_with_key","qualname":"<OrdMap<K, V>>::extract_with_key","value":"pub fn extract_with_key<BK: ?Sized>(&Self, &BK) -> Option<(K, V, Self)> where\nBK: Ord, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Remove a key/value pair from a map, if it exists, and return\n the removed key and value as well as the updated list.","sig":null,"attributes":[{"value":"/ Remove a key/value pair from a map, if it exists, and return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170615,"byte_end":170679,"line_start":946,"line_end":946,"column_start":5,"column_end":69}},{"value":"/ the removed key and value as well as the updated list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170684,"byte_end":170742,"line_start":947,"line_end":947,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170747,"byte_end":170750,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170755,"byte_end":170773,"line_start":949,"line_end":949,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":170778,"byte_end":170789,"line_start":950,"line_end":950,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171571,"byte_end":171576,"line_start":978,"line_end":978,"column_start":12,"column_end":17},"name":"union","qualname":"<OrdMap<K, V>>::union","value":"pub fn union(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of two maps, keeping the values in the\n current map when keys exist in both maps.","sig":null,"attributes":[{"value":"/ Construct the union of two maps, keeping the values in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171059,"byte_end":171121,"line_start":961,"line_end":961,"column_start":5,"column_end":67}},{"value":"/ current map when keys exist in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171126,"byte_end":171171,"line_start":962,"line_end":962,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171176,"byte_end":171179,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171184,"byte_end":171204,"line_start":964,"line_end":964,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171209,"byte_end":171212,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171217,"byte_end":171231,"line_start":966,"line_end":966,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171236,"byte_end":171239,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171244,"byte_end":171251,"line_start":968,"line_end":968,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171256,"byte_end":171291,"line_start":969,"line_end":969,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171296,"byte_end":171325,"line_start":970,"line_end":970,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171330,"byte_end":171369,"line_start":971,"line_end":971,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 2, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171374,"byte_end":171413,"line_start":972,"line_end":972,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{1 => 1, 2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171418,"byte_end":171469,"line_start":973,"line_end":973,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(expected, map1.union(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171474,"byte_end":171517,"line_start":974,"line_end":974,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171522,"byte_end":171529,"line_start":975,"line_end":975,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171534,"byte_end":171543,"line_start":976,"line_end":976,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171548,"byte_end":171559,"line_start":977,"line_end":977,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172190,"byte_end":172200,"line_start":996,"line_end":996,"column_start":12,"column_end":22},"name":"union_with","qualname":"<OrdMap<K, V>>::union_with","value":"pub fn union_with<F>(Self, Self, F) -> Self where F: FnMut(V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of two maps, using a function to decide\n what to do with the value when a key is in both maps.","sig":null,"attributes":[{"value":"/ Construct the union of two maps, using a function to decide","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171714,"byte_end":171777,"line_start":985,"line_end":985,"column_start":5,"column_end":68}},{"value":"/ what to do with the value when a key is in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171782,"byte_end":171839,"line_start":986,"line_end":986,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171844,"byte_end":171847,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ The function is called when a value exists in both maps, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171852,"byte_end":171916,"line_start":988,"line_end":988,"column_start":5,"column_end":69}},{"value":"/ receives the value from the current map as its first argument,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171921,"byte_end":171987,"line_start":989,"line_end":989,"column_start":5,"column_end":71}},{"value":"/ and the value from the other map as the second. It should","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":171992,"byte_end":172053,"line_start":990,"line_end":990,"column_start":5,"column_end":66}},{"value":"/ return the value to be inserted in the resulting map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172058,"byte_end":172115,"line_start":991,"line_end":991,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172120,"byte_end":172123,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172128,"byte_end":172148,"line_start":993,"line_end":993,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172153,"byte_end":172162,"line_start":994,"line_end":994,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172167,"byte_end":172178,"line_start":995,"line_end":995,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173281,"byte_end":173295,"line_start":1028,"line_end":1028,"column_start":12,"column_end":26},"name":"union_with_key","qualname":"<OrdMap<K, V>>::union_with_key","value":"pub fn union_with_key<F>(Self, Self, F) -> Self where F: FnMut(&K, V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of two maps, using a function to decide\n what to do with the value when a key is in both maps.","sig":null,"attributes":[{"value":"/ Construct the union of two maps, using a function to decide","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172355,"byte_end":172418,"line_start":1003,"line_end":1003,"column_start":5,"column_end":68}},{"value":"/ what to do with the value when a key is in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172423,"byte_end":172480,"line_start":1004,"line_end":1004,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172485,"byte_end":172488,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ The function is called when a value exists in both maps, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172493,"byte_end":172557,"line_start":1006,"line_end":1006,"column_start":5,"column_end":69}},{"value":"/ receives a reference to the key as its first argument, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172562,"byte_end":172624,"line_start":1007,"line_end":1007,"column_start":5,"column_end":67}},{"value":"/ value from the current map as the second argument, and the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172629,"byte_end":172691,"line_start":1008,"line_end":1008,"column_start":5,"column_end":67}},{"value":"/ value from the other map as the third argument. It should","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172696,"byte_end":172757,"line_start":1009,"line_end":1009,"column_start":5,"column_end":66}},{"value":"/ return the value to be inserted in the resulting map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172762,"byte_end":172819,"line_start":1010,"line_end":1010,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172824,"byte_end":172827,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172832,"byte_end":172852,"line_start":1012,"line_end":1012,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172857,"byte_end":172860,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172865,"byte_end":172879,"line_start":1014,"line_end":1014,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172884,"byte_end":172887,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172892,"byte_end":172899,"line_start":1016,"line_end":1016,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172904,"byte_end":172939,"line_start":1017,"line_end":1017,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172944,"byte_end":172973,"line_start":1018,"line_end":1018,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":172978,"byte_end":173017,"line_start":1019,"line_end":1019,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173022,"byte_end":173061,"line_start":1020,"line_end":1020,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{1 => 1, 2 => 2, 3 => 9};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173066,"byte_end":173117,"line_start":1021,"line_end":1021,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(expected, map1.union_with_key(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173122,"byte_end":173167,"line_start":1022,"line_end":1022,"column_start":5,"column_end":50}},{"value":"/     map2,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173172,"byte_end":173185,"line_start":1023,"line_end":1023,"column_start":5,"column_end":18}},{"value":"/     |key, left, right| left + right","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173190,"byte_end":173229,"line_start":1024,"line_end":1024,"column_start":5,"column_end":44}},{"value":"/ ));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173234,"byte_end":173241,"line_start":1025,"line_end":1025,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173246,"byte_end":173253,"line_start":1026,"line_end":1026,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173258,"byte_end":173269,"line_start":1027,"line_end":1027,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174316,"byte_end":174322,"line_start":1062,"line_end":1062,"column_start":12,"column_end":18},"name":"unions","qualname":"<OrdMap<K, V>>::unions","value":"pub fn unions<I>(I) -> Self where I: IntoIterator<Item = Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of a sequence of maps, selecting the value\n of the leftmost when a key appears in more than one map.","sig":null,"attributes":[{"value":"/ Construct the union of a sequence of maps, selecting the value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173791,"byte_end":173857,"line_start":1046,"line_end":1046,"column_start":5,"column_end":71}},{"value":"/ of the leftmost when a key appears in more than one map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173862,"byte_end":173922,"line_start":1047,"line_end":1047,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173927,"byte_end":173930,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173935,"byte_end":173955,"line_start":1049,"line_end":1049,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173960,"byte_end":173963,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173968,"byte_end":173982,"line_start":1051,"line_end":1051,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173987,"byte_end":173990,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":173995,"byte_end":174002,"line_start":1053,"line_end":1053,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174007,"byte_end":174042,"line_start":1054,"line_end":1054,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174047,"byte_end":174076,"line_start":1055,"line_end":1055,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174081,"byte_end":174120,"line_start":1056,"line_end":1056,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174125,"byte_end":174156,"line_start":1057,"line_end":1057,"column_start":5,"column_end":36}},{"value":"/ let expected = ordmap!{1 => 1, 2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174161,"byte_end":174212,"line_start":1058,"line_end":1058,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(expected, OrdMap::unions(vec![map1, map2]));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174217,"byte_end":174276,"line_start":1059,"line_end":1059,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174281,"byte_end":174288,"line_start":1060,"line_end":1060,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174293,"byte_end":174304,"line_start":1061,"line_end":1061,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174953,"byte_end":174964,"line_start":1080,"line_end":1080,"column_start":12,"column_end":23},"name":"unions_with","qualname":"<OrdMap<K, V>>::unions_with","value":"pub fn unions_with<I, F>(I, F) -> Self where I: IntoIterator<Item = Self>,\nF: Fn(V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of a sequence of maps, using a function to\n decide what to do with the value when a key is in more than\n one map.","sig":null,"attributes":[{"value":"/ Construct the union of a sequence of maps, using a function to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174462,"byte_end":174528,"line_start":1069,"line_end":1069,"column_start":5,"column_end":71}},{"value":"/ decide what to do with the value when a key is in more than","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174533,"byte_end":174596,"line_start":1070,"line_end":1070,"column_start":5,"column_end":68}},{"value":"/ one map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174601,"byte_end":174613,"line_start":1071,"line_end":1071,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174618,"byte_end":174621,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ The function is called when a value exists in multiple maps,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174626,"byte_end":174690,"line_start":1073,"line_end":1073,"column_start":5,"column_end":69}},{"value":"/ and receives the value from the current map as its first","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174695,"byte_end":174755,"line_start":1074,"line_end":1074,"column_start":5,"column_end":65}},{"value":"/ argument, and the value from the next map as the second. It","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174760,"byte_end":174823,"line_start":1075,"line_end":1075,"column_start":5,"column_end":68}},{"value":"/ should return the value to be inserted in the resulting map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174828,"byte_end":174892,"line_start":1076,"line_end":1076,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174897,"byte_end":174900,"line_start":1077,"line_end":1077,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174905,"byte_end":174925,"line_start":1078,"line_end":1078,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":174930,"byte_end":174941,"line_start":1079,"line_end":1079,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175721,"byte_end":175736,"line_start":1101,"line_end":1101,"column_start":12,"column_end":27},"name":"unions_with_key","qualname":"<OrdMap<K, V>>::unions_with_key","value":"pub fn unions_with_key<I, F>(I, F) -> Self where I: IntoIterator<Item = Self>,\nF: Fn(&K, V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of a sequence of maps, using a function to\n decide what to do with the value when a key is in more than\n one map.","sig":null,"attributes":[{"value":"/ Construct the union of a sequence of maps, using a function to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175167,"byte_end":175233,"line_start":1089,"line_end":1089,"column_start":5,"column_end":71}},{"value":"/ decide what to do with the value when a key is in more than","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175238,"byte_end":175301,"line_start":1090,"line_end":1090,"column_start":5,"column_end":68}},{"value":"/ one map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175306,"byte_end":175318,"line_start":1091,"line_end":1091,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175323,"byte_end":175326,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ The function is called when a value exists in multiple maps,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175331,"byte_end":175395,"line_start":1093,"line_end":1093,"column_start":5,"column_end":69}},{"value":"/ and receives a reference to the key as its first argument, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175400,"byte_end":175466,"line_start":1094,"line_end":1094,"column_start":5,"column_end":71}},{"value":"/ value from the current map as the second argument, and the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175471,"byte_end":175533,"line_start":1095,"line_end":1095,"column_start":5,"column_end":67}},{"value":"/ value from the next map as the third argument. It should","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175538,"byte_end":175598,"line_start":1096,"line_end":1096,"column_start":5,"column_end":65}},{"value":"/ return the value to be inserted in the resulting map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175603,"byte_end":175660,"line_start":1097,"line_end":1097,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175665,"byte_end":175668,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175673,"byte_end":175693,"line_start":1099,"line_end":1099,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175698,"byte_end":175709,"line_start":1100,"line_end":1100,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176625,"byte_end":176635,"line_start":1132,"line_end":1132,"column_start":12,"column_end":22},"name":"difference","qualname":"<OrdMap<K, V>>::difference","value":"pub fn difference(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by discarding keys\n which occur in both maps.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by discarding keys","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":175947,"byte_end":176021,"line_start":1110,"line_end":1110,"column_start":5,"column_end":79}},{"value":"/ which occur in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176026,"byte_end":176055,"line_start":1111,"line_end":1111,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176060,"byte_end":176063,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176068,"byte_end":176096,"line_start":1113,"line_end":1113,"column_start":5,"column_end":33}},{"value":"/ [`symmetric_difference`][symmetric_difference] method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176101,"byte_end":176159,"line_start":1114,"line_end":1114,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176164,"byte_end":176167,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176172,"byte_end":176192,"line_start":1116,"line_end":1116,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176197,"byte_end":176200,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176205,"byte_end":176219,"line_start":1118,"line_end":1118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176224,"byte_end":176227,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176232,"byte_end":176239,"line_start":1120,"line_end":1120,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176244,"byte_end":176279,"line_start":1121,"line_end":1121,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176284,"byte_end":176313,"line_start":1122,"line_end":1122,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176318,"byte_end":176357,"line_start":1123,"line_end":1123,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176362,"byte_end":176401,"line_start":1124,"line_end":1124,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176406,"byte_end":176449,"line_start":1125,"line_end":1125,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(expected, map1.difference(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176454,"byte_end":176502,"line_start":1126,"line_end":1126,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176507,"byte_end":176514,"line_start":1127,"line_end":1127,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176519,"byte_end":176522,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ [symmetric_difference]: #method.symmetric_difference","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176527,"byte_end":176583,"line_start":1129,"line_end":1129,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176588,"byte_end":176597,"line_start":1130,"line_end":1130,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176602,"byte_end":176613,"line_start":1131,"line_end":1131,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177232,"byte_end":177252,"line_start":1153,"line_end":1153,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<OrdMap<K, V>>::symmetric_difference","value":"pub fn symmetric_difference(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by discarding keys\n which occur in both maps.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by discarding keys","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176717,"byte_end":176791,"line_start":1136,"line_end":1136,"column_start":5,"column_end":79}},{"value":"/ which occur in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176796,"byte_end":176825,"line_start":1137,"line_end":1137,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176830,"byte_end":176833,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176838,"byte_end":176858,"line_start":1139,"line_end":1139,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176863,"byte_end":176866,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176871,"byte_end":176885,"line_start":1141,"line_end":1141,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176890,"byte_end":176893,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176898,"byte_end":176905,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176910,"byte_end":176945,"line_start":1144,"line_end":1144,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176950,"byte_end":176979,"line_start":1145,"line_end":1145,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":176984,"byte_end":177023,"line_start":1146,"line_end":1146,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177028,"byte_end":177067,"line_start":1147,"line_end":1147,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177072,"byte_end":177115,"line_start":1148,"line_end":1148,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(expected, map1.symmetric_difference(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177120,"byte_end":177178,"line_start":1149,"line_end":1149,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177183,"byte_end":177190,"line_start":1150,"line_end":1150,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177195,"byte_end":177204,"line_start":1151,"line_end":1151,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177209,"byte_end":177220,"line_start":1152,"line_end":1152,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177756,"byte_end":177771,"line_start":1168,"line_end":1168,"column_start":12,"column_end":27},"name":"difference_with","qualname":"<OrdMap<K, V>>::difference_with","value":"pub fn difference_with<F>(Self, Self, F) -> Self where F: FnMut(V, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by using a function\n to decide what to do if a key occurs in both.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by using a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177359,"byte_end":177434,"line_start":1157,"line_end":1157,"column_start":5,"column_end":80}},{"value":"/ to decide what to do if a key occurs in both.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177439,"byte_end":177488,"line_start":1158,"line_end":1158,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177493,"byte_end":177496,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177501,"byte_end":177529,"line_start":1160,"line_end":1160,"column_start":5,"column_end":33}},{"value":"/ [`symmetric_difference_with`][symmetric_difference_with] method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177534,"byte_end":177602,"line_start":1161,"line_end":1161,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177607,"byte_end":177610,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177615,"byte_end":177635,"line_start":1163,"line_end":1163,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177640,"byte_end":177643,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ [symmetric_difference_with]: #method.symmetric_difference_with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177648,"byte_end":177714,"line_start":1165,"line_end":1165,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177719,"byte_end":177728,"line_start":1166,"line_end":1166,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177733,"byte_end":177744,"line_start":1167,"line_end":1167,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178125,"byte_end":178150,"line_start":1181,"line_end":1181,"column_start":12,"column_end":37},"name":"symmetric_difference_with","qualname":"<OrdMap<K, V>>::symmetric_difference_with","value":"pub fn symmetric_difference_with<F>(Self, Self, F) -> Self where\nF: FnMut(V, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by using a function\n to decide what to do if a key occurs in both.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by using a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":177921,"byte_end":177996,"line_start":1175,"line_end":1175,"column_start":5,"column_end":80}},{"value":"/ to decide what to do if a key occurs in both.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178001,"byte_end":178050,"line_start":1176,"line_end":1176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178055,"byte_end":178058,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178063,"byte_end":178083,"line_start":1178,"line_end":1178,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178088,"byte_end":178097,"line_start":1179,"line_end":1179,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178102,"byte_end":178113,"line_start":1180,"line_end":1180,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179197,"byte_end":179216,"line_start":1213,"line_end":1213,"column_start":12,"column_end":31},"name":"difference_with_key","qualname":"<OrdMap<K, V>>::difference_with_key","value":"pub fn difference_with_key<F>(Self, Self, F) -> Self where F: FnMut(&K, V, V)\n-> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by using a function\n to decide what to do if a key occurs in both. The function\n receives the key as well as both values.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by using a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178324,"byte_end":178399,"line_start":1188,"line_end":1188,"column_start":5,"column_end":80}},{"value":"/ to decide what to do if a key occurs in both. The function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178404,"byte_end":178466,"line_start":1189,"line_end":1189,"column_start":5,"column_end":67}},{"value":"/ receives the key as well as both values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178471,"byte_end":178515,"line_start":1190,"line_end":1190,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178520,"byte_end":178523,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178528,"byte_end":178556,"line_start":1192,"line_end":1192,"column_start":5,"column_end":33}},{"value":"/ [`symmetric_difference_with_key`][symmetric_difference_with_key]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178561,"byte_end":178629,"line_start":1193,"line_end":1193,"column_start":5,"column_end":73}},{"value":"/ method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178634,"byte_end":178645,"line_start":1194,"line_end":1194,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178650,"byte_end":178653,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178658,"byte_end":178678,"line_start":1196,"line_end":1196,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178683,"byte_end":178686,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178691,"byte_end":178705,"line_start":1198,"line_end":1198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178710,"byte_end":178713,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178718,"byte_end":178725,"line_start":1200,"line_end":1200,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178730,"byte_end":178765,"line_start":1201,"line_end":1201,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178770,"byte_end":178799,"line_start":1202,"line_end":1202,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178804,"byte_end":178843,"line_start":1203,"line_end":1203,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178848,"byte_end":178887,"line_start":1204,"line_end":1204,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{1 => 1, 2 => 2, 3 => 9};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178892,"byte_end":178943,"line_start":1205,"line_end":1205,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(expected, map1.difference_with_key(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":178948,"byte_end":178998,"line_start":1206,"line_end":1206,"column_start":5,"column_end":55}},{"value":"/     map2,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179003,"byte_end":179016,"line_start":1207,"line_end":1207,"column_start":5,"column_end":18}},{"value":"/     |key, left, right| Some(left + right)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179021,"byte_end":179066,"line_start":1208,"line_end":1208,"column_start":5,"column_end":50}},{"value":"/ ));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179071,"byte_end":179078,"line_start":1209,"line_end":1209,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179083,"byte_end":179090,"line_start":1210,"line_end":1210,"column_start":5,"column_end":12}},{"value":"/ [symmetric_difference_with_key]: #method.symmetric_difference_with_key","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179095,"byte_end":179169,"line_start":1211,"line_end":1211,"column_start":5,"column_end":79}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179174,"byte_end":179185,"line_start":1212,"line_end":1212,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180048,"byte_end":180077,"line_start":1240,"line_end":1240,"column_start":12,"column_end":41},"name":"symmetric_difference_with_key","qualname":"<OrdMap<K, V>>::symmetric_difference_with_key","value":"pub fn symmetric_difference_with_key<F>(Self, Self, F) -> Self where\nF: FnMut(&K, V, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by using a function\n to decide what to do if a key occurs in both. The function\n receives the key as well as both values.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by using a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179374,"byte_end":179449,"line_start":1220,"line_end":1220,"column_start":5,"column_end":80}},{"value":"/ to decide what to do if a key occurs in both. The function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179454,"byte_end":179516,"line_start":1221,"line_end":1221,"column_start":5,"column_end":67}},{"value":"/ receives the key as well as both values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179521,"byte_end":179565,"line_start":1222,"line_end":1222,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179570,"byte_end":179573,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179578,"byte_end":179598,"line_start":1224,"line_end":1224,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179603,"byte_end":179606,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179611,"byte_end":179625,"line_start":1226,"line_end":1226,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179630,"byte_end":179633,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179638,"byte_end":179645,"line_start":1228,"line_end":1228,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179650,"byte_end":179685,"line_start":1229,"line_end":1229,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179690,"byte_end":179719,"line_start":1230,"line_end":1230,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179724,"byte_end":179763,"line_start":1231,"line_end":1231,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179768,"byte_end":179807,"line_start":1232,"line_end":1232,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{1 => 1, 2 => 2, 3 => 9};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179812,"byte_end":179863,"line_start":1233,"line_end":1233,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(expected, map1.symmetric_difference_with_key(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179868,"byte_end":179928,"line_start":1234,"line_end":1234,"column_start":5,"column_end":65}},{"value":"/     map2,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179933,"byte_end":179946,"line_start":1235,"line_end":1235,"column_start":5,"column_end":18}},{"value":"/     |key, left, right| Some(left + right)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":179951,"byte_end":179996,"line_start":1236,"line_end":1236,"column_start":5,"column_end":50}},{"value":"/ ));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180001,"byte_end":180008,"line_start":1237,"line_end":1237,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180013,"byte_end":180020,"line_start":1238,"line_end":1238,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180025,"byte_end":180036,"line_start":1239,"line_end":1239,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181205,"byte_end":181224,"line_start":1277,"line_end":1277,"column_start":12,"column_end":31},"name":"relative_complement","qualname":"<OrdMap<K, V>>::relative_complement","value":"pub fn relative_complement(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the relative complement between two maps by discarding keys\n which occur in `other`.","sig":null,"attributes":[{"value":"/ Construct the relative complement between two maps by discarding keys","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180665,"byte_end":180738,"line_start":1260,"line_end":1260,"column_start":5,"column_end":78}},{"value":"/ which occur in `other`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180743,"byte_end":180770,"line_start":1261,"line_end":1261,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180775,"byte_end":180778,"line_start":1262,"line_end":1262,"column_start":5,"column_end":8}},{"value":"/ Time: O(m log n) where m is the size of the other map","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180783,"byte_end":180840,"line_start":1263,"line_end":1263,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180845,"byte_end":180848,"line_start":1264,"line_end":1264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180853,"byte_end":180867,"line_start":1265,"line_end":1265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180872,"byte_end":180875,"line_start":1266,"line_end":1266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180880,"byte_end":180887,"line_start":1267,"line_end":1267,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180892,"byte_end":180927,"line_start":1268,"line_end":1268,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180932,"byte_end":180961,"line_start":1269,"line_end":1269,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":180966,"byte_end":181005,"line_start":1270,"line_end":1270,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181010,"byte_end":181049,"line_start":1271,"line_end":1271,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{1 => 1};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181054,"byte_end":181089,"line_start":1272,"line_end":1272,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(expected, map1.relative_complement(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181094,"byte_end":181151,"line_start":1273,"line_end":1273,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181156,"byte_end":181163,"line_start":1274,"line_end":1274,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181168,"byte_end":181177,"line_start":1275,"line_end":1275,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181182,"byte_end":181193,"line_start":1276,"line_end":1276,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181846,"byte_end":181858,"line_start":1301,"line_end":1301,"column_start":12,"column_end":24},"name":"intersection","qualname":"<OrdMap<K, V>>::intersection","value":"pub fn intersection(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the intersection of two maps, keeping the values\n from the current map.","sig":null,"attributes":[{"value":"/ Construct the intersection of two maps, keeping the values","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181363,"byte_end":181425,"line_start":1284,"line_end":1284,"column_start":5,"column_end":67}},{"value":"/ from the current map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181430,"byte_end":181455,"line_start":1285,"line_end":1285,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181460,"byte_end":181463,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181468,"byte_end":181488,"line_start":1287,"line_end":1287,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181493,"byte_end":181496,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181501,"byte_end":181515,"line_start":1289,"line_end":1289,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181520,"byte_end":181523,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181528,"byte_end":181535,"line_start":1291,"line_end":1291,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181540,"byte_end":181575,"line_start":1292,"line_end":1292,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181580,"byte_end":181609,"line_start":1293,"line_end":1293,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181614,"byte_end":181653,"line_start":1294,"line_end":1294,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 3, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181658,"byte_end":181697,"line_start":1295,"line_end":1295,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181702,"byte_end":181737,"line_start":1296,"line_end":1296,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(expected, map1.intersection(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181742,"byte_end":181792,"line_start":1297,"line_end":1297,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181797,"byte_end":181804,"line_start":1298,"line_end":1298,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181809,"byte_end":181818,"line_start":1299,"line_end":1299,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181823,"byte_end":181834,"line_start":1300,"line_end":1300,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182184,"byte_end":182201,"line_start":1312,"line_end":1312,"column_start":12,"column_end":29},"name":"intersection_with","qualname":"<OrdMap<K, V>>::intersection_with","value":"pub fn intersection_with<B, C, F>(Self, OrdMap<K, B>, F) -> OrdMap<K, C> where\nB: Clone, C: Clone, F: FnMut(V, B) -> C","parent":null,"children":[],"decl_id":null,"docs":" Construct the intersection of two maps, calling a function\n with both values for each key and using the result as the\n value for the key.","sig":null,"attributes":[{"value":"/ Construct the intersection of two maps, calling a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":181954,"byte_end":182016,"line_start":1305,"line_end":1305,"column_start":5,"column_end":67}},{"value":"/ with both values for each key and using the result as the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182021,"byte_end":182082,"line_start":1306,"line_end":1306,"column_start":5,"column_end":66}},{"value":"/ value for the key.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182087,"byte_end":182109,"line_start":1307,"line_end":1307,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182114,"byte_end":182117,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182122,"byte_end":182142,"line_start":1309,"line_end":1309,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182147,"byte_end":182156,"line_start":1310,"line_end":1310,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182161,"byte_end":182172,"line_start":1311,"line_end":1311,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183041,"byte_end":183062,"line_start":1341,"line_end":1341,"column_start":12,"column_end":33},"name":"intersection_with_key","qualname":"<OrdMap<K, V>>::intersection_with_key","value":"pub fn intersection_with_key<B, C, F>(Self, OrdMap<K, B>, F) -> OrdMap<K, C>\nwhere B: Clone, C: Clone, F: FnMut(&K, V, B) -> C","parent":null,"children":[],"decl_id":null,"docs":" Construct the intersection of two maps, calling a function\n with the key and both values for each key and using the result\n as the value for the key.","sig":null,"attributes":[{"value":"/ Construct the intersection of two maps, calling a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182421,"byte_end":182483,"line_start":1321,"line_end":1321,"column_start":5,"column_end":67}},{"value":"/ with the key and both values for each key and using the result","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182488,"byte_end":182554,"line_start":1322,"line_end":1322,"column_start":5,"column_end":71}},{"value":"/ as the value for the key.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182559,"byte_end":182588,"line_start":1323,"line_end":1323,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182593,"byte_end":182596,"line_start":1324,"line_end":1324,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182601,"byte_end":182621,"line_start":1325,"line_end":1325,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182626,"byte_end":182629,"line_start":1326,"line_end":1326,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182634,"byte_end":182648,"line_start":1327,"line_end":1327,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182653,"byte_end":182656,"line_start":1328,"line_end":1328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182661,"byte_end":182668,"line_start":1329,"line_end":1329,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182673,"byte_end":182708,"line_start":1330,"line_end":1330,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182713,"byte_end":182742,"line_start":1331,"line_end":1331,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182747,"byte_end":182786,"line_start":1332,"line_end":1332,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 3, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182791,"byte_end":182830,"line_start":1333,"line_end":1333,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{2 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182835,"byte_end":182870,"line_start":1334,"line_end":1334,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(expected, map1.intersection_with_key(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182875,"byte_end":182927,"line_start":1335,"line_end":1335,"column_start":5,"column_end":57}},{"value":"/     map2,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182932,"byte_end":182945,"line_start":1336,"line_end":1336,"column_start":5,"column_end":18}},{"value":"/     |key, left, right| left + right","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182950,"byte_end":182989,"line_start":1337,"line_end":1337,"column_start":5,"column_end":44}},{"value":"/ ));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":182994,"byte_end":183001,"line_start":1338,"line_end":1338,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183006,"byte_end":183013,"line_start":1339,"line_end":1339,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183018,"byte_end":183029,"line_start":1340,"line_end":1340,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183846,"byte_end":183851,"line_start":1366,"line_end":1366,"column_start":12,"column_end":17},"name":"split","qualname":"<OrdMap<K, V>>::split","value":"pub fn split<BK: ?Sized>(&Self, &BK) -> (Self, Self) where BK: Ord,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Split a map into two, with the left hand map containing keys\n which are smaller than `split`, and the right hand map\n containing keys which are larger than `split`.","sig":null,"attributes":[{"value":"/ Split a map into two, with the left hand map containing keys","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183586,"byte_end":183650,"line_start":1360,"line_end":1360,"column_start":5,"column_end":69}},{"value":"/ which are smaller than `split`, and the right hand map","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183655,"byte_end":183713,"line_start":1361,"line_end":1361,"column_start":5,"column_end":63}},{"value":"/ containing keys which are larger than `split`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183718,"byte_end":183768,"line_start":1362,"line_end":1362,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183773,"byte_end":183776,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ The `split` mapping is discarded.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183781,"byte_end":183818,"line_start":1364,"line_end":1364,"column_start":5,"column_end":42}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":183823,"byte_end":183834,"line_start":1365,"line_end":1365,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184310,"byte_end":184322,"line_start":1381,"line_end":1381,"column_start":12,"column_end":24},"name":"split_lookup","qualname":"<OrdMap<K, V>>::split_lookup","value":"pub fn split_lookup<BK: ?Sized>(&Self, &BK) -> (Self, Option<V>, Self) where\nBK: Ord, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Split a map into two, with the left hand map containing keys\n which are smaller than `split`, and the right hand map\n containing keys which are larger than `split`.","sig":null,"attributes":[{"value":"/ Split a map into two, with the left hand map containing keys","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184032,"byte_end":184096,"line_start":1375,"line_end":1375,"column_start":5,"column_end":69}},{"value":"/ which are smaller than `split`, and the right hand map","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184101,"byte_end":184159,"line_start":1376,"line_end":1376,"column_start":5,"column_end":63}},{"value":"/ containing keys which are larger than `split`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184164,"byte_end":184214,"line_start":1377,"line_end":1377,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184219,"byte_end":184222,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ Returns both the two maps and the value of `split`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184227,"byte_end":184282,"line_start":1379,"line_end":1379,"column_start":5,"column_end":60}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184287,"byte_end":184298,"line_start":1380,"line_end":1380,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185011,"byte_end":185015,"line_start":1400,"line_end":1400,"column_start":12,"column_end":16},"name":"take","qualname":"<OrdMap<K, V>>::take","value":"pub fn take(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a map with only the `n` smallest keys from a given\n map.\n","sig":null,"attributes":[{"value":"/ Construct a map with only the `n` smallest keys from a given","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184906,"byte_end":184970,"line_start":1397,"line_end":1397,"column_start":5,"column_end":69}},{"value":"/ map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184975,"byte_end":184983,"line_start":1398,"line_end":1398,"column_start":5,"column_end":13}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":184988,"byte_end":184999,"line_start":1399,"line_end":1399,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185209,"byte_end":185213,"line_start":1407,"line_end":1407,"column_start":12,"column_end":16},"name":"skip","qualname":"<OrdMap<K, V>>::skip","value":"pub fn skip(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a map with the `n` smallest keys removed from a\n given map.\n","sig":null,"attributes":[{"value":"/ Construct a map with the `n` smallest keys removed from a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185101,"byte_end":185162,"line_start":1404,"line_end":1404,"column_start":5,"column_end":66}},{"value":"/ given map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185167,"byte_end":185181,"line_start":1405,"line_end":1405,"column_start":5,"column_end":19}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185186,"byte_end":185197,"line_start":1406,"line_end":1406,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185423,"byte_end":185434,"line_start":1414,"line_end":1414,"column_start":12,"column_end":23},"name":"without_min","qualname":"<OrdMap<K, V>>::without_min","value":"pub fn without_min(&Self) -> (Option<V>, Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the smallest key from a map, and return its value as\n well as the updated map.\n","sig":null,"attributes":[{"value":"/ Remove the smallest key from a map, and return its value as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185299,"byte_end":185362,"line_start":1411,"line_end":1411,"column_start":5,"column_end":68}},{"value":"/ well as the updated map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185367,"byte_end":185395,"line_start":1412,"line_end":1412,"column_start":5,"column_end":33}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185400,"byte_end":185411,"line_start":1413,"line_end":1413,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185701,"byte_end":185721,"line_start":1422,"line_end":1422,"column_start":12,"column_end":32},"name":"without_min_with_key","qualname":"<OrdMap<K, V>>::without_min_with_key","value":"pub fn without_min_with_key(&Self) -> (Option<(K, V)>, Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the smallest key from a map, and return that key, its\n value as well as the updated map.\n","sig":null,"attributes":[{"value":"/ Remove the smallest key from a map, and return that key, its","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185567,"byte_end":185631,"line_start":1419,"line_end":1419,"column_start":5,"column_end":69}},{"value":"/ value as well as the updated map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185636,"byte_end":185673,"line_start":1420,"line_end":1420,"column_start":5,"column_end":42}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":185678,"byte_end":185689,"line_start":1421,"line_end":1421,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":813},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186137,"byte_end":186148,"line_start":1435,"line_end":1435,"column_start":12,"column_end":23},"name":"without_max","qualname":"<OrdMap<K, V>>::without_max","value":"pub fn without_max(&Self) -> (Option<V>, Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the largest key from a map, and return its value as\n well as the updated map.\n","sig":null,"attributes":[{"value":"/ Remove the largest key from a map, and return its value as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186014,"byte_end":186076,"line_start":1432,"line_end":1432,"column_start":5,"column_end":67}},{"value":"/ well as the updated map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186081,"byte_end":186109,"line_start":1433,"line_end":1433,"column_start":5,"column_end":33}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186114,"byte_end":186125,"line_start":1434,"line_end":1434,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186414,"byte_end":186434,"line_start":1443,"line_end":1443,"column_start":12,"column_end":32},"name":"without_max_with_key","qualname":"<OrdMap<K, V>>::without_max_with_key","value":"pub fn without_max_with_key(&Self) -> (Option<(K, V)>, Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the largest key from a map, and return that key, its\n value as well as the updated map.\n","sig":null,"attributes":[{"value":"/ Remove the largest key from a map, and return that key, its","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186281,"byte_end":186344,"line_start":1440,"line_end":1440,"column_start":5,"column_end":68}},{"value":"/ value as well as the updated map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186349,"byte_end":186386,"line_start":1441,"line_end":1441,"column_start":5,"column_end":42}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186391,"byte_end":186402,"line_start":1442,"line_end":1442,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186903,"byte_end":186908,"line_start":1459,"line_end":1459,"column_start":12,"column_end":17},"name":"entry","qualname":"<OrdMap<K, V>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the [`Entry`][Entry] for a key in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the [`Entry`][Entry] for a key in the map for in-place manipulation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186727,"byte_end":186803,"line_start":1453,"line_end":1453,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186808,"byte_end":186811,"line_start":1454,"line_end":1454,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186816,"byte_end":186834,"line_start":1455,"line_end":1455,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186839,"byte_end":186842,"line_start":1456,"line_end":1456,"column_start":5,"column_end":8}},{"value":"/ [Entry]: enum.Entry.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186847,"byte_end":186875,"line_start":1457,"line_end":1457,"column_start":5,"column_end":33}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":186880,"byte_end":186891,"line_start":1458,"line_end":1458,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":821},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187316,"byte_end":187324,"line_start":1477,"line_end":1477,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::ord::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" An entry which exists in the map.\n","sig":null,"attributes":[{"value":"/ An entry which exists in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187274,"byte_end":187311,"line_start":1476,"line_end":1476,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":824},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187404,"byte_end":187410,"line_start":1479,"line_end":1479,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::ord::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" An entry which doesn't exist in the map.\n","sig":null,"attributes":[{"value":"/ An entry which doesn't exist in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187355,"byte_end":187399,"line_start":1478,"line_end":1478,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":817},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187212,"byte_end":187217,"line_start":1471,"line_end":1471,"column_start":10,"column_end":15},"name":"Entry","qualname":"::ord::map::Entry","value":"pub enum Entry<'a, K, V> where K: Ord + Clone, V: Clone {\n\n    /// An entry which exists in the map.\n    Occupied(OccupiedEntry),\n\n    /// An entry which doesn't exist in the map.\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":821},{"krate":0,"index":824}],"decl_id":null,"docs":" A handle for a key and its associated value.\n","sig":null,"attributes":[{"value":"/ A handle for a key and its associated value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187154,"byte_end":187202,"line_start":1470,"line_end":1470,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187648,"byte_end":187657,"line_start":1489,"line_end":1489,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Insert the default value provided if there was no value\n already, and return a mutable reference to the value.\n","sig":null,"attributes":[{"value":"/ Insert the default value provided if there was no value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187515,"byte_end":187574,"line_start":1487,"line_end":1487,"column_start":5,"column_end":64}},{"value":"/ already, and return a mutable reference to the value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187579,"byte_end":187636,"line_start":1488,"line_end":1488,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187901,"byte_end":187915,"line_start":1496,"line_end":1496,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Insert the default value from the provided function if there\n was no value already, and return a mutable reference to the\n value.\n","sig":null,"attributes":[{"value":"/ Insert the default value from the provided function if there","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187742,"byte_end":187806,"line_start":1493,"line_end":1493,"column_start":5,"column_end":69}},{"value":"/ was no value already, and return a mutable reference to the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187811,"byte_end":187874,"line_start":1494,"line_end":1494,"column_start":5,"column_end":68}},{"value":"/ value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187879,"byte_end":187889,"line_start":1495,"line_end":1495,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188273,"byte_end":188283,"line_start":1508,"line_end":1508,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Insert a default value if there was no value already, and\n return a mutable reference to the value.\n","sig":null,"attributes":[{"value":"/ Insert a default value if there was no value already, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188151,"byte_end":188212,"line_start":1506,"line_end":1506,"column_start":5,"column_end":66}},{"value":"/ return a mutable reference to the value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188217,"byte_end":188261,"line_start":1507,"line_end":1507,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188455,"byte_end":188458,"line_start":1517,"line_end":1517,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Get the key for this entry.\n","sig":null,"attributes":[{"value":"/ Get the key for this entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188396,"byte_end":188427,"line_start":1515,"line_end":1515,"column_start":5,"column_end":36}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188432,"byte_end":188443,"line_start":1516,"line_end":1516,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188707,"byte_end":188717,"line_start":1526,"line_end":1526,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Call the provided function to modify the value if the value\n exists.\n","sig":null,"attributes":[{"value":"/ Call the provided function to modify the value if the value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188616,"byte_end":188679,"line_start":1524,"line_end":1524,"column_start":5,"column_end":68}},{"value":"/ exists.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188684,"byte_end":188695,"line_start":1525,"line_end":1525,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":839},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189018,"byte_end":189031,"line_start":1539,"line_end":1539,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::ord::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844}],"decl_id":null,"docs":" An entry for a mapping that already exists in the map.\n","sig":null,"attributes":[{"value":"/ An entry for a mapping that already exists in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":188948,"byte_end":189006,"line_start":1538,"line_end":1538,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189284,"byte_end":189287,"line_start":1555,"line_end":1555,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Get the key for this entry.\n","sig":null,"attributes":[{"value":"/ Get the key for this entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189225,"byte_end":189256,"line_start":1553,"line_end":1553,"column_start":5,"column_end":36}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189261,"byte_end":189272,"line_start":1554,"line_end":1554,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189410,"byte_end":189422,"line_start":1560,"line_end":1560,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove this entry from the map and return the removed mapping.\n","sig":null,"attributes":[{"value":"/ Remove this entry from the map and return the removed mapping.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189332,"byte_end":189398,"line_start":1559,"line_end":1559,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189641,"byte_end":189644,"line_start":1568,"line_end":1568,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Get the current value.\n","sig":null,"attributes":[{"value":"/ Get the current value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189587,"byte_end":189613,"line_start":1566,"line_end":1566,"column_start":5,"column_end":31}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189618,"byte_end":189629,"line_start":1567,"line_end":1567,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189789,"byte_end":189796,"line_start":1574,"line_end":1574,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the current value.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the current value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189712,"byte_end":189761,"line_start":1572,"line_end":1572,"column_start":5,"column_end":54}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189766,"byte_end":189777,"line_start":1573,"line_end":1573,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189952,"byte_end":189960,"line_start":1580,"line_end":1580,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Convert this entry into a mutable reference.\n","sig":null,"attributes":[{"value":"/ Convert this entry into a mutable reference.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189876,"byte_end":189924,"line_start":1578,"line_end":1578,"column_start":5,"column_end":53}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189929,"byte_end":189940,"line_start":1579,"line_end":1579,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190082,"byte_end":190088,"line_start":1585,"line_end":1585,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Overwrite the current value.\n","sig":null,"attributes":[{"value":"/ Overwrite the current value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190038,"byte_end":190070,"line_start":1584,"line_end":1584,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190248,"byte_end":190254,"line_start":1590,"line_end":1590,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove this entry from the map and return the removed value.\n","sig":null,"attributes":[{"value":"/ Remove this entry from the map and return the removed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190172,"byte_end":190236,"line_start":1589,"line_end":1589,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":856},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190385,"byte_end":190396,"line_start":1596,"line_end":1596,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::ord::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"decl_id":null,"docs":" An entry for a mapping that does not already exist in the map.\n","sig":null,"attributes":[{"value":"/ An entry for a mapping that does not already exist in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190307,"byte_end":190373,"line_start":1595,"line_end":1595,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190647,"byte_end":190650,"line_start":1612,"line_end":1612,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Get the key for this entry.\n","sig":null,"attributes":[{"value":"/ Get the key for this entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190588,"byte_end":190619,"line_start":1610,"line_end":1610,"column_start":5,"column_end":36}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190624,"byte_end":190635,"line_start":1611,"line_end":1611,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190759,"byte_end":190767,"line_start":1618,"line_end":1618,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Convert this entry into its key.\n","sig":null,"attributes":[{"value":"/ Convert this entry into its key.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190695,"byte_end":190731,"line_start":1616,"line_end":1616,"column_start":5,"column_end":41}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190736,"byte_end":190747,"line_start":1617,"line_end":1617,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190856,"byte_end":190862,"line_start":1623,"line_end":1623,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Insert a value into this entry.\n","sig":null,"attributes":[{"value":"/ Insert a value into this entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190809,"byte_end":190844,"line_start":1622,"line_end":1622,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":938},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":194880,"byte_end":194884,"line_start":1822,"line_end":1822,"column_start":12,"column_end":16},"name":"Iter","qualname":"::ord::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":941}],"decl_id":null,"docs":" An iterator over the key/value pairs of a map.\n","sig":null,"attributes":[{"value":"/ An iterator over the key/value pairs of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":194818,"byte_end":194868,"line_start":1821,"line_end":1821,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":955},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195502,"byte_end":195506,"line_start":1853,"line_end":1853,"column_start":12,"column_end":16},"name":"Keys","qualname":"::ord::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":959}],"decl_id":null,"docs":" An iterator ove the keys of a map.\n","sig":null,"attributes":[{"value":"/ An iterator ove the keys of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195452,"byte_end":195490,"line_start":1852,"line_end":1852,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":976},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":196302,"byte_end":196308,"line_start":1897,"line_end":1897,"column_start":12,"column_end":18},"name":"Values","qualname":"::ord::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":980}],"decl_id":null,"docs":" An iterator over the values of a map.\n","sig":null,"attributes":[{"value":"/ An iterator over the values of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":196249,"byte_end":196290,"line_start":1896,"line_end":1896,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":1100},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::ord::set","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":3179},{"krate":0,"index":1106},{"krate":0,"index":3181},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":3187},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":2852},{"krate":0,"index":2882},{"krate":0,"index":2880},{"krate":0,"index":2874},{"krate":0,"index":2876},{"krate":0,"index":2869},{"krate":0,"index":2871},{"krate":0,"index":2862},{"krate":0,"index":2859},{"krate":0,"index":2856},{"krate":0,"index":1135},{"krate":0,"index":1139},{"krate":0,"index":2885},{"krate":0,"index":2889},{"krate":0,"index":2894},{"krate":0,"index":2897},{"krate":0,"index":1151},{"krate":0,"index":1156},{"krate":0,"index":1164},{"krate":0,"index":1185},{"krate":0,"index":1210},{"krate":0,"index":1213},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1221},{"krate":0,"index":1224},{"krate":0,"index":1228},{"krate":0,"index":1231},{"krate":0,"index":1235},{"krate":0,"index":1240},{"krate":0,"index":1244},{"krate":0,"index":1249},{"krate":0,"index":1254},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1266},{"krate":0,"index":1272},{"krate":0,"index":1276},{"krate":0,"index":1279},{"krate":0,"index":1283},{"krate":0,"index":1289},{"krate":0,"index":1293},{"krate":0,"index":1296},{"krate":0,"index":1301},{"krate":0,"index":1305},{"krate":0,"index":1311},{"krate":0,"index":1316},{"krate":0,"index":1322},{"krate":0,"index":1327},{"krate":0,"index":1334},{"krate":0,"index":1338},{"krate":0,"index":1341},{"krate":0,"index":1345},{"krate":0,"index":1348},{"krate":0,"index":1352},{"krate":0,"index":1355},{"krate":0,"index":1359},{"krate":0,"index":1363}],"decl_id":null,"docs":" An ordered set.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/mod.rs","byte_start":144003,"byte_end":144015,"line_start":7,"line_end":7,"column_start":1,"column_end":13}},{"value":"/ An ordered set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":217625,"byte_end":217644,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":217645,"byte_end":217648,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ An immutable ordered set implemented as a [B-tree] [1].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":217649,"byte_end":217708,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":217709,"byte_end":217712,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Most operations on this type of set are O(log n). A","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":217713,"byte_end":217768,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/ [`HashSet`][hashset::HashSet] is usually a better choice for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":217769,"byte_end":217833,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"/ performance, but the `OrdSet` has the advantage of only requiring","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":217834,"byte_end":217903,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ an [`Ord`][std::cmp::Ord] constraint on its values, and of being","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":217904,"byte_end":217972,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ ordered, so values always come out from lowest to highest, where a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":217973,"byte_end":218043,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`][hashset::HashSet] has no guaranteed ordering.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":218044,"byte_end":218105,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":218106,"byte_end":218109,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/B-tree","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":218110,"byte_end":218155,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/ [hashset::HashSet]: ../hashset/struct.HashSet.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":218156,"byte_end":218210,"line_start":17,"line_end":17,"column_start":1,"column_end":55}},{"value":"/ [std::cmp::Ord]: https://doc.rust-lang.org/std/cmp/trait.Ord.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":218211,"byte_end":218280,"line_start":18,"line_end":18,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":2885},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":221689,"byte_end":221699,"line_start":159,"line_end":159,"column_start":11,"column_end":21},"name":"OrdSetPool","qualname":"::ord::set::OrdSetPool","value":"","parent":null,"children":[],"decl_id":null,"docs":" A memory pool for the appropriate node type.\n","sig":null,"attributes":[{"value":"/ A memory pool for the appropriate node type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/util.rs","byte_start":142848,"byte_end":142896,"line_start":116,"line_end":116,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1151},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222389,"byte_end":222395,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"OrdSet","qualname":"::ord::set::OrdSet","value":"OrdSet {  }","parent":null,"children":[{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155}],"decl_id":null,"docs":" An ordered set.","sig":null,"attributes":[{"value":"/ An ordered set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":221722,"byte_end":221741,"line_start":161,"line_end":161,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":221742,"byte_end":221745,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ An immutable ordered set implemented as a [B-tree] [1].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":221746,"byte_end":221805,"line_start":163,"line_end":163,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":221806,"byte_end":221809,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ Most operations on this type of set are O(log n). A","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":221810,"byte_end":221865,"line_start":165,"line_end":165,"column_start":1,"column_end":56}},{"value":"/ [`HashSet`][hashset::HashSet] is usually a better choice for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":221866,"byte_end":221930,"line_start":166,"line_end":166,"column_start":1,"column_end":65}},{"value":"/ performance, but the `OrdSet` has the advantage of only requiring","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":221931,"byte_end":222000,"line_start":167,"line_end":167,"column_start":1,"column_end":70}},{"value":"/ an [`Ord`][std::cmp::Ord] constraint on its values, and of being","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222001,"byte_end":222069,"line_start":168,"line_end":168,"column_start":1,"column_end":69}},{"value":"/ ordered, so values always come out from lowest to highest, where a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222070,"byte_end":222140,"line_start":169,"line_end":169,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`][hashset::HashSet] has no guaranteed ordering.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222141,"byte_end":222202,"line_start":170,"line_end":170,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222203,"byte_end":222206,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/B-tree","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222207,"byte_end":222252,"line_start":172,"line_end":172,"column_start":1,"column_end":46}},{"value":"/ [hashset::HashSet]: ../hashset/struct.HashSet.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222253,"byte_end":222307,"line_start":173,"line_end":173,"column_start":1,"column_end":55}},{"value":"/ [std::cmp::Ord]: https://doc.rust-lang.org/std/cmp/trait.Ord.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222308,"byte_end":222377,"line_start":174,"line_end":174,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222560,"byte_end":222563,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<OrdSet<A>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty set.\n","sig":null,"attributes":[{"value":"/ Construct an empty set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222505,"byte_end":222532,"line_start":182,"line_end":182,"column_start":5,"column_end":32}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222537,"byte_end":222548,"line_start":183,"line_end":183,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223358,"byte_end":223362,"line_start":218,"line_end":218,"column_start":12,"column_end":16},"name":"unit","qualname":"<OrdSet<A>>::unit","value":"pub fn unit(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a set with a single value.","sig":null,"attributes":[{"value":"/ Construct a set with a single value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223069,"byte_end":223109,"line_start":206,"line_end":206,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223114,"byte_end":223117,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223122,"byte_end":223136,"line_start":208,"line_end":208,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223141,"byte_end":223144,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223149,"byte_end":223156,"line_start":210,"line_end":210,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223161,"byte_end":223196,"line_start":211,"line_end":211,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223201,"byte_end":223230,"line_start":212,"line_end":212,"column_start":5,"column_end":34}},{"value":"/ let set = OrdSet::unit(123);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223235,"byte_end":223267,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/ assert!(set.contains(&123));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223272,"byte_end":223304,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223309,"byte_end":223316,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223321,"byte_end":223330,"line_start":216,"line_end":216,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223335,"byte_end":223346,"line_start":217,"line_end":217,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223951,"byte_end":223959,"line_start":246,"line_end":246,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<OrdSet<A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether a set is empty.","sig":null,"attributes":[{"value":"/ Test whether a set is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223580,"byte_end":223612,"line_start":228,"line_end":228,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223617,"byte_end":223620,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223625,"byte_end":223639,"line_start":230,"line_end":230,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223644,"byte_end":223647,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223652,"byte_end":223666,"line_start":232,"line_end":232,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223671,"byte_end":223674,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223679,"byte_end":223686,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223691,"byte_end":223726,"line_start":235,"line_end":235,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223731,"byte_end":223760,"line_start":236,"line_end":236,"column_start":5,"column_end":34}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223765,"byte_end":223777,"line_start":237,"line_end":237,"column_start":5,"column_end":17}},{"value":"/   !ordset![1, 2, 3].is_empty()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223782,"byte_end":223816,"line_start":238,"line_end":238,"column_start":5,"column_end":39}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223821,"byte_end":223827,"line_start":239,"line_end":239,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223832,"byte_end":223844,"line_start":240,"line_end":240,"column_start":5,"column_end":17}},{"value":"/   OrdSet::<i32>::new().is_empty()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223849,"byte_end":223886,"line_start":241,"line_end":241,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223891,"byte_end":223897,"line_start":242,"line_end":242,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223902,"byte_end":223909,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223914,"byte_end":223923,"line_start":244,"line_end":244,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":223928,"byte_end":223939,"line_start":245,"line_end":245,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224287,"byte_end":224290,"line_start":263,"line_end":263,"column_start":12,"column_end":15},"name":"len","qualname":"<OrdSet<A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the size of a set.","sig":null,"attributes":[{"value":"/ Get the size of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224012,"byte_end":224038,"line_start":250,"line_end":250,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224043,"byte_end":224046,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224051,"byte_end":224065,"line_start":252,"line_end":252,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224070,"byte_end":224073,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224078,"byte_end":224092,"line_start":254,"line_end":254,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224097,"byte_end":224100,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224105,"byte_end":224112,"line_start":256,"line_end":256,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224117,"byte_end":224152,"line_start":257,"line_end":257,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224157,"byte_end":224186,"line_start":258,"line_end":258,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(3, ordset![1, 2, 3].len());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224191,"byte_end":224233,"line_start":259,"line_end":259,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224238,"byte_end":224245,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224250,"byte_end":224259,"line_start":261,"line_end":261,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224264,"byte_end":224275,"line_start":262,"line_end":262,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224714,"byte_end":224720,"line_start":276,"line_end":276,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<OrdSet<A>>::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether two sets refer to the same content in memory.","sig":null,"attributes":[{"value":"/ Test whether two sets refer to the same content in memory.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224338,"byte_end":224400,"line_start":267,"line_end":267,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224405,"byte_end":224408,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This is true if the two sides are references to the same set,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224413,"byte_end":224478,"line_start":269,"line_end":269,"column_start":5,"column_end":70}},{"value":"/ or if the two sets refer to the same root node.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224483,"byte_end":224534,"line_start":270,"line_end":270,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224539,"byte_end":224542,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ This would return true if you're comparing a set to itself, or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224547,"byte_end":224613,"line_start":272,"line_end":272,"column_start":5,"column_end":71}},{"value":"/ if you're comparing a set to a fresh clone of itself.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224618,"byte_end":224675,"line_start":273,"line_end":273,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224680,"byte_end":224683,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":224688,"byte_end":224702,"line_start":275,"line_end":275,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225552,"byte_end":225557,"line_start":305,"line_end":305,"column_start":12,"column_end":17},"name":"clear","qualname":"<OrdSet<A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Discard all elements from the set.","sig":null,"attributes":[{"value":"/ Discard all elements from the set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225136,"byte_end":225174,"line_start":289,"line_end":289,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225179,"byte_end":225182,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ This leaves you with an empty set, and all elements that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225187,"byte_end":225247,"line_start":291,"line_end":291,"column_start":5,"column_end":65}},{"value":"/ were previously inside it are dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225252,"byte_end":225294,"line_start":292,"line_end":292,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225299,"byte_end":225302,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225307,"byte_end":225321,"line_start":294,"line_end":294,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225326,"byte_end":225329,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225334,"byte_end":225348,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225353,"byte_end":225356,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225361,"byte_end":225368,"line_start":298,"line_end":298,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225373,"byte_end":225408,"line_start":299,"line_end":299,"column_start":5,"column_end":40}},{"value":"/ # use im::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225413,"byte_end":225434,"line_start":300,"line_end":300,"column_start":5,"column_end":26}},{"value":"/ let mut set = ordset![1, 2, 3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225439,"byte_end":225474,"line_start":301,"line_end":301,"column_start":5,"column_end":40}},{"value":"/ set.clear();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225479,"byte_end":225495,"line_start":302,"line_end":302,"column_start":5,"column_end":21}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225500,"byte_end":225528,"line_start":303,"line_end":303,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225533,"byte_end":225540,"line_start":304,"line_end":304,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225893,"byte_end":225900,"line_start":323,"line_end":323,"column_start":12,"column_end":19},"name":"get_min","qualname":"<OrdSet<A>>::get_min","value":"pub fn get_min(&Self) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get the smallest value in a set.","sig":null,"attributes":[{"value":"/ Get the smallest value in a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225745,"byte_end":225781,"line_start":317,"line_end":317,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225786,"byte_end":225789,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ If the set is empty, returns `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225794,"byte_end":225834,"line_start":319,"line_end":319,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225839,"byte_end":225842,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225847,"byte_end":225865,"line_start":321,"line_end":321,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225870,"byte_end":225881,"line_start":322,"line_end":322,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226124,"byte_end":226131,"line_start":333,"line_end":333,"column_start":12,"column_end":19},"name":"get_max","qualname":"<OrdSet<A>>::get_max","value":"pub fn get_max(&Self) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get the largest value in a set.","sig":null,"attributes":[{"value":"/ Get the largest value in a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225977,"byte_end":226012,"line_start":327,"line_end":327,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226017,"byte_end":226020,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If the set is empty, returns `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226025,"byte_end":226065,"line_start":329,"line_end":329,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226070,"byte_end":226073,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226078,"byte_end":226096,"line_start":331,"line_end":331,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226101,"byte_end":226112,"line_start":332,"line_end":332,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226288,"byte_end":226292,"line_start":339,"line_end":339,"column_start":12,"column_end":16},"name":"iter","qualname":"<OrdSet<A>>::iter","value":"pub fn iter(&Self) -> Iter<, A>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over the contents of the set.\n","sig":null,"attributes":[{"value":"/ Create an iterator over the contents of the set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226208,"byte_end":226260,"line_start":337,"line_end":337,"column_start":5,"column_end":57}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226265,"byte_end":226276,"line_start":338,"line_end":338,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226490,"byte_end":226495,"line_start":347,"line_end":347,"column_start":12,"column_end":17},"name":"range","qualname":"<OrdSet<A>>::range","value":"pub fn range<R, BA: ?Sized>(&Self, R) -> RangedIter<, A> where\nR: RangeBounds<BA>, A: Borrow<BA>, BA: Ord","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over a range inside the set.\n","sig":null,"attributes":[{"value":"/ Create an iterator over a range inside the set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226411,"byte_end":226462,"line_start":345,"line_end":345,"column_start":5,"column_end":56}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226467,"byte_end":226478,"line_start":346,"line_end":346,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227330,"byte_end":227334,"line_start":370,"line_end":370,"column_start":12,"column_end":16},"name":"diff","qualname":"<OrdSet<A>>::diff","value":"pub fn diff<'a>(&'a Self, &'a Self) -> DiffIter<, A>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the differences between this set and\n another, i.e. the set of entries to add or remove to this set\n in order to make it equal to the other set.","sig":null,"attributes":[{"value":"/ Get an iterator over the differences between this set and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226737,"byte_end":226798,"line_start":358,"line_end":358,"column_start":5,"column_end":66}},{"value":"/ another, i.e. the set of entries to add or remove to this set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226803,"byte_end":226868,"line_start":359,"line_end":359,"column_start":5,"column_end":70}},{"value":"/ in order to make it equal to the other set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226873,"byte_end":226920,"line_start":360,"line_end":360,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226925,"byte_end":226928,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ This function will avoid visiting nodes which are shared","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226933,"byte_end":226993,"line_start":362,"line_end":362,"column_start":5,"column_end":65}},{"value":"/ between the two sets, meaning that even very large sets can be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":226998,"byte_end":227064,"line_start":363,"line_end":363,"column_start":5,"column_end":71}},{"value":"/ compared quickly if most of their structure is shared.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227069,"byte_end":227127,"line_start":364,"line_end":364,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227132,"byte_end":227135,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Time: O(n) (where n is the number of unique elements across","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227140,"byte_end":227203,"line_start":366,"line_end":366,"column_start":5,"column_end":68}},{"value":"/ the two sets, minus the number of elements belonging to nodes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227208,"byte_end":227273,"line_start":367,"line_end":367,"column_start":5,"column_end":70}},{"value":"/ shared between them)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227278,"byte_end":227302,"line_start":368,"line_end":368,"column_start":5,"column_end":29}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227307,"byte_end":227318,"line_start":369,"line_end":369,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227841,"byte_end":227849,"line_start":391,"line_end":391,"column_start":12,"column_end":20},"name":"contains","qualname":"<OrdSet<A>>::contains","value":"pub fn contains<BA: ?Sized>(&Self, &BA) -> bool where BA: Ord, A: Borrow<BA>","parent":null,"children":[],"decl_id":null,"docs":" Test if a value is part of a set.","sig":null,"attributes":[{"value":"/ Test if a value is part of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227487,"byte_end":227524,"line_start":376,"line_end":376,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227529,"byte_end":227532,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227537,"byte_end":227555,"line_start":378,"line_end":378,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227560,"byte_end":227563,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227568,"byte_end":227582,"line_start":380,"line_end":380,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227587,"byte_end":227590,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227595,"byte_end":227602,"line_start":382,"line_end":382,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227607,"byte_end":227642,"line_start":383,"line_end":383,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227647,"byte_end":227676,"line_start":384,"line_end":384,"column_start":5,"column_end":34}},{"value":"/ let mut set = ordset!{1, 2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227681,"byte_end":227716,"line_start":385,"line_end":385,"column_start":5,"column_end":40}},{"value":"/ assert!(set.contains(&1));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227721,"byte_end":227751,"line_start":386,"line_end":386,"column_start":5,"column_end":35}},{"value":"/ assert!(!set.contains(&4));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227756,"byte_end":227787,"line_start":387,"line_end":387,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227792,"byte_end":227799,"line_start":388,"line_end":388,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227804,"byte_end":227813,"line_start":389,"line_end":389,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227818,"byte_end":227829,"line_start":390,"line_end":390,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228560,"byte_end":228568,"line_start":415,"line_end":415,"column_start":12,"column_end":20},"name":"get_prev","qualname":"<OrdSet<A>>::get_prev","value":"pub fn get_prev(&Self, &A) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get the closest smaller value in a set to a given value.","sig":null,"attributes":[{"value":"/ Get the closest smaller value in a set to a given value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":227991,"byte_end":228051,"line_start":399,"line_end":399,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228056,"byte_end":228059,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ If the set contains the given value, this is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228064,"byte_end":228122,"line_start":401,"line_end":401,"column_start":5,"column_end":63}},{"value":"/ Otherwise, the closest value in the set smaller than the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228127,"byte_end":228187,"line_start":402,"line_end":402,"column_start":5,"column_end":65}},{"value":"/ given value is returned. If the smallest value in the set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228192,"byte_end":228253,"line_start":403,"line_end":403,"column_start":5,"column_end":66}},{"value":"/ is larger than the given value, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228258,"byte_end":228313,"line_start":404,"line_end":404,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228318,"byte_end":228321,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228326,"byte_end":228340,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228345,"byte_end":228348,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228353,"byte_end":228364,"line_start":408,"line_end":408,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228369,"byte_end":228404,"line_start":409,"line_end":409,"column_start":5,"column_end":40}},{"value":"/ # use im::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228409,"byte_end":228430,"line_start":410,"line_end":410,"column_start":5,"column_end":26}},{"value":"/ let set = ordset![1, 3, 5, 7, 9];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228435,"byte_end":228472,"line_start":411,"line_end":411,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(Some(&5), set.get_prev(&6));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228477,"byte_end":228520,"line_start":412,"line_end":412,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228525,"byte_end":228532,"line_start":413,"line_end":413,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228537,"byte_end":228548,"line_start":414,"line_end":414,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229228,"byte_end":229236,"line_start":435,"line_end":435,"column_start":12,"column_end":20},"name":"get_next","qualname":"<OrdSet<A>>::get_next","value":"pub fn get_next(&Self, &A) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get the closest larger value in a set to a given value.","sig":null,"attributes":[{"value":"/ Get the closest larger value in a set to a given value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228661,"byte_end":228720,"line_start":419,"line_end":419,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228725,"byte_end":228728,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ If the set contains the given value, this is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228733,"byte_end":228791,"line_start":421,"line_end":421,"column_start":5,"column_end":63}},{"value":"/ Otherwise, the closest value in the set larger than the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228796,"byte_end":228855,"line_start":422,"line_end":422,"column_start":5,"column_end":64}},{"value":"/ given value is returned. If the largest value in the set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228860,"byte_end":228920,"line_start":423,"line_end":423,"column_start":5,"column_end":65}},{"value":"/ is smaller than the given value, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228925,"byte_end":228981,"line_start":424,"line_end":424,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228986,"byte_end":228989,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":228994,"byte_end":229008,"line_start":426,"line_end":426,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229013,"byte_end":229016,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229021,"byte_end":229032,"line_start":428,"line_end":428,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229037,"byte_end":229072,"line_start":429,"line_end":429,"column_start":5,"column_end":40}},{"value":"/ # use im::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229077,"byte_end":229098,"line_start":430,"line_end":430,"column_start":5,"column_end":26}},{"value":"/ let set = ordset![1, 3, 5, 7, 9];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229103,"byte_end":229140,"line_start":431,"line_end":431,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(Some(&5), set.get_next(&4));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229145,"byte_end":229188,"line_start":432,"line_end":432,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229193,"byte_end":229200,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229205,"byte_end":229216,"line_start":434,"line_end":434,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229551,"byte_end":229560,"line_start":444,"line_end":444,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<OrdSet<A>>::is_subset","value":"pub fn is_subset<RS>(&Self, RS) -> bool where RS: Borrow<Self>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a set is a subset of another set, meaning that\n all values in our set must also be in the other set.","sig":null,"attributes":[{"value":"/ Test whether a set is a subset of another set, meaning that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229329,"byte_end":229392,"line_start":439,"line_end":439,"column_start":5,"column_end":68}},{"value":"/ all values in our set must also be in the other set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229397,"byte_end":229453,"line_start":440,"line_end":440,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229458,"byte_end":229461,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log m) where m is the size of the other set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229466,"byte_end":229523,"line_start":442,"line_end":442,"column_start":5,"column_end":62}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229528,"byte_end":229539,"line_start":443,"line_end":443,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230096,"byte_end":230112,"line_start":461,"line_end":461,"column_start":12,"column_end":28},"name":"is_proper_subset","qualname":"<OrdSet<A>>::is_proper_subset","value":"pub fn is_proper_subset<RS>(&Self, RS) -> bool where RS: Borrow<Self>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a set is a proper subset of another set, meaning\n that all values in our set must also be in the other set. A\n proper subset must also be smaller than the other set.","sig":null,"attributes":[{"value":"/ Test whether a set is a proper subset of another set, meaning","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229802,"byte_end":229867,"line_start":455,"line_end":455,"column_start":5,"column_end":70}},{"value":"/ that all values in our set must also be in the other set. A","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229872,"byte_end":229935,"line_start":456,"line_end":456,"column_start":5,"column_end":68}},{"value":"/ proper subset must also be smaller than the other set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":229940,"byte_end":229998,"line_start":457,"line_end":457,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230003,"byte_end":230006,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log m) where m is the size of the other set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230011,"byte_end":230068,"line_start":459,"line_end":459,"column_start":5,"column_end":62}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230073,"byte_end":230084,"line_start":460,"line_end":460,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230689,"byte_end":230695,"line_start":491,"line_end":491,"column_start":12,"column_end":18},"name":"insert","qualname":"<OrdSet<A>>::insert","value":"pub fn insert(&mut Self, A) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" Insert a value into a set.","sig":null,"attributes":[{"value":"/ Insert a value into a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230312,"byte_end":230342,"line_start":473,"line_end":473,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230347,"byte_end":230350,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230355,"byte_end":230373,"line_start":475,"line_end":475,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230378,"byte_end":230381,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230386,"byte_end":230400,"line_start":477,"line_end":477,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230405,"byte_end":230408,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230413,"byte_end":230420,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230425,"byte_end":230460,"line_start":480,"line_end":480,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230465,"byte_end":230494,"line_start":481,"line_end":481,"column_start":5,"column_end":34}},{"value":"/ let mut set = ordset!{};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230499,"byte_end":230527,"line_start":482,"line_end":482,"column_start":5,"column_end":33}},{"value":"/ set.insert(123);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230532,"byte_end":230552,"line_start":483,"line_end":483,"column_start":5,"column_end":25}},{"value":"/ set.insert(456);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230557,"byte_end":230577,"line_start":484,"line_end":484,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230582,"byte_end":230597,"line_start":485,"line_end":485,"column_start":5,"column_end":20}},{"value":"/   set,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230602,"byte_end":230612,"line_start":486,"line_end":486,"column_start":5,"column_end":15}},{"value":"/   ordset![123, 456]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230617,"byte_end":230640,"line_start":487,"line_end":487,"column_start":5,"column_end":28}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230645,"byte_end":230651,"line_start":488,"line_end":488,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230656,"byte_end":230663,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230668,"byte_end":230677,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":231469,"byte_end":231475,"line_start":515,"line_end":515,"column_start":12,"column_end":18},"name":"remove","qualname":"<OrdSet<A>>::remove","value":"pub fn remove<BA: ?Sized>(&mut Self, &BA) -> Option<A> where BA: Ord,\nA: Borrow<BA>","parent":null,"children":[],"decl_id":null,"docs":" Remove a value from a set.","sig":null,"attributes":[{"value":"/ Remove a value from a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":231382,"byte_end":231412,"line_start":511,"line_end":511,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":231417,"byte_end":231420,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":231425,"byte_end":231443,"line_start":513,"line_end":513,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":231448,"byte_end":231457,"line_start":514,"line_end":514,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232223,"byte_end":232233,"line_start":539,"line_end":539,"column_start":12,"column_end":22},"name":"remove_min","qualname":"<OrdSet<A>>::remove_min","value":"pub fn remove_min(&mut Self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" Remove the smallest value from a set.","sig":null,"attributes":[{"value":"/ Remove the smallest value from a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232139,"byte_end":232180,"line_start":536,"line_end":536,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232185,"byte_end":232188,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232193,"byte_end":232211,"line_start":538,"line_end":538,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232580,"byte_end":232590,"line_start":552,"line_end":552,"column_start":12,"column_end":22},"name":"remove_max","qualname":"<OrdSet<A>>::remove_max","value":"pub fn remove_max(&mut Self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" Remove the largest value from a set.","sig":null,"attributes":[{"value":"/ Remove the largest value from a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232497,"byte_end":232537,"line_start":549,"line_end":549,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232542,"byte_end":232545,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232550,"byte_end":232568,"line_start":551,"line_end":551,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233244,"byte_end":233250,"line_start":579,"line_end":579,"column_start":12,"column_end":18},"name":"update","qualname":"<OrdSet<A>>::update","value":"pub fn update(&Self, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new set from the current set with the given value\n added.","sig":null,"attributes":[{"value":"/ Construct a new set from the current set with the given value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232854,"byte_end":232919,"line_start":562,"line_end":562,"column_start":5,"column_end":70}},{"value":"/ added.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232924,"byte_end":232934,"line_start":563,"line_end":563,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232939,"byte_end":232942,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232947,"byte_end":232965,"line_start":565,"line_end":565,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232970,"byte_end":232973,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232978,"byte_end":232992,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":232997,"byte_end":233000,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233005,"byte_end":233012,"line_start":569,"line_end":569,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233017,"byte_end":233052,"line_start":570,"line_end":570,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233057,"byte_end":233086,"line_start":571,"line_end":571,"column_start":5,"column_end":34}},{"value":"/ let set = ordset![456];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233091,"byte_end":233118,"line_start":572,"line_end":572,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233123,"byte_end":233138,"line_start":573,"line_end":573,"column_start":5,"column_end":20}},{"value":"/   set.update(123),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233143,"byte_end":233165,"line_start":574,"line_end":574,"column_start":5,"column_end":27}},{"value":"/   ordset![123, 456]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233170,"byte_end":233193,"line_start":575,"line_end":575,"column_start":5,"column_end":28}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233198,"byte_end":233204,"line_start":576,"line_end":576,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233209,"byte_end":233216,"line_start":577,"line_end":577,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233221,"byte_end":233232,"line_start":578,"line_end":578,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233495,"byte_end":233502,"line_start":590,"line_end":590,"column_start":12,"column_end":19},"name":"without","qualname":"<OrdSet<A>>::without","value":"pub fn without<BA: ?Sized>(&Self, &BA) -> Self where BA: Ord, A: Borrow<BA>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new set with the given value removed if it's in\n the set.","sig":null,"attributes":[{"value":"/ Construct a new set with the given value removed if it's in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233356,"byte_end":233419,"line_start":585,"line_end":585,"column_start":5,"column_end":68}},{"value":"/ the set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233424,"byte_end":233436,"line_start":586,"line_end":586,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233441,"byte_end":233444,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233449,"byte_end":233467,"line_start":588,"line_end":588,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233472,"byte_end":233483,"line_start":589,"line_end":589,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233835,"byte_end":233846,"line_start":605,"line_end":605,"column_start":12,"column_end":23},"name":"without_min","qualname":"<OrdSet<A>>::without_min","value":"pub fn without_min(&Self) -> (Option<A>, Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the smallest value from a set, and return that value as\n well as the updated set.","sig":null,"attributes":[{"value":"/ Remove the smallest value from a set, and return that value as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233677,"byte_end":233743,"line_start":600,"line_end":600,"column_start":5,"column_end":71}},{"value":"/ well as the updated set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233748,"byte_end":233776,"line_start":601,"line_end":601,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233781,"byte_end":233784,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233789,"byte_end":233807,"line_start":603,"line_end":603,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":233812,"byte_end":233823,"line_start":604,"line_end":604,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234188,"byte_end":234199,"line_start":617,"line_end":617,"column_start":12,"column_end":23},"name":"without_max","qualname":"<OrdSet<A>>::without_max","value":"pub fn without_max(&Self) -> (Option<A>, Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the largest value from a set, and return that value as\n well as the updated set.","sig":null,"attributes":[{"value":"/ Remove the largest value from a set, and return that value as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234031,"byte_end":234096,"line_start":612,"line_end":612,"column_start":5,"column_end":70}},{"value":"/ well as the updated set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234101,"byte_end":234129,"line_start":613,"line_end":613,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234134,"byte_end":234137,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234142,"byte_end":234160,"line_start":615,"line_end":615,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234165,"byte_end":234176,"line_start":616,"line_end":616,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234771,"byte_end":234776,"line_start":639,"line_end":639,"column_start":12,"column_end":17},"name":"union","qualname":"<OrdSet<A>>::union","value":"pub fn union(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of two sets.","sig":null,"attributes":[{"value":"/ Construct the union of two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234384,"byte_end":234420,"line_start":624,"line_end":624,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234425,"byte_end":234428,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234433,"byte_end":234453,"line_start":626,"line_end":626,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234458,"byte_end":234461,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234466,"byte_end":234480,"line_start":628,"line_end":628,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234485,"byte_end":234488,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234493,"byte_end":234500,"line_start":630,"line_end":630,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234505,"byte_end":234540,"line_start":631,"line_end":631,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234545,"byte_end":234574,"line_start":632,"line_end":632,"column_start":5,"column_end":34}},{"value":"/ let set1 = ordset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234579,"byte_end":234608,"line_start":633,"line_end":633,"column_start":5,"column_end":34}},{"value":"/ let set2 = ordset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234613,"byte_end":234642,"line_start":634,"line_end":634,"column_start":5,"column_end":34}},{"value":"/ let expected = ordset!{1, 2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234647,"byte_end":234683,"line_start":635,"line_end":635,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(expected, set1.union(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234688,"byte_end":234731,"line_start":636,"line_end":636,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234736,"byte_end":234743,"line_start":637,"line_end":637,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234748,"byte_end":234759,"line_start":638,"line_end":638,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235007,"byte_end":235013,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"unions","qualname":"<OrdSet<A>>::unions","value":"pub fn unions<I>(I) -> Self where I: IntoIterator<Item = Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of multiple sets.","sig":null,"attributes":[{"value":"/ Construct the union of multiple sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234905,"byte_end":234946,"line_start":646,"line_end":646,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234951,"byte_end":234954,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234959,"byte_end":234979,"line_start":648,"line_end":648,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":234984,"byte_end":234995,"line_start":649,"line_end":649,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235735,"byte_end":235745,"line_start":677,"line_end":677,"column_start":12,"column_end":22},"name":"difference","qualname":"<OrdSet<A>>::difference","value":"pub fn difference(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two sets.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235153,"byte_end":235209,"line_start":657,"line_end":657,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235214,"byte_end":235217,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235222,"byte_end":235250,"line_start":659,"line_end":659,"column_start":5,"column_end":33}},{"value":"/ [`symmetric_difference`][symmetric_difference] method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235255,"byte_end":235313,"line_start":660,"line_end":660,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235318,"byte_end":235321,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235326,"byte_end":235346,"line_start":662,"line_end":662,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235351,"byte_end":235354,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235359,"byte_end":235373,"line_start":664,"line_end":664,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235378,"byte_end":235381,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235386,"byte_end":235393,"line_start":666,"line_end":666,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235398,"byte_end":235433,"line_start":667,"line_end":667,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235438,"byte_end":235467,"line_start":668,"line_end":668,"column_start":5,"column_end":34}},{"value":"/ let set1 = ordset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235472,"byte_end":235501,"line_start":669,"line_end":669,"column_start":5,"column_end":34}},{"value":"/ let set2 = ordset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235506,"byte_end":235535,"line_start":670,"line_end":670,"column_start":5,"column_end":34}},{"value":"/ let expected = ordset!{1, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235540,"byte_end":235573,"line_start":671,"line_end":671,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(expected, set1.difference(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235578,"byte_end":235626,"line_start":672,"line_end":672,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235631,"byte_end":235638,"line_start":673,"line_end":673,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235643,"byte_end":235646,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ [symmetric_difference]: #method.symmetric_difference","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235651,"byte_end":235707,"line_start":675,"line_end":675,"column_start":5,"column_end":61}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235712,"byte_end":235723,"line_start":676,"line_end":676,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236246,"byte_end":236266,"line_start":696,"line_end":696,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<OrdSet<A>>::symmetric_difference","value":"pub fn symmetric_difference(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two sets.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235827,"byte_end":235883,"line_start":681,"line_end":681,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235888,"byte_end":235891,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235896,"byte_end":235916,"line_start":683,"line_end":683,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235921,"byte_end":235924,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235929,"byte_end":235943,"line_start":685,"line_end":685,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235948,"byte_end":235951,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235956,"byte_end":235963,"line_start":687,"line_end":687,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":235968,"byte_end":236003,"line_start":688,"line_end":688,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236008,"byte_end":236037,"line_start":689,"line_end":689,"column_start":5,"column_end":34}},{"value":"/ let set1 = ordset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236042,"byte_end":236071,"line_start":690,"line_end":690,"column_start":5,"column_end":34}},{"value":"/ let set2 = ordset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236076,"byte_end":236105,"line_start":691,"line_end":691,"column_start":5,"column_end":34}},{"value":"/ let expected = ordset!{1, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236110,"byte_end":236143,"line_start":692,"line_end":692,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(expected, set1.symmetric_difference(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236148,"byte_end":236206,"line_start":693,"line_end":693,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236211,"byte_end":236218,"line_start":694,"line_end":694,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236223,"byte_end":236234,"line_start":695,"line_end":695,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236985,"byte_end":237004,"line_start":721,"line_end":721,"column_start":12,"column_end":31},"name":"relative_complement","qualname":"<OrdSet<A>>::relative_complement","value":"pub fn relative_complement(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the relative complement between two sets, that is the set\n of values in `self` that do not occur in `other`.","sig":null,"attributes":[{"value":"/ Construct the relative complement between two sets, that is the set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236460,"byte_end":236531,"line_start":705,"line_end":705,"column_start":5,"column_end":76}},{"value":"/ of values in `self` that do not occur in `other`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236536,"byte_end":236589,"line_start":706,"line_end":706,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236594,"byte_end":236597,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ Time: O(m log n) where m is the size of the other set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236602,"byte_end":236659,"line_start":708,"line_end":708,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236664,"byte_end":236667,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236672,"byte_end":236686,"line_start":710,"line_end":710,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236691,"byte_end":236694,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236699,"byte_end":236706,"line_start":712,"line_end":712,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236711,"byte_end":236746,"line_start":713,"line_end":713,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236751,"byte_end":236780,"line_start":714,"line_end":714,"column_start":5,"column_end":34}},{"value":"/ let set1 = ordset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236785,"byte_end":236814,"line_start":715,"line_end":715,"column_start":5,"column_end":34}},{"value":"/ let set2 = ordset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236819,"byte_end":236848,"line_start":716,"line_end":716,"column_start":5,"column_end":34}},{"value":"/ let expected = ordset!{1};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236853,"byte_end":236883,"line_start":717,"line_end":717,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(expected, set1.relative_complement(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236888,"byte_end":236945,"line_start":718,"line_end":718,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236950,"byte_end":236957,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":236962,"byte_end":236973,"line_start":720,"line_end":720,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237537,"byte_end":237549,"line_start":743,"line_end":743,"column_start":12,"column_end":24},"name":"intersection","qualname":"<OrdSet<A>>::intersection","value":"pub fn intersection(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the intersection of two sets.","sig":null,"attributes":[{"value":"/ Construct the intersection of two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237142,"byte_end":237185,"line_start":728,"line_end":728,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237190,"byte_end":237193,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237198,"byte_end":237218,"line_start":730,"line_end":730,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237223,"byte_end":237226,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237231,"byte_end":237245,"line_start":732,"line_end":732,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237250,"byte_end":237253,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237258,"byte_end":237265,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237270,"byte_end":237305,"line_start":735,"line_end":735,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237310,"byte_end":237339,"line_start":736,"line_end":736,"column_start":5,"column_end":34}},{"value":"/ let set1 = ordset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237344,"byte_end":237373,"line_start":737,"line_end":737,"column_start":5,"column_end":34}},{"value":"/ let set2 = ordset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237378,"byte_end":237407,"line_start":738,"line_end":738,"column_start":5,"column_end":34}},{"value":"/ let expected = ordset!{2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237412,"byte_end":237442,"line_start":739,"line_end":739,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(expected, set1.intersection(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237447,"byte_end":237497,"line_start":740,"line_end":740,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237502,"byte_end":237509,"line_start":741,"line_end":741,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237514,"byte_end":237525,"line_start":742,"line_end":742,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238064,"byte_end":238069,"line_start":761,"line_end":761,"column_start":12,"column_end":17},"name":"split","qualname":"<OrdSet<A>>::split","value":"pub fn split<BA: ?Sized>(Self, &BA) -> (Self, Self) where BA: Ord,\nA: Borrow<BA>","parent":null,"children":[],"decl_id":null,"docs":" Split a set into two, with the left hand set containing values\n which are smaller than `split`, and the right hand set\n containing values which are larger than `split`.","sig":null,"attributes":[{"value":"/ Split a set into two, with the left hand set containing values","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237768,"byte_end":237834,"line_start":753,"line_end":753,"column_start":5,"column_end":71}},{"value":"/ which are smaller than `split`, and the right hand set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237839,"byte_end":237897,"line_start":754,"line_end":754,"column_start":5,"column_end":63}},{"value":"/ containing values which are larger than `split`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237902,"byte_end":237954,"line_start":755,"line_end":755,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237959,"byte_end":237962,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ The `split` value itself is discarded.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":237967,"byte_end":238009,"line_start":757,"line_end":757,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238014,"byte_end":238017,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238022,"byte_end":238036,"line_start":759,"line_end":759,"column_start":5,"column_end":19}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238041,"byte_end":238052,"line_start":760,"line_end":760,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238667,"byte_end":238679,"line_start":780,"line_end":780,"column_start":12,"column_end":24},"name":"split_member","qualname":"<OrdSet<A>>::split_member","value":"pub fn split_member<BA: ?Sized>(Self, &BA) -> (Self, bool, Self) where\nBA: Ord, A: Borrow<BA>","parent":null,"children":[],"decl_id":null,"docs":" Split a set into two, with the left hand set containing values\n which are smaller than `split`, and the right hand set\n containing values which are larger than `split`.","sig":null,"attributes":[{"value":"/ Split a set into two, with the left hand set containing values","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238263,"byte_end":238329,"line_start":770,"line_end":770,"column_start":5,"column_end":71}},{"value":"/ which are smaller than `split`, and the right hand set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238334,"byte_end":238392,"line_start":771,"line_end":771,"column_start":5,"column_end":63}},{"value":"/ containing values which are larger than `split`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238397,"byte_end":238449,"line_start":772,"line_end":772,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238454,"byte_end":238457,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ Returns a tuple of the two sets and a boolean which is true if","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238462,"byte_end":238528,"line_start":774,"line_end":774,"column_start":5,"column_end":71}},{"value":"/ the `split` value existed in the original set, and false","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238533,"byte_end":238593,"line_start":775,"line_end":775,"column_start":5,"column_end":65}},{"value":"/ otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238598,"byte_end":238612,"line_start":776,"line_end":776,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238617,"byte_end":238620,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238625,"byte_end":238639,"line_start":778,"line_end":778,"column_start":5,"column_end":19}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":238644,"byte_end":238655,"line_start":779,"line_end":779,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239460,"byte_end":239464,"line_start":809,"line_end":809,"column_start":12,"column_end":16},"name":"take","qualname":"<OrdSet<A>>::take","value":"pub fn take(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a set with only the `n` smallest values from a given\n set.","sig":null,"attributes":[{"value":"/ Construct a set with only the `n` smallest values from a given","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239326,"byte_end":239392,"line_start":804,"line_end":804,"column_start":5,"column_end":71}},{"value":"/ set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239397,"byte_end":239405,"line_start":805,"line_end":805,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239410,"byte_end":239413,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239418,"byte_end":239432,"line_start":807,"line_end":807,"column_start":5,"column_end":19}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239437,"byte_end":239448,"line_start":808,"line_end":808,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239687,"byte_end":239691,"line_start":818,"line_end":818,"column_start":12,"column_end":16},"name":"skip","qualname":"<OrdSet<A>>::skip","value":"pub fn skip(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a set with the `n` smallest values removed from a\n given set.","sig":null,"attributes":[{"value":"/ Construct a set with the `n` smallest values removed from a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239550,"byte_end":239613,"line_start":813,"line_end":813,"column_start":5,"column_end":68}},{"value":"/ given set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239618,"byte_end":239632,"line_start":814,"line_end":814,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239637,"byte_end":239640,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239645,"byte_end":239659,"line_start":816,"line_end":816,"column_start":5,"column_end":19}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239664,"byte_end":239675,"line_start":817,"line_end":817,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1262},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242211,"byte_end":242215,"line_start":941,"line_end":941,"column_start":12,"column_end":16},"name":"Iter","qualname":"::ord::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1265}],"decl_id":null,"docs":" An iterator over the elements of a set.\n","sig":null,"attributes":[{"value":"/ An iterator over the elements of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242156,"byte_end":242199,"line_start":940,"line_end":940,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1279},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243137,"byte_end":243147,"line_start":979,"line_end":979,"column_start":12,"column_end":22},"name":"RangedIter","qualname":"::ord::set::RangedIter","value":"RangedIter {  }","parent":null,"children":[{"krate":0,"index":1282}],"decl_id":null,"docs":" A ranged iterator over the elements of a set.","sig":null,"attributes":[{"value":"/ A ranged iterator over the elements of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242887,"byte_end":242936,"line_start":974,"line_end":974,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242937,"byte_end":242940,"line_start":975,"line_end":975,"column_start":1,"column_end":4}},{"value":"/ The only difference from `Iter` is that this one doesn't implement","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242941,"byte_end":243011,"line_start":976,"line_end":976,"column_start":1,"column_end":71}},{"value":"/ `ExactSizeIterator` because we can't know the size of the range without first","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243012,"byte_end":243093,"line_start":977,"line_end":977,"column_start":1,"column_end":82}},{"value":"/ iterating over it to count.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243094,"byte_end":243125,"line_start":978,"line_end":978,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1293},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243802,"byte_end":243815,"line_start":1011,"line_end":1011,"column_start":12,"column_end":25},"name":"ConsumingIter","qualname":"::ord::set::ConsumingIter","value":"ConsumingIter {  }","parent":null,"children":[{"krate":0,"index":1295}],"decl_id":null,"docs":" A consuming iterator over the elements of a set.\n","sig":null,"attributes":[{"value":"/ A consuming iterator over the elements of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243738,"byte_end":243790,"line_start":1010,"line_end":1010,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1301},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":244188,"byte_end":244196,"line_start":1030,"line_end":1030,"column_start":12,"column_end":20},"name":"DiffIter","qualname":"::ord::set::DiffIter","value":"DiffIter {  }","parent":null,"children":[{"krate":0,"index":1304}],"decl_id":null,"docs":" An iterator over the difference between two sets.\n","sig":null,"attributes":[{"value":"/ An iterator over the difference between two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":244123,"byte_end":244176,"line_start":1029,"line_end":1029,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1371},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::hash::map","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":3239},{"krate":0,"index":1378},{"krate":0,"index":3241},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":3247},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":2900},{"krate":0,"index":2905},{"krate":0,"index":2911},{"krate":0,"index":2915},{"krate":0,"index":1406},{"krate":0,"index":1414},{"krate":0,"index":1420},{"krate":0,"index":1424},{"krate":0,"index":1428},{"krate":0,"index":1445},{"krate":0,"index":1472},{"krate":0,"index":1547},{"krate":0,"index":1558},{"krate":0,"index":1571},{"krate":0,"index":1579},{"krate":0,"index":1591},{"krate":0,"index":1599},{"krate":0,"index":1607},{"krate":0,"index":1612},{"krate":0,"index":1617},{"krate":0,"index":1621},{"krate":0,"index":1626},{"krate":0,"index":1631},{"krate":0,"index":1637},{"krate":0,"index":1642},{"krate":0,"index":1648},{"krate":0,"index":1655},{"krate":0,"index":1662},{"krate":0,"index":1670},{"krate":0,"index":1678},{"krate":0,"index":1685},{"krate":0,"index":1690},{"krate":0,"index":1695},{"krate":0,"index":1703},{"krate":0,"index":1707},{"krate":0,"index":1711},{"krate":0,"index":1716},{"krate":0,"index":1724},{"krate":0,"index":1728},{"krate":0,"index":1732},{"krate":0,"index":1735},{"krate":0,"index":1741},{"krate":0,"index":1743},{"krate":0,"index":1745},{"krate":0,"index":1750},{"krate":0,"index":1758},{"krate":0,"index":1762},{"krate":0,"index":1766},{"krate":0,"index":1771},{"krate":0,"index":1779},{"krate":0,"index":1783},{"krate":0,"index":1787},{"krate":0,"index":1795},{"krate":0,"index":1802},{"krate":0,"index":1808},{"krate":0,"index":1813},{"krate":0,"index":1825},{"krate":0,"index":1831},{"krate":0,"index":1836},{"krate":0,"index":1842},{"krate":0,"index":1847},{"krate":0,"index":1854},{"krate":0,"index":1859}],"decl_id":null,"docs":" An unordered map.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/mod.rs","byte_start":250199,"byte_end":250211,"line_start":5,"line_end":5,"column_start":1,"column_end":13}},{"value":"/ An unordered map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250455,"byte_end":250476,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250477,"byte_end":250480,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ An immutable hash map using [hash array mapped tries][1].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250481,"byte_end":250542,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250543,"byte_end":250546,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Most operations on this map are O(log<sub>x</sub> n) for a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250547,"byte_end":250609,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ suitably high *x* that it should be nearly O(1) for most maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250610,"byte_end":250676,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/ Because of this, it's a great choice for a generic map as long as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250677,"byte_end":250746,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ you don't mind that keys will need to implement","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250747,"byte_end":250798,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"/ [`Hash`][std::hash::Hash] and [`Eq`][std::cmp::Eq].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250799,"byte_end":250854,"line_start":13,"line_end":13,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250855,"byte_end":250858,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Map entries will have a predictable order based on the hasher","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250859,"byte_end":250924,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"/ being used. Unless otherwise specified, this will be the standard","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250925,"byte_end":250994,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ [`RandomState`][std::collections::hash_map::RandomState] hasher.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":250995,"byte_end":251063,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":251064,"byte_end":251067,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Hash_array_mapped_trie","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":251068,"byte_end":251129,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/ [std::cmp::Eq]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":251130,"byte_end":251197,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ [std::hash::Hash]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":251198,"byte_end":251271,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ [std::collections::hash_map::RandomState]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":251272,"byte_end":251393,"line_start":22,"line_end":22,"column_start":1,"column_end":122}}]},{"kind":"Struct","id":{"krate":0,"index":2900},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":252690,"byte_end":252701,"line_start":79,"line_end":79,"column_start":11,"column_end":22},"name":"HashMapPool","qualname":"::hash::map::HashMapPool","value":"","parent":null,"children":[],"decl_id":null,"docs":" A memory pool for the appropriate node type.\n","sig":null,"attributes":[{"value":"/ A memory pool for the appropriate node type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/util.rs","byte_start":142848,"byte_end":142896,"line_start":116,"line_end":116,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1406},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253675,"byte_end":253682,"line_start":100,"line_end":100,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::hash::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413}],"decl_id":null,"docs":" An unordered map.","sig":null,"attributes":[{"value":"/ An unordered map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":252723,"byte_end":252744,"line_start":81,"line_end":81,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":252745,"byte_end":252748,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ An immutable hash map using [hash array mapped tries] [1].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":252749,"byte_end":252811,"line_start":83,"line_end":83,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":252812,"byte_end":252815,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ Most operations on this map are O(log<sub>x</sub> n) for a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":252816,"byte_end":252878,"line_start":85,"line_end":85,"column_start":1,"column_end":63}},{"value":"/ suitably high *x* that it should be nearly O(1) for most maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":252879,"byte_end":252945,"line_start":86,"line_end":86,"column_start":1,"column_end":67}},{"value":"/ Because of this, it's a great choice for a generic map as long as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":252946,"byte_end":253015,"line_start":87,"line_end":87,"column_start":1,"column_end":70}},{"value":"/ you don't mind that keys will need to implement","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253016,"byte_end":253067,"line_start":88,"line_end":88,"column_start":1,"column_end":52}},{"value":"/ [`Hash`][std::hash::Hash] and [`Eq`][std::cmp::Eq].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253068,"byte_end":253123,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253124,"byte_end":253127,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ Map entries will have a predictable order based on the hasher","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253128,"byte_end":253193,"line_start":91,"line_end":91,"column_start":1,"column_end":66}},{"value":"/ being used. Unless otherwise specified, this will be the standard","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253194,"byte_end":253263,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"/ [`RandomState`][std::collections::hash_map::RandomState] hasher.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253264,"byte_end":253332,"line_start":93,"line_end":93,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253333,"byte_end":253336,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Hash_array_mapped_trie","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253337,"byte_end":253398,"line_start":95,"line_end":95,"column_start":1,"column_end":62}},{"value":"/ [std::cmp::Eq]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253399,"byte_end":253466,"line_start":96,"line_end":96,"column_start":1,"column_end":68}},{"value":"/ [std::hash::Hash]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253467,"byte_end":253540,"line_start":97,"line_end":97,"column_start":1,"column_end":74}},{"value":"/ [std::collections::hash_map::RandomState]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":253541,"byte_end":253662,"line_start":98,"line_end":98,"column_start":1,"column_end":122}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254132,"byte_end":254135,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<HashMap<K, V, RandomState>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty hash map.\n","sig":null,"attributes":[{"value":"/ Construct an empty hash map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254058,"byte_end":254090,"line_start":123,"line_end":123,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254095,"byte_end":254104,"line_start":124,"line_end":124,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254109,"byte_end":254120,"line_start":125,"line_end":125,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254992,"byte_end":254996,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"unit","qualname":"<HashMap<K, V, RandomState>>::unit","value":"pub fn unit(K, V) -> HashMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Construct a hash map with a single mapping.","sig":null,"attributes":[{"value":"/ Construct a hash map with a single mapping.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254628,"byte_end":254675,"line_start":149,"line_end":149,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254680,"byte_end":254683,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254688,"byte_end":254702,"line_start":151,"line_end":151,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254707,"byte_end":254710,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254715,"byte_end":254722,"line_start":153,"line_end":153,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254727,"byte_end":254762,"line_start":154,"line_end":154,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254767,"byte_end":254798,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/ let map = HashMap::unit(123, \"onetwothree\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254803,"byte_end":254851,"line_start":156,"line_end":156,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254856,"byte_end":254871,"line_start":157,"line_end":157,"column_start":5,"column_end":20}},{"value":"/   map.get(&123),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254876,"byte_end":254896,"line_start":158,"line_end":158,"column_start":5,"column_end":25}},{"value":"/   Some(&\"onetwothree\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254901,"byte_end":254927,"line_start":159,"line_end":159,"column_start":5,"column_end":31}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254932,"byte_end":254938,"line_start":160,"line_end":160,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254943,"byte_end":254950,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254955,"byte_end":254964,"line_start":162,"line_end":162,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254969,"byte_end":254980,"line_start":163,"line_end":163,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255494,"byte_end":255502,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether a hash map is empty.","sig":null,"attributes":[{"value":"/ Test whether a hash map is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255110,"byte_end":255147,"line_start":170,"line_end":170,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255152,"byte_end":255155,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255160,"byte_end":255174,"line_start":172,"line_end":172,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255179,"byte_end":255182,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255187,"byte_end":255201,"line_start":174,"line_end":174,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255206,"byte_end":255209,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255214,"byte_end":255221,"line_start":176,"line_end":176,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255226,"byte_end":255261,"line_start":177,"line_end":177,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255266,"byte_end":255297,"line_start":178,"line_end":178,"column_start":5,"column_end":36}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255302,"byte_end":255314,"line_start":179,"line_end":179,"column_start":5,"column_end":17}},{"value":"/   !hashmap!{1 => 2}.is_empty()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255319,"byte_end":255353,"line_start":180,"line_end":180,"column_start":5,"column_end":39}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255358,"byte_end":255364,"line_start":181,"line_end":181,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255369,"byte_end":255381,"line_start":182,"line_end":182,"column_start":5,"column_end":17}},{"value":"/   HashMap::<i32, i32>::new().is_empty()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255386,"byte_end":255429,"line_start":183,"line_end":183,"column_start":5,"column_end":48}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255434,"byte_end":255440,"line_start":184,"line_end":184,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255445,"byte_end":255452,"line_start":185,"line_end":185,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255457,"byte_end":255466,"line_start":186,"line_end":186,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255471,"byte_end":255482,"line_start":187,"line_end":187,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1433},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255896,"byte_end":255899,"line_start":209,"line_end":209,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the size of a hash map.","sig":null,"attributes":[{"value":"/ Get the size of a hash map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255555,"byte_end":255586,"line_start":192,"line_end":192,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255591,"byte_end":255594,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255599,"byte_end":255613,"line_start":194,"line_end":194,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255618,"byte_end":255621,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255626,"byte_end":255640,"line_start":196,"line_end":196,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255645,"byte_end":255648,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255653,"byte_end":255660,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255665,"byte_end":255700,"line_start":199,"line_end":199,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255705,"byte_end":255736,"line_start":200,"line_end":200,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(3, hashmap!{","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255741,"byte_end":255768,"line_start":201,"line_end":201,"column_start":5,"column_end":32}},{"value":"/   1 => 11,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255773,"byte_end":255787,"line_start":202,"line_end":202,"column_start":5,"column_end":19}},{"value":"/   2 => 22,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255792,"byte_end":255806,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/   3 => 33","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255811,"byte_end":255824,"line_start":204,"line_end":204,"column_start":5,"column_end":18}},{"value":"/ }.len());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255829,"byte_end":255842,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255847,"byte_end":255854,"line_start":206,"line_end":206,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255859,"byte_end":255868,"line_start":207,"line_end":207,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255873,"byte_end":255884,"line_start":208,"line_end":208,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1434},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256323,"byte_end":256329,"line_start":222,"line_end":222,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<HashMap<K, V, S>>::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether two maps refer to the same content in memory.","sig":null,"attributes":[{"value":"/ Test whether two maps refer to the same content in memory.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255947,"byte_end":256009,"line_start":213,"line_end":213,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256014,"byte_end":256017,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ This is true if the two sides are references to the same map,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256022,"byte_end":256087,"line_start":215,"line_end":215,"column_start":5,"column_end":70}},{"value":"/ or if the two maps refer to the same root node.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256092,"byte_end":256143,"line_start":216,"line_end":216,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256148,"byte_end":256151,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This would return true if you're comparing a map to itself, or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256156,"byte_end":256222,"line_start":218,"line_end":218,"column_start":5,"column_end":71}},{"value":"/ if you're comparing a map to a fresh clone of itself.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256227,"byte_end":256284,"line_start":219,"line_end":219,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256289,"byte_end":256292,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256297,"byte_end":256311,"line_start":221,"line_end":221,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1435},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256849,"byte_end":256860,"line_start":238,"line_end":238,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"pub fn with_hasher<RS>(RS) -> Self where Ref<S>: From<RS>","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty hash map using the provided hasher.\n","sig":null,"attributes":[{"value":"/ Construct an empty hash map using the provided hasher.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256749,"byte_end":256807,"line_start":235,"line_end":235,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256812,"byte_end":256821,"line_start":236,"line_end":236,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":256826,"byte_end":256837,"line_start":237,"line_end":237,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257752,"byte_end":257758,"line_start":272,"line_end":272,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &Ref<S>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the map's [`BuildHasher`][BuildHasher].","sig":null,"attributes":[{"value":"/ Get a reference to the map's [`BuildHasher`][BuildHasher].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257573,"byte_end":257635,"line_start":268,"line_end":268,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257640,"byte_end":257643,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ [BuildHasher]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257648,"byte_end":257724,"line_start":270,"line_end":270,"column_start":5,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257729,"byte_end":257740,"line_start":271,"line_end":271,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1438},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257939,"byte_end":257947,"line_start":280,"line_end":280,"column_start":12,"column_end":20},"name":"new_from","qualname":"<HashMap<K, V, S>>::new_from","value":"pub fn new_from<K1, V1>(&Self) -> HashMap<K1, V1, S> where K1: Hash + Eq +\nClone, V1: Clone","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty hash map using the same hasher as the\n current hash map.\n","sig":null,"attributes":[{"value":"/ Construct an empty hash map using the same hasher as the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257811,"byte_end":257871,"line_start":276,"line_end":276,"column_start":5,"column_end":65}},{"value":"/ current hash map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257876,"byte_end":257897,"line_start":277,"line_end":277,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257902,"byte_end":257911,"line_start":278,"line_end":278,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":257916,"byte_end":257927,"line_start":279,"line_end":279,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258681,"byte_end":258685,"line_start":304,"line_end":304,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the key/value pairs of a hash map.","sig":null,"attributes":[{"value":"/ Get an iterator over the key/value pairs of a hash map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258277,"byte_end":258336,"line_start":295,"line_end":295,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258341,"byte_end":258344,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Please note that the order is consistent between maps using","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258349,"byte_end":258412,"line_start":297,"line_end":297,"column_start":5,"column_end":68}},{"value":"/ the same hasher, but no other ordering guarantee is offered.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258417,"byte_end":258481,"line_start":298,"line_end":298,"column_start":5,"column_end":69}},{"value":"/ Items will not come out in insertion order or sort order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258486,"byte_end":258547,"line_start":299,"line_end":299,"column_start":5,"column_end":66}},{"value":"/ They will, however, come out in the same order every time for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258552,"byte_end":258617,"line_start":300,"line_end":300,"column_start":5,"column_end":70}},{"value":"/ the same map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258622,"byte_end":258639,"line_start":301,"line_end":301,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258644,"byte_end":258653,"line_start":302,"line_end":302,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258658,"byte_end":258669,"line_start":303,"line_end":303,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1442},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259191,"byte_end":259195,"line_start":319,"line_end":319,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over a hash map's keys.","sig":null,"attributes":[{"value":"/ Get an iterator over a hash map's keys.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258803,"byte_end":258846,"line_start":310,"line_end":310,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258851,"byte_end":258854,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Please note that the order is consistent between maps using","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258859,"byte_end":258922,"line_start":312,"line_end":312,"column_start":5,"column_end":68}},{"value":"/ the same hasher, but no other ordering guarantee is offered.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258927,"byte_end":258991,"line_start":313,"line_end":313,"column_start":5,"column_end":69}},{"value":"/ Items will not come out in insertion order or sort order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":258996,"byte_end":259057,"line_start":314,"line_end":314,"column_start":5,"column_end":66}},{"value":"/ They will, however, come out in the same order every time for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259062,"byte_end":259127,"line_start":315,"line_end":315,"column_start":5,"column_end":70}},{"value":"/ the same map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259132,"byte_end":259149,"line_start":316,"line_end":316,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259154,"byte_end":259163,"line_start":317,"line_end":317,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259168,"byte_end":259179,"line_start":318,"line_end":318,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259703,"byte_end":259709,"line_start":334,"line_end":334,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over a hash map's values.","sig":null,"attributes":[{"value":"/ Get an iterator over a hash map's values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259313,"byte_end":259358,"line_start":325,"line_end":325,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259363,"byte_end":259366,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Please note that the order is consistent between maps using","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259371,"byte_end":259434,"line_start":327,"line_end":327,"column_start":5,"column_end":68}},{"value":"/ the same hasher, but no other ordering guarantee is offered.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259439,"byte_end":259503,"line_start":328,"line_end":328,"column_start":5,"column_end":69}},{"value":"/ Items will not come out in insertion order or sort order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259508,"byte_end":259569,"line_start":329,"line_end":329,"column_start":5,"column_end":66}},{"value":"/ They will, however, come out in the same order every time for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259574,"byte_end":259639,"line_start":330,"line_end":330,"column_start":5,"column_end":70}},{"value":"/ the same map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259644,"byte_end":259661,"line_start":331,"line_end":331,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259666,"byte_end":259675,"line_start":332,"line_end":332,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259680,"byte_end":259691,"line_start":333,"line_end":333,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260258,"byte_end":260263,"line_start":356,"line_end":356,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Discard all elements from the map.","sig":null,"attributes":[{"value":"/ Discard all elements from the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259831,"byte_end":259869,"line_start":340,"line_end":340,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259874,"byte_end":259877,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ This leaves you with an empty map, and all elements that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259882,"byte_end":259942,"line_start":342,"line_end":342,"column_start":5,"column_end":65}},{"value":"/ were previously inside it are dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259947,"byte_end":259989,"line_start":343,"line_end":343,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":259994,"byte_end":259997,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260002,"byte_end":260016,"line_start":345,"line_end":345,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260021,"byte_end":260024,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260029,"byte_end":260043,"line_start":347,"line_end":347,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260048,"byte_end":260051,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260056,"byte_end":260063,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260068,"byte_end":260103,"line_start":350,"line_end":350,"column_start":5,"column_end":40}},{"value":"/ # use im::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260108,"byte_end":260130,"line_start":351,"line_end":351,"column_start":5,"column_end":27}},{"value":"/ let mut map = hashmap![1=>1, 2=>2, 3=>3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260135,"byte_end":260180,"line_start":352,"line_end":352,"column_start":5,"column_end":50}},{"value":"/ map.clear();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260185,"byte_end":260201,"line_start":353,"line_end":353,"column_start":5,"column_end":21}},{"value":"/ assert!(map.is_empty());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260206,"byte_end":260234,"line_start":354,"line_end":354,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260239,"byte_end":260246,"line_start":355,"line_end":355,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261400,"byte_end":261403,"line_start":408,"line_end":408,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S>>::get","value":"pub fn get<BK: ?Sized>(&Self, &BK) -> Option<&V> where BK: Hash + Eq,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get the value for a key from a hash map.","sig":null,"attributes":[{"value":"/ Get the value for a key from a hash map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261041,"byte_end":261085,"line_start":392,"line_end":392,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261090,"byte_end":261093,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261098,"byte_end":261116,"line_start":394,"line_end":394,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261121,"byte_end":261124,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261129,"byte_end":261143,"line_start":396,"line_end":396,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261148,"byte_end":261151,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261156,"byte_end":261163,"line_start":398,"line_end":398,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261168,"byte_end":261203,"line_start":399,"line_end":399,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261208,"byte_end":261239,"line_start":400,"line_end":400,"column_start":5,"column_end":36}},{"value":"/ let map = hashmap!{123 => \"lol\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261244,"byte_end":261281,"line_start":401,"line_end":401,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261286,"byte_end":261301,"line_start":402,"line_end":402,"column_start":5,"column_end":20}},{"value":"/   map.get(&123),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261306,"byte_end":261326,"line_start":403,"line_end":403,"column_start":5,"column_end":25}},{"value":"/   Some(&\"lol\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261331,"byte_end":261349,"line_start":404,"line_end":404,"column_start":5,"column_end":23}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261354,"byte_end":261360,"line_start":405,"line_end":405,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261365,"byte_end":261372,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261377,"byte_end":261388,"line_start":407,"line_end":407,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262014,"byte_end":262027,"line_start":434,"line_end":434,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<BK: ?Sized>(&Self, &BK) -> Option<(&K, &V)> where\nBK: Hash + Eq, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get the key/value pair for a key from a hash map.","sig":null,"attributes":[{"value":"/ Get the key/value pair for a key from a hash map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261628,"byte_end":261681,"line_start":418,"line_end":418,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261686,"byte_end":261689,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261694,"byte_end":261712,"line_start":420,"line_end":420,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261717,"byte_end":261720,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261725,"byte_end":261739,"line_start":422,"line_end":422,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261744,"byte_end":261747,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261752,"byte_end":261759,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261764,"byte_end":261799,"line_start":425,"line_end":425,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261804,"byte_end":261835,"line_start":426,"line_end":426,"column_start":5,"column_end":36}},{"value":"/ let map = hashmap!{123 => \"lol\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261840,"byte_end":261877,"line_start":427,"line_end":427,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261882,"byte_end":261897,"line_start":428,"line_end":428,"column_start":5,"column_end":20}},{"value":"/   map.get_key_value(&123),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261902,"byte_end":261932,"line_start":429,"line_end":429,"column_start":5,"column_end":35}},{"value":"/   Some((&123, &\"lol\"))","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261937,"byte_end":261963,"line_start":430,"line_end":430,"column_start":5,"column_end":31}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261968,"byte_end":261974,"line_start":431,"line_end":431,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261979,"byte_end":261986,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":261991,"byte_end":262002,"line_start":433,"line_end":433,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262689,"byte_end":262701,"line_start":463,"line_end":463,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S>>::contains_key","value":"pub fn contains_key<BK: ?Sized>(&Self, &BK) -> bool where BK: Hash + Eq,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Test for the presence of a key in a hash map.","sig":null,"attributes":[{"value":"/ Test for the presence of a key in a hash map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262267,"byte_end":262316,"line_start":444,"line_end":444,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262321,"byte_end":262324,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262329,"byte_end":262347,"line_start":446,"line_end":446,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262352,"byte_end":262355,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262360,"byte_end":262374,"line_start":448,"line_end":448,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262379,"byte_end":262382,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262387,"byte_end":262394,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262399,"byte_end":262434,"line_start":451,"line_end":451,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262439,"byte_end":262470,"line_start":452,"line_end":452,"column_start":5,"column_end":36}},{"value":"/ let map = hashmap!{123 => \"lol\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262475,"byte_end":262512,"line_start":453,"line_end":453,"column_start":5,"column_end":42}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262517,"byte_end":262529,"line_start":454,"line_end":454,"column_start":5,"column_end":17}},{"value":"/   map.contains_key(&123)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262534,"byte_end":262562,"line_start":455,"line_end":455,"column_start":5,"column_end":33}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262567,"byte_end":262573,"line_start":456,"line_end":456,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262578,"byte_end":262590,"line_start":457,"line_end":457,"column_start":5,"column_end":17}},{"value":"/   !map.contains_key(&321)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262595,"byte_end":262624,"line_start":458,"line_end":458,"column_start":5,"column_end":34}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262629,"byte_end":262635,"line_start":459,"line_end":459,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262640,"byte_end":262647,"line_start":460,"line_end":460,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262652,"byte_end":262661,"line_start":461,"line_end":461,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262666,"byte_end":262677,"line_start":462,"line_end":462,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263132,"byte_end":263144,"line_start":479,"line_end":479,"column_start":12,"column_end":24},"name":"is_submap_by","qualname":"<HashMap<K, V, S>>::is_submap_by","value":"pub fn is_submap_by<B, RM, F>(&Self, RM, F) -> bool where F: FnMut(&V, &B) ->\nbool, RM: Borrow<HashMap<K, B, S>>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a map is a submap of another map, meaning that\n all keys in our map must also be in the other map, with the\n same values.","sig":null,"attributes":[{"value":"/ Test whether a map is a submap of another map, meaning that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262841,"byte_end":262904,"line_start":471,"line_end":471,"column_start":5,"column_end":68}},{"value":"/ all keys in our map must also be in the other map, with the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262909,"byte_end":262972,"line_start":472,"line_end":472,"column_start":5,"column_end":68}},{"value":"/ same values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262977,"byte_end":262993,"line_start":473,"line_end":473,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":262998,"byte_end":263001,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ Use the provided function to decide whether values are equal.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263006,"byte_end":263071,"line_start":475,"line_end":475,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263076,"byte_end":263079,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263084,"byte_end":263104,"line_start":477,"line_end":477,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263109,"byte_end":263120,"line_start":478,"line_end":478,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263782,"byte_end":263801,"line_start":497,"line_end":497,"column_start":12,"column_end":31},"name":"is_proper_submap_by","qualname":"<HashMap<K, V, S>>::is_proper_submap_by","value":"pub fn is_proper_submap_by<B, RM, F>(&Self, RM, F) -> bool where\nF: FnMut(&V, &B) -> bool, RM: Borrow<HashMap<K, B, S>>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a map is a proper submap of another map, meaning\n that all keys in our map must also be in the other map, with\n the same values. To be a proper submap, ours must also contain\n fewer keys than the other map.","sig":null,"attributes":[{"value":"/ Test whether a map is a proper submap of another map, meaning","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263399,"byte_end":263464,"line_start":488,"line_end":488,"column_start":5,"column_end":70}},{"value":"/ that all keys in our map must also be in the other map, with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263469,"byte_end":263533,"line_start":489,"line_end":489,"column_start":5,"column_end":69}},{"value":"/ the same values. To be a proper submap, ours must also contain","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263538,"byte_end":263604,"line_start":490,"line_end":490,"column_start":5,"column_end":71}},{"value":"/ fewer keys than the other map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263609,"byte_end":263643,"line_start":491,"line_end":491,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263648,"byte_end":263651,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Use the provided function to decide whether values are equal.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263656,"byte_end":263721,"line_start":493,"line_end":493,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263726,"byte_end":263729,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263734,"byte_end":263754,"line_start":495,"line_end":495,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":263759,"byte_end":263770,"line_start":496,"line_end":496,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264520,"byte_end":264529,"line_start":522,"line_end":522,"column_start":12,"column_end":21},"name":"is_submap","qualname":"<HashMap<K, V, S>>::is_submap","value":"pub fn is_submap<RM>(&Self, RM) -> bool where V: PartialEq, RM: Borrow<Self>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a map is a submap of another map, meaning that\n all keys in our map must also be in the other map, with the\n same values.","sig":null,"attributes":[{"value":"/ Test whether a map is a submap of another map, meaning that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264021,"byte_end":264084,"line_start":505,"line_end":505,"column_start":5,"column_end":68}},{"value":"/ all keys in our map must also be in the other map, with the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264089,"byte_end":264152,"line_start":506,"line_end":506,"column_start":5,"column_end":68}},{"value":"/ same values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264157,"byte_end":264173,"line_start":507,"line_end":507,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264178,"byte_end":264181,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264186,"byte_end":264206,"line_start":509,"line_end":509,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264211,"byte_end":264214,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264219,"byte_end":264233,"line_start":511,"line_end":511,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264238,"byte_end":264241,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264246,"byte_end":264253,"line_start":513,"line_end":513,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264258,"byte_end":264293,"line_start":514,"line_end":514,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264298,"byte_end":264329,"line_start":515,"line_end":515,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264334,"byte_end":264374,"line_start":516,"line_end":516,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{1 => 1, 2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264379,"byte_end":264427,"line_start":517,"line_end":517,"column_start":5,"column_end":53}},{"value":"/ assert!(map1.is_submap(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264432,"byte_end":264466,"line_start":518,"line_end":518,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264471,"byte_end":264478,"line_start":519,"line_end":519,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264483,"byte_end":264492,"line_start":520,"line_end":520,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264497,"byte_end":264508,"line_start":521,"line_end":521,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265435,"byte_end":265451,"line_start":552,"line_end":552,"column_start":12,"column_end":28},"name":"is_proper_submap","qualname":"<HashMap<K, V, S>>::is_proper_submap","value":"pub fn is_proper_submap<RM>(&Self, RM) -> bool where V: PartialEq,\nRM: Borrow<Self>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a map is a proper submap of another map, meaning\n that all keys in our map must also be in the other map, with\n the same values. To be a proper submap, ours must also contain\n fewer keys than the other map.","sig":null,"attributes":[{"value":"/ Test whether a map is a proper submap of another map, meaning","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264692,"byte_end":264757,"line_start":530,"line_end":530,"column_start":5,"column_end":70}},{"value":"/ that all keys in our map must also be in the other map, with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264762,"byte_end":264826,"line_start":531,"line_end":531,"column_start":5,"column_end":69}},{"value":"/ the same values. To be a proper submap, ours must also contain","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264831,"byte_end":264897,"line_start":532,"line_end":532,"column_start":5,"column_end":71}},{"value":"/ fewer keys than the other map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264902,"byte_end":264936,"line_start":533,"line_end":533,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264941,"byte_end":264944,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264949,"byte_end":264969,"line_start":535,"line_end":535,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264974,"byte_end":264977,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":264982,"byte_end":264996,"line_start":537,"line_end":537,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265001,"byte_end":265004,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265009,"byte_end":265016,"line_start":539,"line_end":539,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265021,"byte_end":265056,"line_start":540,"line_end":540,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265061,"byte_end":265092,"line_start":541,"line_end":541,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265097,"byte_end":265137,"line_start":542,"line_end":542,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{1 => 1, 2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265142,"byte_end":265190,"line_start":543,"line_end":543,"column_start":5,"column_end":53}},{"value":"/ assert!(map1.is_proper_submap(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265195,"byte_end":265236,"line_start":544,"line_end":544,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265241,"byte_end":265244,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ let map3 = hashmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265249,"byte_end":265289,"line_start":546,"line_end":546,"column_start":5,"column_end":45}},{"value":"/ let map4 = hashmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265294,"byte_end":265334,"line_start":547,"line_end":547,"column_start":5,"column_end":45}},{"value":"/ assert!(!map3.is_proper_submap(map4));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265339,"byte_end":265381,"line_start":548,"line_end":548,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265386,"byte_end":265393,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265398,"byte_end":265407,"line_start":550,"line_end":550,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265412,"byte_end":265423,"line_start":551,"line_end":551,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266124,"byte_end":266132,"line_start":576,"line_end":576,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable iterator over the values of a hash map.","sig":null,"attributes":[{"value":"/ Get a mutable iterator over the values of a hash map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265722,"byte_end":265779,"line_start":567,"line_end":567,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265784,"byte_end":265787,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Please note that the order is consistent between maps using","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265792,"byte_end":265855,"line_start":569,"line_end":569,"column_start":5,"column_end":68}},{"value":"/ the same hasher, but no other ordering guarantee is offered.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265860,"byte_end":265924,"line_start":570,"line_end":570,"column_start":5,"column_end":69}},{"value":"/ Items will not come out in insertion order or sort order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265929,"byte_end":265990,"line_start":571,"line_end":571,"column_start":5,"column_end":66}},{"value":"/ They will, however, come out in the same order every time for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265995,"byte_end":266060,"line_start":572,"line_end":572,"column_start":5,"column_end":70}},{"value":"/ the same map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266065,"byte_end":266082,"line_start":573,"line_end":573,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266087,"byte_end":266096,"line_start":574,"line_end":574,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266101,"byte_end":266112,"line_start":575,"line_end":575,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266820,"byte_end":266827,"line_start":603,"line_end":603,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S>>::get_mut","value":"pub fn get_mut<BK: ?Sized>(&mut Self, &BK) -> Option<&mut V> where BK: Hash +\nEq, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the value for a key from a hash\n map.","sig":null,"attributes":[{"value":"/ Get a mutable reference to the value for a key from a hash","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266339,"byte_end":266401,"line_start":583,"line_end":583,"column_start":5,"column_end":67}},{"value":"/ map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266406,"byte_end":266414,"line_start":584,"line_end":584,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266419,"byte_end":266422,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266427,"byte_end":266445,"line_start":586,"line_end":586,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266450,"byte_end":266453,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266458,"byte_end":266472,"line_start":588,"line_end":588,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266477,"byte_end":266480,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266485,"byte_end":266492,"line_start":590,"line_end":590,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266497,"byte_end":266532,"line_start":591,"line_end":591,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266537,"byte_end":266568,"line_start":592,"line_end":592,"column_start":5,"column_end":36}},{"value":"/ let mut map = hashmap!{123 => \"lol\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266573,"byte_end":266614,"line_start":593,"line_end":593,"column_start":5,"column_end":46}},{"value":"/ if let Some(value) = map.get_mut(&123) {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266619,"byte_end":266663,"line_start":594,"line_end":594,"column_start":5,"column_end":49}},{"value":"/     *value = \"omg\";","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266668,"byte_end":266691,"line_start":595,"line_end":595,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266696,"byte_end":266701,"line_start":596,"line_end":596,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266706,"byte_end":266721,"line_start":597,"line_end":597,"column_start":5,"column_end":20}},{"value":"/   map.get(&123),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266726,"byte_end":266746,"line_start":598,"line_end":598,"column_start":5,"column_end":25}},{"value":"/   Some(&\"omg\")","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266751,"byte_end":266769,"line_start":599,"line_end":599,"column_start":5,"column_end":23}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266774,"byte_end":266780,"line_start":600,"line_end":600,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266785,"byte_end":266792,"line_start":601,"line_end":601,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":266797,"byte_end":266808,"line_start":602,"line_end":602,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267732,"byte_end":267738,"line_start":636,"line_end":636,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key/value mapping into a map.","sig":null,"attributes":[{"value":"/ Insert a key/value mapping into a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267196,"byte_end":267238,"line_start":615,"line_end":615,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267243,"byte_end":267246,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267251,"byte_end":267310,"line_start":617,"line_end":617,"column_start":5,"column_end":64}},{"value":"/ previous value is overwritten.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267315,"byte_end":267349,"line_start":618,"line_end":618,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267354,"byte_end":267357,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267362,"byte_end":267380,"line_start":620,"line_end":620,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267385,"byte_end":267388,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267393,"byte_end":267407,"line_start":622,"line_end":622,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267412,"byte_end":267415,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267420,"byte_end":267427,"line_start":624,"line_end":624,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267432,"byte_end":267467,"line_start":625,"line_end":625,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267472,"byte_end":267503,"line_start":626,"line_end":626,"column_start":5,"column_end":36}},{"value":"/ let mut map = hashmap!{};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267508,"byte_end":267537,"line_start":627,"line_end":627,"column_start":5,"column_end":34}},{"value":"/ map.insert(123, \"123\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267542,"byte_end":267569,"line_start":628,"line_end":628,"column_start":5,"column_end":32}},{"value":"/ map.insert(456, \"456\");","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267574,"byte_end":267601,"line_start":629,"line_end":629,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267606,"byte_end":267621,"line_start":630,"line_end":630,"column_start":5,"column_end":20}},{"value":"/   map,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267626,"byte_end":267636,"line_start":631,"line_end":631,"column_start":5,"column_end":15}},{"value":"/   hashmap!{123 => \"123\", 456 => \"456\"}","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267641,"byte_end":267683,"line_start":632,"line_end":632,"column_start":5,"column_end":47}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267688,"byte_end":267694,"line_start":633,"line_end":633,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267699,"byte_end":267706,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":267711,"byte_end":267720,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268756,"byte_end":268762,"line_start":666,"line_end":666,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S>>::remove","value":"pub fn remove<BK: ?Sized>(&mut Self, &BK) -> Option<V> where BK: Hash + Eq,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Remove a key/value pair from a map, if it exists, and return\n the removed value.","sig":null,"attributes":[{"value":"/ Remove a key/value pair from a map, if it exists, and return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268068,"byte_end":268132,"line_start":646,"line_end":646,"column_start":5,"column_end":69}},{"value":"/ the removed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268137,"byte_end":268159,"line_start":647,"line_end":647,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268164,"byte_end":268167,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ This is a copy-on-write operation, so that the parts of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268172,"byte_end":268235,"line_start":649,"line_end":649,"column_start":5,"column_end":68}},{"value":"/ set's structure which are shared with other sets will be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268240,"byte_end":268300,"line_start":650,"line_end":650,"column_start":5,"column_end":65}},{"value":"/ safely copied before mutating.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268305,"byte_end":268339,"line_start":651,"line_end":651,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268344,"byte_end":268347,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268352,"byte_end":268370,"line_start":653,"line_end":653,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268375,"byte_end":268378,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268383,"byte_end":268397,"line_start":655,"line_end":655,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268402,"byte_end":268405,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268410,"byte_end":268417,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268422,"byte_end":268457,"line_start":658,"line_end":658,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268462,"byte_end":268493,"line_start":659,"line_end":659,"column_start":5,"column_end":36}},{"value":"/ let mut map = hashmap!{123 => \"123\", 456 => \"456\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268498,"byte_end":268553,"line_start":660,"line_end":660,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(Some(\"123\"), map.remove(&123));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268558,"byte_end":268604,"line_start":661,"line_end":661,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(Some(\"456\"), map.remove(&456));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268609,"byte_end":268655,"line_start":662,"line_end":662,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(None, map.remove(&789));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268660,"byte_end":268699,"line_start":663,"line_end":663,"column_start":5,"column_end":44}},{"value":"/ assert!(map.is_empty());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268704,"byte_end":268732,"line_start":664,"line_end":664,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268737,"byte_end":268744,"line_start":665,"line_end":665,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269486,"byte_end":269501,"line_start":690,"line_end":690,"column_start":12,"column_end":27},"name":"remove_with_key","qualname":"<HashMap<K, V, S>>::remove_with_key","value":"pub fn remove_with_key<BK: ?Sized>(&mut Self, &BK) -> Option<(K, V)> where\nBK: Hash + Eq, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Remove a key/value pair from a map, if it exists, and return\n the removed key and value.","sig":null,"attributes":[{"value":"/ Remove a key/value pair from a map, if it exists, and return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268929,"byte_end":268993,"line_start":674,"line_end":674,"column_start":5,"column_end":69}},{"value":"/ the removed key and value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":268998,"byte_end":269028,"line_start":675,"line_end":675,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269033,"byte_end":269036,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269041,"byte_end":269059,"line_start":677,"line_end":677,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269064,"byte_end":269067,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269072,"byte_end":269086,"line_start":679,"line_end":679,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269091,"byte_end":269094,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269099,"byte_end":269106,"line_start":681,"line_end":681,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269111,"byte_end":269146,"line_start":682,"line_end":682,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269151,"byte_end":269182,"line_start":683,"line_end":683,"column_start":5,"column_end":36}},{"value":"/ let mut map = hashmap!{123 => \"123\", 456 => \"456\"};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269187,"byte_end":269242,"line_start":684,"line_end":684,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(Some((123, \"123\")), map.remove_with_key(&123));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269247,"byte_end":269309,"line_start":685,"line_end":685,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(Some((456, \"456\")), map.remove_with_key(&456));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269314,"byte_end":269376,"line_start":686,"line_end":686,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(None, map.remove_with_key(&789));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269381,"byte_end":269429,"line_start":687,"line_end":687,"column_start":5,"column_end":53}},{"value":"/ assert!(map.is_empty());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269434,"byte_end":269462,"line_start":688,"line_end":688,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269467,"byte_end":269474,"line_start":689,"line_end":689,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270034,"byte_end":270039,"line_start":709,"line_end":709,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Get the [`Entry`][Entry] for a key in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the [`Entry`][Entry] for a key in the map for in-place manipulation.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269858,"byte_end":269934,"line_start":703,"line_end":703,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269939,"byte_end":269942,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269947,"byte_end":269965,"line_start":705,"line_end":705,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269970,"byte_end":269973,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ [Entry]: enum.Entry.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":269978,"byte_end":270006,"line_start":707,"line_end":707,"column_start":5,"column_end":33}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270011,"byte_end":270022,"line_start":708,"line_end":708,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270997,"byte_end":271003,"line_start":746,"line_end":746,"column_start":12,"column_end":18},"name":"update","qualname":"<HashMap<K, V, S>>::update","value":"pub fn update(&Self, K, V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new hash map by inserting a key/value mapping into a map.","sig":null,"attributes":[{"value":"/ Construct a new hash map by inserting a key/value mapping into a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270477,"byte_end":270550,"line_start":726,"line_end":726,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270555,"byte_end":270558,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, the previous value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270563,"byte_end":270637,"line_start":728,"line_end":728,"column_start":5,"column_end":79}},{"value":"/ is overwritten.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270642,"byte_end":270661,"line_start":729,"line_end":729,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270666,"byte_end":270669,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270674,"byte_end":270692,"line_start":731,"line_end":731,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270697,"byte_end":270700,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270705,"byte_end":270719,"line_start":733,"line_end":733,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270724,"byte_end":270727,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270732,"byte_end":270739,"line_start":735,"line_end":735,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270744,"byte_end":270779,"line_start":736,"line_end":736,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270784,"byte_end":270815,"line_start":737,"line_end":737,"column_start":5,"column_end":36}},{"value":"/ let map = hashmap!{};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270820,"byte_end":270845,"line_start":738,"line_end":738,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270850,"byte_end":270865,"line_start":739,"line_end":739,"column_start":5,"column_end":20}},{"value":"/   map.update(123, \"123\"),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270870,"byte_end":270899,"line_start":740,"line_end":740,"column_start":5,"column_end":34}},{"value":"/   hashmap!{123 => \"123\"}","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270904,"byte_end":270932,"line_start":741,"line_end":741,"column_start":5,"column_end":33}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270937,"byte_end":270943,"line_start":742,"line_end":742,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270948,"byte_end":270955,"line_start":743,"line_end":743,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270960,"byte_end":270969,"line_start":744,"line_end":744,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":270974,"byte_end":270985,"line_start":745,"line_end":745,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271450,"byte_end":271461,"line_start":761,"line_end":761,"column_start":12,"column_end":23},"name":"update_with","qualname":"<HashMap<K, V, S>>::update_with","value":"pub fn update_with<F>(&Self, K, V, F) -> Self where F: FnOnce(V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct a new hash map by inserting a key/value mapping into\n a map.","sig":null,"attributes":[{"value":"/ Construct a new hash map by inserting a key/value mapping into","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271118,"byte_end":271184,"line_start":752,"line_end":752,"column_start":5,"column_end":71}},{"value":"/ a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271189,"byte_end":271199,"line_start":753,"line_end":753,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271204,"byte_end":271207,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, we call","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271212,"byte_end":271275,"line_start":755,"line_end":755,"column_start":5,"column_end":68}},{"value":"/ the provided function with the old value and the new value,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271280,"byte_end":271343,"line_start":756,"line_end":756,"column_start":5,"column_end":68}},{"value":"/ and insert the result as the new value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271348,"byte_end":271391,"line_start":757,"line_end":757,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271396,"byte_end":271399,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271404,"byte_end":271422,"line_start":759,"line_end":759,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271427,"byte_end":271438,"line_start":760,"line_end":760,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272037,"byte_end":272052,"line_start":780,"line_end":780,"column_start":12,"column_end":27},"name":"update_with_key","qualname":"<HashMap<K, V, S>>::update_with_key","value":"pub fn update_with_key<F>(&Self, K, V, F) -> Self where F: FnOnce(&K, V, V) ->\nV","parent":null,"children":[],"decl_id":null,"docs":" Construct a new map by inserting a key/value mapping into a\n map.","sig":null,"attributes":[{"value":"/ Construct a new map by inserting a key/value mapping into a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271701,"byte_end":271764,"line_start":771,"line_end":771,"column_start":5,"column_end":68}},{"value":"/ map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271769,"byte_end":271777,"line_start":772,"line_end":772,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271782,"byte_end":271785,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, we call","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271790,"byte_end":271853,"line_start":774,"line_end":774,"column_start":5,"column_end":68}},{"value":"/ the provided function with the key, the old value and the new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271858,"byte_end":271923,"line_start":775,"line_end":775,"column_start":5,"column_end":70}},{"value":"/ value, and insert the result as the new value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271928,"byte_end":271978,"line_start":776,"line_end":776,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271983,"byte_end":271986,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":271991,"byte_end":272009,"line_start":778,"line_end":778,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272014,"byte_end":272025,"line_start":779,"line_end":779,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272770,"byte_end":272792,"line_start":803,"line_end":803,"column_start":12,"column_end":34},"name":"update_lookup_with_key","qualname":"<HashMap<K, V, S>>::update_lookup_with_key","value":"pub fn update_lookup_with_key<F>(&Self, K, V, F) -> (Option<V>, Self) where\nF: FnOnce(&K, &V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct a new map by inserting a key/value mapping into a\n map, returning the old value for the key as well as the new\n map.","sig":null,"attributes":[{"value":"/ Construct a new map by inserting a key/value mapping into a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272366,"byte_end":272429,"line_start":793,"line_end":793,"column_start":5,"column_end":68}},{"value":"/ map, returning the old value for the key as well as the new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272434,"byte_end":272497,"line_start":794,"line_end":794,"column_start":5,"column_end":68}},{"value":"/ map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272502,"byte_end":272510,"line_start":795,"line_end":795,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272515,"byte_end":272518,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ If the map already has a mapping for the given key, we call","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272523,"byte_end":272586,"line_start":797,"line_end":797,"column_start":5,"column_end":68}},{"value":"/ the provided function with the key, the old value and the new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272591,"byte_end":272656,"line_start":798,"line_end":798,"column_start":5,"column_end":70}},{"value":"/ value, and insert the result as the new value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272661,"byte_end":272711,"line_start":799,"line_end":799,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272716,"byte_end":272719,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272724,"byte_end":272742,"line_start":801,"line_end":801,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":272747,"byte_end":272758,"line_start":802,"line_end":802,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273685,"byte_end":273690,"line_start":829,"line_end":829,"column_start":12,"column_end":17},"name":"alter","qualname":"<HashMap<K, V, S>>::alter","value":"pub fn alter<F>(&Self, F, K) -> Self where F: FnOnce(Option<V>) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Update the value for a given key by calling a function with\n the current value and overwriting it with the function's\n return value.","sig":null,"attributes":[{"value":"/ Update the value for a given key by calling a function with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273141,"byte_end":273204,"line_start":816,"line_end":816,"column_start":5,"column_end":68}},{"value":"/ the current value and overwriting it with the function's","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273209,"byte_end":273269,"line_start":817,"line_end":817,"column_start":5,"column_end":65}},{"value":"/ return value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273274,"byte_end":273291,"line_start":818,"line_end":818,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273296,"byte_end":273299,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ The function gets an [`Option<V>`][std::option::Option] and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273304,"byte_end":273367,"line_start":820,"line_end":820,"column_start":5,"column_end":68}},{"value":"/ returns the same, so that it can decide to delete a mapping","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273372,"byte_end":273435,"line_start":821,"line_end":821,"column_start":5,"column_end":68}},{"value":"/ instead of updating the value, and decide what to do if the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273440,"byte_end":273503,"line_start":822,"line_end":822,"column_start":5,"column_end":68}},{"value":"/ key isn't in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273508,"byte_end":273533,"line_start":823,"line_end":823,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273538,"byte_end":273541,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273546,"byte_end":273564,"line_start":825,"line_end":825,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273569,"byte_end":273572,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ [std::option::Option]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273577,"byte_end":273657,"line_start":827,"line_end":827,"column_start":5,"column_end":85}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":273662,"byte_end":273673,"line_start":828,"line_end":828,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274334,"byte_end":274341,"line_start":849,"line_end":849,"column_start":12,"column_end":19},"name":"without","qualname":"<HashMap<K, V, S>>::without","value":"pub fn without<BK: ?Sized>(&Self, &BK) -> Self where BK: Hash + Eq,\nK: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new map without the given key.","sig":null,"attributes":[{"value":"/ Construct a new map without the given key.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274109,"byte_end":274155,"line_start":842,"line_end":842,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274160,"byte_end":274163,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ Construct a map that's a copy of the current map, absent the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274168,"byte_end":274232,"line_start":844,"line_end":844,"column_start":5,"column_end":69}},{"value":"/ mapping for `key` if it's present.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274237,"byte_end":274275,"line_start":845,"line_end":845,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274280,"byte_end":274283,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274288,"byte_end":274306,"line_start":847,"line_end":847,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274311,"byte_end":274322,"line_start":848,"line_end":848,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275218,"byte_end":275224,"line_start":879,"line_end":879,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Filter out values from a map which don't satisfy a predicate.","sig":null,"attributes":[{"value":"/ Filter out values from a map which don't satisfy a predicate.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274574,"byte_end":274639,"line_start":860,"line_end":860,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274644,"byte_end":274647,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ This is slightly more efficient than filtering using an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274652,"byte_end":274711,"line_start":862,"line_end":862,"column_start":5,"column_end":64}},{"value":"/ iterator, in that it doesn't need to rehash the retained","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274716,"byte_end":274776,"line_start":863,"line_end":863,"column_start":5,"column_end":65}},{"value":"/ values, but it still needs to reconstruct the entire tree","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274781,"byte_end":274842,"line_start":864,"line_end":864,"column_start":5,"column_end":66}},{"value":"/ structure of the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274847,"byte_end":274872,"line_start":865,"line_end":865,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274877,"byte_end":274880,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274885,"byte_end":274905,"line_start":867,"line_end":867,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274910,"byte_end":274913,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274918,"byte_end":274932,"line_start":869,"line_end":869,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274937,"byte_end":274940,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274945,"byte_end":274952,"line_start":871,"line_end":871,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274957,"byte_end":274992,"line_start":872,"line_end":872,"column_start":5,"column_end":40}},{"value":"/ # use im::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":274997,"byte_end":275019,"line_start":873,"line_end":873,"column_start":5,"column_end":27}},{"value":"/ let mut map = hashmap!{1 => 1, 2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275024,"byte_end":275075,"line_start":874,"line_end":874,"column_start":5,"column_end":56}},{"value":"/ map.retain(|k, v| *k > 1);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275080,"byte_end":275110,"line_start":875,"line_end":875,"column_start":5,"column_end":35}},{"value":"/ let expected = hashmap!{2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275115,"byte_end":275159,"line_start":876,"line_end":876,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(expected, map);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275164,"byte_end":275194,"line_start":877,"line_end":877,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275199,"byte_end":275206,"line_start":878,"line_end":878,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275812,"byte_end":275819,"line_start":897,"line_end":897,"column_start":12,"column_end":19},"name":"extract","qualname":"<HashMap<K, V, S>>::extract","value":"pub fn extract<BK: ?Sized>(&Self, &BK) -> Option<(V, Self)> where BK: Hash +\nEq, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Remove a key/value pair from a map, if it exists, and return\n the removed value as well as the updated map.","sig":null,"attributes":[{"value":"/ Remove a key/value pair from a map, if it exists, and return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275635,"byte_end":275699,"line_start":892,"line_end":892,"column_start":5,"column_end":69}},{"value":"/ the removed value as well as the updated map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275704,"byte_end":275753,"line_start":893,"line_end":893,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275758,"byte_end":275761,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275766,"byte_end":275784,"line_start":895,"line_end":895,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275789,"byte_end":275800,"line_start":896,"line_end":896,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276185,"byte_end":276201,"line_start":910,"line_end":910,"column_start":12,"column_end":28},"name":"extract_with_key","qualname":"<HashMap<K, V, S>>::extract_with_key","value":"pub fn extract_with_key<BK: ?Sized>(&Self, &BK) -> Option<(K, V, Self)> where\nBK: Hash + Eq, K: Borrow<BK>","parent":null,"children":[],"decl_id":null,"docs":" Remove a key/value pair from a map, if it exists, and return\n the removed key and value as well as the updated list.","sig":null,"attributes":[{"value":"/ Remove a key/value pair from a map, if it exists, and return","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":275999,"byte_end":276063,"line_start":905,"line_end":905,"column_start":5,"column_end":69}},{"value":"/ the removed key and value as well as the updated list.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276068,"byte_end":276126,"line_start":906,"line_end":906,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276131,"byte_end":276134,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276139,"byte_end":276157,"line_start":908,"line_end":908,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276162,"byte_end":276173,"line_start":909,"line_end":909,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276923,"byte_end":276928,"line_start":935,"line_end":935,"column_start":12,"column_end":17},"name":"union","qualname":"<HashMap<K, V, S>>::union","value":"pub fn union(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of two maps, keeping the values in the\n current map when keys exist in both maps.","sig":null,"attributes":[{"value":"/ Construct the union of two maps, keeping the values in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276420,"byte_end":276482,"line_start":919,"line_end":919,"column_start":5,"column_end":67}},{"value":"/ current map when keys exist in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276487,"byte_end":276532,"line_start":920,"line_end":920,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276537,"byte_end":276540,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276545,"byte_end":276565,"line_start":922,"line_end":922,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276570,"byte_end":276573,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276578,"byte_end":276592,"line_start":924,"line_end":924,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276597,"byte_end":276600,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276605,"byte_end":276612,"line_start":926,"line_end":926,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276617,"byte_end":276652,"line_start":927,"line_end":927,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276657,"byte_end":276688,"line_start":928,"line_end":928,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276693,"byte_end":276733,"line_start":929,"line_end":929,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{2 => 2, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276738,"byte_end":276778,"line_start":930,"line_end":930,"column_start":5,"column_end":45}},{"value":"/ let expected = hashmap!{1 => 1, 2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276783,"byte_end":276835,"line_start":931,"line_end":931,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(expected, map1.union(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276840,"byte_end":276883,"line_start":932,"line_end":932,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276888,"byte_end":276895,"line_start":933,"line_end":933,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":276900,"byte_end":276911,"line_start":934,"line_end":934,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277542,"byte_end":277552,"line_start":953,"line_end":953,"column_start":12,"column_end":22},"name":"union_with","qualname":"<HashMap<K, V, S>>::union_with","value":"pub fn union_with<F>(Self, Self, F) -> Self where F: FnMut(V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of two maps, using a function to decide\n what to do with the value when a key is in both maps.","sig":null,"attributes":[{"value":"/ Construct the union of two maps, using a function to decide","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277066,"byte_end":277129,"line_start":942,"line_end":942,"column_start":5,"column_end":68}},{"value":"/ what to do with the value when a key is in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277134,"byte_end":277191,"line_start":943,"line_end":943,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277196,"byte_end":277199,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ The function is called when a value exists in both maps, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277204,"byte_end":277268,"line_start":945,"line_end":945,"column_start":5,"column_end":69}},{"value":"/ receives the value from the current map as its first argument,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277273,"byte_end":277339,"line_start":946,"line_end":946,"column_start":5,"column_end":71}},{"value":"/ and the value from the other map as the second. It should","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277344,"byte_end":277405,"line_start":947,"line_end":947,"column_start":5,"column_end":66}},{"value":"/ return the value to be inserted in the resulting map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277410,"byte_end":277467,"line_start":948,"line_end":948,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277472,"byte_end":277475,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277480,"byte_end":277500,"line_start":950,"line_end":950,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277505,"byte_end":277514,"line_start":951,"line_end":951,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277519,"byte_end":277530,"line_start":952,"line_end":952,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278638,"byte_end":278652,"line_start":985,"line_end":985,"column_start":12,"column_end":26},"name":"union_with_key","qualname":"<HashMap<K, V, S>>::union_with_key","value":"pub fn union_with_key<F>(Self, Self, F) -> Self where F: FnMut(&K, V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of two maps, using a function to decide\n what to do with the value when a key is in both maps.","sig":null,"attributes":[{"value":"/ Construct the union of two maps, using a function to decide","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277707,"byte_end":277770,"line_start":960,"line_end":960,"column_start":5,"column_end":68}},{"value":"/ what to do with the value when a key is in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277775,"byte_end":277832,"line_start":961,"line_end":961,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277837,"byte_end":277840,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ The function is called when a value exists in both maps, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277845,"byte_end":277909,"line_start":963,"line_end":963,"column_start":5,"column_end":69}},{"value":"/ receives a reference to the key as its first argument, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277914,"byte_end":277976,"line_start":964,"line_end":964,"column_start":5,"column_end":67}},{"value":"/ value from the current map as the second argument, and the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":277981,"byte_end":278043,"line_start":965,"line_end":965,"column_start":5,"column_end":67}},{"value":"/ value from the other map as the third argument. It should","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278048,"byte_end":278109,"line_start":966,"line_end":966,"column_start":5,"column_end":66}},{"value":"/ return the value to be inserted in the resulting map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278114,"byte_end":278171,"line_start":967,"line_end":967,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278176,"byte_end":278179,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278184,"byte_end":278204,"line_start":969,"line_end":969,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278209,"byte_end":278212,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278217,"byte_end":278231,"line_start":971,"line_end":971,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278236,"byte_end":278239,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278244,"byte_end":278251,"line_start":973,"line_end":973,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278256,"byte_end":278291,"line_start":974,"line_end":974,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278296,"byte_end":278327,"line_start":975,"line_end":975,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278332,"byte_end":278372,"line_start":976,"line_end":976,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278377,"byte_end":278417,"line_start":977,"line_end":977,"column_start":5,"column_end":45}},{"value":"/ let expected = hashmap!{1 => 1, 2 => 2, 3 => 9};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278422,"byte_end":278474,"line_start":978,"line_end":978,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(expected, map1.union_with_key(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278479,"byte_end":278524,"line_start":979,"line_end":979,"column_start":5,"column_end":50}},{"value":"/     map2,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278529,"byte_end":278542,"line_start":980,"line_end":980,"column_start":5,"column_end":18}},{"value":"/     |key, left, right| left + right","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278547,"byte_end":278586,"line_start":981,"line_end":981,"column_start":5,"column_end":44}},{"value":"/ ));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278591,"byte_end":278598,"line_start":982,"line_end":982,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278603,"byte_end":278610,"line_start":983,"line_end":983,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":278615,"byte_end":278626,"line_start":984,"line_end":984,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279679,"byte_end":279685,"line_start":1019,"line_end":1019,"column_start":12,"column_end":18},"name":"unions","qualname":"<HashMap<K, V, S>>::unions","value":"pub fn unions<I>(I) -> Self where S: Default, I: IntoIterator<Item = Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of a sequence of maps, selecting the value\n of the leftmost when a key appears in more than one map.","sig":null,"attributes":[{"value":"/ Construct the union of a sequence of maps, selecting the value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279148,"byte_end":279214,"line_start":1003,"line_end":1003,"column_start":5,"column_end":71}},{"value":"/ of the leftmost when a key appears in more than one map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279219,"byte_end":279279,"line_start":1004,"line_end":1004,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279284,"byte_end":279287,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279292,"byte_end":279312,"line_start":1006,"line_end":1006,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279317,"byte_end":279320,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279325,"byte_end":279339,"line_start":1008,"line_end":1008,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279344,"byte_end":279347,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279352,"byte_end":279359,"line_start":1010,"line_end":1010,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279364,"byte_end":279399,"line_start":1011,"line_end":1011,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279404,"byte_end":279435,"line_start":1012,"line_end":1012,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279440,"byte_end":279480,"line_start":1013,"line_end":1013,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279485,"byte_end":279517,"line_start":1014,"line_end":1014,"column_start":5,"column_end":37}},{"value":"/ let expected = hashmap!{1 => 1, 2 => 2, 3 => 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279522,"byte_end":279574,"line_start":1015,"line_end":1015,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(expected, HashMap::unions(vec![map1, map2]));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279579,"byte_end":279639,"line_start":1016,"line_end":1016,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279644,"byte_end":279651,"line_start":1017,"line_end":1017,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279656,"byte_end":279667,"line_start":1018,"line_end":1018,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280336,"byte_end":280347,"line_start":1038,"line_end":1038,"column_start":12,"column_end":23},"name":"unions_with","qualname":"<HashMap<K, V, S>>::unions_with","value":"pub fn unions_with<I, F>(I, F) -> Self where S: Default, I: IntoIterator<Item\n= Self>, F: Fn(V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of a sequence of maps, using a function to\n decide what to do with the value when a key is in more than\n one map.","sig":null,"attributes":[{"value":"/ Construct the union of a sequence of maps, using a function to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279845,"byte_end":279911,"line_start":1027,"line_end":1027,"column_start":5,"column_end":71}},{"value":"/ decide what to do with the value when a key is in more than","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279916,"byte_end":279979,"line_start":1028,"line_end":1028,"column_start":5,"column_end":68}},{"value":"/ one map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":279984,"byte_end":279996,"line_start":1029,"line_end":1029,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280001,"byte_end":280004,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ The function is called when a value exists in multiple maps,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280009,"byte_end":280073,"line_start":1031,"line_end":1031,"column_start":5,"column_end":69}},{"value":"/ and receives the value from the current map as its first","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280078,"byte_end":280138,"line_start":1032,"line_end":1032,"column_start":5,"column_end":65}},{"value":"/ argument, and the value from the next map as the second. It","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280143,"byte_end":280206,"line_start":1033,"line_end":1033,"column_start":5,"column_end":68}},{"value":"/ should return the value to be inserted in the resulting map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280211,"byte_end":280275,"line_start":1034,"line_end":1034,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280280,"byte_end":280283,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280288,"byte_end":280308,"line_start":1036,"line_end":1036,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280313,"byte_end":280324,"line_start":1037,"line_end":1037,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281124,"byte_end":281139,"line_start":1060,"line_end":1060,"column_start":12,"column_end":27},"name":"unions_with_key","qualname":"<HashMap<K, V, S>>::unions_with_key","value":"pub fn unions_with_key<I, F>(I, F) -> Self where S: Default,\nI: IntoIterator<Item = Self>, F: Fn(&K, V, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of a sequence of maps, using a function to\n decide what to do with the value when a key is in more than\n one map.","sig":null,"attributes":[{"value":"/ Construct the union of a sequence of maps, using a function to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280570,"byte_end":280636,"line_start":1048,"line_end":1048,"column_start":5,"column_end":71}},{"value":"/ decide what to do with the value when a key is in more than","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280641,"byte_end":280704,"line_start":1049,"line_end":1049,"column_start":5,"column_end":68}},{"value":"/ one map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280709,"byte_end":280721,"line_start":1050,"line_end":1050,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280726,"byte_end":280729,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ The function is called when a value exists in multiple maps,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280734,"byte_end":280798,"line_start":1052,"line_end":1052,"column_start":5,"column_end":69}},{"value":"/ and receives a reference to the key as its first argument, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280803,"byte_end":280869,"line_start":1053,"line_end":1053,"column_start":5,"column_end":71}},{"value":"/ value from the current map as the second argument, and the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280874,"byte_end":280936,"line_start":1054,"line_end":1054,"column_start":5,"column_end":67}},{"value":"/ value from the next map as the third argument. It should","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":280941,"byte_end":281001,"line_start":1055,"line_end":1055,"column_start":5,"column_end":65}},{"value":"/ return the value to be inserted in the resulting map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281006,"byte_end":281063,"line_start":1056,"line_end":1056,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281068,"byte_end":281071,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281076,"byte_end":281096,"line_start":1058,"line_end":1058,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281101,"byte_end":281112,"line_start":1059,"line_end":1059,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282053,"byte_end":282063,"line_start":1092,"line_end":1092,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashMap<K, V, S>>::difference","value":"pub fn difference(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by discarding keys\n which occur in both maps.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by discarding keys","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281370,"byte_end":281444,"line_start":1070,"line_end":1070,"column_start":5,"column_end":79}},{"value":"/ which occur in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281449,"byte_end":281478,"line_start":1071,"line_end":1071,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281483,"byte_end":281486,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281491,"byte_end":281519,"line_start":1073,"line_end":1073,"column_start":5,"column_end":33}},{"value":"/ [`symmetric_difference`][symmetric_difference] method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281524,"byte_end":281582,"line_start":1074,"line_end":1074,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281587,"byte_end":281590,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281595,"byte_end":281615,"line_start":1076,"line_end":1076,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281620,"byte_end":281623,"line_start":1077,"line_end":1077,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281628,"byte_end":281642,"line_start":1078,"line_end":1078,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281647,"byte_end":281650,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281655,"byte_end":281662,"line_start":1080,"line_end":1080,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281667,"byte_end":281702,"line_start":1081,"line_end":1081,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281707,"byte_end":281738,"line_start":1082,"line_end":1082,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281743,"byte_end":281783,"line_start":1083,"line_end":1083,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281788,"byte_end":281828,"line_start":1084,"line_end":1084,"column_start":5,"column_end":45}},{"value":"/ let expected = hashmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281833,"byte_end":281877,"line_start":1085,"line_end":1085,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(expected, map1.difference(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281882,"byte_end":281930,"line_start":1086,"line_end":1086,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281935,"byte_end":281942,"line_start":1087,"line_end":1087,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281947,"byte_end":281950,"line_start":1088,"line_end":1088,"column_start":5,"column_end":8}},{"value":"/ [symmetric_difference]: #method.symmetric_difference","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":281955,"byte_end":282011,"line_start":1089,"line_end":1089,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282016,"byte_end":282025,"line_start":1090,"line_end":1090,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282030,"byte_end":282041,"line_start":1091,"line_end":1091,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282665,"byte_end":282685,"line_start":1113,"line_end":1113,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashMap<K, V, S>>::symmetric_difference","value":"pub fn symmetric_difference(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by discarding keys\n which occur in both maps.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by discarding keys","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282145,"byte_end":282219,"line_start":1096,"line_end":1096,"column_start":5,"column_end":79}},{"value":"/ which occur in both maps.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282224,"byte_end":282253,"line_start":1097,"line_end":1097,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282258,"byte_end":282261,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282266,"byte_end":282286,"line_start":1099,"line_end":1099,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282291,"byte_end":282294,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282299,"byte_end":282313,"line_start":1101,"line_end":1101,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282318,"byte_end":282321,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282326,"byte_end":282333,"line_start":1103,"line_end":1103,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282338,"byte_end":282373,"line_start":1104,"line_end":1104,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282378,"byte_end":282409,"line_start":1105,"line_end":1105,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282414,"byte_end":282454,"line_start":1106,"line_end":1106,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282459,"byte_end":282499,"line_start":1107,"line_end":1107,"column_start":5,"column_end":45}},{"value":"/ let expected = hashmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282504,"byte_end":282548,"line_start":1108,"line_end":1108,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(expected, map1.symmetric_difference(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282553,"byte_end":282611,"line_start":1109,"line_end":1109,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282616,"byte_end":282623,"line_start":1110,"line_end":1110,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282628,"byte_end":282637,"line_start":1111,"line_end":1111,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282642,"byte_end":282653,"line_start":1112,"line_end":1112,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283189,"byte_end":283204,"line_start":1128,"line_end":1128,"column_start":12,"column_end":27},"name":"difference_with","qualname":"<HashMap<K, V, S>>::difference_with","value":"pub fn difference_with<F>(Self, Self, F) -> Self where F: FnMut(V, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by using a function\n to decide what to do if a key occurs in both.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by using a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282792,"byte_end":282867,"line_start":1117,"line_end":1117,"column_start":5,"column_end":80}},{"value":"/ to decide what to do if a key occurs in both.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282872,"byte_end":282921,"line_start":1118,"line_end":1118,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282926,"byte_end":282929,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282934,"byte_end":282962,"line_start":1120,"line_end":1120,"column_start":5,"column_end":33}},{"value":"/ [`symmetric_difference_with`][symmetric_difference_with] method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":282967,"byte_end":283035,"line_start":1121,"line_end":1121,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283040,"byte_end":283043,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283048,"byte_end":283068,"line_start":1123,"line_end":1123,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283073,"byte_end":283076,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ [symmetric_difference_with]: #method.symmetric_difference_with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283081,"byte_end":283147,"line_start":1125,"line_end":1125,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283152,"byte_end":283161,"line_start":1126,"line_end":1126,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283166,"byte_end":283177,"line_start":1127,"line_end":1127,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283558,"byte_end":283583,"line_start":1141,"line_end":1141,"column_start":12,"column_end":37},"name":"symmetric_difference_with","qualname":"<HashMap<K, V, S>>::symmetric_difference_with","value":"pub fn symmetric_difference_with<F>(Self, Self, F) -> Self where\nF: FnMut(V, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by using a function\n to decide what to do if a key occurs in both.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by using a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283354,"byte_end":283429,"line_start":1135,"line_end":1135,"column_start":5,"column_end":80}},{"value":"/ to decide what to do if a key occurs in both.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283434,"byte_end":283483,"line_start":1136,"line_end":1136,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283488,"byte_end":283491,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283496,"byte_end":283516,"line_start":1138,"line_end":1138,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283521,"byte_end":283530,"line_start":1139,"line_end":1139,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283535,"byte_end":283546,"line_start":1140,"line_end":1140,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284643,"byte_end":284662,"line_start":1174,"line_end":1174,"column_start":12,"column_end":31},"name":"difference_with_key","qualname":"<HashMap<K, V, S>>::difference_with_key","value":"pub fn difference_with_key<F>(Self, Self, F) -> Self where F: FnMut(&K, V, V)\n-> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by using a function\n to decide what to do if a key occurs in both. The function\n receives the key as well as both values.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by using a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283757,"byte_end":283832,"line_start":1148,"line_end":1148,"column_start":5,"column_end":80}},{"value":"/ to decide what to do if a key occurs in both. The function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283837,"byte_end":283899,"line_start":1149,"line_end":1149,"column_start":5,"column_end":67}},{"value":"/ receives the key as well as both values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283904,"byte_end":283948,"line_start":1150,"line_end":1150,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283953,"byte_end":283956,"line_start":1151,"line_end":1151,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283961,"byte_end":283989,"line_start":1152,"line_end":1152,"column_start":5,"column_end":33}},{"value":"/ [`symmetric_difference_with`_key][symmetric_difference_with_key]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":283994,"byte_end":284062,"line_start":1153,"line_end":1153,"column_start":5,"column_end":73}},{"value":"/ method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284067,"byte_end":284078,"line_start":1154,"line_end":1154,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284083,"byte_end":284086,"line_start":1155,"line_end":1155,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284091,"byte_end":284111,"line_start":1156,"line_end":1156,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284116,"byte_end":284119,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284124,"byte_end":284138,"line_start":1158,"line_end":1158,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284143,"byte_end":284146,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284151,"byte_end":284158,"line_start":1160,"line_end":1160,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284163,"byte_end":284198,"line_start":1161,"line_end":1161,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284203,"byte_end":284234,"line_start":1162,"line_end":1162,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284239,"byte_end":284279,"line_start":1163,"line_end":1163,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284284,"byte_end":284324,"line_start":1164,"line_end":1164,"column_start":5,"column_end":45}},{"value":"/ let expected = hashmap!{1 => 1, 2 => 2, 3 => 9};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284329,"byte_end":284381,"line_start":1165,"line_end":1165,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(expected, map1.difference_with_key(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284386,"byte_end":284436,"line_start":1166,"line_end":1166,"column_start":5,"column_end":55}},{"value":"/     map2,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284441,"byte_end":284454,"line_start":1167,"line_end":1167,"column_start":5,"column_end":18}},{"value":"/     |key, left, right| Some(left + right)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284459,"byte_end":284504,"line_start":1168,"line_end":1168,"column_start":5,"column_end":50}},{"value":"/ ));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284509,"byte_end":284516,"line_start":1169,"line_end":1169,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284521,"byte_end":284528,"line_start":1170,"line_end":1170,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284533,"byte_end":284536,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ [symmetric_difference_with_key]: #method.symmetric_difference_with_key","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284541,"byte_end":284615,"line_start":1172,"line_end":1172,"column_start":5,"column_end":79}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284620,"byte_end":284631,"line_start":1173,"line_end":1173,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285499,"byte_end":285528,"line_start":1201,"line_end":1201,"column_start":12,"column_end":41},"name":"symmetric_difference_with_key","qualname":"<HashMap<K, V, S>>::symmetric_difference_with_key","value":"pub fn symmetric_difference_with_key<F>(Self, Self, F) -> Self where\nF: FnMut(&K, V, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two maps by using a function\n to decide what to do if a key occurs in both. The function\n receives the key as well as both values.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two maps by using a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284820,"byte_end":284895,"line_start":1181,"line_end":1181,"column_start":5,"column_end":80}},{"value":"/ to decide what to do if a key occurs in both. The function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284900,"byte_end":284962,"line_start":1182,"line_end":1182,"column_start":5,"column_end":67}},{"value":"/ receives the key as well as both values.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":284967,"byte_end":285011,"line_start":1183,"line_end":1183,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285016,"byte_end":285019,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285024,"byte_end":285044,"line_start":1185,"line_end":1185,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285049,"byte_end":285052,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285057,"byte_end":285071,"line_start":1187,"line_end":1187,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285076,"byte_end":285079,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285084,"byte_end":285091,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285096,"byte_end":285131,"line_start":1190,"line_end":1190,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285136,"byte_end":285167,"line_start":1191,"line_end":1191,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285172,"byte_end":285212,"line_start":1192,"line_end":1192,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285217,"byte_end":285257,"line_start":1193,"line_end":1193,"column_start":5,"column_end":45}},{"value":"/ let expected = hashmap!{1 => 1, 2 => 2, 3 => 9};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285262,"byte_end":285314,"line_start":1194,"line_end":1194,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(expected, map1.symmetric_difference_with_key(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285319,"byte_end":285379,"line_start":1195,"line_end":1195,"column_start":5,"column_end":65}},{"value":"/     map2,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285384,"byte_end":285397,"line_start":1196,"line_end":1196,"column_start":5,"column_end":18}},{"value":"/     |key, left, right| Some(left + right)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285402,"byte_end":285447,"line_start":1197,"line_end":1197,"column_start":5,"column_end":50}},{"value":"/ ));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285452,"byte_end":285459,"line_start":1198,"line_end":1198,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285464,"byte_end":285471,"line_start":1199,"line_end":1199,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":285476,"byte_end":285487,"line_start":1200,"line_end":1200,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286656,"byte_end":286675,"line_start":1238,"line_end":1238,"column_start":12,"column_end":31},"name":"relative_complement","qualname":"<HashMap<K, V, S>>::relative_complement","value":"pub fn relative_complement(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the relative complement between two maps by discarding keys\n which occur in `other`.","sig":null,"attributes":[{"value":"/ Construct the relative complement between two maps by discarding keys","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286116,"byte_end":286189,"line_start":1221,"line_end":1221,"column_start":5,"column_end":78}},{"value":"/ which occur in `other`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286194,"byte_end":286221,"line_start":1222,"line_end":1222,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286226,"byte_end":286229,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ Time: O(m log n) where m is the size of the other map","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286234,"byte_end":286291,"line_start":1224,"line_end":1224,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286296,"byte_end":286299,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286304,"byte_end":286318,"line_start":1226,"line_end":1226,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286323,"byte_end":286326,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286331,"byte_end":286338,"line_start":1228,"line_end":1228,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286343,"byte_end":286378,"line_start":1229,"line_end":1229,"column_start":5,"column_end":40}},{"value":"/ # use im::ordmap::OrdMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286383,"byte_end":286412,"line_start":1230,"line_end":1230,"column_start":5,"column_end":34}},{"value":"/ let map1 = ordmap!{1 => 1, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286417,"byte_end":286456,"line_start":1231,"line_end":1231,"column_start":5,"column_end":44}},{"value":"/ let map2 = ordmap!{2 => 2, 3 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286461,"byte_end":286500,"line_start":1232,"line_end":1232,"column_start":5,"column_end":44}},{"value":"/ let expected = ordmap!{1 => 1};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286505,"byte_end":286540,"line_start":1233,"line_end":1233,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(expected, map1.relative_complement(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286545,"byte_end":286602,"line_start":1234,"line_end":1234,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286607,"byte_end":286614,"line_start":1235,"line_end":1235,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286619,"byte_end":286628,"line_start":1236,"line_end":1236,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286633,"byte_end":286644,"line_start":1237,"line_end":1237,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287302,"byte_end":287314,"line_start":1262,"line_end":1262,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashMap<K, V, S>>::intersection","value":"pub fn intersection(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the intersection of two maps, keeping the values\n from the current map.","sig":null,"attributes":[{"value":"/ Construct the intersection of two maps, keeping the values","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286814,"byte_end":286876,"line_start":1245,"line_end":1245,"column_start":5,"column_end":67}},{"value":"/ from the current map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286881,"byte_end":286906,"line_start":1246,"line_end":1246,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286911,"byte_end":286914,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286919,"byte_end":286939,"line_start":1248,"line_end":1248,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286944,"byte_end":286947,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286952,"byte_end":286966,"line_start":1250,"line_end":1250,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286971,"byte_end":286974,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286979,"byte_end":286986,"line_start":1252,"line_end":1252,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":286991,"byte_end":287026,"line_start":1253,"line_end":1253,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287031,"byte_end":287062,"line_start":1254,"line_end":1254,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287067,"byte_end":287107,"line_start":1255,"line_end":1255,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{2 => 3, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287112,"byte_end":287152,"line_start":1256,"line_end":1256,"column_start":5,"column_end":45}},{"value":"/ let expected = hashmap!{2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287157,"byte_end":287193,"line_start":1257,"line_end":1257,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(expected, map1.intersection(map2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287198,"byte_end":287248,"line_start":1258,"line_end":1258,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287253,"byte_end":287260,"line_start":1259,"line_end":1259,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287265,"byte_end":287274,"line_start":1260,"line_end":1260,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287279,"byte_end":287290,"line_start":1261,"line_end":1261,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287640,"byte_end":287657,"line_start":1273,"line_end":1273,"column_start":12,"column_end":29},"name":"intersection_with","qualname":"<HashMap<K, V, S>>::intersection_with","value":"pub fn intersection_with<B, C, F>(Self, HashMap<K, B, S>, F)\n-> HashMap<K, C, S> where B: Clone, C: Clone, F: FnMut(V, B) -> C","parent":null,"children":[],"decl_id":null,"docs":" Construct the intersection of two maps, calling a function\n with both values for each key and using the result as the\n value for the key.","sig":null,"attributes":[{"value":"/ Construct the intersection of two maps, calling a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287410,"byte_end":287472,"line_start":1266,"line_end":1266,"column_start":5,"column_end":67}},{"value":"/ with both values for each key and using the result as the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287477,"byte_end":287538,"line_start":1267,"line_end":1267,"column_start":5,"column_end":66}},{"value":"/ value for the key.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287543,"byte_end":287565,"line_start":1268,"line_end":1268,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287570,"byte_end":287573,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287578,"byte_end":287598,"line_start":1270,"line_end":1270,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287603,"byte_end":287612,"line_start":1271,"line_end":1271,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287617,"byte_end":287628,"line_start":1272,"line_end":1272,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288510,"byte_end":288531,"line_start":1302,"line_end":1302,"column_start":12,"column_end":33},"name":"intersection_with_key","qualname":"<HashMap<K, V, S>>::intersection_with_key","value":"pub fn intersection_with_key<B, C, F>(Self, HashMap<K, B, S>, F)\n-> HashMap<K, C, S> where B: Clone, C: Clone, F: FnMut(&K, V, B) -> C","parent":null,"children":[],"decl_id":null,"docs":" Construct the intersection of two maps, calling a function\n with the key and both values for each key and using the result\n as the value for the key.","sig":null,"attributes":[{"value":"/ Construct the intersection of two maps, calling a function","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287885,"byte_end":287947,"line_start":1282,"line_end":1282,"column_start":5,"column_end":67}},{"value":"/ with the key and both values for each key and using the result","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":287952,"byte_end":288018,"line_start":1283,"line_end":1283,"column_start":5,"column_end":71}},{"value":"/ as the value for the key.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288023,"byte_end":288052,"line_start":1284,"line_end":1284,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288057,"byte_end":288060,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288065,"byte_end":288085,"line_start":1286,"line_end":1286,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288090,"byte_end":288093,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288098,"byte_end":288112,"line_start":1288,"line_end":1288,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288117,"byte_end":288120,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288125,"byte_end":288132,"line_start":1290,"line_end":1290,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288137,"byte_end":288172,"line_start":1291,"line_end":1291,"column_start":5,"column_end":40}},{"value":"/ # use im::hashmap::HashMap;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288177,"byte_end":288208,"line_start":1292,"line_end":1292,"column_start":5,"column_end":36}},{"value":"/ let map1 = hashmap!{1 => 1, 2 => 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288213,"byte_end":288253,"line_start":1293,"line_end":1293,"column_start":5,"column_end":45}},{"value":"/ let map2 = hashmap!{2 => 3, 3 => 4};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288258,"byte_end":288298,"line_start":1294,"line_end":1294,"column_start":5,"column_end":45}},{"value":"/ let expected = hashmap!{2 => 5};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288303,"byte_end":288339,"line_start":1295,"line_end":1295,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(expected, map1.intersection_with_key(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288344,"byte_end":288396,"line_start":1296,"line_end":1296,"column_start":5,"column_end":57}},{"value":"/     map2,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288401,"byte_end":288414,"line_start":1297,"line_end":1297,"column_start":5,"column_end":18}},{"value":"/     |key, left, right| left + right","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288419,"byte_end":288458,"line_start":1298,"line_end":1298,"column_start":5,"column_end":44}},{"value":"/ ));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288463,"byte_end":288470,"line_start":1299,"line_end":1299,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288475,"byte_end":288482,"line_start":1300,"line_end":1300,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":288487,"byte_end":288498,"line_start":1301,"line_end":1301,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1552},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289739,"byte_end":289747,"line_start":1346,"line_end":1346,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::hash::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":1547},"children":[],"decl_id":null,"docs":" An entry which exists in the map.\n","sig":null,"attributes":[{"value":"/ An entry which exists in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289697,"byte_end":289734,"line_start":1345,"line_end":1345,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1555},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289830,"byte_end":289836,"line_start":1348,"line_end":1348,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::hash::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":1547},"children":[],"decl_id":null,"docs":" An entry which doesn't exist in the map.\n","sig":null,"attributes":[{"value":"/ An entry which doesn't exist in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289781,"byte_end":289825,"line_start":1347,"line_end":1347,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":1547},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289606,"byte_end":289611,"line_start":1339,"line_end":1339,"column_start":10,"column_end":15},"name":"Entry","qualname":"::hash::map::Entry","value":"pub enum Entry<'a, K, V, S> where K: Hash + Eq + Clone, V: Clone,\n         S: BuildHasher {\n\n    /// An entry which exists in the map.\n    Occupied(OccupiedEntry),\n\n    /// An entry which doesn't exist in the map.\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":1552},{"krate":0,"index":1555}],"decl_id":null,"docs":" A handle for a key and its associated value.","sig":null,"attributes":[{"value":"/ A handle for a key and its associated value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289094,"byte_end":289142,"line_start":1328,"line_end":1328,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289143,"byte_end":289146,"line_start":1329,"line_end":1329,"column_start":1,"column_end":4}},{"value":"/ ## Performance Note","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289147,"byte_end":289170,"line_start":1330,"line_end":1330,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289171,"byte_end":289174,"line_start":1331,"line_end":1331,"column_start":1,"column_end":4}},{"value":"/ When using an `Entry`, the key is only ever hashed once, when you","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289175,"byte_end":289244,"line_start":1332,"line_end":1332,"column_start":1,"column_end":70}},{"value":"/ create the `Entry`. Operations on an `Entry` will never trigger a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289245,"byte_end":289314,"line_start":1333,"line_end":1333,"column_start":1,"column_end":70}},{"value":"/ rehash, where eg. a `contains_key(key)` followed by an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289315,"byte_end":289373,"line_start":1334,"line_end":1334,"column_start":1,"column_end":59}},{"value":"/ `insert(key, default_value)` (the equivalent of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289374,"byte_end":289425,"line_start":1335,"line_end":1335,"column_start":1,"column_end":52}},{"value":"/ `Entry::or_insert()`) would need to hash the key once for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289426,"byte_end":289491,"line_start":1336,"line_end":1336,"column_start":1,"column_end":66}},{"value":"/ `contains_key` and again for the `insert`. The operations","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289492,"byte_end":289553,"line_start":1337,"line_end":1337,"column_start":1,"column_end":62}},{"value":"/ generally perform similarly otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289554,"byte_end":289596,"line_start":1338,"line_end":1338,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290124,"byte_end":290133,"line_start":1359,"line_end":1359,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Insert the default value provided if there was no value\n already, and return a mutable reference to the value.\n","sig":null,"attributes":[{"value":"/ Insert the default value provided if there was no value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289991,"byte_end":290050,"line_start":1357,"line_end":1357,"column_start":5,"column_end":64}},{"value":"/ already, and return a mutable reference to the value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290055,"byte_end":290112,"line_start":1358,"line_end":1358,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1565},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290377,"byte_end":290391,"line_start":1366,"line_end":1366,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Insert the default value from the provided function if there\n was no value already, and return a mutable reference to the\n value.\n","sig":null,"attributes":[{"value":"/ Insert the default value from the provided function if there","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290218,"byte_end":290282,"line_start":1363,"line_end":1363,"column_start":5,"column_end":69}},{"value":"/ was no value already, and return a mutable reference to the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290287,"byte_end":290350,"line_start":1364,"line_end":1364,"column_start":5,"column_end":68}},{"value":"/ value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290355,"byte_end":290365,"line_start":1365,"line_end":1365,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1567},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290749,"byte_end":290759,"line_start":1378,"line_end":1378,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Insert a default value if there was no value already, and\n return a mutable reference to the value.\n","sig":null,"attributes":[{"value":"/ Insert a default value if there was no value already, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290627,"byte_end":290688,"line_start":1376,"line_end":1376,"column_start":5,"column_end":66}},{"value":"/ return a mutable reference to the value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290693,"byte_end":290737,"line_start":1377,"line_end":1377,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290931,"byte_end":290934,"line_start":1387,"line_end":1387,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Get the key for this entry.\n","sig":null,"attributes":[{"value":"/ Get the key for this entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290872,"byte_end":290903,"line_start":1385,"line_end":1385,"column_start":5,"column_end":36}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":290908,"byte_end":290919,"line_start":1386,"line_end":1386,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291183,"byte_end":291193,"line_start":1396,"line_end":1396,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Call the provided function to modify the value if the value\n exists.\n","sig":null,"attributes":[{"value":"/ Call the provided function to modify the value if the value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291092,"byte_end":291155,"line_start":1394,"line_end":1394,"column_start":5,"column_end":68}},{"value":"/ exists.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291160,"byte_end":291171,"line_start":1395,"line_end":1395,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1571},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291494,"byte_end":291507,"line_start":1409,"line_end":1409,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::hash::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578}],"decl_id":null,"docs":" An entry for a mapping that already exists in the map.\n","sig":null,"attributes":[{"value":"/ An entry for a mapping that already exists in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291424,"byte_end":291482,"line_start":1408,"line_end":1408,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291850,"byte_end":291853,"line_start":1428,"line_end":1428,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Get the key for this entry.\n","sig":null,"attributes":[{"value":"/ Get the key for this entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291791,"byte_end":291822,"line_start":1426,"line_end":1426,"column_start":5,"column_end":36}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291827,"byte_end":291838,"line_start":1427,"line_end":1427,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291976,"byte_end":291988,"line_start":1433,"line_end":1433,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove this entry from the map and return the removed mapping.\n","sig":null,"attributes":[{"value":"/ Remove this entry from the map and return the removed mapping.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291898,"byte_end":291964,"line_start":1432,"line_end":1432,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1586},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292277,"byte_end":292280,"line_start":1442,"line_end":1442,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Get the current value.\n","sig":null,"attributes":[{"value":"/ Get the current value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292223,"byte_end":292249,"line_start":1440,"line_end":1440,"column_start":5,"column_end":31}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292254,"byte_end":292265,"line_start":1441,"line_end":1441,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1587},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292447,"byte_end":292454,"line_start":1448,"line_end":1448,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the current value.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the current value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292370,"byte_end":292419,"line_start":1446,"line_end":1446,"column_start":5,"column_end":54}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292424,"byte_end":292435,"line_start":1447,"line_end":1447,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292760,"byte_end":292768,"line_start":1458,"line_end":1458,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Convert this entry into a mutable reference.\n","sig":null,"attributes":[{"value":"/ Convert this entry into a mutable reference.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292684,"byte_end":292732,"line_start":1456,"line_end":1456,"column_start":5,"column_end":53}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292737,"byte_end":292748,"line_start":1457,"line_end":1457,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293040,"byte_end":293046,"line_start":1467,"line_end":1467,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Overwrite the current value.\n","sig":null,"attributes":[{"value":"/ Overwrite the current value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":292996,"byte_end":293028,"line_start":1466,"line_end":1466,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293206,"byte_end":293212,"line_start":1472,"line_end":1472,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove this entry from the map and return the removed value.\n","sig":null,"attributes":[{"value":"/ Remove this entry from the map and return the removed value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293130,"byte_end":293194,"line_start":1471,"line_end":1471,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1591},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293343,"byte_end":293354,"line_start":1478,"line_end":1478,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::hash::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598}],"decl_id":null,"docs":" An entry for a mapping that does not already exist in the map.\n","sig":null,"attributes":[{"value":"/ An entry for a mapping that does not already exist in the map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293265,"byte_end":293331,"line_start":1477,"line_end":1477,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293695,"byte_end":293698,"line_start":1497,"line_end":1497,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Get the key for this entry.\n","sig":null,"attributes":[{"value":"/ Get the key for this entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293636,"byte_end":293667,"line_start":1495,"line_end":1495,"column_start":5,"column_end":36}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293672,"byte_end":293683,"line_start":1496,"line_end":1496,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1605},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293807,"byte_end":293815,"line_start":1503,"line_end":1503,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Convert this entry into its key.\n","sig":null,"attributes":[{"value":"/ Convert this entry into its key.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293743,"byte_end":293779,"line_start":1501,"line_end":1501,"column_start":5,"column_end":41}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293784,"byte_end":293795,"line_start":1502,"line_end":1502,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1606},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293904,"byte_end":293910,"line_start":1508,"line_end":1508,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Insert a value into this entry.\n","sig":null,"attributes":[{"value":"/ Insert a value into this entry.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293857,"byte_end":293892,"line_start":1507,"line_end":1507,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1690},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300432,"byte_end":300436,"line_start":1799,"line_end":1799,"column_start":12,"column_end":16},"name":"Iter","qualname":"::hash::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1694}],"decl_id":null,"docs":" An iterator over the elements of a map.\n","sig":null,"attributes":[{"value":"/ An iterator over the elements of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300377,"byte_end":300420,"line_start":1798,"line_end":1798,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1711},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300908,"byte_end":300915,"line_start":1820,"line_end":1820,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::hash::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":1715}],"decl_id":null,"docs":" A mutable iterator over the elements of a map.\n","sig":null,"attributes":[{"value":"/ A mutable iterator over the elements of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300846,"byte_end":300896,"line_start":1819,"line_end":1819,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1732},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301553,"byte_end":301566,"line_start":1859,"line_end":1859,"column_start":12,"column_end":25},"name":"ConsumingIter","qualname":"::hash::map::ConsumingIter","value":"ConsumingIter {  }","parent":null,"children":[{"krate":0,"index":1734}],"decl_id":null,"docs":" A consuming iterator over the elements of a map.\n","sig":null,"attributes":[{"value":"/ A consuming iterator over the elements of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301489,"byte_end":301541,"line_start":1858,"line_end":1858,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1745},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302085,"byte_end":302089,"line_start":1883,"line_end":1883,"column_start":12,"column_end":16},"name":"Keys","qualname":"::hash::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":1749}],"decl_id":null,"docs":" An iterator over the keys of a map.\n","sig":null,"attributes":[{"value":"/ An iterator over the keys of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302034,"byte_end":302073,"line_start":1882,"line_end":1882,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1766},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302552,"byte_end":302558,"line_start":1904,"line_end":1904,"column_start":12,"column_end":18},"name":"Values","qualname":"::hash::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":1770}],"decl_id":null,"docs":" An iterator over the values of a map.\n","sig":null,"attributes":[{"value":"/ An iterator over the values of a map.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302499,"byte_end":302540,"line_start":1903,"line_end":1903,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":1866},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::hash::set","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","parent":null,"children":[{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":3295},{"krate":0,"index":1875},{"krate":0,"index":3297},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1879},{"krate":0,"index":3303},{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":1901},{"krate":0,"index":2919},{"krate":0,"index":2923},{"krate":0,"index":2928},{"krate":0,"index":2931},{"krate":0,"index":1903},{"krate":0,"index":2934},{"krate":0,"index":2964},{"krate":0,"index":2962},{"krate":0,"index":2956},{"krate":0,"index":2958},{"krate":0,"index":2951},{"krate":0,"index":2953},{"krate":0,"index":2944},{"krate":0,"index":2941},{"krate":0,"index":2938},{"krate":0,"index":1910},{"krate":0,"index":1914},{"krate":0,"index":1919},{"krate":0,"index":1922},{"krate":0,"index":1925},{"krate":0,"index":1938},{"krate":0,"index":1949},{"krate":0,"index":1969},{"krate":0,"index":1973},{"krate":0,"index":1977},{"krate":0,"index":1980},{"krate":0,"index":1984},{"krate":0,"index":1988},{"krate":0,"index":1993},{"krate":0,"index":1997},{"krate":0,"index":2002},{"krate":0,"index":2007},{"krate":0,"index":2013},{"krate":0,"index":2019},{"krate":0,"index":2025},{"krate":0,"index":2031},{"krate":0,"index":2035},{"krate":0,"index":2039},{"krate":0,"index":2046},{"krate":0,"index":2049},{"krate":0,"index":2052},{"krate":0,"index":2056},{"krate":0,"index":2063},{"krate":0,"index":2066},{"krate":0,"index":2069},{"krate":0,"index":2072},{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2082},{"krate":0,"index":2088},{"krate":0,"index":2095},{"krate":0,"index":2101},{"krate":0,"index":2110},{"krate":0,"index":2115},{"krate":0,"index":2119},{"krate":0,"index":2124},{"krate":0,"index":2128},{"krate":0,"index":2133},{"krate":0,"index":2138},{"krate":0,"index":2142}],"decl_id":null,"docs":" An unordered set.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/mod.rs","byte_start":250225,"byte_end":250237,"line_start":7,"line_end":7,"column_start":1,"column_end":13}},{"value":"/ An unordered set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318522,"byte_end":318543,"line_start":5,"line_end":5,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318544,"byte_end":318547,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ An immutable hash set using [hash array mapped tries] [1].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318548,"byte_end":318610,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318611,"byte_end":318614,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Most operations on this set are O(log<sub>x</sub> n) for a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318615,"byte_end":318677,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ suitably high *x* that it should be nearly O(1) for most sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318678,"byte_end":318744,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/ Because of this, it's a great choice for a generic set as long as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318745,"byte_end":318814,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ you don't mind that values will need to implement","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318815,"byte_end":318868,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"/ [`Hash`][std::hash::Hash] and [`Eq`][std::cmp::Eq].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318869,"byte_end":318924,"line_start":13,"line_end":13,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318925,"byte_end":318928,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Values will have a predictable order based on the hasher","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318929,"byte_end":318989,"line_start":15,"line_end":15,"column_start":1,"column_end":61}},{"value":"/ being used. Unless otherwise specified, this will be the standard","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":318990,"byte_end":319059,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ [`RandomState`][std::collections::hash_map::RandomState] hasher.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":319060,"byte_end":319128,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":319129,"byte_end":319132,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Hash_array_mapped_trie","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":319133,"byte_end":319194,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/ [std::cmp::Eq]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":319195,"byte_end":319262,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ [std::hash::Hash]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":319263,"byte_end":319336,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ [std::collections::hash_map::RandomState]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":319337,"byte_end":319458,"line_start":22,"line_end":22,"column_start":1,"column_end":122}}]},{"kind":"Struct","id":{"krate":0,"index":2919},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":320647,"byte_end":320658,"line_start":75,"line_end":75,"column_start":11,"column_end":22},"name":"HashSetPool","qualname":"::hash::set::HashSetPool","value":"","parent":null,"children":[],"decl_id":null,"docs":" A memory pool for the appropriate node type.\n","sig":null,"attributes":[{"value":"/ A memory pool for the appropriate node type.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/util.rs","byte_start":142848,"byte_end":142896,"line_start":116,"line_end":116,"column_start":9,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1903},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321629,"byte_end":321636,"line_start":95,"line_end":95,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::hash::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909}],"decl_id":null,"docs":" An unordered set.","sig":null,"attributes":[{"value":"/ An unordered set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":320681,"byte_end":320702,"line_start":77,"line_end":77,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":320703,"byte_end":320706,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ An immutable hash set using [hash array mapped tries] [1].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":320707,"byte_end":320769,"line_start":79,"line_end":79,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":320770,"byte_end":320773,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ Most operations on this set are O(log<sub>x</sub> n) for a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":320774,"byte_end":320836,"line_start":81,"line_end":81,"column_start":1,"column_end":63}},{"value":"/ suitably high *x* that it should be nearly O(1) for most sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":320837,"byte_end":320903,"line_start":82,"line_end":82,"column_start":1,"column_end":67}},{"value":"/ Because of this, it's a great choice for a generic set as long as","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":320904,"byte_end":320973,"line_start":83,"line_end":83,"column_start":1,"column_end":70}},{"value":"/ you don't mind that values will need to implement","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":320974,"byte_end":321027,"line_start":84,"line_end":84,"column_start":1,"column_end":54}},{"value":"/ [`Hash`][std::hash::Hash] and [`Eq`][std::cmp::Eq].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321028,"byte_end":321083,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321084,"byte_end":321087,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Values will have a predictable order based on the hasher","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321088,"byte_end":321148,"line_start":87,"line_end":87,"column_start":1,"column_end":61}},{"value":"/ being used. Unless otherwise specified, this will be the standard","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321149,"byte_end":321218,"line_start":88,"line_end":88,"column_start":1,"column_end":70}},{"value":"/ [`RandomState`][std::collections::hash_map::RandomState] hasher.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321219,"byte_end":321287,"line_start":89,"line_end":89,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321288,"byte_end":321291,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ [1]: https://en.wikipedia.org/wiki/Hash_array_mapped_trie","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321292,"byte_end":321353,"line_start":91,"line_end":91,"column_start":1,"column_end":62}},{"value":"/ [std::cmp::Eq]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321354,"byte_end":321421,"line_start":92,"line_end":92,"column_start":1,"column_end":68}},{"value":"/ [std::hash::Hash]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321422,"byte_end":321495,"line_start":93,"line_end":93,"column_start":1,"column_end":74}},{"value":"/ [std::collections::hash_map::RandomState]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321496,"byte_end":321617,"line_start":94,"line_end":94,"column_start":1,"column_end":122}}]},{"kind":"Method","id":{"krate":0,"index":1921},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322386,"byte_end":322389,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<HashSet<A, RandomState>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty set.\n","sig":null,"attributes":[{"value":"/ Construct an empty set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322331,"byte_end":322358,"line_start":130,"line_end":130,"column_start":5,"column_end":32}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322363,"byte_end":322374,"line_start":131,"line_end":131,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1924},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323157,"byte_end":323161,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"unit","qualname":"<HashSet<A, RandomState>>::unit","value":"pub fn unit(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a set with a single value.","sig":null,"attributes":[{"value":"/ Construct a set with a single value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322835,"byte_end":322875,"line_start":153,"line_end":153,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322880,"byte_end":322883,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322888,"byte_end":322902,"line_start":155,"line_end":155,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322907,"byte_end":322910,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322915,"byte_end":322922,"line_start":157,"line_end":157,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322927,"byte_end":322962,"line_start":158,"line_end":158,"column_start":5,"column_end":40}},{"value":"/ # use im::hashset::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322967,"byte_end":322998,"line_start":159,"line_end":159,"column_start":5,"column_end":36}},{"value":"/ # use std::sync::Arc;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323003,"byte_end":323028,"line_start":160,"line_end":160,"column_start":5,"column_end":30}},{"value":"/ let set = HashSet::unit(123);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323033,"byte_end":323066,"line_start":161,"line_end":161,"column_start":5,"column_end":38}},{"value":"/ assert!(set.contains(&123));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323071,"byte_end":323103,"line_start":162,"line_end":162,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323108,"byte_end":323115,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323120,"byte_end":323129,"line_start":164,"line_end":164,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323134,"byte_end":323145,"line_start":165,"line_end":165,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323626,"byte_end":323634,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<A, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether a set is empty.","sig":null,"attributes":[{"value":"/ Test whether a set is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323251,"byte_end":323283,"line_start":172,"line_end":172,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323288,"byte_end":323291,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323296,"byte_end":323310,"line_start":174,"line_end":174,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323315,"byte_end":323318,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323323,"byte_end":323337,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323342,"byte_end":323345,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323350,"byte_end":323357,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323362,"byte_end":323397,"line_start":179,"line_end":179,"column_start":5,"column_end":40}},{"value":"/ # use im::hashset::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323402,"byte_end":323433,"line_start":180,"line_end":180,"column_start":5,"column_end":36}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323438,"byte_end":323450,"line_start":181,"line_end":181,"column_start":5,"column_end":17}},{"value":"/   !hashset![1, 2, 3].is_empty()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323455,"byte_end":323490,"line_start":182,"line_end":182,"column_start":5,"column_end":40}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323495,"byte_end":323501,"line_start":183,"line_end":183,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323506,"byte_end":323518,"line_start":184,"line_end":184,"column_start":5,"column_end":17}},{"value":"/   HashSet::<i32>::new().is_empty()","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323523,"byte_end":323561,"line_start":185,"line_end":185,"column_start":5,"column_end":43}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323566,"byte_end":323572,"line_start":186,"line_end":186,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323577,"byte_end":323584,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323589,"byte_end":323598,"line_start":188,"line_end":188,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323603,"byte_end":323614,"line_start":189,"line_end":189,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1929},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323965,"byte_end":323968,"line_start":207,"line_end":207,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<A, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the size of a set.","sig":null,"attributes":[{"value":"/ Get the size of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323687,"byte_end":323713,"line_start":194,"line_end":194,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323718,"byte_end":323721,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323726,"byte_end":323740,"line_start":196,"line_end":196,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323745,"byte_end":323748,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323753,"byte_end":323767,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323772,"byte_end":323775,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323780,"byte_end":323787,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323792,"byte_end":323827,"line_start":201,"line_end":201,"column_start":5,"column_end":40}},{"value":"/ # use im::hashset::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323832,"byte_end":323863,"line_start":202,"line_end":202,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(3, hashset![1, 2, 3].len());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323868,"byte_end":323911,"line_start":203,"line_end":203,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323916,"byte_end":323923,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323928,"byte_end":323937,"line_start":205,"line_end":205,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323942,"byte_end":323953,"line_start":206,"line_end":206,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324392,"byte_end":324398,"line_start":220,"line_end":220,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<HashSet<A, S>>::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether two sets refer to the same content in memory.","sig":null,"attributes":[{"value":"/ Test whether two sets refer to the same content in memory.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324016,"byte_end":324078,"line_start":211,"line_end":211,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324083,"byte_end":324086,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ This is true if the two sides are references to the same set,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324091,"byte_end":324156,"line_start":213,"line_end":213,"column_start":5,"column_end":70}},{"value":"/ or if the two sets refer to the same root node.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324161,"byte_end":324212,"line_start":214,"line_end":214,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324217,"byte_end":324220,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ This would return true if you're comparing a set to itself, or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324225,"byte_end":324291,"line_start":216,"line_end":216,"column_start":5,"column_end":71}},{"value":"/ if you're comparing a set to a fresh clone of itself.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324296,"byte_end":324353,"line_start":217,"line_end":217,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324358,"byte_end":324361,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324366,"byte_end":324380,"line_start":219,"line_end":219,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324915,"byte_end":324926,"line_start":236,"line_end":236,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashSet<A, S>>::with_hasher","value":"pub fn with_hasher<RS>(RS) -> Self where Ref<S>: From<RS>","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty hash set using the provided hasher.\n","sig":null,"attributes":[{"value":"/ Construct an empty hash set using the provided hasher.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324815,"byte_end":324873,"line_start":233,"line_end":233,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324878,"byte_end":324887,"line_start":234,"line_end":234,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":324892,"byte_end":324903,"line_start":235,"line_end":235,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1933},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":325844,"byte_end":325850,"line_start":271,"line_end":271,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<A, S>>::hasher","value":"pub fn hasher(&Self) -> &Ref<S>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the set's [`BuildHasher`][BuildHasher].","sig":null,"attributes":[{"value":"/ Get a reference to the set's [`BuildHasher`][BuildHasher].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":325665,"byte_end":325727,"line_start":267,"line_end":267,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":325732,"byte_end":325735,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ [BuildHasher]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":325740,"byte_end":325816,"line_start":269,"line_end":269,"column_start":5,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":325821,"byte_end":325832,"line_start":270,"line_end":270,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326023,"byte_end":326031,"line_start":278,"line_end":278,"column_start":12,"column_end":20},"name":"new_from","qualname":"<HashSet<A, S>>::new_from","value":"pub fn new_from<A1>(&Self) -> HashSet<A1, S> where A1: Hash + Eq + Clone","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty hash set using the same hasher as the current hash set.\n","sig":null,"attributes":[{"value":"/ Construct an empty hash set using the same hasher as the current hash set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":325903,"byte_end":325981,"line_start":275,"line_end":275,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":325986,"byte_end":325995,"line_start":276,"line_end":276,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326000,"byte_end":326011,"line_start":277,"line_end":277,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326752,"byte_end":326757,"line_start":308,"line_end":308,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<A, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Discard all elements from the set.","sig":null,"attributes":[{"value":"/ Discard all elements from the set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326334,"byte_end":326372,"line_start":292,"line_end":292,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326377,"byte_end":326380,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ This leaves you with an empty set, and all elements that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326385,"byte_end":326445,"line_start":294,"line_end":294,"column_start":5,"column_end":65}},{"value":"/ were previously inside it are dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326450,"byte_end":326492,"line_start":295,"line_end":295,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326497,"byte_end":326500,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326505,"byte_end":326519,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326524,"byte_end":326527,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326532,"byte_end":326546,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326551,"byte_end":326554,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326559,"byte_end":326566,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326571,"byte_end":326606,"line_start":302,"line_end":302,"column_start":5,"column_end":40}},{"value":"/ # use im::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326611,"byte_end":326633,"line_start":303,"line_end":303,"column_start":5,"column_end":27}},{"value":"/ let mut set = hashset![1, 2, 3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326638,"byte_end":326674,"line_start":304,"line_end":304,"column_start":5,"column_end":41}},{"value":"/ set.clear();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326679,"byte_end":326695,"line_start":305,"line_end":305,"column_start":5,"column_end":21}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326700,"byte_end":326728,"line_start":306,"line_end":306,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326733,"byte_end":326740,"line_start":307,"line_end":307,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":327286,"byte_end":327290,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<A, S>>::iter","value":"pub fn iter(&Self) -> Iter<, A>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the values in a hash set.","sig":null,"attributes":[{"value":"/ Get an iterator over the values in a hash set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326905,"byte_end":326955,"line_start":315,"line_end":315,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326960,"byte_end":326963,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ Please note that the order is consistent between sets using","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":326968,"byte_end":327031,"line_start":317,"line_end":317,"column_start":5,"column_end":68}},{"value":"/ the same hasher, but no other ordering guarantee is offered.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":327036,"byte_end":327100,"line_start":318,"line_end":318,"column_start":5,"column_end":69}},{"value":"/ Items will not come out in insertion order or sort order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":327105,"byte_end":327166,"line_start":319,"line_end":319,"column_start":5,"column_end":66}},{"value":"/ They will, however, come out in the same order every time for","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":327171,"byte_end":327236,"line_start":320,"line_end":320,"column_start":5,"column_end":70}},{"value":"/ the same set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":327241,"byte_end":327258,"line_start":321,"line_end":321,"column_start":5,"column_end":22}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":327263,"byte_end":327274,"line_start":322,"line_end":322,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1942},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328059,"byte_end":328067,"line_start":358,"line_end":358,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<A, S>>::contains","value":"pub fn contains<BA: ?Sized>(&Self, &BA) -> bool where BA: Hash + Eq,\nA: Borrow<BA>","parent":null,"children":[],"decl_id":null,"docs":" Test if a value is part of a set.","sig":null,"attributes":[{"value":"/ Test if a value is part of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":327963,"byte_end":328000,"line_start":354,"line_end":354,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328005,"byte_end":328008,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328013,"byte_end":328031,"line_start":356,"line_end":356,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328036,"byte_end":328047,"line_start":357,"line_end":357,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1944},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328428,"byte_end":328437,"line_start":371,"line_end":371,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<A, S>>::is_subset","value":"pub fn is_subset<RS>(&Self, RS) -> bool where RS: Borrow<Self>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a set is a subset of another set, meaning that\n all values in our set must also be in the other set.","sig":null,"attributes":[{"value":"/ Test whether a set is a subset of another set, meaning that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328243,"byte_end":328306,"line_start":366,"line_end":366,"column_start":5,"column_end":68}},{"value":"/ all values in our set must also be in the other set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328311,"byte_end":328367,"line_start":367,"line_end":367,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328372,"byte_end":328375,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328380,"byte_end":328400,"line_start":369,"line_end":369,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328405,"byte_end":328416,"line_start":370,"line_end":370,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1947},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328854,"byte_end":328870,"line_start":385,"line_end":385,"column_start":12,"column_end":28},"name":"is_proper_subset","qualname":"<HashSet<A, S>>::is_proper_subset","value":"pub fn is_proper_subset<RS>(&Self, RS) -> bool where RS: Borrow<Self>","parent":null,"children":[],"decl_id":null,"docs":" Test whether a set is a proper subset of another set, meaning\n that all values in our set must also be in the other set. A\n proper subset must also be smaller than the other set.","sig":null,"attributes":[{"value":"/ Test whether a set is a proper subset of another set, meaning","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328597,"byte_end":328662,"line_start":379,"line_end":379,"column_start":5,"column_end":70}},{"value":"/ that all values in our set must also be in the other set. A","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328667,"byte_end":328730,"line_start":380,"line_end":380,"column_start":5,"column_end":68}},{"value":"/ proper subset must also be smaller than the other set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328735,"byte_end":328793,"line_start":381,"line_end":381,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328798,"byte_end":328801,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328806,"byte_end":328826,"line_start":383,"line_end":383,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":328831,"byte_end":328842,"line_start":384,"line_end":384,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329485,"byte_end":329493,"line_start":405,"line_end":405,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashSet<A, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, A>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable iterator over the values in a hash set.","sig":null,"attributes":[{"value":"/ Get a mutable iterator over the values in a hash set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329103,"byte_end":329160,"line_start":398,"line_end":398,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329165,"byte_end":329168,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Please note that the order is consistent between sets using the same","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329173,"byte_end":329245,"line_start":400,"line_end":400,"column_start":5,"column_end":77}},{"value":"/ hasher, but no other ordering guarantee is offered.  Items will not come","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329250,"byte_end":329326,"line_start":401,"line_end":401,"column_start":5,"column_end":81}},{"value":"/ out in insertion order or sort order.  They will, however, come out in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329331,"byte_end":329405,"line_start":402,"line_end":402,"column_start":5,"column_end":79}},{"value":"/ the same order every time for the same set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329410,"byte_end":329457,"line_start":403,"line_end":403,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329462,"byte_end":329473,"line_start":404,"line_end":404,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1953},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329784,"byte_end":329790,"line_start":416,"line_end":416,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<A, S>>::insert","value":"pub fn insert(&mut Self, A) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" Insert a value into a set.","sig":null,"attributes":[{"value":"/ Insert a value into a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329697,"byte_end":329727,"line_start":412,"line_end":412,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329732,"byte_end":329735,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329740,"byte_end":329758,"line_start":414,"line_end":414,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329763,"byte_end":329772,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1954},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330251,"byte_end":330257,"line_start":431,"line_end":431,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<A, S>>::remove","value":"pub fn remove<BA: ?Sized>(&mut Self, &BA) -> Option<A> where BA: Hash + Eq,\nA: Borrow<BA>","parent":null,"children":[],"decl_id":null,"docs":" Remove a value from a set if it exists.","sig":null,"attributes":[{"value":"/ Remove a value from a set if it exists.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330165,"byte_end":330208,"line_start":428,"line_end":428,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330213,"byte_end":330216,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330221,"byte_end":330239,"line_start":430,"line_end":430,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331046,"byte_end":331052,"line_start":462,"line_end":462,"column_start":12,"column_end":18},"name":"update","qualname":"<HashSet<A, S>>::update","value":"pub fn update(&Self, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new set from the current set with the given value\n added.","sig":null,"attributes":[{"value":"/ Construct a new set from the current set with the given value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330622,"byte_end":330687,"line_start":444,"line_end":444,"column_start":5,"column_end":70}},{"value":"/ added.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330692,"byte_end":330702,"line_start":445,"line_end":445,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330707,"byte_end":330710,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330715,"byte_end":330733,"line_start":447,"line_end":447,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330738,"byte_end":330741,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330746,"byte_end":330760,"line_start":449,"line_end":449,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330765,"byte_end":330768,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330773,"byte_end":330780,"line_start":451,"line_end":451,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330785,"byte_end":330820,"line_start":452,"line_end":452,"column_start":5,"column_end":40}},{"value":"/ # use im::hashset::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330825,"byte_end":330856,"line_start":453,"line_end":453,"column_start":5,"column_end":36}},{"value":"/ # use std::sync::Arc;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330861,"byte_end":330886,"line_start":454,"line_end":454,"column_start":5,"column_end":30}},{"value":"/ let set = hashset![123];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330891,"byte_end":330919,"line_start":455,"line_end":455,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330924,"byte_end":330939,"line_start":456,"line_end":456,"column_start":5,"column_end":20}},{"value":"/   set.update(456),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330944,"byte_end":330966,"line_start":457,"line_end":457,"column_start":5,"column_end":27}},{"value":"/   hashset![123, 456]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":330971,"byte_end":330995,"line_start":458,"line_end":458,"column_start":5,"column_end":29}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331000,"byte_end":331006,"line_start":459,"line_end":459,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331011,"byte_end":331018,"line_start":460,"line_end":460,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331023,"byte_end":331034,"line_start":461,"line_end":461,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331297,"byte_end":331304,"line_start":473,"line_end":473,"column_start":12,"column_end":19},"name":"without","qualname":"<HashSet<A, S>>::without","value":"pub fn without<BA: ?Sized>(&Self, &BA) -> Self where BA: Hash + Eq,\nA: Borrow<BA>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new set with the given value removed if it's in\n the set.","sig":null,"attributes":[{"value":"/ Construct a new set with the given value removed if it's in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331158,"byte_end":331221,"line_start":468,"line_end":468,"column_start":5,"column_end":68}},{"value":"/ the set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331226,"byte_end":331238,"line_start":469,"line_end":469,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331243,"byte_end":331246,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331251,"byte_end":331269,"line_start":471,"line_end":471,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331274,"byte_end":331285,"line_start":472,"line_end":472,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332101,"byte_end":332107,"line_start":502,"line_end":502,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<A, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&A) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Filter out values from a set which don't satisfy a predicate.","sig":null,"attributes":[{"value":"/ Filter out values from a set which don't satisfy a predicate.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331485,"byte_end":331550,"line_start":483,"line_end":483,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331555,"byte_end":331558,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ This is slightly more efficient than filtering using an","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331563,"byte_end":331622,"line_start":485,"line_end":485,"column_start":5,"column_end":64}},{"value":"/ iterator, in that it doesn't need to rehash the retained","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331627,"byte_end":331687,"line_start":486,"line_end":486,"column_start":5,"column_end":65}},{"value":"/ values, but it still needs to reconstruct the entire tree","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331692,"byte_end":331753,"line_start":487,"line_end":487,"column_start":5,"column_end":66}},{"value":"/ structure of the set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331758,"byte_end":331783,"line_start":488,"line_end":488,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331788,"byte_end":331791,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331796,"byte_end":331816,"line_start":490,"line_end":490,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331821,"byte_end":331824,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331829,"byte_end":331843,"line_start":492,"line_end":492,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331848,"byte_end":331851,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331856,"byte_end":331863,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331868,"byte_end":331903,"line_start":495,"line_end":495,"column_start":5,"column_end":40}},{"value":"/ # use im::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331908,"byte_end":331930,"line_start":496,"line_end":496,"column_start":5,"column_end":27}},{"value":"/ let mut set = hashset![1, 2, 3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331935,"byte_end":331971,"line_start":497,"line_end":497,"column_start":5,"column_end":41}},{"value":"/ set.retain(|v| *v > 1);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":331976,"byte_end":332003,"line_start":498,"line_end":498,"column_start":5,"column_end":32}},{"value":"/ let expected = hashset![2, 3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332008,"byte_end":332042,"line_start":499,"line_end":499,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(expected, set);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332047,"byte_end":332077,"line_start":500,"line_end":500,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332082,"byte_end":332089,"line_start":501,"line_end":501,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332896,"byte_end":332901,"line_start":530,"line_end":530,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<A, S>>::union","value":"pub fn union(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of two sets.","sig":null,"attributes":[{"value":"/ Construct the union of two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332504,"byte_end":332540,"line_start":515,"line_end":515,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332545,"byte_end":332548,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332553,"byte_end":332573,"line_start":517,"line_end":517,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332578,"byte_end":332581,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332586,"byte_end":332600,"line_start":519,"line_end":519,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332605,"byte_end":332608,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332613,"byte_end":332620,"line_start":521,"line_end":521,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332625,"byte_end":332660,"line_start":522,"line_end":522,"column_start":5,"column_end":40}},{"value":"/ # use im::hashset::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332665,"byte_end":332696,"line_start":523,"line_end":523,"column_start":5,"column_end":36}},{"value":"/ let set1 = hashset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332701,"byte_end":332731,"line_start":524,"line_end":524,"column_start":5,"column_end":35}},{"value":"/ let set2 = hashset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332736,"byte_end":332766,"line_start":525,"line_end":525,"column_start":5,"column_end":35}},{"value":"/ let expected = hashset!{1, 2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332771,"byte_end":332808,"line_start":526,"line_end":526,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(expected, set1.union(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332813,"byte_end":332856,"line_start":527,"line_end":527,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332861,"byte_end":332868,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":332873,"byte_end":332884,"line_start":529,"line_end":529,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1963},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333132,"byte_end":333138,"line_start":541,"line_end":541,"column_start":12,"column_end":18},"name":"unions","qualname":"<HashSet<A, S>>::unions","value":"pub fn unions<I>(I) -> Self where I: IntoIterator<Item = Self>, S: Default","parent":null,"children":[],"decl_id":null,"docs":" Construct the union of multiple sets.","sig":null,"attributes":[{"value":"/ Construct the union of multiple sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333030,"byte_end":333071,"line_start":537,"line_end":537,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333076,"byte_end":333079,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333084,"byte_end":333104,"line_start":539,"line_end":539,"column_start":5,"column_end":25}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333109,"byte_end":333120,"line_start":540,"line_end":540,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1965},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333885,"byte_end":333895,"line_start":569,"line_end":569,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<A, S>>::difference","value":"pub fn difference(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two sets.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333298,"byte_end":333354,"line_start":549,"line_end":549,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333359,"byte_end":333362,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333367,"byte_end":333395,"line_start":551,"line_end":551,"column_start":5,"column_end":33}},{"value":"/ [`symmetric_difference`][symmetric_difference] method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333400,"byte_end":333458,"line_start":552,"line_end":552,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333463,"byte_end":333466,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333471,"byte_end":333491,"line_start":554,"line_end":554,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333496,"byte_end":333499,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333504,"byte_end":333518,"line_start":556,"line_end":556,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333523,"byte_end":333526,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333531,"byte_end":333538,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333543,"byte_end":333578,"line_start":559,"line_end":559,"column_start":5,"column_end":40}},{"value":"/ # use im::hashset::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333583,"byte_end":333614,"line_start":560,"line_end":560,"column_start":5,"column_end":36}},{"value":"/ let set1 = hashset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333619,"byte_end":333649,"line_start":561,"line_end":561,"column_start":5,"column_end":35}},{"value":"/ let set2 = hashset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333654,"byte_end":333684,"line_start":562,"line_end":562,"column_start":5,"column_end":35}},{"value":"/ let expected = hashset!{1, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333689,"byte_end":333723,"line_start":563,"line_end":563,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(expected, set1.difference(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333728,"byte_end":333776,"line_start":564,"line_end":564,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333781,"byte_end":333788,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333793,"byte_end":333796,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ [symmetric_difference]: #method.symmetric_difference","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333801,"byte_end":333857,"line_start":567,"line_end":567,"column_start":5,"column_end":61}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333862,"byte_end":333873,"line_start":568,"line_end":568,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334401,"byte_end":334421,"line_start":588,"line_end":588,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<A, S>>::symmetric_difference","value":"pub fn symmetric_difference(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the symmetric difference between two sets.","sig":null,"attributes":[{"value":"/ Construct the symmetric difference between two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":333977,"byte_end":334033,"line_start":573,"line_end":573,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334038,"byte_end":334041,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334046,"byte_end":334066,"line_start":575,"line_end":575,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334071,"byte_end":334074,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334079,"byte_end":334093,"line_start":577,"line_end":577,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334098,"byte_end":334101,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334106,"byte_end":334113,"line_start":579,"line_end":579,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334118,"byte_end":334153,"line_start":580,"line_end":580,"column_start":5,"column_end":40}},{"value":"/ # use im::hashset::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334158,"byte_end":334189,"line_start":581,"line_end":581,"column_start":5,"column_end":36}},{"value":"/ let set1 = hashset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334194,"byte_end":334224,"line_start":582,"line_end":582,"column_start":5,"column_end":35}},{"value":"/ let set2 = hashset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334229,"byte_end":334259,"line_start":583,"line_end":583,"column_start":5,"column_end":35}},{"value":"/ let expected = hashset!{1, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334264,"byte_end":334298,"line_start":584,"line_end":584,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(expected, set1.symmetric_difference(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334303,"byte_end":334361,"line_start":585,"line_end":585,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334366,"byte_end":334373,"line_start":586,"line_end":586,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334378,"byte_end":334389,"line_start":587,"line_end":587,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335140,"byte_end":335159,"line_start":613,"line_end":613,"column_start":12,"column_end":31},"name":"relative_complement","qualname":"<HashSet<A, S>>::relative_complement","value":"pub fn relative_complement(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the relative complement between two sets, that is the set\n of values in `self` that do not occur in `other`.","sig":null,"attributes":[{"value":"/ Construct the relative complement between two sets, that is the set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334615,"byte_end":334686,"line_start":597,"line_end":597,"column_start":5,"column_end":76}},{"value":"/ of values in `self` that do not occur in `other`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334691,"byte_end":334744,"line_start":598,"line_end":598,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334749,"byte_end":334752,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Time: O(m log n) where m is the size of the other set","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334757,"byte_end":334814,"line_start":600,"line_end":600,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334819,"byte_end":334822,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334827,"byte_end":334841,"line_start":602,"line_end":602,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334846,"byte_end":334849,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334854,"byte_end":334861,"line_start":604,"line_end":604,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334866,"byte_end":334901,"line_start":605,"line_end":605,"column_start":5,"column_end":40}},{"value":"/ # use im::ordset::OrdSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334906,"byte_end":334935,"line_start":606,"line_end":606,"column_start":5,"column_end":34}},{"value":"/ let set1 = ordset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334940,"byte_end":334969,"line_start":607,"line_end":607,"column_start":5,"column_end":34}},{"value":"/ let set2 = ordset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":334974,"byte_end":335003,"line_start":608,"line_end":608,"column_start":5,"column_end":34}},{"value":"/ let expected = ordset!{1};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335008,"byte_end":335038,"line_start":609,"line_end":609,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(expected, set1.relative_complement(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335043,"byte_end":335100,"line_start":610,"line_end":610,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335105,"byte_end":335112,"line_start":611,"line_end":611,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335117,"byte_end":335128,"line_start":612,"line_end":612,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335697,"byte_end":335709,"line_start":635,"line_end":635,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<A, S>>::intersection","value":"pub fn intersection(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the intersection of two sets.","sig":null,"attributes":[{"value":"/ Construct the intersection of two sets.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335297,"byte_end":335340,"line_start":620,"line_end":620,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335345,"byte_end":335348,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335353,"byte_end":335373,"line_start":622,"line_end":622,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335378,"byte_end":335381,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335386,"byte_end":335400,"line_start":624,"line_end":624,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335405,"byte_end":335408,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335413,"byte_end":335420,"line_start":626,"line_end":626,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335425,"byte_end":335460,"line_start":627,"line_end":627,"column_start":5,"column_end":40}},{"value":"/ # use im::hashset::HashSet;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335465,"byte_end":335496,"line_start":628,"line_end":628,"column_start":5,"column_end":36}},{"value":"/ let set1 = hashset!{1, 2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335501,"byte_end":335531,"line_start":629,"line_end":629,"column_start":5,"column_end":35}},{"value":"/ let set2 = hashset!{2, 3};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335536,"byte_end":335566,"line_start":630,"line_end":630,"column_start":5,"column_end":35}},{"value":"/ let expected = hashset!{2};","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335571,"byte_end":335602,"line_start":631,"line_end":631,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(expected, set1.intersection(set2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335607,"byte_end":335657,"line_start":632,"line_end":632,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335662,"byte_end":335669,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335674,"byte_end":335685,"line_start":634,"line_end":634,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2035},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340289,"byte_end":340293,"line_start":856,"line_end":856,"column_start":12,"column_end":16},"name":"Iter","qualname":"::hash::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2038}],"decl_id":null,"docs":" An iterator over the elements of a set.\n","sig":null,"attributes":[{"value":"/ An iterator over the elements of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340234,"byte_end":340277,"line_start":855,"line_end":855,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":2052},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340761,"byte_end":340768,"line_start":880,"line_end":880,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::hash::set::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2055}],"decl_id":null,"docs":" A mutable iterator over the elements of a set.\n","sig":null,"attributes":[{"value":"/ A mutable iterator over the elements of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340699,"byte_end":340749,"line_start":879,"line_end":879,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":2069},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341296,"byte_end":341309,"line_start":904,"line_end":904,"column_start":12,"column_end":25},"name":"ConsumingIter","qualname":"::hash::set::ConsumingIter","value":"ConsumingIter {  }","parent":null,"children":[{"krate":0,"index":2071}],"decl_id":null,"docs":" A consuming iterator over the elements of a set.\n","sig":null,"attributes":[{"value":"/ A consuming iterator over the elements of a set.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341232,"byte_end":341284,"line_start":903,"line_end":903,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":2149},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vector","qualname":"::vector","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","parent":null,"children":[{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":3349},{"krate":0,"index":2154},{"krate":0,"index":3351},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157},{"krate":0,"index":3355},{"krate":0,"index":2158},{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":3409},{"krate":0,"index":2192},{"krate":0,"index":3411},{"krate":0,"index":2193},{"krate":0,"index":3413},{"krate":0,"index":2194},{"krate":0,"index":2347},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350},{"krate":0,"index":2374},{"krate":0,"index":2376},{"krate":0,"index":2379},{"krate":0,"index":2393},{"krate":0,"index":2402},{"krate":0,"index":2405},{"krate":0,"index":2443},{"krate":0,"index":2469},{"krate":0,"index":2479},{"krate":0,"index":2481},{"krate":0,"index":2484},{"krate":0,"index":2487},{"krate":0,"index":2490},{"krate":0,"index":2493},{"krate":0,"index":2495},{"krate":0,"index":2498},{"krate":0,"index":2501},{"krate":0,"index":2505},{"krate":0,"index":2510},{"krate":0,"index":2514},{"krate":0,"index":2519},{"krate":0,"index":2523},{"krate":0,"index":2527},{"krate":0,"index":2530},{"krate":0,"index":2536},{"krate":0,"index":2541},{"krate":0,"index":2545},{"krate":0,"index":2552},{"krate":0,"index":2556},{"krate":0,"index":2559},{"krate":0,"index":2563},{"krate":0,"index":2569},{"krate":0,"index":2574},{"krate":0,"index":2580},{"krate":0,"index":2584},{"krate":0,"index":2587},{"krate":0,"index":2590},{"krate":0,"index":2596},{"krate":0,"index":2601},{"krate":0,"index":2607},{"krate":0,"index":2611},{"krate":0,"index":2614},{"krate":0,"index":2617},{"krate":0,"index":2620},{"krate":0,"index":2623},{"krate":0,"index":2628},{"krate":0,"index":2631},{"krate":0,"index":2633},{"krate":0,"index":2635},{"krate":0,"index":2641},{"krate":0,"index":2645},{"krate":0,"index":2650},{"krate":0,"index":2654},{"krate":0,"index":2657},{"krate":0,"index":2663},{"krate":0,"index":2667},{"krate":0,"index":2672},{"krate":0,"index":2676}],"decl_id":null,"docs":" A persistent vector.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":20043,"byte_end":20055,"line_start":365,"line_end":365,"column_start":1,"column_end":13}},{"value":"/ A persistent vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347173,"byte_end":347197,"line_start":5,"line_end":5,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347198,"byte_end":347201,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This is a sequence of elements in insertion order - if you need a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347202,"byte_end":347271,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ list of things, any kind of list of things, this is what you're","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347272,"byte_end":347339,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/ looking for.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347340,"byte_end":347356,"line_start":9,"line_end":9,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347357,"byte_end":347360,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It's implemented as an [RRB vector][rrbpaper] with [smart","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347361,"byte_end":347422,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/ head/tail chunking][chunkedseq]. In performance terms, this means","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347423,"byte_end":347492,"line_start":12,"line_end":12,"column_start":1,"column_end":70}},{"value":"/ that practically every operation is O(log n), except push/pop on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347493,"byte_end":347561,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/ both sides, which will be O(1) amortised, and O(log n) in the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347562,"byte_end":347627,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ worst case. In practice, the push/pop operations will be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347628,"byte_end":347688,"line_start":15,"line_end":15,"column_start":1,"column_end":61}},{"value":"/ blindingly fast, nearly on par with the native","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347689,"byte_end":347739,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"/ [`VecDeque`][VecDeque], and other operations will have decent, if","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347740,"byte_end":347809,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ not high, performance, but they all have more or less the same","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347810,"byte_end":347876,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/ O(log n) complexity, so you don't need to keep their performance","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347877,"byte_end":347945,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ characteristics in mind - everything, even splitting and merging,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":347946,"byte_end":348015,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ is safe to use and never too slow.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348016,"byte_end":348054,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348055,"byte_end":348058,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Performance Notes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348059,"byte_end":348083,"line_start":23,"line_end":23,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348084,"byte_end":348087,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Because of the head/tail chunking technique, until you push a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348088,"byte_end":348153,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ number of items above double the tree's branching factor (that's","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348154,"byte_end":348222,"line_start":26,"line_end":26,"column_start":1,"column_end":69}},{"value":"/ `self.len()` = 2 × *k* (where *k* = 64) = 128) on either side, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348223,"byte_end":348294,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ data structure is still just a handful of arrays, not yet an RRB","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348295,"byte_end":348363,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ tree, so you'll see performance and memory characteristics fairly","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348364,"byte_end":348433,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ close to [`Vec`][Vec] or [`VecDeque`][VecDeque].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348434,"byte_end":348486,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348487,"byte_end":348490,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This means that the structure always preallocates four chunks of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348491,"byte_end":348559,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ size *k* (*k* being the tree's branching factor), equivalent to a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348560,"byte_end":348629,"line_start":33,"line_end":33,"column_start":1,"column_end":70}},{"value":"/ [`Vec`][Vec] with an initial capacity of 256. Beyond that, it will","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348630,"byte_end":348700,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ allocate tree nodes of capacity *k* as needed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348701,"byte_end":348751,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348752,"byte_end":348755,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ In addition, vectors start out as single chunks, and only expand into the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348756,"byte_end":348833,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ full data structure once you go past the chunk size. This makes them","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348834,"byte_end":348906,"line_start":38,"line_end":38,"column_start":1,"column_end":73}},{"value":"/ perform identically to [`Vec`][Vec] at small sizes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348907,"byte_end":348962,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348963,"byte_end":348966,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [rrbpaper]: https://infoscience.epfl.ch/record/213452/files/rrbvector.pdf","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":348967,"byte_end":349044,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ [chunkedseq]: http://deepsea.inria.fr/pasl/chunkedseq.pdf","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":349045,"byte_end":349106,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"/ [Vec]: https://doc.rust-lang.org/std/vec/struct.Vec.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":349107,"byte_end":349167,"line_start":43,"line_end":43,"column_start":1,"column_end":61}},{"value":"/ [VecDeque]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":349168,"byte_end":349246,"line_start":44,"line_end":44,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2224},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436538,"byte_end":436544,"line_start":88,"line_end":88,"column_start":5,"column_end":11},"name":"Single","qualname":"::vector::focus::Focus::Single","value":"Focus::Single(&'a [A])","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2227},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436578,"byte_end":436582,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"Full","qualname":"::vector::focus::Focus::Full","value":"Focus::Full(TreeFocus<A>)","parent":{"krate":0,"index":2221},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2221},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436500,"byte_end":436505,"line_start":86,"line_end":86,"column_start":10,"column_end":15},"name":"Focus","qualname":"::vector::focus::Focus","value":"pub enum Focus<'a, A> {\n\n    #[doc(hidden)]\n    Single(&'a [A]),\n\n    #[doc(hidden)]\n    Full(TreeFocus<A>),\n}","parent":null,"children":[{"krate":0,"index":2224},{"krate":0,"index":2227}],"decl_id":null,"docs":" Focused indexing over a [`Vector`][Vector].","sig":null,"attributes":[{"value":"/ Focused indexing over a [`Vector`][Vector].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":433809,"byte_end":433856,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":433857,"byte_end":433860,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ By remembering the last tree node accessed through an index lookup and the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":433861,"byte_end":433939,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ path we took to get there, we can speed up lookups for adjacent indices","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":433940,"byte_end":434015,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ tremendously. Lookups on indices in the same node are instantaneous, and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434016,"byte_end":434092,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ lookups on sibling nodes are also very fast.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434093,"byte_end":434141,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434142,"byte_end":434145,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `Focus` can also be used as a restricted view into a vector, using the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434146,"byte_end":434222,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ [`narrow`][narrow] and [`split_at`][split_at] methods.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434223,"byte_end":434281,"line_start":27,"line_end":27,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434282,"byte_end":434285,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # When should I use a `Focus` for better performance?","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434286,"byte_end":434343,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434344,"byte_end":434347,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ `Focus` is useful when you need to perform a large number of index lookups","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434348,"byte_end":434426,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ that are more likely than not to be close to each other. It's usually worth","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434427,"byte_end":434506,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ using a `Focus` in any situation where you're batching a lot of index","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434507,"byte_end":434580,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ lookups together, even if they're not obviously adjacent - there's likely","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434581,"byte_end":434658,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ to be some performance gain for even completely random access.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434659,"byte_end":434725,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434726,"byte_end":434729,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If you're just iterating forwards or backwards over the [`Vector`][Vector]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434730,"byte_end":434808,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ in order, you're better off with a regular iterator, which, in fact, is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434809,"byte_end":434884,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"/ implemented using a `Focus`, but provides a simpler interface.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434885,"byte_end":434951,"line_start":39,"line_end":39,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434952,"byte_end":434955,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ If you're just doing a very small number of index lookups, the setup cost","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":434956,"byte_end":435033,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ for the `Focus` is probably not worth it.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435034,"byte_end":435079,"line_start":42,"line_end":42,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435080,"byte_end":435083,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ A `Focus` is never faster than an index lookup on a small [`Vector`][Vector]","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435084,"byte_end":435164,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ with a length below the internal RRB tree's branching factor of 64.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435165,"byte_end":435236,"line_start":45,"line_end":45,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435237,"byte_end":435240,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435241,"byte_end":435255,"line_start":47,"line_end":47,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435256,"byte_end":435259,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ This example is contrived, as the better way to iterate forwards or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435260,"byte_end":435331,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/ backwards over a vector is with an actual iterator. Even so, the version","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435332,"byte_end":435408,"line_start":50,"line_end":50,"column_start":1,"column_end":77}},{"value":"/ using a `Focus` should run nearly an order of magnitude faster than the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435409,"byte_end":435484,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ version using index lookups at a length of 1000. It should also be noted","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435485,"byte_end":435561,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ that [`vector::Iter`][Iter] is actually implemented using a `Focus` behind","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435562,"byte_end":435640,"line_start":53,"line_end":53,"column_start":1,"column_end":79}},{"value":"/ the scenes, so the performance of the two should be identical.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435641,"byte_end":435707,"line_start":54,"line_end":54,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435708,"byte_end":435711,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435712,"byte_end":435723,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435724,"byte_end":435759,"line_start":57,"line_end":57,"column_start":1,"column_end":36}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435760,"byte_end":435789,"line_start":58,"line_end":58,"column_start":1,"column_end":30}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435790,"byte_end":435824,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/ let mut vec: Vector<i64> = Vector::from_iter(0..1000);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435825,"byte_end":435883,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435884,"byte_end":435887,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // Summing a vector, the slow way:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435888,"byte_end":435926,"line_start":62,"line_end":62,"column_start":1,"column_end":39}},{"value":"/ let mut sum = 0;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435927,"byte_end":435947,"line_start":63,"line_end":63,"column_start":1,"column_end":21}},{"value":"/ for i in 0..1000 {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435948,"byte_end":435970,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"/     sum += *vec.get(i).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":435971,"byte_end":436007,"line_start":65,"line_end":65,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436008,"byte_end":436013,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(499500, sum);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436014,"byte_end":436042,"line_start":67,"line_end":67,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436043,"byte_end":436046,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // Summing a vector faster using a Focus:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436047,"byte_end":436092,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ let mut sum = 0;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436093,"byte_end":436113,"line_start":70,"line_end":70,"column_start":1,"column_end":21}},{"value":"/ let mut focus = vec.focus();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436114,"byte_end":436146,"line_start":71,"line_end":71,"column_start":1,"column_end":33}},{"value":"/ for i in 0..1000 {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436147,"byte_end":436169,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/     sum += *focus.get(i).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436170,"byte_end":436208,"line_start":73,"line_end":73,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436209,"byte_end":436214,"line_start":74,"line_end":74,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(499500, sum);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436215,"byte_end":436243,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436244,"byte_end":436247,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ // And the easy way, for completeness:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436248,"byte_end":436290,"line_start":77,"line_end":77,"column_start":1,"column_end":43}},{"value":"/ let sum: i64 = vec.iter().sum();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436291,"byte_end":436327,"line_start":78,"line_end":78,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(499500, sum);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436328,"byte_end":436356,"line_start":79,"line_end":79,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436357,"byte_end":436364,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436365,"byte_end":436368,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [Vector]: enum.Vector.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436369,"byte_end":436399,"line_start":82,"line_end":82,"column_start":1,"column_end":31}},{"value":"/ [Iter]: struct.Iter.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436400,"byte_end":436428,"line_start":83,"line_end":83,"column_start":1,"column_end":29}},{"value":"/ [narrow]: #method.narrow","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436429,"byte_end":436457,"line_start":84,"line_end":84,"column_start":1,"column_end":29}},{"value":"/ [split_at]: #method.split_at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436458,"byte_end":436490,"line_start":85,"line_end":85,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2233},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436761,"byte_end":436764,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<Focus>::new","value":"pub fn new(&'a Vector<A>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Focus` for a [`Vector`][Vector].","sig":null,"attributes":[{"value":"/ Construct a `Focus` for a [`Vector`][Vector].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436657,"byte_end":436706,"line_start":97,"line_end":97,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436711,"byte_end":436714,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ [Vector]: enum.Vector.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436719,"byte_end":436749,"line_start":99,"line_end":99,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2234},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437130,"byte_end":437133,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"len","qualname":"<Focus>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the focused [`Vector`][Vector].","sig":null,"attributes":[{"value":"/ Get the length of the focused [`Vector`][Vector].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437022,"byte_end":437075,"line_start":108,"line_end":108,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437080,"byte_end":437083,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ [Vector]: enum.Vector.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437088,"byte_end":437118,"line_start":110,"line_end":110,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2235},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437395,"byte_end":437403,"line_start":121,"line_end":121,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Focus>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if the focused [`Vector`][Vector] is empty.","sig":null,"attributes":[{"value":"/ Test if the focused [`Vector`][Vector] is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437288,"byte_end":437340,"line_start":118,"line_end":118,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437345,"byte_end":437348,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ [Vector]: enum.Vector.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437353,"byte_end":437383,"line_start":120,"line_end":120,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437518,"byte_end":437521,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"get","qualname":"<Focus>::get","value":"pub fn get(&mut Self, usize) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the value at a given index.\n","sig":null,"attributes":[{"value":"/ Get a reference to the value at a given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437456,"byte_end":437506,"line_start":125,"line_end":125,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2237},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437825,"byte_end":437830,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"index","qualname":"<Focus>::index","value":"pub fn index(&mut Self, usize) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the value at a given index.","sig":null,"attributes":[{"value":"/ Get a reference to the value at a given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437709,"byte_end":437759,"line_start":133,"line_end":133,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437764,"byte_end":437767,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Panics if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437772,"byte_end":437813,"line_start":135,"line_end":135,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438110,"byte_end":438118,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"chunk_at","qualname":"<Focus>::chunk_at","value":"pub fn chunk_at(&mut Self, usize) -> (Range<usize>, &[A])","parent":null,"children":[],"decl_id":null,"docs":" Get the chunk for the given index.","sig":null,"attributes":[{"value":"/ Get the chunk for the given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437929,"byte_end":437967,"line_start":140,"line_end":140,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437972,"byte_end":437975,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This gives you a reference to the leaf node that contains the index,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":437980,"byte_end":438052,"line_start":142,"line_end":142,"column_start":5,"column_end":77}},{"value":"/ along with its start and end indices.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438057,"byte_end":438098,"line_start":143,"line_end":143,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439299,"byte_end":439305,"line_start":176,"line_end":176,"column_start":12,"column_end":18},"name":"narrow","qualname":"<Focus>::narrow","value":"pub fn narrow<R>(Self, R) -> Self where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Narrow the focus onto a subslice of the vector.","sig":null,"attributes":[{"value":"/ Narrow the focus onto a subslice of the vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438455,"byte_end":438506,"line_start":155,"line_end":155,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438511,"byte_end":438514,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ `Focus::narrow(range)` has the same effect as `&slice[range]`, without","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438519,"byte_end":438593,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/ actually modifying the underlying vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438598,"byte_end":438643,"line_start":158,"line_end":158,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438648,"byte_end":438651,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Panics if the range isn't fully inside the current focus.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438656,"byte_end":438717,"line_start":160,"line_end":160,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438722,"byte_end":438725,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438730,"byte_end":438745,"line_start":162,"line_end":162,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438750,"byte_end":438753,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438758,"byte_end":438769,"line_start":164,"line_end":164,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438774,"byte_end":438809,"line_start":165,"line_end":165,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438814,"byte_end":438843,"line_start":166,"line_end":166,"column_start":5,"column_end":34}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438848,"byte_end":438882,"line_start":167,"line_end":167,"column_start":5,"column_end":39}},{"value":"/ let vec = Vector::from_iter(0..1000);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438887,"byte_end":438928,"line_start":168,"line_end":168,"column_start":5,"column_end":46}},{"value":"/ let narrowed = vec.focus().narrow(100..200);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438933,"byte_end":438981,"line_start":169,"line_end":169,"column_start":5,"column_end":53}},{"value":"/ let narrowed_vec = narrowed.into_iter().cloned().collect();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":438986,"byte_end":439049,"line_start":170,"line_end":170,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(Vector::from_iter(100..200), narrowed_vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439054,"byte_end":439112,"line_start":171,"line_end":171,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439117,"byte_end":439124,"line_start":172,"line_end":172,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439129,"byte_end":439132,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ [slice::split_at]: https://doc.rust-lang.org/std/primitive.slice.html#method.split_at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439137,"byte_end":439226,"line_start":174,"line_end":174,"column_start":5,"column_end":94}},{"value":"/ [Vector::split_at]: enum.Vector.html#method.split_at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439231,"byte_end":439287,"line_start":175,"line_end":175,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2241},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440925,"byte_end":440933,"line_start":218,"line_end":218,"column_start":12,"column_end":20},"name":"split_at","qualname":"<Focus>::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self)","parent":null,"children":[],"decl_id":null,"docs":" Split the focus into two.","sig":null,"attributes":[{"value":"/ Split the focus into two.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439723,"byte_end":439752,"line_start":190,"line_end":190,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439757,"byte_end":439760,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ Given an index `index`, consume the focus and produce two new foci, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439765,"byte_end":439840,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/ left onto indices `0..index`, and the right onto indices `index..N`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439845,"byte_end":439916,"line_start":193,"line_end":193,"column_start":5,"column_end":76}},{"value":"/ where `N` is the length of the current focus.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439921,"byte_end":439970,"line_start":194,"line_end":194,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439975,"byte_end":439978,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Panics if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":439983,"byte_end":440024,"line_start":196,"line_end":196,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440029,"byte_end":440032,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ This is the moral equivalent of [`slice::split_at`][slice::split_at], in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440037,"byte_end":440113,"line_start":198,"line_end":198,"column_start":5,"column_end":81}},{"value":"/ that it leaves the underlying data structure unchanged, unlike","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440118,"byte_end":440184,"line_start":199,"line_end":199,"column_start":5,"column_end":71}},{"value":"/ [`Vector::split_at`][Vector::split_at].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440189,"byte_end":440232,"line_start":200,"line_end":200,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440237,"byte_end":440240,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440245,"byte_end":440260,"line_start":202,"line_end":202,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440265,"byte_end":440268,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440273,"byte_end":440284,"line_start":204,"line_end":204,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440289,"byte_end":440324,"line_start":205,"line_end":205,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440329,"byte_end":440358,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440363,"byte_end":440397,"line_start":207,"line_end":207,"column_start":5,"column_end":39}},{"value":"/ let vec = Vector::from_iter(0..1000);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440402,"byte_end":440443,"line_start":208,"line_end":208,"column_start":5,"column_end":46}},{"value":"/ let (left, right) = vec.focus().split_at(500);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440448,"byte_end":440498,"line_start":209,"line_end":209,"column_start":5,"column_end":55}},{"value":"/ let left_vec = left.into_iter().cloned().collect();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440503,"byte_end":440558,"line_start":210,"line_end":210,"column_start":5,"column_end":60}},{"value":"/ let right_vec = right.into_iter().cloned().collect();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440563,"byte_end":440620,"line_start":211,"line_end":211,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Vector::from_iter(0..500), left_vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440625,"byte_end":440677,"line_start":212,"line_end":212,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(Vector::from_iter(500..1000), right_vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440682,"byte_end":440738,"line_start":213,"line_end":213,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440743,"byte_end":440750,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440755,"byte_end":440758,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ [slice::split_at]: https://doc.rust-lang.org/std/primitive.slice.html#method.split_at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440763,"byte_end":440852,"line_start":216,"line_end":216,"column_start":5,"column_end":94}},{"value":"/ [Vector::split_at]: enum.Vector.html#method.split_at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":440857,"byte_end":440913,"line_start":217,"line_end":217,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2252},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":441927,"byte_end":441936,"line_start":259,"line_end":259,"column_start":12,"column_end":21},"name":"TreeFocus","qualname":"::vector::focus::TreeFocus","value":"TreeFocus {  }","parent":null,"children":[{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2278},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":445430,"byte_end":445433,"line_start":376,"line_end":376,"column_start":12,"column_end":15},"name":"get","qualname":"<TreeFocus<A>>::get","value":"pub fn get(&mut Self, usize) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2279},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":445841,"byte_end":445850,"line_start":388,"line_end":388,"column_start":12,"column_end":21},"name":"get_chunk","qualname":"<TreeFocus<A>>::get_chunk","value":"pub fn get_chunk(&mut Self, usize) -> (Range<usize>, &[A])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2283},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448566,"byte_end":448572,"line_start":465,"line_end":465,"column_start":5,"column_end":11},"name":"Single","qualname":"::vector::focus::FocusMut::Single","value":"FocusMut::Single(RRBPool<A>, &'a mut [A])","parent":{"krate":0,"index":2280},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2287},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448622,"byte_end":448626,"line_start":467,"line_end":467,"column_start":5,"column_end":9},"name":"Full","qualname":"::vector::focus::FocusMut::Full","value":"FocusMut::Full(RRBPool<A>, TreeFocusMut)","parent":{"krate":0,"index":2280},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2280},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448525,"byte_end":448533,"line_start":463,"line_end":463,"column_start":10,"column_end":18},"name":"FocusMut","qualname":"::vector::focus::FocusMut","value":"pub enum FocusMut<'a, A> {\n\n    #[doc(hidden)]\n    Single(RRBPool<A>, &'a mut [A]),\n\n    #[doc(hidden)]\n    Full(RRBPool<A>, TreeFocusMut),\n}","parent":null,"children":[{"krate":0,"index":2283},{"krate":0,"index":2287}],"decl_id":null,"docs":" A mutable version of [`Focus`][Focus].","sig":null,"attributes":[{"value":"/ A mutable version of [`Focus`][Focus].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446612,"byte_end":446654,"line_start":408,"line_end":408,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446655,"byte_end":446658,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ See [`Focus`][Focus] for more details.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446659,"byte_end":446701,"line_start":410,"line_end":410,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446702,"byte_end":446705,"line_start":411,"line_end":411,"column_start":1,"column_end":4}},{"value":"/ You can only build one `FocusMut` at a time for a vector, effectively","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446706,"byte_end":446779,"line_start":412,"line_end":412,"column_start":1,"column_end":74}},{"value":"/ keeping a lock on the vector until you're done with the focus, which relies","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446780,"byte_end":446859,"line_start":413,"line_end":413,"column_start":1,"column_end":80}},{"value":"/ on the structure of the vector not changing while it exists.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446860,"byte_end":446924,"line_start":414,"line_end":414,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446925,"byte_end":446928,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446929,"byte_end":446953,"line_start":416,"line_end":416,"column_start":1,"column_end":25}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446954,"byte_end":446989,"line_start":417,"line_end":417,"column_start":1,"column_end":36}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":446990,"byte_end":447019,"line_start":418,"line_end":418,"column_start":1,"column_end":30}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447020,"byte_end":447054,"line_start":419,"line_end":419,"column_start":1,"column_end":35}},{"value":"/ let mut vec = Vector::from_iter(0..1000);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447055,"byte_end":447100,"line_start":420,"line_end":420,"column_start":1,"column_end":46}},{"value":"/ let focus1 = vec.focus_mut();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447101,"byte_end":447134,"line_start":421,"line_end":421,"column_start":1,"column_end":34}},{"value":"/ // Fails here in 2015 edition because you're creating","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447135,"byte_end":447192,"line_start":422,"line_end":422,"column_start":1,"column_end":58}},{"value":"/ // two mutable references to the same thing.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447193,"byte_end":447241,"line_start":423,"line_end":423,"column_start":1,"column_end":49}},{"value":"/ let focus2 = vec.focus_mut();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447242,"byte_end":447275,"line_start":424,"line_end":424,"column_start":1,"column_end":34}},{"value":"/ // Fails here in 2018 edition because creating focus2","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447276,"byte_end":447333,"line_start":425,"line_end":425,"column_start":1,"column_end":58}},{"value":"/ // made focus1's lifetime go out of scope.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447334,"byte_end":447380,"line_start":426,"line_end":426,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(Some(&0), focus1.get(0));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447381,"byte_end":447421,"line_start":427,"line_end":427,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447422,"byte_end":447429,"line_start":428,"line_end":428,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447430,"byte_end":447433,"line_start":429,"line_end":429,"column_start":1,"column_end":4}},{"value":"/ On the other hand, you can split that one focus into multiple sub-focuses,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447434,"byte_end":447512,"line_start":430,"line_end":430,"column_start":1,"column_end":79}},{"value":"/ which is safe because they can't overlap:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447513,"byte_end":447558,"line_start":431,"line_end":431,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447559,"byte_end":447562,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447563,"byte_end":447574,"line_start":433,"line_end":433,"column_start":1,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447575,"byte_end":447610,"line_start":434,"line_end":434,"column_start":1,"column_end":36}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447611,"byte_end":447640,"line_start":435,"line_end":435,"column_start":1,"column_end":30}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447641,"byte_end":447675,"line_start":436,"line_end":436,"column_start":1,"column_end":35}},{"value":"/ let mut vec = Vector::from_iter(0..1000);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447676,"byte_end":447721,"line_start":437,"line_end":437,"column_start":1,"column_end":46}},{"value":"/ let focus = vec.focus_mut();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447722,"byte_end":447754,"line_start":438,"line_end":438,"column_start":1,"column_end":33}},{"value":"/ let (mut left, mut right) = focus.split_at(500);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447755,"byte_end":447807,"line_start":439,"line_end":439,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(Some(&0), left.get(0));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447808,"byte_end":447846,"line_start":440,"line_end":440,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(Some(&500), right.get(0));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447847,"byte_end":447888,"line_start":441,"line_end":441,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447889,"byte_end":447896,"line_start":442,"line_end":442,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447897,"byte_end":447900,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ These sub-foci also work as a lock on the vector, even if the focus they","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447901,"byte_end":447977,"line_start":444,"line_end":444,"column_start":1,"column_end":77}},{"value":"/ were created from goes out of scope.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":447978,"byte_end":448018,"line_start":445,"line_end":445,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448019,"byte_end":448022,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448023,"byte_end":448047,"line_start":447,"line_end":447,"column_start":1,"column_end":25}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448048,"byte_end":448083,"line_start":448,"line_end":448,"column_start":1,"column_end":36}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448084,"byte_end":448113,"line_start":449,"line_end":449,"column_start":1,"column_end":30}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448114,"byte_end":448148,"line_start":450,"line_end":450,"column_start":1,"column_end":35}},{"value":"/ let mut vec = Vector::from_iter(0..1000);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448149,"byte_end":448194,"line_start":451,"line_end":451,"column_start":1,"column_end":46}},{"value":"/ let (left, right) = {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448195,"byte_end":448220,"line_start":452,"line_end":452,"column_start":1,"column_end":26}},{"value":"/     let focus = vec.focus_mut();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448221,"byte_end":448257,"line_start":453,"line_end":453,"column_start":1,"column_end":37}},{"value":"/     focus.split_at(500)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448258,"byte_end":448285,"line_start":454,"line_end":454,"column_start":1,"column_end":28}},{"value":"/ };","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448286,"byte_end":448292,"line_start":455,"line_end":455,"column_start":1,"column_end":7}},{"value":"/ // `left` and `right` are still in scope even if `focus` isn't, so we can't","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448293,"byte_end":448372,"line_start":456,"line_end":456,"column_start":1,"column_end":80}},{"value":"/ // create another focus:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448373,"byte_end":448401,"line_start":457,"line_end":457,"column_start":1,"column_end":29}},{"value":"/ let focus2 = vec.focus_mut();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448402,"byte_end":448435,"line_start":458,"line_end":458,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(Some(&0), left.get(0));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448436,"byte_end":448474,"line_start":459,"line_end":459,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448475,"byte_end":448482,"line_start":460,"line_end":460,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448483,"byte_end":448486,"line_start":461,"line_end":461,"column_start":1,"column_end":4}},{"value":"/ [Focus]: enum.Focus.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448487,"byte_end":448515,"line_start":462,"line_end":462,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448777,"byte_end":448780,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"new","qualname":"<FocusMut>::new","value":"pub fn new(&'a mut Vector<A>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `FocusMut` for a `Vector`.\n","sig":null,"attributes":[{"value":"/ Construct a `FocusMut` for a `Vector`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448723,"byte_end":448765,"line_start":474,"line_end":474,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2295},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":449263,"byte_end":449266,"line_start":487,"line_end":487,"column_start":12,"column_end":15},"name":"len","qualname":"<FocusMut>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the focused `Vector`.\n","sig":null,"attributes":[{"value":"/ Get the length of the focused `Vector`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":449208,"byte_end":449251,"line_start":486,"line_end":486,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":449487,"byte_end":449495,"line_start":495,"line_end":495,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<FocusMut>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test if the focused `Vector` is empty.\n","sig":null,"attributes":[{"value":"/ Test if the focused `Vector` is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":449433,"byte_end":449475,"line_start":494,"line_end":494,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2297},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":449610,"byte_end":449613,"line_start":500,"line_end":500,"column_start":12,"column_end":15},"name":"get","qualname":"<FocusMut>::get","value":"pub fn get(&mut Self, usize) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the value at a given index.\n","sig":null,"attributes":[{"value":"/ Get a reference to the value at a given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":449548,"byte_end":449598,"line_start":499,"line_end":499,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":449777,"byte_end":449784,"line_start":505,"line_end":505,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<FocusMut>::get_mut","value":"pub fn get_mut(&mut Self, usize) -> Option<&mut A>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the value at a given index.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the value at a given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":449707,"byte_end":449765,"line_start":504,"line_end":504,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450117,"byte_end":450122,"line_start":515,"line_end":515,"column_start":12,"column_end":17},"name":"index","qualname":"<FocusMut>::index","value":"pub fn index(&mut Self, usize) -> &A","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the value at a given index.","sig":null,"attributes":[{"value":"/ Get a reference to the value at a given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450001,"byte_end":450051,"line_start":512,"line_end":512,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450056,"byte_end":450059,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Panics if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450064,"byte_end":450105,"line_start":514,"line_end":514,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2301},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450388,"byte_end":450397,"line_start":523,"line_end":523,"column_start":12,"column_end":21},"name":"index_mut","qualname":"<FocusMut>::index_mut","value":"pub fn index_mut(&mut Self, usize) -> &mut A","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the value at a given index.","sig":null,"attributes":[{"value":"/ Get a mutable reference to the value at a given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450199,"byte_end":450257,"line_start":519,"line_end":519,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450262,"byte_end":450265,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Panics if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450270,"byte_end":450311,"line_start":521,"line_end":521,"column_start":5,"column_end":46}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450316,"byte_end":450356,"line_start":522,"line_end":522,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2302},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450657,"byte_end":450660,"line_start":531,"line_end":531,"column_start":12,"column_end":15},"name":"set","qualname":"<FocusMut>::set","value":"pub fn set(&mut Self, usize, A) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" Update the value at a given index.","sig":null,"attributes":[{"value":"/ Update the value at a given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450504,"byte_end":450542,"line_start":527,"line_end":527,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450547,"byte_end":450550,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the index is out of bounds, or the replaced value","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450555,"byte_end":450626,"line_start":529,"line_end":529,"column_start":5,"column_end":76}},{"value":"/ otherwise.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450631,"byte_end":450645,"line_start":530,"line_end":530,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451052,"byte_end":451056,"line_start":543,"line_end":543,"column_start":12,"column_end":16},"name":"swap","qualname":"<FocusMut>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swap the values at two given indices.","sig":null,"attributes":[{"value":"/ Swap the values at two given indices.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450854,"byte_end":450895,"line_start":538,"line_end":538,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450900,"byte_end":450903,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Panics if either index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450908,"byte_end":450952,"line_start":540,"line_end":540,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450957,"byte_end":450960,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ If the indices are equal, this function returns without doing anything.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":450965,"byte_end":451040,"line_start":542,"line_end":542,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2305},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451883,"byte_end":451887,"line_start":568,"line_end":568,"column_start":12,"column_end":16},"name":"pair","qualname":"<FocusMut>::pair","value":"pub fn pair<F, B>(&mut Self, usize, usize, F) -> B where\nF: FnMut(&mut A, &mut A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Lookup two indices simultaneously and run a function over them.","sig":null,"attributes":[{"value":"/ Lookup two indices simultaneously and run a function over them.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451209,"byte_end":451276,"line_start":550,"line_end":550,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451281,"byte_end":451284,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Useful because the borrow checker won't let you have more than one","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451289,"byte_end":451359,"line_start":552,"line_end":552,"column_start":5,"column_end":75}},{"value":"/ mutable reference into the same data structure at any given time.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451364,"byte_end":451433,"line_start":553,"line_end":553,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451438,"byte_end":451441,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ Panics if either index is out of bounds, or if they are the same index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451446,"byte_end":451521,"line_start":555,"line_end":555,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451526,"byte_end":451529,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451534,"byte_end":451548,"line_start":557,"line_end":557,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451553,"byte_end":451556,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451561,"byte_end":451572,"line_start":559,"line_end":559,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451577,"byte_end":451612,"line_start":560,"line_end":560,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451617,"byte_end":451646,"line_start":561,"line_end":561,"column_start":5,"column_end":34}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451651,"byte_end":451685,"line_start":562,"line_end":562,"column_start":5,"column_end":39}},{"value":"/ let mut vec = vector![1, 2, 3, 4, 5];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451690,"byte_end":451731,"line_start":563,"line_end":563,"column_start":5,"column_end":46}},{"value":"/ vec.focus_mut().pair(1, 3, |a, b| *a += *b);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451736,"byte_end":451784,"line_start":564,"line_end":564,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(vector![1, 6, 3, 4, 5], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451789,"byte_end":451833,"line_start":565,"line_end":565,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451838,"byte_end":451845,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"allow(unsafe_code)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":451850,"byte_end":451871,"line_start":567,"line_end":567,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2308},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452922,"byte_end":452929,"line_start":598,"line_end":598,"column_start":12,"column_end":19},"name":"triplet","qualname":"<FocusMut>::triplet","value":"pub fn triplet<F, B>(&mut Self, usize, usize, usize, F) -> B where\nF: FnMut(&mut A, &mut A, &mut A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Lookup three indices simultaneously and run a function over them.","sig":null,"attributes":[{"value":"/ Lookup three indices simultaneously and run a function over them.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452237,"byte_end":452306,"line_start":580,"line_end":580,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452311,"byte_end":452314,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ Useful because the borrow checker won't let you have more than one","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452319,"byte_end":452389,"line_start":582,"line_end":582,"column_start":5,"column_end":75}},{"value":"/ mutable reference into the same data structure at any given time.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452394,"byte_end":452463,"line_start":583,"line_end":583,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452468,"byte_end":452471,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Panics if any index is out of bounds, or if any indices are equal.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452476,"byte_end":452546,"line_start":585,"line_end":585,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452551,"byte_end":452554,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452559,"byte_end":452573,"line_start":587,"line_end":587,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452578,"byte_end":452581,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452586,"byte_end":452597,"line_start":589,"line_end":589,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452602,"byte_end":452637,"line_start":590,"line_end":590,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452642,"byte_end":452671,"line_start":591,"line_end":591,"column_start":5,"column_end":34}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452676,"byte_end":452710,"line_start":592,"line_end":592,"column_start":5,"column_end":39}},{"value":"/ let mut vec = vector![1, 2, 3, 4, 5];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452715,"byte_end":452756,"line_start":593,"line_end":593,"column_start":5,"column_end":46}},{"value":"/ vec.focus_mut().triplet(0, 2, 4, |a, b, c| *a += *b + *c);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452761,"byte_end":452823,"line_start":594,"line_end":594,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(vector![9, 2, 3, 4, 5], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452828,"byte_end":452872,"line_start":595,"line_end":595,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452877,"byte_end":452884,"line_start":596,"line_end":596,"column_start":5,"column_end":12}},{"value":"allow(unsafe_code)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":452889,"byte_end":452910,"line_start":597,"line_end":597,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2311},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":453555,"byte_end":453563,"line_start":615,"line_end":615,"column_start":12,"column_end":20},"name":"chunk_at","qualname":"<FocusMut>::chunk_at","value":"pub fn chunk_at(&mut Self, usize) -> (Range<usize>, &mut [A])","parent":null,"children":[],"decl_id":null,"docs":" Get the chunk for the given index.","sig":null,"attributes":[{"value":"/ Get the chunk for the given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":453374,"byte_end":453412,"line_start":611,"line_end":611,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":453417,"byte_end":453420,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ This gives you a reference to the leaf node that contains the index,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":453425,"byte_end":453497,"line_start":613,"line_end":613,"column_start":5,"column_end":77}},{"value":"/ along with its start and end indices.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":453502,"byte_end":453543,"line_start":614,"line_end":614,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2312},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454875,"byte_end":454881,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"narrow","qualname":"<FocusMut>::narrow","value":"pub fn narrow<R>(Self, R) -> Self where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Narrow the focus onto a subslice of the vector.","sig":null,"attributes":[{"value":"/ Narrow the focus onto a subslice of the vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454012,"byte_end":454063,"line_start":629,"line_end":629,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454068,"byte_end":454071,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ `FocusMut::narrow(range)` has the same effect as `&slice[range]`, without","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454076,"byte_end":454153,"line_start":631,"line_end":631,"column_start":5,"column_end":82}},{"value":"/ actually modifying the underlying vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454158,"byte_end":454203,"line_start":632,"line_end":632,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454208,"byte_end":454211,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ Panics if the range isn't fully inside the current focus.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454216,"byte_end":454277,"line_start":634,"line_end":634,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454282,"byte_end":454285,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454290,"byte_end":454305,"line_start":636,"line_end":636,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454310,"byte_end":454313,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454318,"byte_end":454329,"line_start":638,"line_end":638,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454334,"byte_end":454369,"line_start":639,"line_end":639,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454374,"byte_end":454403,"line_start":640,"line_end":640,"column_start":5,"column_end":34}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454408,"byte_end":454442,"line_start":641,"line_end":641,"column_start":5,"column_end":39}},{"value":"/ let mut vec = Vector::from_iter(0..1000);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454447,"byte_end":454492,"line_start":642,"line_end":642,"column_start":5,"column_end":50}},{"value":"/ let narrowed = vec.focus_mut().narrow(100..200);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454497,"byte_end":454549,"line_start":643,"line_end":643,"column_start":5,"column_end":57}},{"value":"/ let narrowed_vec = narrowed.unmut().into_iter().cloned().collect();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454554,"byte_end":454625,"line_start":644,"line_end":644,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(Vector::from_iter(100..200), narrowed_vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454630,"byte_end":454688,"line_start":645,"line_end":645,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454693,"byte_end":454700,"line_start":646,"line_end":646,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454705,"byte_end":454708,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ [slice::split_at]: https://doc.rust-lang.org/std/primitive.slice.html#method.split_at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454713,"byte_end":454802,"line_start":648,"line_end":648,"column_start":5,"column_end":94}},{"value":"/ [Vector::split_at]: enum.Vector.html#method.split_at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":454807,"byte_end":454863,"line_start":649,"line_end":649,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2314},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456657,"byte_end":456665,"line_start":700,"line_end":700,"column_start":12,"column_end":20},"name":"split_at","qualname":"<FocusMut>::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self)","parent":null,"children":[],"decl_id":null,"docs":" Split the focus into two.","sig":null,"attributes":[{"value":"/ Split the focus into two.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455340,"byte_end":455369,"line_start":664,"line_end":664,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455374,"byte_end":455377,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ Given an index `index`, consume the focus and produce two new foci, the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455382,"byte_end":455457,"line_start":666,"line_end":666,"column_start":5,"column_end":80}},{"value":"/ left onto indices `0..index`, and the right onto indices `index..N`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455462,"byte_end":455533,"line_start":667,"line_end":667,"column_start":5,"column_end":76}},{"value":"/ where `N` is the length of the current focus.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455538,"byte_end":455587,"line_start":668,"line_end":668,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455592,"byte_end":455595,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ Panics if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455600,"byte_end":455641,"line_start":670,"line_end":670,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455646,"byte_end":455649,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ This is the moral equivalent of [`slice::split_at`][slice::split_at], in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455654,"byte_end":455730,"line_start":672,"line_end":672,"column_start":5,"column_end":81}},{"value":"/ that it leaves the underlying data structure unchanged, unlike","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455735,"byte_end":455801,"line_start":673,"line_end":673,"column_start":5,"column_end":71}},{"value":"/ [`Vector::split_at`][Vector::split_at].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455806,"byte_end":455849,"line_start":674,"line_end":674,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455854,"byte_end":455857,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455862,"byte_end":455877,"line_start":676,"line_end":676,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455882,"byte_end":455885,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455890,"byte_end":455901,"line_start":678,"line_end":678,"column_start":5,"column_end":16}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455906,"byte_end":455941,"line_start":679,"line_end":679,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455946,"byte_end":455975,"line_start":680,"line_end":680,"column_start":5,"column_end":34}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":455980,"byte_end":456014,"line_start":681,"line_end":681,"column_start":5,"column_end":39}},{"value":"/ let mut vec = Vector::from_iter(0..1000);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456019,"byte_end":456064,"line_start":682,"line_end":682,"column_start":5,"column_end":50}},{"value":"/ {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456069,"byte_end":456074,"line_start":683,"line_end":683,"column_start":5,"column_end":10}},{"value":"/     let (left, right) = vec.focus_mut().split_at(500);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456079,"byte_end":456137,"line_start":684,"line_end":684,"column_start":5,"column_end":63}},{"value":"/     for ptr in left {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456142,"byte_end":456167,"line_start":685,"line_end":685,"column_start":5,"column_end":30}},{"value":"/         *ptr += 100;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456172,"byte_end":456196,"line_start":686,"line_end":686,"column_start":5,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456201,"byte_end":456210,"line_start":687,"line_end":687,"column_start":5,"column_end":14}},{"value":"/     for ptr in right {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456215,"byte_end":456241,"line_start":688,"line_end":688,"column_start":5,"column_end":31}},{"value":"/         *ptr -= 100;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456246,"byte_end":456270,"line_start":689,"line_end":689,"column_start":5,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456275,"byte_end":456284,"line_start":690,"line_end":690,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456289,"byte_end":456294,"line_start":691,"line_end":691,"column_start":5,"column_end":10}},{"value":"/ let expected = Vector::from_iter(100..600)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456299,"byte_end":456345,"line_start":692,"line_end":692,"column_start":5,"column_end":51}},{"value":"/              + Vector::from_iter(400..900);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456350,"byte_end":456397,"line_start":693,"line_end":693,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(expected, vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456402,"byte_end":456432,"line_start":694,"line_end":694,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456437,"byte_end":456444,"line_start":695,"line_end":695,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456449,"byte_end":456452,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ [slice::split_at]: https://doc.rust-lang.org/std/primitive.slice.html#method.split_at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456457,"byte_end":456546,"line_start":697,"line_end":697,"column_start":5,"column_end":94}},{"value":"/ [Vector::split_at]: enum.Vector.html#method.split_at","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456551,"byte_end":456607,"line_start":698,"line_end":698,"column_start":5,"column_end":61}},{"value":"allow(clippy :: redundant_clone)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":456612,"byte_end":456645,"line_start":699,"line_end":699,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2315},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":457437,"byte_end":457442,"line_start":723,"line_end":723,"column_start":12,"column_end":17},"name":"unmut","qualname":"<FocusMut>::unmut","value":"pub fn unmut(Self) -> Focus","parent":null,"children":[],"decl_id":null,"docs":" Convert a `FocusMut` into a `Focus`.\n","sig":null,"attributes":[{"value":"/ Convert a `FocusMut` into a `Focus`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":457385,"byte_end":457425,"line_start":722,"line_end":722,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":2326},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":458332,"byte_end":458344,"line_start":761,"line_end":761,"column_start":12,"column_end":24},"name":"TreeFocusMut","qualname":"::vector::focus::TreeFocusMut","value":"TreeFocusMut {  }","parent":null,"children":[{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":462580,"byte_end":462583,"line_start":882,"line_end":882,"column_start":12,"column_end":15},"name":"get","qualname":"<TreeFocusMut>::get","value":"pub fn get(&mut Self, &RRBPool<A>, usize) -> Option<&mut A>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":463024,"byte_end":463033,"line_start":894,"line_end":894,"column_start":12,"column_end":21},"name":"get_chunk","qualname":"<TreeFocusMut>::get_chunk","value":"pub fn get_chunk(&mut Self, &RRBPool<A>, usize) -> (Range<usize>, &mut [A])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2355},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":464254,"byte_end":464261,"line_start":11,"line_end":11,"column_start":12,"column_end":19},"name":"RRBPool","qualname":"::vector::pool::RRBPool","value":"RRBPool {  }","parent":null,"children":[{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359}],"decl_id":null,"docs":" A memory pool for `Vector`.\n","sig":null,"attributes":[{"value":"/ A memory pool for `Vector`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":464211,"byte_end":464242,"line_start":10,"line_end":10,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2362},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":464493,"byte_end":464496,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<RRBPool<A>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new memory pool with the given size.\n","sig":null,"attributes":[{"value":"/ Create a new memory pool with the given size.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":464432,"byte_end":464481,"line_start":18,"line_end":18,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2363},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":464653,"byte_end":464663,"line_start":24,"line_end":24,"column_start":12,"column_end":22},"name":"with_sizes","qualname":"<RRBPool<A>>::with_sizes","value":"pub fn with_sizes(usize, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new memory pool with the given sizes for each subpool.\n","sig":null,"attributes":[{"value":"/ Create a new memory pool with the given sizes for each subpool.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":464574,"byte_end":464641,"line_start":23,"line_end":23,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465035,"byte_end":465039,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"fill","qualname":"<RRBPool<A>>::fill","value":"pub fn fill(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Fill the memory pool with preallocated chunks.\n","sig":null,"attributes":[{"value":"/ Fill the memory pool with preallocated chunks.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":464973,"byte_end":465023,"line_start":36,"line_end":36,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2365},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465203,"byte_end":465217,"line_start":44,"line_end":44,"column_start":12,"column_end":26},"name":"node_pool_size","qualname":"<RRBPool<A>>::node_pool_size","value":"pub fn node_pool_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the size of the node subpool.\n","sig":null,"attributes":[{"value":"/ Get the size of the node subpool.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465154,"byte_end":465191,"line_start":43,"line_end":43,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465340,"byte_end":465354,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"leaf_pool_size","qualname":"<RRBPool<A>>::leaf_pool_size","value":"pub fn leaf_pool_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the size of the leaf node subpool.\n","sig":null,"attributes":[{"value":"/ Get the size of the leaf node subpool.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465286,"byte_end":465328,"line_start":48,"line_end":48,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2367},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465479,"byte_end":465499,"line_start":54,"line_end":54,"column_start":12,"column_end":32},"name":"size_table_pool_size","qualname":"<RRBPool<A>>::size_table_pool_size","value":"pub fn size_table_pool_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the size of the size table subpool.\n","sig":null,"attributes":[{"value":"/ Get the size of the size table subpool.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465424,"byte_end":465467,"line_start":53,"line_end":53,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":2376},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352704,"byte_end":352710,"line_start":145,"line_end":145,"column_start":12,"column_end":18},"name":"Vector","qualname":"::vector::Vector","value":"Vector {  }","parent":null,"children":[{"krate":0,"index":2378}],"decl_id":null,"docs":" A persistent vector.","sig":null,"attributes":[{"value":"/ A persistent vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":350640,"byte_end":350664,"line_start":109,"line_end":109,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":350665,"byte_end":350668,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ This is a sequence of elements in insertion order - if you need a list of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":350669,"byte_end":350746,"line_start":111,"line_end":111,"column_start":1,"column_end":78}},{"value":"/ things, any kind of list of things, this is what you're looking for.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":350747,"byte_end":350819,"line_start":112,"line_end":112,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":350820,"byte_end":350823,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ It's implemented as an [RRB vector][rrbpaper] with [smart head/tail","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":350824,"byte_end":350895,"line_start":114,"line_end":114,"column_start":1,"column_end":72}},{"value":"/ chunking][chunkedseq]. In performance terms, this means that practically","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":350896,"byte_end":350972,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/ every operation is O(log n), except push/pop on both sides, which will be","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":350973,"byte_end":351050,"line_start":116,"line_end":116,"column_start":1,"column_end":78}},{"value":"/ O(1) amortised, and O(log n) in the worst case. In practice, the push/pop","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351051,"byte_end":351128,"line_start":117,"line_end":117,"column_start":1,"column_end":78}},{"value":"/ operations will be blindingly fast, nearly on par with the native","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351129,"byte_end":351198,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/ [`VecDeque`][VecDeque], and other operations will have decent, if not high,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351199,"byte_end":351278,"line_start":119,"line_end":119,"column_start":1,"column_end":80}},{"value":"/ performance, but they all have more or less the same O(log n) complexity, so","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351279,"byte_end":351359,"line_start":120,"line_end":120,"column_start":1,"column_end":81}},{"value":"/ you don't need to keep their performance characteristics in mind -","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351360,"byte_end":351430,"line_start":121,"line_end":121,"column_start":1,"column_end":71}},{"value":"/ everything, even splitting and merging, is safe to use and never too slow.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351431,"byte_end":351509,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351510,"byte_end":351513,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ ## Performance Notes","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351514,"byte_end":351538,"line_start":124,"line_end":124,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351539,"byte_end":351542,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ Because of the head/tail chunking technique, until you push a number of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351543,"byte_end":351618,"line_start":126,"line_end":126,"column_start":1,"column_end":76}},{"value":"/ items above double the tree's branching factor (that's `self.len()` = 2 ×","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351619,"byte_end":351697,"line_start":127,"line_end":127,"column_start":1,"column_end":78}},{"value":"/ *k* (where *k* = 64) = 128) on either side, the data structure is still just","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351698,"byte_end":351778,"line_start":128,"line_end":128,"column_start":1,"column_end":81}},{"value":"/ a handful of arrays, not yet an RRB tree, so you'll see performance and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351779,"byte_end":351854,"line_start":129,"line_end":129,"column_start":1,"column_end":76}},{"value":"/ memory characteristics similar to [`Vec`][Vec] or [`VecDeque`][VecDeque].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351855,"byte_end":351932,"line_start":130,"line_end":130,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351933,"byte_end":351936,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ This means that the structure always preallocates four chunks of size *k*","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":351937,"byte_end":352014,"line_start":132,"line_end":132,"column_start":1,"column_end":78}},{"value":"/ (*k* being the tree's branching factor), equivalent to a [`Vec`][Vec] with","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352015,"byte_end":352093,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ an initial capacity of 256. Beyond that, it will allocate tree nodes of","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352094,"byte_end":352169,"line_start":134,"line_end":134,"column_start":1,"column_end":76}},{"value":"/ capacity *k* as needed.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352170,"byte_end":352197,"line_start":135,"line_end":135,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352198,"byte_end":352201,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ In addition, vectors start out as single chunks, and only expand into the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352202,"byte_end":352279,"line_start":137,"line_end":137,"column_start":1,"column_end":78}},{"value":"/ full data structure once you go past the chunk size. This makes them","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352280,"byte_end":352352,"line_start":138,"line_end":138,"column_start":1,"column_end":73}},{"value":"/ perform identically to [`Vec`][Vec] at small sizes.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352353,"byte_end":352408,"line_start":139,"line_end":139,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352409,"byte_end":352412,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ [rrbpaper]: https://infoscience.epfl.ch/record/213452/files/rrbvector.pdf","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352413,"byte_end":352490,"line_start":141,"line_end":141,"column_start":1,"column_end":78}},{"value":"/ [chunkedseq]: http://deepsea.inria.fr/pasl/chunkedseq.pdf","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352491,"byte_end":352552,"line_start":142,"line_end":142,"column_start":1,"column_end":62}},{"value":"/ [Vec]: https://doc.rust-lang.org/std/vec/struct.Vec.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352553,"byte_end":352613,"line_start":143,"line_end":143,"column_start":1,"column_end":61}},{"value":"/ [VecDeque]: https://doc.rust-lang.org/std/collections/struct.VecDeque.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352614,"byte_end":352692,"line_start":144,"line_end":144,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2393},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":352919,"byte_end":352922,"line_start":156,"line_end":156,"column_start":12,"column_end":15},"name":"RRB","qualname":"::vector::RRB","value":"RRB {  }","parent":null,"children":[{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2407},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":353806,"byte_end":353810,"line_start":186,"line_end":186,"column_start":12,"column_end":16},"name":"pool","qualname":"<Vector<A>>::pool","value":"pub fn pool(&Self) -> &RRBPool<A>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the memory pool this `Vector` is using.","sig":null,"attributes":[{"value":"/ Get a reference to the memory pool this `Vector` is using.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":353541,"byte_end":353603,"line_start":181,"line_end":181,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":353608,"byte_end":353611,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Note that if you didn't specifically construct it with a pool, you'll","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":353616,"byte_end":353689,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ get back a reference to a pool of size 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":353694,"byte_end":353739,"line_start":184,"line_end":184,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2412},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":356610,"byte_end":356613,"line_start":265,"line_end":265,"column_start":12,"column_end":15},"name":"new","qualname":"<Vector<A>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty vector.\n","sig":null,"attributes":[{"value":"/ Construct an empty vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":356552,"byte_end":356582,"line_start":263,"line_end":263,"column_start":5,"column_end":35}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":356587,"byte_end":356598,"line_start":264,"line_end":264,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2413},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357235,"byte_end":357238,"line_start":292,"line_end":292,"column_start":12,"column_end":15},"name":"len","qualname":"<Vector<A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of a vector.","sig":null,"attributes":[{"value":"/ Get the length of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":356983,"byte_end":357014,"line_start":280,"line_end":280,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357019,"byte_end":357022,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357027,"byte_end":357041,"line_start":282,"line_end":282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357046,"byte_end":357049,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357054,"byte_end":357068,"line_start":284,"line_end":284,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357073,"byte_end":357076,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357081,"byte_end":357088,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357093,"byte_end":357128,"line_start":287,"line_end":287,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(5, vector![1, 2, 3, 4, 5].len());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357133,"byte_end":357181,"line_start":288,"line_end":288,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357186,"byte_end":357193,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357198,"byte_end":357207,"line_start":290,"line_end":290,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357212,"byte_end":357223,"line_start":291,"line_end":291,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2414},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357822,"byte_end":357830,"line_start":315,"line_end":315,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Vector<A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether a vector is empty.","sig":null,"attributes":[{"value":"/ Test whether a vector is empty.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357439,"byte_end":357474,"line_start":300,"line_end":300,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357479,"byte_end":357482,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357487,"byte_end":357501,"line_start":302,"line_end":302,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357506,"byte_end":357509,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357514,"byte_end":357528,"line_start":304,"line_end":304,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357533,"byte_end":357536,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357541,"byte_end":357548,"line_start":306,"line_end":306,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357553,"byte_end":357588,"line_start":307,"line_end":307,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357593,"byte_end":357614,"line_start":308,"line_end":308,"column_start":5,"column_end":26}},{"value":"/ let vec = vector![\"Joe\", \"Mike\", \"Robert\"];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357619,"byte_end":357666,"line_start":309,"line_end":309,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(false, vec.is_empty());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357671,"byte_end":357709,"line_start":310,"line_end":310,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(true, Vector::<i32>::new().is_empty());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357714,"byte_end":357768,"line_start":311,"line_end":311,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357773,"byte_end":357780,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357785,"byte_end":357794,"line_start":313,"line_end":313,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357799,"byte_end":357810,"line_start":314,"line_end":314,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2415},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358731,"byte_end":358737,"line_start":334,"line_end":334,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Vector<A>>::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether two vectors refer to the same content in memory.","sig":null,"attributes":[{"value":"/ Test whether two vectors refer to the same content in memory.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357883,"byte_end":357948,"line_start":319,"line_end":319,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357953,"byte_end":357956,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ This uses the following rules to determine equality:","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":357961,"byte_end":358017,"line_start":321,"line_end":321,"column_start":5,"column_end":61}},{"value":"/ * If the two sides are references to the same vector, return true.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358022,"byte_end":358092,"line_start":322,"line_end":322,"column_start":5,"column_end":75}},{"value":"/ * If the two sides are single chunk vectors pointing to the same chunk, return true.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358097,"byte_end":358185,"line_start":323,"line_end":323,"column_start":5,"column_end":93}},{"value":"/ * If the two sides are full trees pointing to the same chunks, return true.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358190,"byte_end":358269,"line_start":324,"line_end":324,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358274,"byte_end":358277,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ This would return true if you're comparing a vector to itself, or","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358282,"byte_end":358351,"line_start":326,"line_end":326,"column_start":5,"column_end":74}},{"value":"/ if you're comparing a vector to a fresh clone of itself. The exception to this is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358356,"byte_end":358441,"line_start":327,"line_end":327,"column_start":5,"column_end":90}},{"value":"/ if you've cloned an inline array (ie. an array with so few elements they can fit","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358446,"byte_end":358530,"line_start":328,"line_end":328,"column_start":5,"column_end":89}},{"value":"/ inside the space a `Vector` allocates for its pointers, so there are no heap allocations","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358535,"byte_end":358627,"line_start":329,"line_end":329,"column_start":5,"column_end":97}},{"value":"/ to compare).","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358632,"byte_end":358648,"line_start":330,"line_end":330,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358653,"byte_end":358656,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Time: O(1), or O(n) for inline vectors","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358661,"byte_end":358703,"line_start":332,"line_end":332,"column_start":5,"column_end":47}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":358708,"byte_end":358719,"line_start":333,"line_end":333,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2418},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359744,"byte_end":359748,"line_start":362,"line_end":362,"column_start":12,"column_end":16},"name":"iter","qualname":"<Vector<A>>::iter","value":"pub fn iter(&Self) -> Iter<, A>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over a vector.","sig":null,"attributes":[{"value":"/ Get an iterator over a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359641,"byte_end":359675,"line_start":357,"line_end":357,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359680,"byte_end":359683,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359688,"byte_end":359702,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359707,"byte_end":359716,"line_start":360,"line_end":360,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359721,"byte_end":359732,"line_start":361,"line_end":361,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2419},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359918,"byte_end":359926,"line_start":371,"line_end":371,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Vector<A>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, A>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable iterator over a vector.","sig":null,"attributes":[{"value":"/ Get a mutable iterator over a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359808,"byte_end":359849,"line_start":366,"line_end":366,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359854,"byte_end":359857,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359862,"byte_end":359876,"line_start":368,"line_end":368,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359881,"byte_end":359890,"line_start":369,"line_end":369,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359895,"byte_end":359906,"line_start":370,"line_end":370,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2420},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360398,"byte_end":360404,"line_start":386,"line_end":386,"column_start":12,"column_end":18},"name":"leaves","qualname":"<Vector<A>>::leaves","value":"pub fn leaves(&Self) -> Chunks<, A>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the leaf nodes of a vector.","sig":null,"attributes":[{"value":"/ Get an iterator over the leaf nodes of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":359996,"byte_end":360048,"line_start":375,"line_end":375,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360053,"byte_end":360056,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ This returns an iterator over the [`Chunk`s][Chunk] at the leaves of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360061,"byte_end":360137,"line_start":377,"line_end":377,"column_start":5,"column_end":81}},{"value":"/ RRB tree. These are useful for efficient parallelisation of work on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360142,"byte_end":360213,"line_start":378,"line_end":378,"column_start":5,"column_end":76}},{"value":"/ the vector, but should not be used for basic iteration.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360218,"byte_end":360277,"line_start":379,"line_end":379,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360282,"byte_end":360285,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360290,"byte_end":360304,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360309,"byte_end":360312,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ [Chunk]: ../chunk/struct.Chunk.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360317,"byte_end":360356,"line_start":383,"line_end":383,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360361,"byte_end":360370,"line_start":384,"line_end":384,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360375,"byte_end":360386,"line_start":385,"line_end":385,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2421},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360876,"byte_end":360886,"line_start":401,"line_end":401,"column_start":12,"column_end":22},"name":"leaves_mut","qualname":"<Vector<A>>::leaves_mut","value":"pub fn leaves_mut(&mut Self) -> ChunksMut<, A>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable iterator over the leaf nodes of a vector.\n This returns an iterator over the [`Chunk`s][Chunk] at the leaves of the\n RRB tree. These are useful for efficient parallelisation of work on\n the vector, but should not be used for basic iteration.","sig":null,"attributes":[{"value":"/ Get a mutable iterator over the leaf nodes of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360468,"byte_end":360527,"line_start":390,"line_end":390,"column_start":5,"column_end":64}},{"value":"/ This returns an iterator over the [`Chunk`s][Chunk] at the leaves of the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360539,"byte_end":360615,"line_start":392,"line_end":392,"column_start":5,"column_end":81}},{"value":"/ RRB tree. These are useful for efficient parallelisation of work on","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360620,"byte_end":360691,"line_start":393,"line_end":393,"column_start":5,"column_end":76}},{"value":"/ the vector, but should not be used for basic iteration.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360696,"byte_end":360755,"line_start":394,"line_end":394,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360760,"byte_end":360763,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360768,"byte_end":360782,"line_start":396,"line_end":396,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360787,"byte_end":360790,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ [Chunk]: ../chunk/struct.Chunk.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360795,"byte_end":360834,"line_start":398,"line_end":398,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360839,"byte_end":360848,"line_start":399,"line_end":399,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360853,"byte_end":360864,"line_start":400,"line_end":400,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2422},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361116,"byte_end":361121,"line_start":412,"line_end":412,"column_start":12,"column_end":17},"name":"focus","qualname":"<Vector<A>>::focus","value":"pub fn focus(&Self) -> Focus<, A>","parent":null,"children":[],"decl_id":null,"docs":" Construct a [`Focus`][Focus] for a vector.","sig":null,"attributes":[{"value":"/ Construct a [`Focus`][Focus] for a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":360960,"byte_end":361006,"line_start":405,"line_end":405,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361011,"byte_end":361014,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361019,"byte_end":361033,"line_start":407,"line_end":407,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361038,"byte_end":361041,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ [Focus]: enum.Focus.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361046,"byte_end":361074,"line_start":409,"line_end":409,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361079,"byte_end":361088,"line_start":410,"line_end":410,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361093,"byte_end":361104,"line_start":411,"line_end":411,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2423},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361351,"byte_end":361360,"line_start":423,"line_end":423,"column_start":12,"column_end":21},"name":"focus_mut","qualname":"<Vector<A>>::focus_mut","value":"pub fn focus_mut(&mut Self) -> FocusMut<, A>","parent":null,"children":[],"decl_id":null,"docs":" Construct a [`FocusMut`][FocusMut] for a vector.","sig":null,"attributes":[{"value":"/ Construct a [`FocusMut`][FocusMut] for a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361183,"byte_end":361235,"line_start":416,"line_end":416,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361240,"byte_end":361243,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361248,"byte_end":361262,"line_start":418,"line_end":418,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361267,"byte_end":361270,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ [FocusMut]: enum.FocusMut.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361275,"byte_end":361309,"line_start":420,"line_end":420,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361314,"byte_end":361323,"line_start":421,"line_end":421,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361328,"byte_end":361339,"line_start":422,"line_end":422,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361879,"byte_end":361882,"line_start":443,"line_end":443,"column_start":12,"column_end":15},"name":"get","qualname":"<Vector<A>>::get","value":"pub fn get(&Self, usize) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the value at index `index` in a vector.","sig":null,"attributes":[{"value":"/ Get a reference to the value at index `index` in a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361432,"byte_end":361494,"line_start":427,"line_end":427,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361499,"byte_end":361502,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361507,"byte_end":361556,"line_start":429,"line_end":429,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361561,"byte_end":361564,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361569,"byte_end":361587,"line_start":431,"line_end":431,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361592,"byte_end":361595,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361600,"byte_end":361614,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361619,"byte_end":361622,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361627,"byte_end":361634,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361639,"byte_end":361674,"line_start":436,"line_end":436,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361679,"byte_end":361700,"line_start":437,"line_end":437,"column_start":5,"column_end":26}},{"value":"/ let vec = vector![\"Joe\", \"Mike\", \"Robert\"];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361705,"byte_end":361752,"line_start":438,"line_end":438,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(Some(&\"Robert\"), vec.get(2));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361757,"byte_end":361801,"line_start":439,"line_end":439,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(None, vec.get(5));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361806,"byte_end":361839,"line_start":440,"line_end":440,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361844,"byte_end":361851,"line_start":441,"line_end":441,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":361856,"byte_end":361867,"line_start":442,"line_end":442,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2425},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363628,"byte_end":363635,"line_start":500,"line_end":500,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Vector<A>>::get_mut","value":"pub fn get_mut(&mut Self, usize) -> Option<&mut A>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the value at index `index` in a\n vector.","sig":null,"attributes":[{"value":"/ Get a mutable reference to the value at index `index` in a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363040,"byte_end":363102,"line_start":479,"line_end":479,"column_start":5,"column_end":67}},{"value":"/ vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363107,"byte_end":363118,"line_start":480,"line_end":480,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363123,"byte_end":363126,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363131,"byte_end":363180,"line_start":482,"line_end":482,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363185,"byte_end":363188,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363193,"byte_end":363211,"line_start":484,"line_end":484,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363216,"byte_end":363219,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363224,"byte_end":363238,"line_start":486,"line_end":486,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363243,"byte_end":363246,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363251,"byte_end":363258,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363263,"byte_end":363298,"line_start":489,"line_end":489,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363303,"byte_end":363324,"line_start":490,"line_end":490,"column_start":5,"column_end":26}},{"value":"/ let mut vec = vector![\"Joe\", \"Mike\", \"Robert\"];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363329,"byte_end":363380,"line_start":491,"line_end":491,"column_start":5,"column_end":56}},{"value":"/ {","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363385,"byte_end":363390,"line_start":492,"line_end":492,"column_start":5,"column_end":10}},{"value":"/     let robert = vec.get_mut(2).unwrap();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363395,"byte_end":363440,"line_start":493,"line_end":493,"column_start":5,"column_end":50}},{"value":"/     assert_eq!(&mut \"Robert\", robert);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363445,"byte_end":363487,"line_start":494,"line_end":494,"column_start":5,"column_end":47}},{"value":"/     *robert = \"Bjarne\";","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363492,"byte_end":363519,"line_start":495,"line_end":495,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363524,"byte_end":363529,"line_start":496,"line_end":496,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(vector![\"Joe\", \"Mike\", \"Bjarne\"], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363534,"byte_end":363588,"line_start":497,"line_end":497,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363593,"byte_end":363600,"line_start":498,"line_end":498,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":363605,"byte_end":363616,"line_start":499,"line_end":499,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2426},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365450,"byte_end":365455,"line_start":548,"line_end":548,"column_start":12,"column_end":17},"name":"front","qualname":"<Vector<A>>::front","value":"pub fn front(&Self) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get the first element of a vector.","sig":null,"attributes":[{"value":"/ Get the first element of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365279,"byte_end":365317,"line_start":541,"line_end":541,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365322,"byte_end":365325,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ If the vector is empty, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365330,"byte_end":365377,"line_start":543,"line_end":543,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365382,"byte_end":365385,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365390,"byte_end":365408,"line_start":545,"line_end":545,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365413,"byte_end":365422,"line_start":546,"line_end":546,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365427,"byte_end":365438,"line_start":547,"line_end":547,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365704,"byte_end":365713,"line_start":559,"line_end":559,"column_start":12,"column_end":21},"name":"front_mut","qualname":"<Vector<A>>::front_mut","value":"pub fn front_mut(&mut Self) -> Option<&mut A>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the first element of a vector.","sig":null,"attributes":[{"value":"/ Get a mutable reference to the first element of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365510,"byte_end":365571,"line_start":552,"line_end":552,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365576,"byte_end":365579,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ If the vector is empty, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365584,"byte_end":365631,"line_start":554,"line_end":554,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365636,"byte_end":365639,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365644,"byte_end":365662,"line_start":556,"line_end":556,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365667,"byte_end":365676,"line_start":557,"line_end":557,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365681,"byte_end":365692,"line_start":558,"line_end":558,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2428},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366056,"byte_end":366060,"line_start":574,"line_end":574,"column_start":12,"column_end":16},"name":"head","qualname":"<Vector<A>>::head","value":"pub fn head(&Self) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get the first element of a vector.","sig":null,"attributes":[{"value":"/ Get the first element of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365780,"byte_end":365818,"line_start":563,"line_end":563,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365823,"byte_end":365826,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ If the vector is empty, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365831,"byte_end":365878,"line_start":565,"line_end":565,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365883,"byte_end":365886,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the [`front`][front] method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365891,"byte_end":365944,"line_start":567,"line_end":567,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365949,"byte_end":365952,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365957,"byte_end":365975,"line_start":569,"line_end":569,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365980,"byte_end":365983,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ [front]: #method.front","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":365988,"byte_end":366014,"line_start":571,"line_end":571,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366019,"byte_end":366028,"line_start":572,"line_end":572,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366033,"byte_end":366044,"line_start":573,"line_end":573,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2429},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366271,"byte_end":366275,"line_start":584,"line_end":584,"column_start":12,"column_end":16},"name":"back","qualname":"<Vector<A>>::back","value":"pub fn back(&Self) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get the last element of a vector.","sig":null,"attributes":[{"value":"/ Get the last element of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366115,"byte_end":366152,"line_start":578,"line_end":578,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366157,"byte_end":366160,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ If the vector is empty, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366165,"byte_end":366212,"line_start":580,"line_end":580,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366217,"byte_end":366220,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366225,"byte_end":366243,"line_start":582,"line_end":582,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366248,"byte_end":366259,"line_start":583,"line_end":583,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2430},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366599,"byte_end":366607,"line_start":598,"line_end":598,"column_start":12,"column_end":20},"name":"back_mut","qualname":"<Vector<A>>::back_mut","value":"pub fn back_mut(&mut Self) -> Option<&mut A>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the last element of a vector.","sig":null,"attributes":[{"value":"/ Get a mutable reference to the last element of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366420,"byte_end":366480,"line_start":592,"line_end":592,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366485,"byte_end":366488,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ If the vector is empty, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366493,"byte_end":366540,"line_start":594,"line_end":594,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366545,"byte_end":366548,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366553,"byte_end":366571,"line_start":596,"line_end":596,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366576,"byte_end":366587,"line_start":597,"line_end":597,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2431},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367062,"byte_end":367066,"line_start":618,"line_end":618,"column_start":12,"column_end":16},"name":"last","qualname":"<Vector<A>>::last","value":"pub fn last(&Self) -> Option<&A>","parent":null,"children":[],"decl_id":null,"docs":" Get the last element of a vector.","sig":null,"attributes":[{"value":"/ Get the last element of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366791,"byte_end":366828,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366833,"byte_end":366836,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ If the vector is empty, `None` is returned.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366841,"byte_end":366888,"line_start":609,"line_end":609,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366893,"byte_end":366896,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ This is an alias for the [`back`][back] method.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366901,"byte_end":366952,"line_start":611,"line_end":611,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366957,"byte_end":366960,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366965,"byte_end":366983,"line_start":613,"line_end":613,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366988,"byte_end":366991,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ [back]: #method.back","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":366996,"byte_end":367020,"line_start":615,"line_end":615,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367025,"byte_end":367034,"line_start":616,"line_end":616,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367039,"byte_end":367050,"line_start":617,"line_end":617,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367668,"byte_end":367676,"line_start":640,"line_end":640,"column_start":12,"column_end":20},"name":"index_of","qualname":"<Vector<A>>::index_of","value":"pub fn index_of(&Self, &A) -> Option<usize> where A: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Get the index of a given element in the vector.","sig":null,"attributes":[{"value":"/ Get the index of a given element in the vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367121,"byte_end":367172,"line_start":622,"line_end":622,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367177,"byte_end":367180,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ Searches the vector for the first occurrence of a given value,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367185,"byte_end":367251,"line_start":624,"line_end":624,"column_start":5,"column_end":71}},{"value":"/ and returns the index of the value if it's there. Otherwise,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367256,"byte_end":367320,"line_start":625,"line_end":625,"column_start":5,"column_end":69}},{"value":"/ it returns `None`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367325,"byte_end":367347,"line_start":626,"line_end":626,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367352,"byte_end":367355,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367360,"byte_end":367374,"line_start":628,"line_end":628,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367379,"byte_end":367382,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367387,"byte_end":367401,"line_start":630,"line_end":630,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367406,"byte_end":367409,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367414,"byte_end":367421,"line_start":632,"line_end":632,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367426,"byte_end":367461,"line_start":633,"line_end":633,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367466,"byte_end":367487,"line_start":634,"line_end":634,"column_start":5,"column_end":26}},{"value":"/ let mut vec = vector![1, 2, 3, 4, 5];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367492,"byte_end":367533,"line_start":635,"line_end":635,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(Some(2), vec.index_of(&3));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367538,"byte_end":367580,"line_start":636,"line_end":636,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(None, vec.index_of(&31337));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367585,"byte_end":367628,"line_start":637,"line_end":637,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367633,"byte_end":367640,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367645,"byte_end":367656,"line_start":639,"line_end":639,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2433},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368489,"byte_end":368497,"line_start":671,"line_end":671,"column_start":12,"column_end":20},"name":"contains","qualname":"<Vector<A>>::contains","value":"pub fn contains(&Self, &A) -> bool where A: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Test if a given element is in the vector.","sig":null,"attributes":[{"value":"/ Test if a given element is in the vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367920,"byte_end":367965,"line_start":652,"line_end":652,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367970,"byte_end":367973,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ Searches the vector for the first occurrence of a given value,","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":367978,"byte_end":368044,"line_start":654,"line_end":654,"column_start":5,"column_end":71}},{"value":"/ and returns `true if it's there. If it's nowhere to be found","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368049,"byte_end":368113,"line_start":655,"line_end":655,"column_start":5,"column_end":69}},{"value":"/ in the vector, it returns `false`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368118,"byte_end":368156,"line_start":656,"line_end":656,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368161,"byte_end":368164,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368169,"byte_end":368183,"line_start":658,"line_end":658,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368188,"byte_end":368191,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368196,"byte_end":368210,"line_start":660,"line_end":660,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368215,"byte_end":368218,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368223,"byte_end":368230,"line_start":662,"line_end":662,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368235,"byte_end":368270,"line_start":663,"line_end":663,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368275,"byte_end":368296,"line_start":664,"line_end":664,"column_start":5,"column_end":26}},{"value":"/ let mut vec = vector![1, 2, 3, 4, 5];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368301,"byte_end":368342,"line_start":665,"line_end":665,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(true, vec.contains(&3));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368347,"byte_end":368386,"line_start":666,"line_end":666,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(false, vec.contains(&31337));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368391,"byte_end":368435,"line_start":667,"line_end":667,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368440,"byte_end":368447,"line_start":668,"line_end":668,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368452,"byte_end":368461,"line_start":669,"line_end":669,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368466,"byte_end":368477,"line_start":670,"line_end":670,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368815,"byte_end":368820,"line_start":684,"line_end":684,"column_start":12,"column_end":17},"name":"clear","qualname":"<Vector<A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Discard all elements from the vector.","sig":null,"attributes":[{"value":"/ Discard all elements from the vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368612,"byte_end":368653,"line_start":678,"line_end":678,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368658,"byte_end":368661,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ This leaves you with an empty vector, and all elements that","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368666,"byte_end":368729,"line_start":680,"line_end":680,"column_start":5,"column_end":68}},{"value":"/ were previously inside it are dropped.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368734,"byte_end":368776,"line_start":681,"line_end":681,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368781,"byte_end":368784,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368789,"byte_end":368803,"line_start":683,"line_end":683,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2435},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369553,"byte_end":369569,"line_start":704,"line_end":704,"column_start":12,"column_end":28},"name":"binary_search_by","qualname":"<Vector<A>>::binary_search_by","value":"pub fn binary_search_by<F>(&Self, F) -> Result<usize, usize> where\nF: FnMut(&A) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Binary search a sorted vector for a given element using a comparator\n function.","sig":null,"attributes":[{"value":"/ Binary search a sorted vector for a given element using a comparator","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":368960,"byte_end":369032,"line_start":690,"line_end":690,"column_start":5,"column_end":77}},{"value":"/ function.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369037,"byte_end":369050,"line_start":691,"line_end":691,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369055,"byte_end":369058,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ Assumes the vector has already been sorted using the same comparator","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369063,"byte_end":369135,"line_start":693,"line_end":693,"column_start":5,"column_end":77}},{"value":"/ function, eg. by using [`sort_by`][sort_by].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369140,"byte_end":369188,"line_start":694,"line_end":694,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369193,"byte_end":369196,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ If the value is found, it returns `Ok(index)` where `index` is the index","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369201,"byte_end":369277,"line_start":696,"line_end":696,"column_start":5,"column_end":81}},{"value":"/ of the element. If the value isn't found, it returns `Err(index)` where","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369282,"byte_end":369357,"line_start":697,"line_end":697,"column_start":5,"column_end":80}},{"value":"/ `index` is the index at which the element would need to be inserted to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369362,"byte_end":369436,"line_start":698,"line_end":698,"column_start":5,"column_end":79}},{"value":"/ maintain sorted order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369441,"byte_end":369467,"line_start":699,"line_end":699,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369472,"byte_end":369475,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369480,"byte_end":369498,"line_start":701,"line_end":701,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369503,"byte_end":369506,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ [sort_by]: #method.sort_by","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":369511,"byte_end":369541,"line_start":703,"line_end":703,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2437},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370597,"byte_end":370610,"line_start":737,"line_end":737,"column_start":12,"column_end":25},"name":"binary_search","qualname":"<Vector<A>>::binary_search","value":"pub fn binary_search(&Self, &A) -> Result<usize, usize> where A: Ord","parent":null,"children":[],"decl_id":null,"docs":" Binary search a sorted vector for a given element.","sig":null,"attributes":[{"value":"/ Binary search a sorted vector for a given element.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370221,"byte_end":370275,"line_start":729,"line_end":729,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370280,"byte_end":370283,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ If the value is found, it returns `Ok(index)` where `index` is the index","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370288,"byte_end":370364,"line_start":731,"line_end":731,"column_start":5,"column_end":81}},{"value":"/ of the element. If the value isn't found, it returns `Err(index)` where","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370369,"byte_end":370444,"line_start":732,"line_end":732,"column_start":5,"column_end":80}},{"value":"/ `index` is the index at which the element would need to be inserted to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370449,"byte_end":370523,"line_start":733,"line_end":733,"column_start":5,"column_end":79}},{"value":"/ maintain sorted order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370528,"byte_end":370554,"line_start":734,"line_end":734,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370559,"byte_end":370562,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370567,"byte_end":370585,"line_start":736,"line_end":736,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2439},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371354,"byte_end":371374,"line_start":758,"line_end":758,"column_start":12,"column_end":32},"name":"binary_search_by_key","qualname":"<Vector<A>>::binary_search_by_key","value":"pub fn binary_search_by_key<B, F>(&Self, &B, F) -> Result<usize, usize> where\nF: FnMut(&A) -> B, B: Ord","parent":null,"children":[],"decl_id":null,"docs":" Binary search a sorted vector for a given element with a key extract\n function.","sig":null,"attributes":[{"value":"/ Binary search a sorted vector for a given element with a key extract","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370744,"byte_end":370816,"line_start":744,"line_end":744,"column_start":5,"column_end":77}},{"value":"/ function.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370821,"byte_end":370834,"line_start":745,"line_end":745,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370839,"byte_end":370842,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ Assumes the vector has already been sorted using the same key extract","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370847,"byte_end":370920,"line_start":747,"line_end":747,"column_start":5,"column_end":78}},{"value":"/ function, eg. by using [`sort_by_key`][sort_by_key].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370925,"byte_end":370981,"line_start":748,"line_end":748,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370986,"byte_end":370989,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ If the value is found, it returns `Ok(index)` where `index` is the index","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":370994,"byte_end":371070,"line_start":750,"line_end":750,"column_start":5,"column_end":81}},{"value":"/ of the element. If the value isn't found, it returns `Err(index)` where","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371075,"byte_end":371150,"line_start":751,"line_end":751,"column_start":5,"column_end":80}},{"value":"/ `index` is the index at which the element would need to be inserted to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371155,"byte_end":371229,"line_start":752,"line_end":752,"column_start":5,"column_end":79}},{"value":"/ maintain sorted order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371234,"byte_end":371260,"line_start":753,"line_end":753,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371265,"byte_end":371268,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371273,"byte_end":371291,"line_start":755,"line_end":755,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371296,"byte_end":371299,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ [sort_by_key]: #method.sort_by_key","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371304,"byte_end":371342,"line_start":757,"line_end":757,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2445},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371940,"byte_end":371944,"line_start":784,"line_end":784,"column_start":12,"column_end":16},"name":"unit","qualname":"<Vector<A>>::unit","value":"pub fn unit(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a vector with a single value.","sig":null,"attributes":[{"value":"/ Construct a vector with a single value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371575,"byte_end":371618,"line_start":768,"line_end":768,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371623,"byte_end":371626,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371631,"byte_end":371645,"line_start":770,"line_end":770,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371650,"byte_end":371653,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371658,"byte_end":371665,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371670,"byte_end":371705,"line_start":773,"line_end":773,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371710,"byte_end":371739,"line_start":774,"line_end":774,"column_start":5,"column_end":34}},{"value":"/ let vec = Vector::unit(1337);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371744,"byte_end":371777,"line_start":775,"line_end":775,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(1, vec.len());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371782,"byte_end":371811,"line_start":776,"line_end":776,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371816,"byte_end":371831,"line_start":777,"line_end":777,"column_start":5,"column_end":20}},{"value":"/   vec.get(0),","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371836,"byte_end":371853,"line_start":778,"line_end":778,"column_start":5,"column_end":22}},{"value":"/   Some(&1337)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371858,"byte_end":371875,"line_start":779,"line_end":779,"column_start":5,"column_end":22}},{"value":"/ );","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371880,"byte_end":371886,"line_start":780,"line_end":780,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371891,"byte_end":371898,"line_start":781,"line_end":781,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371903,"byte_end":371912,"line_start":782,"line_end":782,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371917,"byte_end":371928,"line_start":783,"line_end":783,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2446},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372791,"byte_end":372797,"line_start":815,"line_end":815,"column_start":12,"column_end":18},"name":"update","qualname":"<Vector<A>>::update","value":"pub fn update(&Self, usize, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new vector with the value at index `index` updated.","sig":null,"attributes":[{"value":"/ Create a new vector with the value at index `index` updated.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372393,"byte_end":372457,"line_start":800,"line_end":800,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372462,"byte_end":372465,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ Panics if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372470,"byte_end":372511,"line_start":802,"line_end":802,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372516,"byte_end":372519,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372524,"byte_end":372542,"line_start":804,"line_end":804,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372547,"byte_end":372550,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372555,"byte_end":372569,"line_start":806,"line_end":806,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372574,"byte_end":372577,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372582,"byte_end":372589,"line_start":808,"line_end":808,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372594,"byte_end":372629,"line_start":809,"line_end":809,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372634,"byte_end":372655,"line_start":810,"line_end":810,"column_start":5,"column_end":26}},{"value":"/ let mut vec = vector![1, 2, 3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372660,"byte_end":372695,"line_start":811,"line_end":811,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(vector![1, 5, 3], vec.update(1, 5));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372700,"byte_end":372751,"line_start":812,"line_end":812,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372756,"byte_end":372763,"line_start":813,"line_end":813,"column_start":5,"column_end":12}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372768,"byte_end":372779,"line_start":814,"line_end":814,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2447},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373144,"byte_end":373147,"line_start":829,"line_end":829,"column_start":12,"column_end":15},"name":"set","qualname":"<Vector<A>>::set","value":"pub fn set(&mut Self, usize, A) -> A","parent":null,"children":[],"decl_id":null,"docs":" Update the value at index `index` in a vector.","sig":null,"attributes":[{"value":"/ Update the value at index `index` in a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372926,"byte_end":372976,"line_start":821,"line_end":821,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372981,"byte_end":372984,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ Returns the previous value at the index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":372989,"byte_end":373033,"line_start":823,"line_end":823,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373038,"byte_end":373041,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ Panics if the index is out of bounds.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373046,"byte_end":373087,"line_start":825,"line_end":825,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373092,"byte_end":373095,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373100,"byte_end":373118,"line_start":827,"line_end":827,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373123,"byte_end":373132,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2448},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373330,"byte_end":373334,"line_start":836,"line_end":836,"column_start":12,"column_end":16},"name":"swap","qualname":"<Vector<A>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swap the elements at indices `i` and `j`.","sig":null,"attributes":[{"value":"/ Swap the elements at indices `i` and `j`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373242,"byte_end":373287,"line_start":833,"line_end":833,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373292,"byte_end":373295,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373300,"byte_end":373318,"line_start":835,"line_end":835,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2449},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373732,"byte_end":373742,"line_start":853,"line_end":853,"column_start":12,"column_end":22},"name":"push_front","qualname":"<Vector<A>>::push_front","value":"pub fn push_front(&mut Self, A)","parent":null,"children":[],"decl_id":null,"docs":" Push a value to the front of a vector.","sig":null,"attributes":[{"value":"/ Push a value to the front of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373412,"byte_end":373454,"line_start":840,"line_end":840,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373459,"byte_end":373462,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)*","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373467,"byte_end":373482,"line_start":842,"line_end":842,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373487,"byte_end":373490,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373495,"byte_end":373509,"line_start":844,"line_end":844,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373514,"byte_end":373517,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373522,"byte_end":373529,"line_start":846,"line_end":846,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373534,"byte_end":373569,"line_start":847,"line_end":847,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373574,"byte_end":373595,"line_start":848,"line_end":848,"column_start":5,"column_end":26}},{"value":"/ let mut vec = vector![5, 6, 7];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373600,"byte_end":373635,"line_start":849,"line_end":849,"column_start":5,"column_end":40}},{"value":"/ vec.push_front(4);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373640,"byte_end":373662,"line_start":850,"line_end":850,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(vector![4, 5, 6, 7], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373667,"byte_end":373708,"line_start":851,"line_end":851,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":373713,"byte_end":373720,"line_start":852,"line_end":852,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2450},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374464,"byte_end":374473,"line_start":879,"line_end":879,"column_start":12,"column_end":21},"name":"push_back","qualname":"<Vector<A>>::push_back","value":"pub fn push_back(&mut Self, A)","parent":null,"children":[],"decl_id":null,"docs":" Push a value to the back of a vector.","sig":null,"attributes":[{"value":"/ Push a value to the back of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374146,"byte_end":374187,"line_start":866,"line_end":866,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374192,"byte_end":374195,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)*","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374200,"byte_end":374215,"line_start":868,"line_end":868,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374220,"byte_end":374223,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374228,"byte_end":374242,"line_start":870,"line_end":870,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374247,"byte_end":374250,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374255,"byte_end":374262,"line_start":872,"line_end":872,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374267,"byte_end":374302,"line_start":873,"line_end":873,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374307,"byte_end":374328,"line_start":874,"line_end":874,"column_start":5,"column_end":26}},{"value":"/ let mut vec = vector![1, 2, 3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374333,"byte_end":374368,"line_start":875,"line_end":875,"column_start":5,"column_end":40}},{"value":"/ vec.push_back(4);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374373,"byte_end":374394,"line_start":876,"line_end":876,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(vector![1, 2, 3, 4], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374399,"byte_end":374440,"line_start":877,"line_end":877,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374445,"byte_end":374452,"line_start":878,"line_end":878,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2451},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375219,"byte_end":375228,"line_start":905,"line_end":905,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<Vector<A>>::pop_front","value":"pub fn pop_front(&mut Self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" Remove the first element from a vector and return it.","sig":null,"attributes":[{"value":"/ Remove the first element from a vector and return it.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374871,"byte_end":374928,"line_start":892,"line_end":892,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374933,"byte_end":374936,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)*","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374941,"byte_end":374956,"line_start":894,"line_end":894,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374961,"byte_end":374964,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374969,"byte_end":374983,"line_start":896,"line_end":896,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374988,"byte_end":374991,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":374996,"byte_end":375003,"line_start":898,"line_end":898,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375008,"byte_end":375043,"line_start":899,"line_end":899,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375048,"byte_end":375069,"line_start":900,"line_end":900,"column_start":5,"column_end":26}},{"value":"/ let mut vec = vector![1, 2, 3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375074,"byte_end":375109,"line_start":901,"line_end":901,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(1), vec.pop_front());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375114,"byte_end":375155,"line_start":902,"line_end":902,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(vector![2, 3], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375160,"byte_end":375195,"line_start":903,"line_end":903,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375200,"byte_end":375207,"line_start":904,"line_end":904,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2452},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375948,"byte_end":375956,"line_start":930,"line_end":930,"column_start":12,"column_end":20},"name":"pop_back","qualname":"<Vector<A>>::pop_back","value":"pub fn pop_back(&mut Self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last element from a vector and return it.","sig":null,"attributes":[{"value":"/ Remove the last element from a vector and return it.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375602,"byte_end":375658,"line_start":917,"line_end":917,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375663,"byte_end":375666,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ Time: O(1)*","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375671,"byte_end":375686,"line_start":919,"line_end":919,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375691,"byte_end":375694,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375699,"byte_end":375713,"line_start":921,"line_end":921,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375718,"byte_end":375721,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375726,"byte_end":375733,"line_start":923,"line_end":923,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375738,"byte_end":375773,"line_start":924,"line_end":924,"column_start":5,"column_end":40}},{"value":"/ # use im::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375778,"byte_end":375799,"line_start":925,"line_end":925,"column_start":5,"column_end":26}},{"value":"/ let mut vec = vector![1, 2, 3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375804,"byte_end":375839,"line_start":926,"line_end":926,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some(3), vec.pop_back());","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375844,"byte_end":375884,"line_start":927,"line_end":927,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(vector![1, 2], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375889,"byte_end":375924,"line_start":928,"line_end":928,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":375929,"byte_end":375936,"line_start":929,"line_end":929,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2453},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376693,"byte_end":376699,"line_start":955,"line_end":955,"column_start":12,"column_end":18},"name":"append","qualname":"<Vector<A>>::append","value":"pub fn append(&mut Self, Self)","parent":null,"children":[],"decl_id":null,"docs":" Append the vector `other` to the end of the current vector.","sig":null,"attributes":[{"value":"/ Append the vector `other` to the end of the current vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376324,"byte_end":376387,"line_start":942,"line_end":942,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376392,"byte_end":376395,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376400,"byte_end":376418,"line_start":944,"line_end":944,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376423,"byte_end":376426,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376431,"byte_end":376445,"line_start":946,"line_end":946,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376450,"byte_end":376453,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376458,"byte_end":376465,"line_start":948,"line_end":948,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376470,"byte_end":376505,"line_start":949,"line_end":949,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376510,"byte_end":376539,"line_start":950,"line_end":950,"column_start":5,"column_end":34}},{"value":"/ let mut vec = vector![1, 2, 3];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376544,"byte_end":376579,"line_start":951,"line_end":951,"column_start":5,"column_end":40}},{"value":"/ vec.append(vector![7, 8, 9]);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376584,"byte_end":376617,"line_start":952,"line_end":952,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(vector![1, 2, 3, 7, 8, 9], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376622,"byte_end":376669,"line_start":953,"line_end":953,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":376674,"byte_end":376681,"line_start":954,"line_end":954,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2454},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":381863,"byte_end":381869,"line_start":1071,"line_end":1071,"column_start":12,"column_end":18},"name":"retain","qualname":"<Vector<A>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&A) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retain only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retain only the elements specified by the predicate.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":381657,"byte_end":381713,"line_start":1065,"line_end":1065,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":381718,"byte_end":381721,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ Remove all elements for which the provided function `f`","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":381726,"byte_end":381785,"line_start":1067,"line_end":1067,"column_start":5,"column_end":64}},{"value":"/ returns false from the vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":381790,"byte_end":381824,"line_start":1068,"line_end":1068,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":381829,"byte_end":381832,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ Time: O(n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":381837,"byte_end":381851,"line_start":1070,"line_end":1070,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2456},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382916,"byte_end":382924,"line_start":1110,"line_end":1110,"column_start":12,"column_end":20},"name":"split_at","qualname":"<Vector<A>>::split_at","value":"pub fn split_at(Self, usize) -> (Self, Self)","parent":null,"children":[],"decl_id":null,"docs":" Split a vector at a given index.","sig":null,"attributes":[{"value":"/ Split a vector at a given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382354,"byte_end":382390,"line_start":1092,"line_end":1092,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382395,"byte_end":382398,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ Split a vector at a given index, consuming the vector and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382403,"byte_end":382464,"line_start":1094,"line_end":1094,"column_start":5,"column_end":66}},{"value":"/ returning a pair of the left hand side and the right hand side","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382469,"byte_end":382535,"line_start":1095,"line_end":1095,"column_start":5,"column_end":71}},{"value":"/ of the split.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382540,"byte_end":382557,"line_start":1096,"line_end":1096,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382562,"byte_end":382565,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382570,"byte_end":382588,"line_start":1098,"line_end":1098,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382593,"byte_end":382596,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382601,"byte_end":382615,"line_start":1100,"line_end":1100,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382620,"byte_end":382623,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382628,"byte_end":382635,"line_start":1102,"line_end":1102,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382640,"byte_end":382675,"line_start":1103,"line_end":1103,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382680,"byte_end":382709,"line_start":1104,"line_end":1104,"column_start":5,"column_end":34}},{"value":"/ let mut vec = vector![1, 2, 3, 7, 8, 9];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382714,"byte_end":382758,"line_start":1105,"line_end":1105,"column_start":5,"column_end":49}},{"value":"/ let (left, right) = vec.split_at(3);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382763,"byte_end":382803,"line_start":1106,"line_end":1106,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(vector![1, 2, 3], left);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382808,"byte_end":382847,"line_start":1107,"line_end":1107,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(vector![7, 8, 9], right);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382852,"byte_end":382892,"line_start":1108,"line_end":1108,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":382897,"byte_end":382904,"line_start":1109,"line_end":1109,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2457},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383606,"byte_end":383615,"line_start":1133,"line_end":1133,"column_start":12,"column_end":21},"name":"split_off","qualname":"<Vector<A>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Split a vector at a given index.","sig":null,"attributes":[{"value":"/ Split a vector at a given index.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383043,"byte_end":383079,"line_start":1115,"line_end":1115,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383084,"byte_end":383087,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ Split a vector at a given index, leaving the left hand side in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383092,"byte_end":383158,"line_start":1117,"line_end":1117,"column_start":5,"column_end":71}},{"value":"/ the current vector and returning a new vector containing the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383163,"byte_end":383227,"line_start":1118,"line_end":1118,"column_start":5,"column_end":69}},{"value":"/ right hand side.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383232,"byte_end":383252,"line_start":1119,"line_end":1119,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383257,"byte_end":383260,"line_start":1120,"line_end":1120,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383265,"byte_end":383283,"line_start":1121,"line_end":1121,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383288,"byte_end":383291,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383296,"byte_end":383310,"line_start":1123,"line_end":1123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383315,"byte_end":383318,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383323,"byte_end":383330,"line_start":1125,"line_end":1125,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383335,"byte_end":383370,"line_start":1126,"line_end":1126,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383375,"byte_end":383404,"line_start":1127,"line_end":1127,"column_start":5,"column_end":34}},{"value":"/ let mut left = vector![1, 2, 3, 7, 8, 9];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383409,"byte_end":383454,"line_start":1128,"line_end":1128,"column_start":5,"column_end":50}},{"value":"/ let right = left.split_off(3);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383459,"byte_end":383493,"line_start":1129,"line_end":1129,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(vector![1, 2, 3], left);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383498,"byte_end":383537,"line_start":1130,"line_end":1130,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(vector![7, 8, 9], right);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383542,"byte_end":383582,"line_start":1131,"line_end":1131,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":383587,"byte_end":383594,"line_start":1132,"line_end":1132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2458},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390157,"byte_end":390161,"line_start":1278,"line_end":1278,"column_start":12,"column_end":16},"name":"skip","qualname":"<Vector<A>>::skip","value":"pub fn skip(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a vector with `count` elements removed from the\n start of the current vector.","sig":null,"attributes":[{"value":"/ Construct a vector with `count` elements removed from the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390000,"byte_end":390061,"line_start":1273,"line_end":1273,"column_start":5,"column_end":66}},{"value":"/ start of the current vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390066,"byte_end":390098,"line_start":1274,"line_end":1274,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390103,"byte_end":390106,"line_start":1275,"line_end":1275,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390111,"byte_end":390129,"line_start":1276,"line_end":1276,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390134,"byte_end":390145,"line_start":1277,"line_end":1277,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2459},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390484,"byte_end":390488,"line_start":1288,"line_end":1288,"column_start":12,"column_end":16},"name":"take","qualname":"<Vector<A>>::take","value":"pub fn take(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a vector of the first `count` elements from the\n current vector.","sig":null,"attributes":[{"value":"/ Construct a vector of the first `count` elements from the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390340,"byte_end":390401,"line_start":1283,"line_end":1283,"column_start":5,"column_end":66}},{"value":"/ current vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390406,"byte_end":390425,"line_start":1284,"line_end":1284,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390430,"byte_end":390433,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390438,"byte_end":390456,"line_start":1286,"line_end":1286,"column_start":5,"column_end":23}},{"value":"must_use","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390461,"byte_end":390472,"line_start":1287,"line_end":1287,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2460},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390947,"byte_end":390955,"line_start":1302,"line_end":1302,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vector<A>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Truncate a vector to the given size.","sig":null,"attributes":[{"value":"/ Truncate a vector to the given size.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390710,"byte_end":390750,"line_start":1295,"line_end":1295,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390755,"byte_end":390758,"line_start":1296,"line_end":1296,"column_start":5,"column_end":8}},{"value":"/ Discards all elements in the vector beyond the given length.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390763,"byte_end":390827,"line_start":1297,"line_end":1297,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390832,"byte_end":390835,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8}},{"value":"/ Panics if the new length is greater than the current length.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390840,"byte_end":390904,"line_start":1299,"line_end":1299,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390909,"byte_end":390912,"line_start":1300,"line_end":1300,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":390917,"byte_end":390935,"line_start":1301,"line_end":1301,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2461},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391353,"byte_end":391358,"line_start":1314,"line_end":1314,"column_start":12,"column_end":17},"name":"slice","qualname":"<Vector<A>>::slice","value":"pub fn slice<R>(&mut Self, R) -> Self where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Extract a slice from a vector.","sig":null,"attributes":[{"value":"/ Extract a slice from a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391119,"byte_end":391153,"line_start":1307,"line_end":1307,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391158,"byte_end":391161,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ Remove the elements from `start_index` until `end_index` in","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391166,"byte_end":391229,"line_start":1309,"line_end":1309,"column_start":5,"column_end":68}},{"value":"/ the current vector and return the removed slice as a new","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391234,"byte_end":391294,"line_start":1310,"line_end":1310,"column_start":5,"column_end":65}},{"value":"/ vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391299,"byte_end":391310,"line_start":1311,"line_end":1311,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391315,"byte_end":391318,"line_start":1312,"line_end":1312,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391323,"byte_end":391341,"line_start":1313,"line_end":1313,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2463},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392470,"byte_end":392476,"line_start":1345,"line_end":1345,"column_start":12,"column_end":18},"name":"insert","qualname":"<Vector<A>>::insert","value":"pub fn insert(&mut Self, usize, A)","parent":null,"children":[],"decl_id":null,"docs":" Insert an element into a vector.","sig":null,"attributes":[{"value":"/ Insert an element into a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391742,"byte_end":391778,"line_start":1328,"line_end":1328,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391783,"byte_end":391786,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ Insert an element at position `index`, shifting all elements","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391791,"byte_end":391855,"line_start":1330,"line_end":1330,"column_start":5,"column_end":69}},{"value":"/ after it to the right.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391860,"byte_end":391886,"line_start":1331,"line_end":1331,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391891,"byte_end":391894,"line_start":1332,"line_end":1332,"column_start":5,"column_end":8}},{"value":"/ ## Performance Note","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391899,"byte_end":391922,"line_start":1333,"line_end":1333,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391927,"byte_end":391930,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ While `push_front` and `push_back` are heavily optimised","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":391935,"byte_end":391995,"line_start":1335,"line_end":1335,"column_start":5,"column_end":65}},{"value":"/ operations, `insert` in the middle of a vector requires a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392000,"byte_end":392061,"line_start":1336,"line_end":1336,"column_start":5,"column_end":66}},{"value":"/ split, a push, and an append. Thus, if you want to insert","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392066,"byte_end":392127,"line_start":1337,"line_end":1337,"column_start":5,"column_end":66}},{"value":"/ many elements at the same location, instead of `insert`ing","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392132,"byte_end":392194,"line_start":1338,"line_end":1338,"column_start":5,"column_end":67}},{"value":"/ them one by one, you should rather create a new vector","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392199,"byte_end":392257,"line_start":1339,"line_end":1339,"column_start":5,"column_end":63}},{"value":"/ containing the elements to insert, split the vector at the","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392262,"byte_end":392324,"line_start":1340,"line_end":1340,"column_start":5,"column_end":67}},{"value":"/ insertion point, and append the left hand, the new vector and","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392329,"byte_end":392394,"line_start":1341,"line_end":1341,"column_start":5,"column_end":70}},{"value":"/ the right hand in order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392399,"byte_end":392427,"line_start":1342,"line_end":1342,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392432,"byte_end":392435,"line_start":1343,"line_end":1343,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":392440,"byte_end":392458,"line_start":1344,"line_end":1344,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2464},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":394047,"byte_end":394053,"line_start":1392,"line_end":1392,"column_start":12,"column_end":18},"name":"remove","qualname":"<Vector<A>>::remove","value":"pub fn remove(&mut Self, usize) -> A","parent":null,"children":[],"decl_id":null,"docs":" Remove an element from a vector.","sig":null,"attributes":[{"value":"/ Remove an element from a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393412,"byte_end":393448,"line_start":1376,"line_end":1376,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393453,"byte_end":393456,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ Remove the element from position 'index', shifting all","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393461,"byte_end":393519,"line_start":1378,"line_end":1378,"column_start":5,"column_end":63}},{"value":"/ elements after it to the left, and return the removec element.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393524,"byte_end":393590,"line_start":1379,"line_end":1379,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393595,"byte_end":393598,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ ## Performance Note","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393603,"byte_end":393626,"line_start":1381,"line_end":1381,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393631,"byte_end":393634,"line_start":1382,"line_end":1382,"column_start":5,"column_end":8}},{"value":"/ While `pop_front` and `pop_back` are heavily optimised","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393639,"byte_end":393697,"line_start":1383,"line_end":1383,"column_start":5,"column_end":63}},{"value":"/ operations, `remove` in the middle of a vector requires a","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393702,"byte_end":393763,"line_start":1384,"line_end":1384,"column_start":5,"column_end":66}},{"value":"/ split, a pop, and an append. Thus, if you want to remove many","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393768,"byte_end":393833,"line_start":1385,"line_end":1385,"column_start":5,"column_end":70}},{"value":"/ elements from the same location, instead of `remove`ing them","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393838,"byte_end":393902,"line_start":1386,"line_end":1386,"column_start":5,"column_end":69}},{"value":"/ one by one, it is much better to use [`slice`][slice].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393907,"byte_end":393965,"line_start":1387,"line_end":1387,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393970,"byte_end":393973,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":393978,"byte_end":393996,"line_start":1389,"line_end":1389,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":394001,"byte_end":394004,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ [slice]: #method.slice","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":394009,"byte_end":394035,"line_start":1391,"line_end":1391,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2465},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395292,"byte_end":395302,"line_start":1429,"line_end":1429,"column_start":12,"column_end":22},"name":"insert_ord","qualname":"<Vector<A>>::insert_ord","value":"pub fn insert_ord(&mut Self, A) where A: Ord","parent":null,"children":[],"decl_id":null,"docs":" Insert an element into a sorted vector.","sig":null,"attributes":[{"value":"/ Insert an element into a sorted vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":394821,"byte_end":394864,"line_start":1413,"line_end":1413,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":394869,"byte_end":394872,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ Insert an element into a vector in sorted order, assuming the vector is","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":394877,"byte_end":394952,"line_start":1415,"line_end":1415,"column_start":5,"column_end":80}},{"value":"/ already in sorted order.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":394957,"byte_end":394985,"line_start":1416,"line_end":1416,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":394990,"byte_end":394993,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ Time: O(log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":394998,"byte_end":395016,"line_start":1418,"line_end":1418,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395021,"byte_end":395024,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395029,"byte_end":395043,"line_start":1420,"line_end":1420,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395048,"byte_end":395051,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395056,"byte_end":395063,"line_start":1422,"line_end":1422,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395068,"byte_end":395103,"line_start":1423,"line_end":1423,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395108,"byte_end":395137,"line_start":1424,"line_end":1424,"column_start":5,"column_end":34}},{"value":"/ let mut vec = vector![1, 2, 3, 7, 8, 9];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395142,"byte_end":395186,"line_start":1425,"line_end":1425,"column_start":5,"column_end":49}},{"value":"/ vec.insert_ord(5);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395191,"byte_end":395213,"line_start":1426,"line_end":1426,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(vector![1, 2, 3, 5, 7, 8, 9], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395218,"byte_end":395268,"line_start":1427,"line_end":1427,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395273,"byte_end":395280,"line_start":1428,"line_end":1428,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2466},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395832,"byte_end":395836,"line_start":1452,"line_end":1452,"column_start":12,"column_end":16},"name":"sort","qualname":"<Vector<A>>::sort","value":"pub fn sort(&mut Self) where A: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort a vector.","sig":null,"attributes":[{"value":"/ Sort a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395521,"byte_end":395539,"line_start":1439,"line_end":1439,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395544,"byte_end":395547,"line_start":1440,"line_end":1440,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395552,"byte_end":395572,"line_start":1441,"line_end":1441,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395577,"byte_end":395580,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395585,"byte_end":395599,"line_start":1443,"line_end":1443,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395604,"byte_end":395607,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395612,"byte_end":395619,"line_start":1445,"line_end":1445,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395624,"byte_end":395659,"line_start":1446,"line_end":1446,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395664,"byte_end":395693,"line_start":1447,"line_end":1447,"column_start":5,"column_end":34}},{"value":"/ let mut vec = vector![3, 2, 5, 4, 1];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395698,"byte_end":395739,"line_start":1448,"line_end":1448,"column_start":5,"column_end":46}},{"value":"/ vec.sort();","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395744,"byte_end":395759,"line_start":1449,"line_end":1449,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(vector![1, 2, 3, 4, 5], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395764,"byte_end":395808,"line_start":1450,"line_end":1450,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395813,"byte_end":395820,"line_start":1451,"line_end":1451,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396293,"byte_end":396300,"line_start":1472,"line_end":1472,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<Vector<A>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: Fn(&A, &A) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort a vector using a comparator function.","sig":null,"attributes":[{"value":"/ Sort a vector using a comparator function.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395922,"byte_end":395968,"line_start":1459,"line_end":1459,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395973,"byte_end":395976,"line_start":1460,"line_end":1460,"column_start":5,"column_end":8}},{"value":"/ Time: O(n log n)","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":395981,"byte_end":396001,"line_start":1461,"line_end":1461,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396006,"byte_end":396009,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396014,"byte_end":396028,"line_start":1463,"line_end":1463,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396033,"byte_end":396036,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396041,"byte_end":396048,"line_start":1465,"line_end":1465,"column_start":5,"column_end":12}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396053,"byte_end":396088,"line_start":1466,"line_end":1466,"column_start":5,"column_end":40}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396093,"byte_end":396122,"line_start":1467,"line_end":1467,"column_start":5,"column_end":34}},{"value":"/ let mut vec = vector![3, 2, 5, 4, 1];","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396127,"byte_end":396168,"line_start":1468,"line_end":1468,"column_start":5,"column_end":46}},{"value":"/ vec.sort_by(|left, right| left.cmp(right));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396173,"byte_end":396220,"line_start":1469,"line_end":1469,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(vector![1, 2, 3, 4, 5], vec);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396225,"byte_end":396269,"line_start":1470,"line_end":1470,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":396274,"byte_end":396281,"line_start":1471,"line_end":1471,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2563},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409928,"byte_end":409932,"line_start":1926,"line_end":1926,"column_start":12,"column_end":16},"name":"Iter","qualname":"::vector::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2566},{"krate":0,"index":2567},{"krate":0,"index":2568}],"decl_id":null,"docs":" An iterator over vectors with values of type `A`.","sig":null,"attributes":[{"value":"/ An iterator over vectors with values of type `A`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409765,"byte_end":409818,"line_start":1921,"line_end":1921,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409819,"byte_end":409822,"line_start":1922,"line_end":1922,"column_start":1,"column_end":4}},{"value":"/ To obtain one, use [`Vector::iter()`][iter].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409823,"byte_end":409871,"line_start":1923,"line_end":1923,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409872,"byte_end":409875,"line_start":1924,"line_end":1924,"column_start":1,"column_end":4}},{"value":"/ [iter]: enum.Vector.html#method.iter","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409876,"byte_end":409916,"line_start":1925,"line_end":1925,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2590},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411812,"byte_end":411819,"line_start":1997,"line_end":1997,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::vector::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2595}],"decl_id":null,"docs":" A mutable iterator over vectors with values of type `A`.","sig":null,"attributes":[{"value":"/ A mutable iterator over vectors with values of type `A`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411626,"byte_end":411686,"line_start":1992,"line_end":1992,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411687,"byte_end":411690,"line_start":1993,"line_end":1993,"column_start":1,"column_end":4}},{"value":"/ To obtain one, use [`Vector::iter_mut()`][iter_mut].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411691,"byte_end":411747,"line_start":1994,"line_end":1994,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411748,"byte_end":411751,"line_start":1995,"line_end":1995,"column_start":1,"column_end":4}},{"value":"/ [iter_mut]: enum.Vector.html#method.iter_mut","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411752,"byte_end":411800,"line_start":1996,"line_end":1996,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2617},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413746,"byte_end":413759,"line_start":2075,"line_end":2075,"column_start":12,"column_end":25},"name":"ConsumingIter","qualname":"::vector::ConsumingIter","value":"ConsumingIter {  }","parent":null,"children":[{"krate":0,"index":2619}],"decl_id":null,"docs":" A consuming iterator over vectors with values of type `A`.\n","sig":null,"attributes":[{"value":"/ A consuming iterator over vectors with values of type `A`.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413672,"byte_end":413734,"line_start":2074,"line_end":2074,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2635},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414782,"byte_end":414788,"line_start":2119,"line_end":2119,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::vector::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2640}],"decl_id":null,"docs":" An iterator over the leaf nodes of a vector.","sig":null,"attributes":[{"value":"/ An iterator over the leaf nodes of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414616,"byte_end":414664,"line_start":2114,"line_end":2114,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414665,"byte_end":414668,"line_start":2115,"line_end":2115,"column_start":1,"column_end":4}},{"value":"/ To obtain one, use [`Vector::chunks()`][chunks].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414669,"byte_end":414721,"line_start":2116,"line_end":2116,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414722,"byte_end":414725,"line_start":2117,"line_end":2117,"column_start":1,"column_end":4}},{"value":"/ [chunks]: enum.Vector.html#method.chunks","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414726,"byte_end":414770,"line_start":2118,"line_end":2118,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":2657},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416430,"byte_end":416439,"line_start":2177,"line_end":2177,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::vector::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2662}],"decl_id":null,"docs":" A mutable iterator over the leaf nodes of a vector.","sig":null,"attributes":[{"value":"/ A mutable iterator over the leaf nodes of a vector.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416241,"byte_end":416296,"line_start":2172,"line_end":2172,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416297,"byte_end":416300,"line_start":2173,"line_end":2173,"column_start":1,"column_end":4}},{"value":"/ To obtain one, use [`Vector::chunks_mut()`][chunks_mut].","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416301,"byte_end":416361,"line_start":2174,"line_end":2174,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416362,"byte_end":416365,"line_start":2175,"line_end":2175,"column_start":1,"column_end":4}},{"value":"/ [chunks_mut]: enum.Vector.html#method.chunks_mut","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416366,"byte_end":416418,"line_start":2176,"line_end":2176,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":2679},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","parent":null,"children":[{"krate":0,"index":2680}],"decl_id":null,"docs":" Iterators over immutable data.\n","sig":null,"attributes":[{"value":"/ Iterators over immutable data.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466167,"byte_end":466201,"line_start":5,"line_end":5,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":2680},"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":467203,"byte_end":467209,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"unfold","qualname":"::iter::unfold","value":"pub fn unfold<F, S, A>(S, F) -> /*impl Trait*/ where F: Fn(S) ->\nOption<(A, S)>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator of values using a function to update an owned state\n value.","sig":null,"attributes":[{"value":"/ Create an iterator of values using a function to update an owned state","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466203,"byte_end":466277,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/ value.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466278,"byte_end":466288,"line_start":8,"line_end":8,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466289,"byte_end":466292,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The function is called with the current state as its argument, and should","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466293,"byte_end":466370,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ return an [`Option`][std::option::Option] of a tuple of the next value to","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466371,"byte_end":466448,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ yield from the iterator and the updated state. If the function returns","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466449,"byte_end":466523,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ [`None`][std::option::Option::None], the iterator ends.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466524,"byte_end":466583,"line_start":13,"line_end":13,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466584,"byte_end":466587,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466588,"byte_end":466602,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466603,"byte_end":466610,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate im;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466611,"byte_end":466646,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/ # use im::iter::unfold;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466647,"byte_end":466674,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/ # use im::vector::Vector;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466675,"byte_end":466704,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ # use std::iter::FromIterator;","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466705,"byte_end":466739,"line_start":20,"line_end":20,"column_start":1,"column_end":35}},{"value":"/ // Create an infinite stream of numbers, starting at 0.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466740,"byte_end":466799,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/ let mut it = unfold(0, |i| Some((i, i + 1)));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466800,"byte_end":466849,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466850,"byte_end":466853,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Make a list out of its first five elements.","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466854,"byte_end":466904,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/ let numbers = Vector::from_iter(it.take(5));","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466905,"byte_end":466953,"line_start":25,"line_end":25,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(numbers, vector![0, 1, 2, 3, 4]);","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":466954,"byte_end":467002,"line_start":26,"line_end":26,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":467003,"byte_end":467010,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":467011,"byte_end":467014,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ [std::option::Option]: https://doc.rust-lang.org/std/option/enum.Option.html","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":467015,"byte_end":467095,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ [std::option::Option::None]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/iter.rs","byte_start":467096,"byte_end":467195,"line_start":30,"line_end":30,"column_start":1,"column_end":100}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":26828,"byte_end":26832,"line_start":52,"line_end":52,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":27207,"byte_end":27211,"line_start":63,"line_end":63,"column_start":23,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":28048,"byte_end":28052,"line_start":105,"line_end":105,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":28244,"byte_end":28248,"line_start":117,"line_end":117,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":28396,"byte_end":28400,"line_start":126,"line_end":126,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":29628,"byte_end":29632,"line_start":181,"line_end":181,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":57593,"byte_end":57597,"line_start":917,"line_end":917,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":62679,"byte_end":62683,"line_start":1050,"line_end":1050,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":63400,"byte_end":63404,"line_start":1074,"line_end":1074,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":64273,"byte_end":64286,"line_start":1107,"line_end":1107,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":65894,"byte_end":65907,"line_start":1153,"line_end":1153,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":67025,"byte_end":67038,"line_start":1189,"line_end":1189,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68058,"byte_end":68071,"line_start":1219,"line_end":1219,"column_start":51,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68774,"byte_end":68782,"line_start":1250,"line_end":1250,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":69774,"byte_end":69782,"line_start":1282,"line_end":1282,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":74362,"byte_end":74366,"line_start":49,"line_end":49,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":74749,"byte_end":74753,"line_start":63,"line_end":63,"column_start":23,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":75352,"byte_end":75357,"line_start":91,"line_end":91,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":75648,"byte_end":75653,"line_start":101,"line_end":101,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":76140,"byte_end":76145,"line_start":121,"line_end":121,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":76267,"byte_end":76271,"line_start":127,"line_end":127,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":76341,"byte_end":76345,"line_start":133,"line_end":133,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":77224,"byte_end":77228,"line_start":172,"line_end":172,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":85477,"byte_end":85490,"line_start":401,"line_end":401,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":87372,"byte_end":87376,"line_start":482,"line_end":482,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":87689,"byte_end":87693,"line_start":496,"line_end":496,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":89197,"byte_end":89201,"line_start":548,"line_end":548,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":89255,"byte_end":89259,"line_start":550,"line_end":550,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":89560,"byte_end":89567,"line_start":562,"line_end":562,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":89945,"byte_end":89952,"line_start":577,"line_end":577,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":91606,"byte_end":91613,"line_start":631,"line_end":631,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":91675,"byte_end":91682,"line_start":633,"line_end":633,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":91950,"byte_end":91955,"line_start":648,"line_end":648,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":92272,"byte_end":92277,"line_start":663,"line_end":663,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":93736,"byte_end":93741,"line_start":712,"line_end":712,"column_start":42,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":93801,"byte_end":93806,"line_start":714,"line_end":714,"column_start":38,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":93876,"byte_end":93880,"line_start":716,"line_end":716,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":94934,"byte_end":94938,"line_start":25,"line_end":25,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":95133,"byte_end":95137,"line_start":34,"line_end":34,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":99380,"byte_end":99385,"line_start":167,"line_end":167,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":99641,"byte_end":99646,"line_start":177,"line_end":177,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":101676,"byte_end":101680,"line_start":250,"line_end":250,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":101822,"byte_end":101826,"line_start":258,"line_end":258,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":101903,"byte_end":101907,"line_start":264,"line_end":264,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/sync.rs","byte_start":138391,"byte_end":138395,"line_start":16,"line_end":16,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/sync.rs","byte_start":138702,"byte_end":138706,"line_start":29,"line_end":29,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148854,"byte_end":148860,"line_start":170,"line_end":170,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152242,"byte_end":152248,"line_start":309,"line_end":309,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":716},{"krate":0,"index":720},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160721,"byte_end":160727,"line_start":614,"line_end":614,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":757},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771},{"krate":0,"index":775},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":799},{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187453,"byte_end":187458,"line_start":1482,"line_end":1482,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189145,"byte_end":189158,"line_start":1548,"line_end":1548,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190510,"byte_end":190521,"line_start":1605,"line_end":1605,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":191093,"byte_end":191099,"line_start":1632,"line_end":1632,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":191396,"byte_end":191402,"line_start":1647,"line_end":1647,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192136,"byte_end":192142,"line_start":1680,"line_end":1680,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192179,"byte_end":192185,"line_start":1682,"line_end":1682,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192367,"byte_end":192373,"line_start":1692,"line_end":1692,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192525,"byte_end":192531,"line_start":1702,"line_end":1702,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192750,"byte_end":192756,"line_start":1717,"line_end":1717,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":193054,"byte_end":193060,"line_start":1735,"line_end":1735,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":193244,"byte_end":193250,"line_start":1747,"line_end":1747,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":193474,"byte_end":193480,"line_start":1760,"line_end":1760,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":193798,"byte_end":193804,"line_start":1775,"line_end":1775,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":194136,"byte_end":194142,"line_start":1790,"line_end":1790,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":933}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":194556,"byte_end":194562,"line_start":1805,"line_end":1805,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":194949,"byte_end":194953,"line_start":1826,"line_end":1826,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195244,"byte_end":195248,"line_start":1841,"line_end":1841,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":951}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195411,"byte_end":195415,"line_start":1850,"line_end":1850,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195576,"byte_end":195580,"line_start":1857,"line_end":1857,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195937,"byte_end":195941,"line_start":1876,"line_end":1876,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":971}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":196195,"byte_end":196199,"line_start":1889,"line_end":1889,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":196378,"byte_end":196384,"line_start":1901,"line_end":1901,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":196741,"byte_end":196747,"line_start":1920,"line_end":1920,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":197001,"byte_end":197007,"line_start":1933,"line_end":1933,"column_start":38,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":197103,"byte_end":197109,"line_start":1940,"line_end":1940,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":197654,"byte_end":197660,"line_start":1969,"line_end":1969,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":197930,"byte_end":197936,"line_start":1984,"line_end":1984,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":198065,"byte_end":198071,"line_start":1990,"line_end":1990,"column_start":67,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":198437,"byte_end":198443,"line_start":2004,"line_end":2004,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1039}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":198818,"byte_end":198824,"line_start":2020,"line_end":2020,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":199048,"byte_end":199054,"line_start":2030,"line_end":2030,"column_start":65,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":199463,"byte_end":199469,"line_start":2046,"line_end":2046,"column_start":75,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":199718,"byte_end":199724,"line_start":2056,"line_end":2056,"column_start":75,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":200141,"byte_end":200147,"line_start":2072,"line_end":2072,"column_start":65,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":200403,"byte_end":200409,"line_start":2082,"line_end":2082,"column_start":81,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":1087}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":200843,"byte_end":200849,"line_start":2098,"line_end":2098,"column_start":87,"column_end":93},"value":"","parent":null,"children":[{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":201040,"byte_end":201046,"line_start":2105,"line_end":2105,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":219448,"byte_end":219453,"line_start":69,"line_end":69,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1137},{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":219731,"byte_end":219736,"line_start":79,"line_end":79,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222489,"byte_end":222495,"line_start":181,"line_end":181,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225711,"byte_end":225717,"line_start":313,"line_end":313,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230270,"byte_end":230276,"line_start":469,"line_end":469,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239809,"byte_end":239815,"line_start":825,"line_end":825,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240079,"byte_end":240085,"line_start":839,"line_end":839,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240295,"byte_end":240301,"line_start":846,"line_end":846,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240337,"byte_end":240343,"line_start":848,"line_end":848,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240487,"byte_end":240493,"line_start":854,"line_end":854,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240621,"byte_end":240627,"line_start":860,"line_end":860,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240802,"byte_end":240808,"line_start":871,"line_end":871,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240901,"byte_end":240907,"line_start":877,"line_end":877,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1233},{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":241233,"byte_end":241239,"line_start":893,"line_end":893,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":241579,"byte_end":241585,"line_start":909,"line_end":909,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":241747,"byte_end":241753,"line_start":918,"line_end":918,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242005,"byte_end":242011,"line_start":932,"line_end":932,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242285,"byte_end":242289,"line_start":945,"line_end":945,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242675,"byte_end":242679,"line_start":963,"line_end":963,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1275}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242853,"byte_end":242857,"line_start":972,"line_end":972,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243217,"byte_end":243227,"line_start":983,"line_end":983,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243588,"byte_end":243598,"line_start":1001,"line_end":1001,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243882,"byte_end":243895,"line_start":1015,"line_end":1015,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":244270,"byte_end":244278,"line_start":1034,"line_end":1034,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":244850,"byte_end":244856,"line_start":1055,"line_end":1055,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":245337,"byte_end":245343,"line_start":1083,"line_end":1083,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":245646,"byte_end":245652,"line_start":1099,"line_end":1099,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1332}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":245874,"byte_end":245880,"line_start":1109,"line_end":1109,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246037,"byte_end":246043,"line_start":1118,"line_end":1118,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246173,"byte_end":246179,"line_start":1124,"line_end":1124,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246335,"byte_end":246341,"line_start":1130,"line_end":1130,"column_start":68,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1347}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246527,"byte_end":246533,"line_start":1136,"line_end":1136,"column_start":76,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246705,"byte_end":246711,"line_start":1142,"line_end":1142,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246889,"byte_end":246895,"line_start":1148,"line_end":1148,"column_start":65,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":247087,"byte_end":247093,"line_start":1154,"line_end":1154,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":247273,"byte_end":247279,"line_start":1160,"line_end":1160,"column_start":82,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":1367}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254025,"byte_end":254032,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254549,"byte_end":254556,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255087,"byte_end":255094,"line_start":169,"line_end":169,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260423,"byte_end":260430,"line_start":364,"line_end":364,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1453},{"krate":0,"index":1456},{"krate":0,"index":1458},{"krate":0,"index":1464},{"krate":0,"index":1468},{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265633,"byte_end":265640,"line_start":561,"line_end":561,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1479},{"krate":0,"index":1481},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1497},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1511},{"krate":0,"index":1513},{"krate":0,"index":1515},{"krate":0,"index":1519},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1528},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289885,"byte_end":289890,"line_start":1351,"line_end":1351,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291677,"byte_end":291690,"line_start":1420,"line_end":1420,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293524,"byte_end":293535,"line_start":1489,"line_end":1489,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":294463,"byte_end":294470,"line_start":1527,"line_end":1527,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1611}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":294849,"byte_end":294856,"line_start":1547,"line_end":1547,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1616}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":295547,"byte_end":295554,"line_start":1585,"line_end":1585,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":295653,"byte_end":295660,"line_start":1593,"line_end":1593,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1625}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":296189,"byte_end":296196,"line_start":1609,"line_end":1609,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":296680,"byte_end":296687,"line_start":1625,"line_end":1625,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1635}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":296931,"byte_end":296938,"line_start":1641,"line_end":1641,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":297273,"byte_end":297280,"line_start":1658,"line_end":1658,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1646},{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":297751,"byte_end":297758,"line_start":1684,"line_end":1684,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":298024,"byte_end":298031,"line_start":1698,"line_end":1698,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1668}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":298381,"byte_end":298388,"line_start":1714,"line_end":1714,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1676},{"krate":0,"index":1677}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":298789,"byte_end":298796,"line_start":1730,"line_end":1730,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1684}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":299315,"byte_end":299322,"line_start":1747,"line_end":1747,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1689}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300510,"byte_end":300514,"line_start":1803,"line_end":1803,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300775,"byte_end":300779,"line_start":1815,"line_end":1815,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300827,"byte_end":300831,"line_start":1817,"line_end":1817,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301026,"byte_end":301033,"line_start":1828,"line_end":1828,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1723}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301342,"byte_end":301349,"line_start":1844,"line_end":1844,"column_start":38,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301432,"byte_end":301439,"line_start":1851,"line_end":1851,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301629,"byte_end":301642,"line_start":1863,"line_end":1863,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1740}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301912,"byte_end":301925,"line_start":1878,"line_end":1878,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301986,"byte_end":301999,"line_start":1880,"line_end":1880,"column_start":27,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302163,"byte_end":302167,"line_start":1887,"line_end":1887,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1757}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302428,"byte_end":302432,"line_start":1899,"line_end":1899,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302480,"byte_end":302484,"line_start":1901,"line_end":1901,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302632,"byte_end":302638,"line_start":1908,"line_end":1908,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302899,"byte_end":302905,"line_start":1920,"line_end":1920,"column_start":38,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302953,"byte_end":302959,"line_start":1922,"line_end":1922,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":303258,"byte_end":303265,"line_start":1938,"line_end":1938,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1801}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":303634,"byte_end":303641,"line_start":1957,"line_end":1957,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":303987,"byte_end":303994,"line_start":1975,"line_end":1975,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":304153,"byte_end":304160,"line_start":1982,"line_end":1982,"column_start":80,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":1823}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":304584,"byte_end":304591,"line_start":1998,"line_end":1998,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":304799,"byte_end":304806,"line_start":2009,"line_end":2009,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":305017,"byte_end":305024,"line_start":2020,"line_end":2020,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1841}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":305250,"byte_end":305257,"line_start":2031,"line_end":2031,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":305498,"byte_end":305505,"line_start":2042,"line_end":2042,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":305775,"byte_end":305782,"line_start":2053,"line_end":2053,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":306025,"byte_end":306032,"line_start":2064,"line_end":2064,"column_start":61,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1864}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321861,"byte_end":321866,"line_start":105,"line_end":105,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1912},{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322105,"byte_end":322110,"line_start":114,"line_end":114,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322301,"byte_end":322308,"line_start":129,"line_end":129,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1921}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322773,"byte_end":322780,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1924}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323231,"byte_end":323238,"line_start":171,"line_end":171,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1936},{"krate":0,"index":1937}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":327414,"byte_end":327421,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1944},{"krate":0,"index":1947}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329031,"byte_end":329038,"line_start":393,"line_end":393,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1952},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1960},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335963,"byte_end":335970,"line_start":648,"line_end":648,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1972}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":336297,"byte_end":336304,"line_start":666,"line_end":666,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1976}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":336463,"byte_end":336470,"line_start":676,"line_end":676,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":336562,"byte_end":336569,"line_start":683,"line_end":683,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1983}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":337069,"byte_end":337076,"line_start":698,"line_end":698,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1987}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":337538,"byte_end":337545,"line_start":713,"line_end":713,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1991}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":337780,"byte_end":337787,"line_start":728,"line_end":728,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1996}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":338102,"byte_end":338109,"line_start":744,"line_end":744,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2000},{"krate":0,"index":2001}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":338306,"byte_end":338313,"line_start":756,"line_end":756,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2005},{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":338980,"byte_end":338987,"line_start":792,"line_end":792,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2022}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":339221,"byte_end":339228,"line_start":805,"line_end":805,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2029}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":339531,"byte_end":339538,"line_start":821,"line_end":821,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2034}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340363,"byte_end":340367,"line_start":860,"line_end":860,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2045}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340637,"byte_end":340641,"line_start":875,"line_end":875,"column_start":35,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340683,"byte_end":340687,"line_start":877,"line_end":877,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340841,"byte_end":340848,"line_start":884,"line_end":884,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2059},{"krate":0,"index":2060},{"krate":0,"index":2062}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341134,"byte_end":341141,"line_start":899,"line_end":899,"column_start":35,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341198,"byte_end":341205,"line_start":901,"line_end":901,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341400,"byte_end":341413,"line_start":911,"line_end":911,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2077}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341685,"byte_end":341698,"line_start":926,"line_end":926,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341759,"byte_end":341772,"line_start":928,"line_end":928,"column_start":27,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341868,"byte_end":341875,"line_start":932,"line_end":932,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2086}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":342434,"byte_end":342441,"line_start":962,"line_end":962,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":342800,"byte_end":342807,"line_start":979,"line_end":979,"column_start":62,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2108}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343105,"byte_end":343112,"line_start":991,"line_end":991,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2114}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343298,"byte_end":343305,"line_start":1001,"line_end":1001,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2118}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343490,"byte_end":343497,"line_start":1011,"line_end":1011,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2123}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343696,"byte_end":343703,"line_start":1021,"line_end":1021,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2127}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343932,"byte_end":343939,"line_start":1031,"line_end":1031,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2132}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":344161,"byte_end":344168,"line_start":1041,"line_end":1041,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2137}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":344370,"byte_end":344377,"line_start":1051,"line_end":1051,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2141}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":344580,"byte_end":344587,"line_start":1061,"line_end":1061,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2146}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436613,"byte_end":436618,"line_start":93,"line_end":93,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2241}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":441486,"byte_end":441491,"line_start":235,"line_end":235,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":2247}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":441688,"byte_end":441693,"line_start":247,"line_end":247,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2251}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":442102,"byte_end":442111,"line_start":267,"line_end":267,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2261}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":442461,"byte_end":442470,"line_start":282,"line_end":282,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":442542,"byte_end":442551,"line_start":285,"line_end":285,"column_start":25,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":442687,"byte_end":442696,"line_start":292,"line_end":292,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448676,"byte_end":448684,"line_start":470,"line_end":470,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2297},{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2305},{"krate":0,"index":2308},{"krate":0,"index":2311},{"krate":0,"index":2312},{"krate":0,"index":2314},{"krate":0,"index":2315}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":457984,"byte_end":457992,"line_start":740,"line_end":740,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2319},{"krate":0,"index":2320},{"krate":0,"index":2321}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":458212,"byte_end":458220,"line_start":752,"line_end":752,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2325}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":458526,"byte_end":458538,"line_start":769,"line_end":769,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2339},{"krate":0,"index":2340},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":464415,"byte_end":464422,"line_start":17,"line_end":17,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2362},{"krate":0,"index":2363},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2367}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465586,"byte_end":465593,"line_start":59,"line_end":59,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2370}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465744,"byte_end":465751,"line_start":66,"line_end":66,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2373}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":353147,"byte_end":353150,"line_start":166,"line_end":166,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2404}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":353525,"byte_end":353531,"line_start":180,"line_end":180,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2407},{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2434},{"krate":0,"index":2435},{"krate":0,"index":2437},{"krate":0,"index":2439}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371559,"byte_end":371565,"line_start":767,"line_end":767,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2452},{"krate":0,"index":2453},{"krate":0,"index":2454},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2458},{"krate":0,"index":2459},{"krate":0,"index":2460},{"krate":0,"index":2461},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":397046,"byte_end":397049,"line_start":1499,"line_end":1499,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":402916,"byte_end":402922,"line_start":1659,"line_end":1659,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2483}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":403009,"byte_end":403015,"line_start":1665,"line_end":1665,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2486}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":403509,"byte_end":403515,"line_start":1680,"line_end":1680,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2489}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":404067,"byte_end":404073,"line_start":1695,"line_end":1695,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2492}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":405813,"byte_end":405819,"line_start":1747,"line_end":1747,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":405870,"byte_end":405876,"line_start":1749,"line_end":1749,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2497}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406028,"byte_end":406034,"line_start":1755,"line_end":1755,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406164,"byte_end":406170,"line_start":1761,"line_end":1761,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2503}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406315,"byte_end":406321,"line_start":1769,"line_end":1769,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2507}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406481,"byte_end":406487,"line_start":1778,"line_end":1778,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2512},{"krate":0,"index":2513}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406995,"byte_end":407001,"line_start":1803,"line_end":1803,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2521}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":407301,"byte_end":407307,"line_start":1817,"line_end":1817,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2525},{"krate":0,"index":2526}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":407763,"byte_end":407769,"line_start":1834,"line_end":1834,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2529}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":408343,"byte_end":408349,"line_start":1857,"line_end":1857,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":408532,"byte_end":408538,"line_start":1865,"line_end":1865,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2543}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":408874,"byte_end":408880,"line_start":1881,"line_end":1881,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2550}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409088,"byte_end":409094,"line_start":1891,"line_end":1891,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2555}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409216,"byte_end":409222,"line_start":1897,"line_end":1897,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2558}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409501,"byte_end":409507,"line_start":1908,"line_end":1908,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2562}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":410036,"byte_end":410040,"line_start":1932,"line_end":1932,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2572},{"krate":0,"index":2573}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":410417,"byte_end":410421,"line_start":1950,"line_end":1950,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2577},{"krate":0,"index":2578},{"krate":0,"index":2579}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411090,"byte_end":411094,"line_start":1973,"line_end":1973,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2583}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411557,"byte_end":411561,"line_start":1988,"line_end":1988,"column_start":42,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411610,"byte_end":411614,"line_start":1990,"line_end":1990,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411919,"byte_end":411926,"line_start":2003,"line_end":2003,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2599},{"krate":0,"index":2600}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":412378,"byte_end":412385,"line_start":2026,"line_end":2026,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":2606}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413083,"byte_end":413090,"line_start":2052,"line_end":2052,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2610}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413597,"byte_end":413604,"line_start":2070,"line_end":2070,"column_start":42,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413653,"byte_end":413660,"line_start":2072,"line_end":2072,"column_start":38,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413806,"byte_end":413819,"line_start":2079,"line_end":2079,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413926,"byte_end":413939,"line_start":2085,"line_end":2085,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2625},{"krate":0,"index":2626},{"krate":0,"index":2627}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414297,"byte_end":414310,"line_start":2101,"line_end":2101,"column_start":40,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2630}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414541,"byte_end":414554,"line_start":2110,"line_end":2110,"column_start":38,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414595,"byte_end":414608,"line_start":2112,"line_end":2112,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414892,"byte_end":414898,"line_start":2125,"line_end":2125,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2644}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":415112,"byte_end":415118,"line_start":2135,"line_end":2135,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2648},{"krate":0,"index":2649}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":415660,"byte_end":415666,"line_start":2153,"line_end":2153,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2653}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416223,"byte_end":416229,"line_start":2170,"line_end":2170,"column_start":38,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416546,"byte_end":416555,"line_start":2183,"line_end":2183,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2666}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416803,"byte_end":416812,"line_start":2194,"line_end":2194,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2670},{"krate":0,"index":2671}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":417361,"byte_end":417370,"line_start":2212,"line_end":2212,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2675}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":417930,"byte_end":417939,"line_start":2229,"line_end":2229,"column_start":38,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":467959,"byte_end":467964,"line_start":17,"line_end":17,"column_start":25,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":467993,"byte_end":467998,"line_start":18,"line_end":18,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":468073,"byte_end":468077,"line_start":22,"line_end":22,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2707}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":468283,"byte_end":468287,"line_start":34,"line_end":34,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2710}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":468421,"byte_end":468423,"line_start":45,"line_end":45,"column_start":9,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2716},{"krate":0,"index":2718},{"krate":0,"index":2719}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469360,"byte_end":469362,"line_start":88,"line_end":88,"column_start":19,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2723}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469474,"byte_end":469476,"line_start":95,"line_end":95,"column_start":19,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2726},{"krate":0,"index":2727}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469618,"byte_end":469620,"line_start":103,"line_end":103,"column_start":23,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2730}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469763,"byte_end":469765,"line_start":113,"line_end":113,"column_start":16,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469813,"byte_end":469815,"line_start":115,"line_end":115,"column_start":29,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2735}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":470059,"byte_end":470062,"line_start":130,"line_end":130,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2738},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2741},{"krate":0,"index":2743},{"krate":0,"index":2744}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471008,"byte_end":471011,"line_start":173,"line_end":173,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2748}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471125,"byte_end":471128,"line_start":180,"line_end":180,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2751},{"krate":0,"index":2752}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471270,"byte_end":471273,"line_start":188,"line_end":188,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2755}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471416,"byte_end":471419,"line_start":198,"line_end":198,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471467,"byte_end":471470,"line_start":200,"line_end":200,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2760}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/mod.rs","byte_start":143998,"byte_end":144001,"line_start":6,"line_end":6,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":618}},{"kind":"Mod","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/mod.rs","byte_start":144024,"byte_end":144027,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1100}},{"kind":"Mod","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/mod.rs","byte_start":250220,"byte_end":250223,"line_start":6,"line_end":6,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1371}},{"kind":"Mod","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/mod.rs","byte_start":250246,"byte_end":250249,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1866}},{"kind":"Mod","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":20064,"byte_end":20070,"line_start":366,"line_end":366,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2149}},{"kind":"Mod","span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/lib.rs","byte_start":20081,"byte_end":20085,"line_start":368,"line_end":368,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2679}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":26828,"byte_end":26832,"line_start":52,"line_end":52,"column_start":25,"column_end":29},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":40},"to":{"krate":0,"index":2693}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":27207,"byte_end":27211,"line_start":63,"line_end":63,"column_start":23,"column_end":27},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":40},"to":{"krate":0,"index":2694}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":28048,"byte_end":28052,"line_start":105,"line_end":105,"column_start":19,"column_end":23},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":40},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":28244,"byte_end":28248,"line_start":117,"line_end":117,"column_start":21,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":40},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":28396,"byte_end":28400,"line_start":126,"line_end":126,"column_start":9,"column_end":13},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":29628,"byte_end":29632,"line_start":181,"line_end":181,"column_start":21,"column_end":25},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":57593,"byte_end":57597,"line_start":917,"line_end":917,"column_start":25,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":62679,"byte_end":62683,"line_start":1050,"line_end":1050,"column_start":43,"column_end":47},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":171},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":63400,"byte_end":63404,"line_start":1074,"line_end":1074,"column_start":54,"column_end":58},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":171},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":64273,"byte_end":64286,"line_start":1107,"line_end":1107,"column_start":16,"column_end":29},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":65894,"byte_end":65907,"line_start":1153,"line_end":1153,"column_start":22,"column_end":35},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":204},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":67025,"byte_end":67038,"line_start":1189,"line_end":1189,"column_start":33,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":204},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68058,"byte_end":68071,"line_start":1219,"line_end":1219,"column_start":51,"column_end":64},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":204},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":68774,"byte_end":68782,"line_start":1250,"line_end":1250,"column_start":17,"column_end":25},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":229},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/btree.rs","byte_start":69774,"byte_end":69782,"line_start":1282,"line_end":1282,"column_start":26,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":229},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":74362,"byte_end":74366,"line_start":49,"line_end":49,"column_start":25,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2795},"to":{"krate":0,"index":2693}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":74749,"byte_end":74753,"line_start":63,"line_end":63,"column_start":23,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2795},"to":{"krate":0,"index":2694}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":75352,"byte_end":75357,"line_start":91,"line_end":91,"column_start":26,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":302},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":75648,"byte_end":75653,"line_start":101,"line_end":101,"column_start":9,"column_end":14},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":76140,"byte_end":76145,"line_start":121,"line_end":121,"column_start":36,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":302},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":76267,"byte_end":76271,"line_start":127,"line_end":127,"column_start":21,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2795},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":76341,"byte_end":76345,"line_start":133,"line_end":133,"column_start":9,"column_end":13},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":77224,"byte_end":77228,"line_start":172,"line_end":172,"column_start":20,"column_end":24},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2795},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":85477,"byte_end":85490,"line_start":401,"line_end":401,"column_start":20,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":87372,"byte_end":87376,"line_start":482,"line_end":482,"column_start":13,"column_end":17},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":87689,"byte_end":87693,"line_start":496,"line_end":496,"column_start":26,"column_end":30},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":358},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":89197,"byte_end":89201,"line_start":548,"line_end":548,"column_start":35,"column_end":39},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":358},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":89255,"byte_end":89259,"line_start":550,"line_end":550,"column_start":31,"column_end":35},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":358},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":89560,"byte_end":89567,"line_start":562,"line_end":562,"column_start":13,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":89945,"byte_end":89952,"line_start":577,"line_end":577,"column_start":26,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":381},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":91606,"byte_end":91613,"line_start":631,"line_end":631,"column_start":35,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":381},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":91675,"byte_end":91682,"line_start":633,"line_end":633,"column_start":31,"column_end":38},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":381},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":91950,"byte_end":91955,"line_start":648,"line_end":648,"column_start":9,"column_end":14},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":92272,"byte_end":92277,"line_start":663,"line_end":663,"column_start":22,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":93736,"byte_end":93741,"line_start":712,"line_end":712,"column_start":42,"column_end":47},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":93801,"byte_end":93806,"line_start":714,"line_end":714,"column_start":38,"column_end":43},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/hamt.rs","byte_start":93876,"byte_end":93880,"line_start":716,"line_end":716,"column_start":48,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2795},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":94934,"byte_end":94938,"line_start":25,"line_end":25,"column_start":16,"column_end":20},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2808},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":95133,"byte_end":95137,"line_start":34,"line_end":34,"column_start":6,"column_end":10},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2808},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":99380,"byte_end":99385,"line_start":167,"line_end":167,"column_start":26,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":476},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":99641,"byte_end":99646,"line_start":177,"line_end":177,"column_start":16,"column_end":21},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":101676,"byte_end":101680,"line_start":250,"line_end":250,"column_start":26,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":501},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":101822,"byte_end":101826,"line_start":258,"line_end":258,"column_start":28,"column_end":32},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":501},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/nodes/rrb.rs","byte_start":101903,"byte_end":101907,"line_start":264,"line_end":264,"column_start":16,"column_end":20},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":501},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/sync.rs","byte_start":138391,"byte_end":138395,"line_start":16,"line_end":16,"column_start":13,"column_end":17},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":579},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/sync.rs","byte_start":138702,"byte_end":138706,"line_start":29,"line_end":29,"column_start":23,"column_end":27},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":579},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":148854,"byte_end":148860,"line_start":170,"line_end":170,"column_start":12,"column_end":18},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":152242,"byte_end":152248,"line_start":309,"line_end":309,"column_start":12,"column_end":18},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":160721,"byte_end":160727,"line_start":614,"line_end":614,"column_start":12,"column_end":18},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":187453,"byte_end":187458,"line_start":1482,"line_end":1482,"column_start":16,"column_end":21},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":189145,"byte_end":189158,"line_start":1548,"line_end":1548,"column_start":16,"column_end":29},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":839},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":190510,"byte_end":190521,"line_start":1605,"line_end":1605,"column_start":16,"column_end":27},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":191093,"byte_end":191099,"line_start":1632,"line_end":1632,"column_start":22,"column_end":28},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":191396,"byte_end":191402,"line_start":1647,"line_end":1647,"column_start":26,"column_end":32},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192136,"byte_end":192142,"line_start":1680,"line_end":1680,"column_start":33,"column_end":39},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192179,"byte_end":192185,"line_start":1682,"line_end":1682,"column_start":27,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192367,"byte_end":192373,"line_start":1692,"line_end":1692,"column_start":20,"column_end":26},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192525,"byte_end":192531,"line_start":1702,"line_end":1702,"column_start":21,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":7019}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":192750,"byte_end":192756,"line_start":1717,"line_end":1717,"column_start":24,"column_end":30},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":193054,"byte_end":193060,"line_start":1735,"line_end":1735,"column_start":20,"column_end":26},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":2136}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":193244,"byte_end":193250,"line_start":1747,"line_end":1747,"column_start":20,"column_end":26},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":5401}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":193474,"byte_end":193480,"line_start":1760,"line_end":1760,"column_start":41,"column_end":47},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":5451}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":193798,"byte_end":193804,"line_start":1775,"line_end":1775,"column_start":38,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":2352}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":194136,"byte_end":194142,"line_start":1790,"line_end":1790,"column_start":41,"column_end":47},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":2356}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":194556,"byte_end":194562,"line_start":1805,"line_end":1805,"column_start":22,"column_end":28},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":194949,"byte_end":194953,"line_start":1826,"line_end":1826,"column_start":26,"column_end":30},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":938},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195244,"byte_end":195248,"line_start":1841,"line_end":1841,"column_start":37,"column_end":41},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":938},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195411,"byte_end":195415,"line_start":1850,"line_end":1850,"column_start":35,"column_end":39},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":938},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195576,"byte_end":195580,"line_start":1857,"line_end":1857,"column_start":29,"column_end":33},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":955},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":195937,"byte_end":195941,"line_start":1876,"line_end":1876,"column_start":40,"column_end":44},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":955},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":196195,"byte_end":196199,"line_start":1889,"line_end":1889,"column_start":38,"column_end":42},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":955},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":196378,"byte_end":196384,"line_start":1901,"line_end":1901,"column_start":29,"column_end":35},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":976},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":196741,"byte_end":196747,"line_start":1920,"line_end":1920,"column_start":40,"column_end":46},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":976},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":197001,"byte_end":197007,"line_start":1933,"line_end":1933,"column_start":38,"column_end":44},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":976},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":197103,"byte_end":197109,"line_start":1940,"line_end":1940,"column_start":47,"column_end":53},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":5438}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":197654,"byte_end":197660,"line_start":1969,"line_end":1969,"column_start":29,"column_end":35},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":5442}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":197930,"byte_end":197936,"line_start":1984,"line_end":1984,"column_start":36,"column_end":42},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1980}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":198065,"byte_end":198071,"line_start":1990,"line_end":1990,"column_start":67,"column_end":73},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":198437,"byte_end":198443,"line_start":2004,"line_end":2004,"column_start":57,"column_end":63},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":198818,"byte_end":198824,"line_start":2020,"line_end":2020,"column_start":44,"column_end":50},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":199048,"byte_end":199054,"line_start":2030,"line_end":2030,"column_start":65,"column_end":71},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":199463,"byte_end":199469,"line_start":2046,"line_end":2046,"column_start":75,"column_end":81},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":199718,"byte_end":199724,"line_start":2056,"line_end":2056,"column_start":75,"column_end":81},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":200141,"byte_end":200147,"line_start":2072,"line_end":2072,"column_start":65,"column_end":71},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":200403,"byte_end":200409,"line_start":2082,"line_end":2082,"column_start":81,"column_end":87},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":200843,"byte_end":200849,"line_start":2098,"line_end":2098,"column_start":87,"column_end":93},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/map.rs","byte_start":201040,"byte_end":201046,"line_start":2105,"line_end":2105,"column_start":9,"column_end":15},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":668},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":219448,"byte_end":219453,"line_start":69,"line_end":69,"column_start":19,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2852},"to":{"krate":2,"index":2271}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":219731,"byte_end":219736,"line_start":79,"line_end":79,"column_start":29,"column_end":34},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2852},"to":{"krate":0,"index":31}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":222489,"byte_end":222495,"line_start":181,"line_end":181,"column_start":9,"column_end":15},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":225711,"byte_end":225717,"line_start":313,"line_end":313,"column_start":9,"column_end":15},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":230270,"byte_end":230276,"line_start":469,"line_end":469,"column_start":9,"column_end":15},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":239809,"byte_end":239815,"line_start":825,"line_end":825,"column_start":19,"column_end":25},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240079,"byte_end":240085,"line_start":839,"line_end":839,"column_start":28,"column_end":34},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240295,"byte_end":240301,"line_start":846,"line_end":846,"column_start":26,"column_end":32},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240337,"byte_end":240343,"line_start":848,"line_end":848,"column_start":29,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240487,"byte_end":240493,"line_start":854,"line_end":854,"column_start":22,"column_end":28},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240621,"byte_end":240627,"line_start":860,"line_end":860,"column_start":30,"column_end":36},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":7019}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240802,"byte_end":240808,"line_start":871,"line_end":871,"column_start":21,"column_end":27},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":240901,"byte_end":240907,"line_start":877,"line_end":877,"column_start":30,"column_end":36},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":2136}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":241233,"byte_end":241239,"line_start":893,"line_end":893,"column_start":30,"column_end":36},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":241579,"byte_end":241585,"line_start":909,"line_end":909,"column_start":30,"column_end":36},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":5401}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":241747,"byte_end":241753,"line_start":918,"line_end":918,"column_start":26,"column_end":32},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":5451}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242005,"byte_end":242011,"line_start":932,"line_end":932,"column_start":32,"column_end":38},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242285,"byte_end":242289,"line_start":945,"line_end":945,"column_start":26,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1262},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242675,"byte_end":242679,"line_start":963,"line_end":963,"column_start":37,"column_end":41},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1262},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":242853,"byte_end":242857,"line_start":972,"line_end":972,"column_start":35,"column_end":39},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1262},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243217,"byte_end":243227,"line_start":983,"line_end":983,"column_start":26,"column_end":36},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1279},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243588,"byte_end":243598,"line_start":1001,"line_end":1001,"column_start":37,"column_end":47},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1279},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":243882,"byte_end":243895,"line_start":1015,"line_end":1015,"column_start":22,"column_end":35},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1293},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":244270,"byte_end":244278,"line_start":1034,"line_end":1034,"column_start":26,"column_end":34},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1301},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":244850,"byte_end":244856,"line_start":1055,"line_end":1055,"column_start":32,"column_end":38},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":5438}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":245337,"byte_end":245343,"line_start":1083,"line_end":1083,"column_start":26,"column_end":32},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":5442}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":245646,"byte_end":245652,"line_start":1099,"line_end":1099,"column_start":49,"column_end":55},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":245874,"byte_end":245880,"line_start":1109,"line_end":1109,"column_start":31,"column_end":37},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246037,"byte_end":246043,"line_start":1118,"line_end":1118,"column_start":39,"column_end":45},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246173,"byte_end":246179,"line_start":1124,"line_end":1124,"column_start":47,"column_end":53},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246335,"byte_end":246341,"line_start":1130,"line_end":1130,"column_start":68,"column_end":74},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246527,"byte_end":246533,"line_start":1136,"line_end":1136,"column_start":76,"column_end":82},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246705,"byte_end":246711,"line_start":1142,"line_end":1142,"column_start":57,"column_end":63},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":246889,"byte_end":246895,"line_start":1148,"line_end":1148,"column_start":65,"column_end":71},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":247087,"byte_end":247093,"line_start":1154,"line_end":1154,"column_start":74,"column_end":80},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/ord/set.rs","byte_start":247273,"byte_end":247279,"line_start":1160,"line_end":1160,"column_start":82,"column_end":88},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1151},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254025,"byte_end":254032,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":254549,"byte_end":254556,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":255087,"byte_end":255094,"line_start":169,"line_end":169,"column_start":15,"column_end":22},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":260423,"byte_end":260430,"line_start":364,"line_end":364,"column_start":15,"column_end":22},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":265633,"byte_end":265640,"line_start":561,"line_end":561,"column_start":15,"column_end":22},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":289885,"byte_end":289890,"line_start":1351,"line_end":1351,"column_start":19,"column_end":24},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1547},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":291677,"byte_end":291690,"line_start":1420,"line_end":1420,"column_start":19,"column_end":32},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":293524,"byte_end":293535,"line_start":1489,"line_end":1489,"column_start":19,"column_end":30},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":294463,"byte_end":294470,"line_start":1527,"line_end":1527,"column_start":25,"column_end":32},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":294849,"byte_end":294856,"line_start":1547,"line_end":1547,"column_start":29,"column_end":36},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":295547,"byte_end":295554,"line_start":1585,"line_end":1585,"column_start":22,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":295653,"byte_end":295660,"line_start":1593,"line_end":1593,"column_start":30,"column_end":37},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":296189,"byte_end":296196,"line_start":1609,"line_end":1609,"column_start":23,"column_end":30},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":296680,"byte_end":296687,"line_start":1625,"line_end":1625,"column_start":24,"column_end":31},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":7019}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":296931,"byte_end":296938,"line_start":1641,"line_end":1641,"column_start":27,"column_end":34},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":297273,"byte_end":297280,"line_start":1658,"line_end":1658,"column_start":23,"column_end":30},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":2136}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":297751,"byte_end":297758,"line_start":1684,"line_end":1684,"column_start":23,"column_end":30},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":5401}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":298024,"byte_end":298031,"line_start":1698,"line_end":1698,"column_start":44,"column_end":51},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":5451}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":298381,"byte_end":298388,"line_start":1714,"line_end":1714,"column_start":41,"column_end":48},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":2352}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":298789,"byte_end":298796,"line_start":1730,"line_end":1730,"column_start":44,"column_end":51},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":2356}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":299315,"byte_end":299322,"line_start":1747,"line_end":1747,"column_start":25,"column_end":32},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300510,"byte_end":300514,"line_start":1803,"line_end":1803,"column_start":29,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1690},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300775,"byte_end":300779,"line_start":1815,"line_end":1815,"column_start":38,"column_end":42},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1690},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":300827,"byte_end":300831,"line_start":1817,"line_end":1817,"column_start":34,"column_end":38},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1690},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301026,"byte_end":301033,"line_start":1828,"line_end":1828,"column_start":29,"column_end":36},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1711},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301342,"byte_end":301349,"line_start":1844,"line_end":1844,"column_start":38,"column_end":45},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1711},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301432,"byte_end":301439,"line_start":1851,"line_end":1851,"column_start":34,"column_end":41},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1711},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301629,"byte_end":301642,"line_start":1863,"line_end":1863,"column_start":22,"column_end":35},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1732},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301912,"byte_end":301925,"line_start":1878,"line_end":1878,"column_start":31,"column_end":44},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1732},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":301986,"byte_end":301999,"line_start":1880,"line_end":1880,"column_start":27,"column_end":40},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1732},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302163,"byte_end":302167,"line_start":1887,"line_end":1887,"column_start":29,"column_end":33},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302428,"byte_end":302432,"line_start":1899,"line_end":1899,"column_start":38,"column_end":42},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302480,"byte_end":302484,"line_start":1901,"line_end":1901,"column_start":34,"column_end":38},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1745},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302632,"byte_end":302638,"line_start":1908,"line_end":1908,"column_start":29,"column_end":35},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1766},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302899,"byte_end":302905,"line_start":1920,"line_end":1920,"column_start":38,"column_end":44},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1766},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":302953,"byte_end":302959,"line_start":1922,"line_end":1922,"column_start":34,"column_end":40},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1766},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":303258,"byte_end":303265,"line_start":1938,"line_end":1938,"column_start":32,"column_end":39},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":5442}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":303634,"byte_end":303641,"line_start":1957,"line_end":1957,"column_start":40,"column_end":47},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":5438}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":303987,"byte_end":303994,"line_start":1975,"line_end":1975,"column_start":43,"column_end":50},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1980}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":304153,"byte_end":304160,"line_start":1982,"line_end":1982,"column_start":80,"column_end":87},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":304584,"byte_end":304591,"line_start":1998,"line_end":1998,"column_start":42,"column_end":49},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":304799,"byte_end":304806,"line_start":2009,"line_end":2009,"column_start":37,"column_end":44},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":305017,"byte_end":305024,"line_start":2020,"line_end":2020,"column_start":45,"column_end":52},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":305250,"byte_end":305257,"line_start":2031,"line_end":2031,"column_start":52,"column_end":59},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":305498,"byte_end":305505,"line_start":2042,"line_end":2042,"column_start":60,"column_end":67},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":305775,"byte_end":305782,"line_start":2053,"line_end":2053,"column_start":53,"column_end":60},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/map.rs","byte_start":306025,"byte_end":306032,"line_start":2064,"line_end":2064,"column_start":61,"column_end":68},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1406},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":321861,"byte_end":321866,"line_start":105,"line_end":105,"column_start":19,"column_end":24},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2934},"to":{"krate":2,"index":2271}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322105,"byte_end":322110,"line_start":114,"line_end":114,"column_start":23,"column_end":28},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2934},"to":{"krate":0,"index":294}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322301,"byte_end":322308,"line_start":129,"line_end":129,"column_start":9,"column_end":16},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":322773,"byte_end":322780,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":323231,"byte_end":323238,"line_start":171,"line_end":171,"column_start":12,"column_end":19},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":327414,"byte_end":327421,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":329031,"byte_end":329038,"line_start":393,"line_end":393,"column_start":12,"column_end":19},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":335963,"byte_end":335970,"line_start":648,"line_end":648,"column_start":22,"column_end":29},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":336297,"byte_end":336304,"line_start":666,"line_end":666,"column_start":26,"column_end":33},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":336463,"byte_end":336470,"line_start":676,"line_end":676,"column_start":19,"column_end":26},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":336562,"byte_end":336569,"line_start":683,"line_end":683,"column_start":27,"column_end":34},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":337069,"byte_end":337076,"line_start":698,"line_end":698,"column_start":20,"column_end":27},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":337538,"byte_end":337545,"line_start":713,"line_end":713,"column_start":21,"column_end":28},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":7019}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":337780,"byte_end":337787,"line_start":728,"line_end":728,"column_start":24,"column_end":31},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":338102,"byte_end":338109,"line_start":744,"line_end":744,"column_start":20,"column_end":27},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":2136}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":338306,"byte_end":338313,"line_start":756,"line_end":756,"column_start":20,"column_end":27},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":338980,"byte_end":338987,"line_start":792,"line_end":792,"column_start":20,"column_end":27},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":5401}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":339221,"byte_end":339228,"line_start":805,"line_end":805,"column_start":29,"column_end":36},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":5451}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":339531,"byte_end":339538,"line_start":821,"line_end":821,"column_start":22,"column_end":29},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340363,"byte_end":340367,"line_start":860,"line_end":860,"column_start":26,"column_end":30},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2035},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340637,"byte_end":340641,"line_start":875,"line_end":875,"column_start":35,"column_end":39},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2035},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340683,"byte_end":340687,"line_start":877,"line_end":877,"column_start":31,"column_end":35},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2035},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":340841,"byte_end":340848,"line_start":884,"line_end":884,"column_start":26,"column_end":33},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341134,"byte_end":341141,"line_start":899,"line_end":899,"column_start":35,"column_end":42},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341198,"byte_end":341205,"line_start":901,"line_end":901,"column_start":31,"column_end":38},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341400,"byte_end":341413,"line_start":911,"line_end":911,"column_start":22,"column_end":35},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2069},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341685,"byte_end":341698,"line_start":926,"line_end":926,"column_start":31,"column_end":44},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2069},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341759,"byte_end":341772,"line_start":928,"line_end":928,"column_start":27,"column_end":40},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2069},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":341868,"byte_end":341875,"line_start":932,"line_end":932,"column_start":37,"column_end":44},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":5438}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":342434,"byte_end":342441,"line_start":962,"line_end":962,"column_start":29,"column_end":36},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":5442}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":342800,"byte_end":342807,"line_start":979,"line_end":979,"column_start":62,"column_end":69},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343105,"byte_end":343112,"line_start":991,"line_end":991,"column_start":34,"column_end":41},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343298,"byte_end":343305,"line_start":1001,"line_end":1001,"column_start":29,"column_end":36},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343490,"byte_end":343497,"line_start":1011,"line_end":1011,"column_start":37,"column_end":44},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343696,"byte_end":343703,"line_start":1021,"line_end":1021,"column_start":46,"column_end":53},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":343932,"byte_end":343939,"line_start":1031,"line_end":1031,"column_start":54,"column_end":61},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":344161,"byte_end":344168,"line_start":1041,"line_end":1041,"column_start":42,"column_end":49},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":344370,"byte_end":344377,"line_start":1051,"line_end":1051,"column_start":32,"column_end":39},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/hash/set.rs","byte_start":344580,"byte_end":344587,"line_start":1061,"line_end":1061,"column_start":40,"column_end":47},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1903},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":436613,"byte_end":436618,"line_start":93,"line_end":93,"column_start":13,"column_end":18},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":441486,"byte_end":441491,"line_start":235,"line_end":235,"column_start":30,"column_end":35},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2221},"to":{"krate":2,"index":5442}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":441688,"byte_end":441693,"line_start":247,"line_end":247,"column_start":23,"column_end":28},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":2221},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":442102,"byte_end":442111,"line_start":267,"line_end":267,"column_start":19,"column_end":28},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2252},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":442461,"byte_end":442470,"line_start":282,"line_end":282,"column_start":25,"column_end":34},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2252},"to":{"krate":2,"index":2071}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":442542,"byte_end":442551,"line_start":285,"line_end":285,"column_start":25,"column_end":34},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2252},"to":{"krate":2,"index":2083}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":442687,"byte_end":442696,"line_start":292,"line_end":292,"column_start":9,"column_end":18},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":448676,"byte_end":448684,"line_start":470,"line_end":470,"column_start":13,"column_end":21},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":2280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":457984,"byte_end":457992,"line_start":740,"line_end":740,"column_start":30,"column_end":38},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2280},"to":{"krate":2,"index":5442}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":458212,"byte_end":458220,"line_start":752,"line_end":752,"column_start":36,"column_end":44},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2280},"to":{"krate":2,"index":1986}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/focus.rs","byte_start":458526,"byte_end":458538,"line_start":769,"line_end":769,"column_start":13,"column_end":25},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":464415,"byte_end":464422,"line_start":17,"line_end":17,"column_start":9,"column_end":16},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465586,"byte_end":465593,"line_start":59,"line_end":59,"column_start":21,"column_end":28},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2355},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/pool.rs","byte_start":465744,"byte_end":465751,"line_start":66,"line_end":66,"column_start":19,"column_end":26},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2355},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":353147,"byte_end":353150,"line_start":166,"line_end":166,"column_start":19,"column_end":22},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2393},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":353525,"byte_end":353531,"line_start":180,"line_end":180,"column_start":16,"column_end":22},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":371559,"byte_end":371565,"line_start":767,"line_end":767,"column_start":16,"column_end":22},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":397046,"byte_end":397049,"line_start":1499,"line_end":1499,"column_start":16,"column_end":19},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":402916,"byte_end":402922,"line_start":1659,"line_end":1659,"column_start":28,"column_end":34},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":2059}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":403009,"byte_end":403015,"line_start":1665,"line_end":1665,"column_start":26,"column_end":32},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":403509,"byte_end":403515,"line_start":1680,"line_end":1680,"column_start":34,"column_end":40},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":404067,"byte_end":404073,"line_start":1695,"line_end":1695,"column_start":42,"column_end":48},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":405813,"byte_end":405819,"line_start":1747,"line_end":1747,"column_start":28,"column_end":34},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":405870,"byte_end":405876,"line_start":1749,"line_end":1749,"column_start":44,"column_end":50},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":1833}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406028,"byte_end":406034,"line_start":1755,"line_end":1755,"column_start":30,"column_end":36},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":1822}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406164,"byte_end":406170,"line_start":1761,"line_end":1761,"column_start":32,"column_end":38},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":7019}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406315,"byte_end":406321,"line_start":1769,"line_end":1769,"column_start":24,"column_end":30},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":5401}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406481,"byte_end":406487,"line_start":1778,"line_end":1778,"column_start":24,"column_end":30},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":2136}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":406995,"byte_end":407001,"line_start":1803,"line_end":1803,"column_start":30,"column_end":36},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":5451}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":407301,"byte_end":407307,"line_start":1817,"line_end":1817,"column_start":33,"column_end":39},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":2352}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":407763,"byte_end":407769,"line_start":1834,"line_end":1834,"column_start":36,"column_end":42},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":2356}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":408343,"byte_end":408349,"line_start":1857,"line_end":1857,"column_start":33,"column_end":39},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":5442}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":408532,"byte_end":408538,"line_start":1865,"line_end":1865,"column_start":36,"column_end":42},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":5438}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":408874,"byte_end":408880,"line_start":1881,"line_end":1881,"column_start":49,"column_end":55},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409088,"byte_end":409094,"line_start":1891,"line_end":1891,"column_start":38,"column_end":44},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409216,"byte_end":409222,"line_start":1897,"line_end":1897,"column_start":33,"column_end":39},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":409501,"byte_end":409507,"line_start":1908,"line_end":1908,"column_start":41,"column_end":47},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2376},"to":{"krate":2,"index":1989}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":410036,"byte_end":410040,"line_start":1932,"line_end":1932,"column_start":20,"column_end":24},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":2563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":410417,"byte_end":410421,"line_start":1950,"line_end":1950,"column_start":33,"column_end":37},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":2563},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411090,"byte_end":411094,"line_start":1973,"line_end":1973,"column_start":44,"column_end":48},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":2563},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411557,"byte_end":411561,"line_start":1988,"line_end":1988,"column_start":42,"column_end":46},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":2563},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411610,"byte_end":411614,"line_start":1990,"line_end":1990,"column_start":38,"column_end":42},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":2563},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":411919,"byte_end":411926,"line_start":2003,"line_end":2003,"column_start":13,"column_end":20},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":2590},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":412378,"byte_end":412385,"line_start":2026,"line_end":2026,"column_start":26,"column_end":33},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":2590},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413083,"byte_end":413090,"line_start":2052,"line_end":2052,"column_start":37,"column_end":44},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":2590},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413597,"byte_end":413604,"line_start":2070,"line_end":2070,"column_start":42,"column_end":49},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":2590},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413653,"byte_end":413660,"line_start":2072,"line_end":2072,"column_start":38,"column_end":45},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":2590},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413806,"byte_end":413819,"line_start":2079,"line_end":2079,"column_start":16,"column_end":29},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":2617},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":413926,"byte_end":413939,"line_start":2085,"line_end":2085,"column_start":29,"column_end":42},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":2617},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414297,"byte_end":414310,"line_start":2101,"line_end":2101,"column_start":40,"column_end":53},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":2617},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414541,"byte_end":414554,"line_start":2110,"line_end":2110,"column_start":38,"column_end":51},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":2617},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414595,"byte_end":414608,"line_start":2112,"line_end":2112,"column_start":34,"column_end":47},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":2617},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":414892,"byte_end":414898,"line_start":2125,"line_end":2125,"column_start":20,"column_end":26},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":2635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":415112,"byte_end":415118,"line_start":2135,"line_end":2135,"column_start":33,"column_end":39},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":2635},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":415660,"byte_end":415666,"line_start":2153,"line_end":2153,"column_start":44,"column_end":50},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":2635},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416223,"byte_end":416229,"line_start":2170,"line_end":2170,"column_start":38,"column_end":44},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":2635},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416546,"byte_end":416555,"line_start":2183,"line_end":2183,"column_start":20,"column_end":29},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":2657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":416803,"byte_end":416812,"line_start":2194,"line_end":2194,"column_start":33,"column_end":42},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":2657},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":417361,"byte_end":417370,"line_start":2212,"line_end":2212,"column_start":44,"column_end":53},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":2657},"to":{"krate":2,"index":5465}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/vector/mod.rs","byte_start":417930,"byte_end":417939,"line_start":2229,"line_end":2229,"column_start":38,"column_end":47},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":2657},"to":{"krate":2,"index":5799}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":467886,"byte_end":467893,"line_start":14,"line_end":14,"column_start":31,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":2059},"to":{"krate":0,"index":2693}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":467925,"byte_end":467930,"line_start":15,"line_end":15,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1762},"to":{"krate":0,"index":2694}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":467959,"byte_end":467964,"line_start":17,"line_end":17,"column_start":25,"column_end":30},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":550},"to":{"krate":0,"index":2693}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":467993,"byte_end":467998,"line_start":18,"line_end":18,"column_start":23,"column_end":28},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":550},"to":{"krate":0,"index":2694}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":468073,"byte_end":468077,"line_start":22,"line_end":22,"column_start":9,"column_end":13},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":2699},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":468283,"byte_end":468287,"line_start":34,"line_end":34,"column_start":19,"column_end":23},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":2699},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":468421,"byte_end":468423,"line_start":45,"line_end":45,"column_start":9,"column_end":11},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":2967},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469360,"byte_end":469362,"line_start":88,"line_end":88,"column_start":19,"column_end":21},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":2967},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469474,"byte_end":469476,"line_start":95,"line_end":95,"column_start":19,"column_end":21},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":2967},"to":{"krate":2,"index":2271}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469618,"byte_end":469620,"line_start":103,"line_end":103,"column_start":23,"column_end":25},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":2967},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469763,"byte_end":469765,"line_start":113,"line_end":113,"column_start":16,"column_end":18},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":2967},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":469813,"byte_end":469815,"line_start":115,"line_end":115,"column_start":29,"column_end":31},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":2967},"to":{"krate":2,"index":6831}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":470059,"byte_end":470062,"line_start":130,"line_end":130,"column_start":9,"column_end":12},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":2974},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471008,"byte_end":471011,"line_start":173,"line_end":173,"column_start":19,"column_end":22},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":2974},"to":{"krate":2,"index":1762}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471125,"byte_end":471128,"line_start":180,"line_end":180,"column_start":19,"column_end":22},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":2974},"to":{"krate":2,"index":2271}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471270,"byte_end":471273,"line_start":188,"line_end":188,"column_start":23,"column_end":26},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":2974},"to":{"krate":2,"index":1790}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471416,"byte_end":471419,"line_start":198,"line_end":198,"column_start":16,"column_end":19},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":2974},"to":{"krate":2,"index":1795}},{"span":{"file_name":"/home/kami/.cargo/registry/src/github.com-1ecc6299db9ec823/im-14.3.0/./src/fakepool.rs","byte_start":471467,"byte_end":471470,"line_start":200,"line_end":200,"column_start":29,"column_end":32},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":2974},"to":{"krate":2,"index":6831}}]}